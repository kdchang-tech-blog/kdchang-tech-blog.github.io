<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>關於 Web 網頁後端工程師 Backend Engineer 的 10 個關鍵字</title>
    <url>/2020/06/21/about-backend-engineer-10-keywords/</url>
    <content><![CDATA[<p>以下整理了後端工程師相關的 10 個關鍵字，涵蓋技能、工具與工作方式：</p>
<ol>
<li><p><strong>Node.js &#x2F; Python &#x2F; Java &#x2F; Ruby &#x2F; PHP</strong>：常見的後端程式語言，用於構建伺服器端應用程式。</p>
</li>
<li><p><strong>Database</strong>（資料庫）：包括 <strong>SQL（如 MySQL, PostgreSQL）</strong> 和 <strong>NoSQL（如 MongoDB, Redis）</strong> 的操作與優化。</p>
</li>
<li><p><strong>REST API &#x2F; GraphQL</strong>：設計與實現伺服器端 API 以支援前端資料請求。</p>
</li>
<li><p><strong>Authentication &amp; Authorization</strong>（認證與授權）：如 OAuth、JWT、Session，確保使用者安全與數據保護。</p>
</li>
<li><p><strong>Docker &#x2F; Kubernetes</strong>：容器化與編排工具，用於應用部署與資源管理。</p>
</li>
<li><p><strong>Cloud Services</strong>：如 AWS、Google Cloud、Microsoft Azure，支援應用程式的雲端部署與運行。</p>
</li>
<li><p><strong>Microservices</strong>（微服務架構）：設計可拆分且可獨立部署的服務模組。</p>
</li>
<li><p><strong>Message Queues</strong>（訊息佇列）：如 RabbitMQ、Kafka，用於分布式系統的非同步通訊。</p>
</li>
<li><p><strong>Version Control</strong>（版本控制）：如 Git &#x2F; GitHub，用於團隊協作與程式碼管理。</p>
</li>
<li><p><strong>Performance Optimization</strong>（效能優化）：針對伺服器與資料庫的效能調優，提升系統效率。</p>
</li>
</ol>
<p>以上關鍵字為後端工程師平常工作或是職涯的核心工作內容和技能樹，透過不斷累積相關經驗和專案開發能力，可以讓自己成為更優秀的軟體工程師。</p>
]]></content>
      <tags>
        <tag>開發者</tag>
        <tag>軟體工程師</tag>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>軟體開發</tag>
        <tag>backend</tag>
        <tag>backend engineer</tag>
        <tag>後端開發</tag>
        <tag>後端工程</tag>
        <tag>網頁後端工程師</tag>
        <tag>後端工程師</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>關於 Web 網頁前端工程師 Frontend Engineer 的 10 個關鍵字</title>
    <url>/2020/06/13/about-frontend-engineer-10-keywords/</url>
    <content><![CDATA[<p>以下整理了前端工程師相關的 10 個關鍵字，涵蓋技能、工具與工作方式：</p>
<ol>
<li><p><strong>HTML</strong>：前端結構的基礎語言，用於定義網頁的內容和結構。</p>
</li>
<li><p><strong>CSS</strong>：用於設計網頁的樣式，包括佈局、配色和字體。</p>
</li>
<li><p><strong>JavaScript</strong>：前端開發的核心語言，為網頁添加互動性。</p>
</li>
<li><p><strong>React &#x2F; Vue &#x2F; Angular</strong>：主流的前端框架和函式庫，用於構建動態、模組化的應用程式。</p>
</li>
<li><p><strong>Responsive Design</strong>（響應式設計）：確保網站在不同裝置和螢幕大小下的最佳顯示效果。</p>
</li>
<li><p><strong>REST API &#x2F; GraphQL</strong>：前端與後端通訊的重要工具，用於前後端資料請求與傳輸。</p>
</li>
<li><p><strong>Webpack &#x2F; Vite &#x2F; Parcel</strong>：模組打包工具，用於構建和優化前端資源。</p>
</li>
<li><p><strong>Git &#x2F; GitHub &#x2F; GitLab</strong>：版本控制工具，用於協作開發與代碼管理。</p>
</li>
<li><p><strong>Cross-Browser Compatibility</strong>（跨瀏覽器相容性）：確保網站在不同瀏覽器上的一致性表現。</p>
</li>
<li><p><strong>UI&#x2F;UX Design</strong>（使用者介面&#x2F;使用者體驗設計）：理解使用者需求，優化網頁的易用性與美觀度。</p>
</li>
</ol>
<p>以上關鍵字為前端工程師平常工作或是職涯的核心工作內容和技能樹，透過不斷累積相關經驗和專案開發能力，可以讓自己成為更優秀的軟體工程師。</p>
]]></content>
      <tags>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>開發者</tag>
        <tag>軟體工程師</tag>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>軟體開發</tag>
        <tag>Web</tag>
        <tag>網頁前端工程師</tag>
        <tag>前端工程師</tag>
      </tags>
  </entry>
  <entry>
    <title>關於軟體工程師 Software Engineer 的 10 個關鍵字</title>
    <url>/2015/01/22/about-software-engineer-10-keywords/</url>
    <content><![CDATA[<p>以下整理了軟體工程師相關的十個關鍵字，涵蓋技能、工具與工作方式：</p>
<ol>
<li><strong>程式語言 (Programming Language)</strong> - 如 Python、Java、C++、JavaScript 等。  </li>
<li><strong>版本控制 (Version Control)</strong> - 例如 Git、GitHub（平台）、GitLab（平台）。  </li>
<li><strong>測試 (Testing)</strong> - 單元測試 (Unit Testing)、整合測試 (Integration Testing)。  </li>
<li><strong>敏捷開發 (Agile Development)</strong> - Scrum、Kanban 等工作方法。  </li>
<li><strong>架構設計和系統設計 (Architecture Design、System Design)</strong> - 微服務 (Microservices)、單體架構 (Monolithic Architecture)。  </li>
<li><strong>資料庫 (Database)</strong> - SQL、NoSQL (如 MongoDB)。  </li>
<li><strong>雲端運算 (Cloud Computing)</strong> - AWS、Azure、Google Cloud。  </li>
<li><strong>DevOps</strong> - CI&#x2F;CD、自動化部署 (Automation Deployment)。  </li>
<li><strong>演算法 (Algorithm)</strong> - 演算法、資料結構、問題解決能力。  </li>
<li><strong>團隊合作 (Collaboration)</strong> - 跨部門溝通、工具 (如 JIRA、Confluence)。</li>
</ol>
<p>以上關鍵字為軟體工程師平常工作或是職涯的核心工作內容和技能樹，透過不斷累積相關經驗和專案開發能力，可以讓自己成為更優秀的軟體工程師。</p>
]]></content>
      <tags>
        <tag>開發者</tag>
        <tag>軟體工程師</tag>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>軟體開發</tag>
      </tags>
  </entry>
  <entry>
    <title>12 Factor App 入門教學：打造現代雲端應用的十二守則教學筆記 | 學習筆記</title>
    <url>/2025/02/08/learning-notes-12-factor-cloud-app-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>12 Factor App</strong> 是由 Heroku 團隊提出的一套雲端應用架構設計原則，旨在幫助開發者打造可擴展、可維護、易部署的現代化應用程式。這些準則不限語言或框架，廣泛適用於各種 SaaS 應用、API 服務、微服務架構等場景。</p>
<p>以下是每一個 factor 的說明與實際範例：</p>
<hr>
<h2 id="一、-Codebase（代碼基底）"><a href="#一、-Codebase（代碼基底）" class="headerlink" title="一、 Codebase（代碼基底）"></a>一、 Codebase（代碼基底）</h2><p><strong>一個應用對應一個代碼庫，多個部署環境共用該代碼庫</strong></p>
<p>一個應用程式不應散落在多個 Git 倉庫中，即使部署至多個環境（開發、測試、正式），仍應共用同一代碼庫。</p>
<p><strong>範例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git@github.com:kdchang/todo-api.git  <span class="comment"># 統一代碼庫</span></span><br></pre></td></tr></table></figure>

<p>若你在 GitHub 上有一個 <code>todo-api</code> 倉庫，開發、測試與生產環境（production、staging、dev）的部署都應來自這個倉庫的不同分支或 Tag。</p>
<hr>
<h2 id="二、-Dependencies（明確聲明相依套件）"><a href="#二、-Dependencies（明確聲明相依套件）" class="headerlink" title="二、 Dependencies（明確聲明相依套件）"></a>二、 Dependencies（明確聲明相依套件）</h2><p><strong>使用明確的套件管理工具來聲明所有相依項目，避免依賴系統層級安裝</strong>，例如：使用如 requirements.txt, Pipfile, package.json</p>
<p><strong>範例（Node.js）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># package.json 中聲明所有依賴</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;express&quot;</span>: <span class="string">&quot;^4.18.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dotenv&quot;</span>: <span class="string">&quot;^16.0.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部署時只需透過 <code>npm install</code> 即可安裝所有套件。</p>
<h2 id="三、-Config（環境設定分離）"><a href="#三、-Config（環境設定分離）" class="headerlink" title="三、 Config（環境設定分離）"></a>三、 Config（環境設定分離）</h2><p><strong>環境變數應儲存所有設定資訊，而非寫死在程式碼中</strong>，例如：<code>.env</code></p>
<p>這包含資料庫連線、API 金鑰、第三方服務設定等。</p>
<p><strong>範例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .env 檔（不要提交到 Git）</span></span><br><span class="line">DATABASE_URL=postgres://user:pass@host:5432/dbname</span><br><span class="line">JWT_SECRET=my_secret_token</span><br></pre></td></tr></table></figure>

<p>程式碼中透過 <code>process.env</code> 取用這些變數。</p>
<hr>
<h2 id="四、-Backing-Services（外部資源視為附屬服務）"><a href="#四、-Backing-Services（外部資源視為附屬服務）" class="headerlink" title="四、 Backing Services（外部資源視為附屬服務）"></a>四、 Backing Services（外部資源視為附屬服務）</h2><p><strong>無論是本地資料庫、第三方 API、AWS S3 等，都視為可替換的附屬資源</strong></p>
<p>切換服務供應商不應需改動應用邏輯，只要變更設定即可。例如：DATABASE_URL</p>
<p><strong>範例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> <span class="variable constant_">AWS</span>.<span class="title function_">S3</span>(&#123;</span><br><span class="line">  <span class="attr">accessKeyId</span>: process.<span class="property">env</span>.<span class="property">AWS_ACCESS_KEY</span>,</span><br><span class="line">  <span class="attr">secretAccessKey</span>: process.<span class="property">env</span>.<span class="property">AWS_SECRET_KEY</span>,</span><br><span class="line">  <span class="attr">region</span>: process.<span class="property">env</span>.<span class="property">AWS_REGION</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、-Build-Release-Run（建置、發布、執行分離）"><a href="#五、-Build-Release-Run（建置、發布、執行分離）" class="headerlink" title="五、 Build, Release, Run（建置、發布、執行分離）"></a>五、 Build, Release, Run（建置、發布、執行分離）</h2><p><strong>明確區分建置（build）、發布（release）與執行（run）三個階段</strong></p>
<ul>
<li>Build：編譯程式、安裝依賴（例如：container）</li>
<li>Release：結合建置結果與設定，生成可部署版本。將 build 結果與設定綁定</li>
<li>Run：實際執行應用（以 immutable 的方式）</li>
</ul>
<p><strong>範例（Heroku）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push heroku main  <span class="comment"># 觸發 build 與 release</span></span><br><span class="line">heroku run npm start  <span class="comment"># 執行</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、-Stateless-Processes（無狀態的執行單元）"><a href="#六、-Stateless-Processes（無狀態的執行單元）" class="headerlink" title="六、 Stateless Processes（無狀態的執行單元）"></a>六、 Stateless Processes（無狀態的執行單元）</h2><p><strong>應用程式應以一個或多個無狀態進程執行，狀態需存於外部服務</strong></p>
<p>避免將使用者 session 存在記憶體中，應使用 Redis、資料庫等外部服務。可以隨時 scale out</p>
<p><strong>範例（Express）：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Session 儲存至 Redis，而非記憶體</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">store</span>: <span class="keyword">new</span> <span class="title class_">RedisStore</span>(&#123; <span class="attr">client</span>: redisClient &#125;),</span><br><span class="line">    <span class="attr">secret</span>: process.<span class="property">env</span>.<span class="property">SESSION_SECRET</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、-Port-Binding（綁定至-Port-提供服務）"><a href="#七、-Port-Binding（綁定至-Port-提供服務）" class="headerlink" title="七、 Port Binding（綁定至 Port 提供服務）"></a>七、 Port Binding（綁定至 Port 提供服務）</h2><p><strong>應用應自行綁定 port 來對外提供 HTTP 服務，而非依賴外部 Web Server</strong>，例如：Gunicorn</p>
<p>這使得應用本身即是一個完整的服務，容易容器化部署。</p>
<p><strong>範例（Node.js）：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="八、-Concurrency（使用程序模型提升並行能力）"><a href="#八、-Concurrency（使用程序模型提升並行能力）" class="headerlink" title="八、 Concurrency（使用程序模型提升並行能力）"></a>八、 Concurrency（使用程序模型提升並行能力）</h2><p><strong>透過分工的進程來擴展應用功能，例如 Web、Worker、queue 等</strong></p>
<p>每個類型的處理單位可根據需求水平擴充。</p>
<p><strong>範例（使用 PM2）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js -i max       <span class="comment"># 啟動多個 Web 處理進程</span></span><br><span class="line">pm2 start worker.js --name worker  <span class="comment"># 啟動背景任務處理器</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="九、-Disposability（快速啟動與優雅關閉）"><a href="#九、-Disposability（快速啟動與優雅關閉）" class="headerlink" title="九、 Disposability（快速啟動與優雅關閉）"></a>九、 Disposability（快速啟動與優雅關閉）</h2><p><strong>應用應能快速啟動與安全關閉，適應雲端平台的彈性調度</strong></p>
<p>優雅關閉能確保未完成的請求被妥善處理完畢，當使用容器應能快速重啟。</p>
<p><strong>範例（Node.js）：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;SIGTERM&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  server.<span class="title function_">close</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server closed&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十、-Dev-x2F-Prod-Parity（開發與生產環境的一致性）"><a href="#十、-Dev-x2F-Prod-Parity（開發與生產環境的一致性）" class="headerlink" title="十、 Dev&#x2F;Prod Parity（開發與生產環境的一致性）"></a>十、 Dev&#x2F;Prod Parity（開發與生產環境的一致性）</h2><p><strong>開發、測試、生產環境盡可能相似，降低部署錯誤風險</strong></p>
<p>推薦使用 Docker 來統一環境。盡量減少「只有 production 才會發生」的 bug。</p>
<p><strong>範例：</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十一、-Logs（將-log-作為事件串流）"><a href="#十一、-Logs（將-log-作為事件串流）" class="headerlink" title="十一、 Logs（將 log 作為事件串流）"></a>十一、 Logs（將 log 作為事件串流）</h2><p><strong>應用不應自行管理 log 文件，而是將 log 輸出到 stdout&#x2F;stderr，再由平台集中收集與分析</strong></p>
<p><strong>範例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User login success&quot;</span>, &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Database connection failed&quot;</span>, error);</span><br></pre></td></tr></table></figure>

<p>在 Heroku、GCP、Kubernetes 等平台會自動收集這些 log，讓 log 管理交給專門工具收集（如 ELK, CloudWatch）</p>
<hr>
<h2 id="十二、-Admin-Processes（一時性管理指令）"><a href="#十二、-Admin-Processes（一時性管理指令）" class="headerlink" title="十二、 Admin Processes（一時性管理指令）"></a>十二、 Admin Processes（一時性管理指令）</h2><p><strong>資料庫 migration、資料修復等管理任務應能以一次性指令執行</strong></p>
<p>這些指令應與主應用共用相同的環境設定與程式碼。管理性任務（如資料遷移）應獨立於應用程式主進程（例如：<code>python manage.py migrate</code>）</p>
<p><strong>範例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sequelize migration 指令</span></span><br><span class="line">npx sequelize-cli db:migrate</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>12 Factor App 並不是一套硬性規定，而是建立雲端應用的實務指南。當你的應用朝微服務、CI&#x2F;CD、雲端部署發展時，這十二項原則能幫助你打造更穩定、可擴充的系統架構。</p>
]]></content>
      <tags>
        <tag>12 Factor App</tag>
        <tag>Heroku</tag>
        <tag>SaaS</tag>
        <tag>API</tag>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpine.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/10/16/learning-notes-alpinejs-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-什麼是-Alpine-js？"><a href="#1-什麼是-Alpine-js？" class="headerlink" title="1. 什麼是 Alpine.js？"></a>1. 什麼是 Alpine.js？</h2><p><code>Alpine.js</code> 是一個輕量級的 JavaScript 框架，專為增強 HTML 標記而設計。它的語法靈感來自 Vue.js，但更加簡潔，適用於需要簡單互動的網頁。</p>
<p>它的主要特點包括：</p>
<ul>
<li>使用 HTML 屬性直接定義行為</li>
<li>不需要額外的構建工具</li>
<li>易於學習和使用</li>
<li>與其他框架（如 Vue、React）兼容</li>
</ul>
<h2 id="2-安裝與引入"><a href="#2-安裝與引入" class="headerlink" title="2. 安裝與引入"></a>2. 安裝與引入</h2><p>使用 Alpine.js 最簡單的方法是透過 CDN 引入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Alpine.js 入門<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Alpine.js 教學<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-基本語法與應用"><a href="#3-基本語法與應用" class="headerlink" title="3. 基本語法與應用"></a>3. 基本語法與應用</h2><h3 id="3-1-x-data"><a href="#3-1-x-data" class="headerlink" title="3.1 x-data"></a>3.1 x-data</h3><p><code>x-data</code> 屬性用於定義 Alpine.js 的組件狀態。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; message: &#x27;Hello, Alpine!&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">x-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼會顯示 <code>Hello, Alpine!</code>，並且 <code>x-text</code> 會自動更新內容。</p>
<h3 id="3-2-x-bind"><a href="#3-2-x-bind" class="headerlink" title="3.2 x-bind"></a>3.2 x-bind</h3><p><code>x-bind</code> 允許綁定 HTML 屬性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; color: &#x27;red&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">x-bind:style</span>=<span class="string">&quot;&#x27;color: &#x27; + color&quot;</span>&gt;</span>這是一段紅色文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-x-on"><a href="#3-3-x-on" class="headerlink" title="3.3 x-on"></a>3.3 x-on</h3><p><code>x-on</code> 用於事件監聽，例如點擊事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; count: 0 &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">x-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>計數：<span class="tag">&lt;<span class="name">span</span> <span class="attr">x-text</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-x-model"><a href="#3-4-x-model" class="headerlink" title="3.4 x-model"></a>3.4 x-model</h3><p><code>x-model</code> 允許雙向綁定表單元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; name: &#x27;&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">x-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入你的名字&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，<span class="tag">&lt;<span class="name">span</span> <span class="attr">x-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-x-show"><a href="#3-5-x-show" class="headerlink" title="3.5 x-show"></a>3.5 x-show</h3><p><code>x-show</code> 控制元素顯示或隱藏。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; isVisible: true &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">x-on:click</span>=<span class="string">&quot;isVisible = !isVisible&quot;</span>&gt;</span>切換顯示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">x-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>這段文字可以顯示或隱藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-x-if"><a href="#3-6-x-if" class="headerlink" title="3.6 x-if"></a>3.6 x-if</h3><p><code>x-if</code> 會動態新增或移除元素（比 <code>x-show</code> 更影響 DOM）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; isVisible: true &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">x-on:click</span>=<span class="string">&quot;isVisible = !isVisible&quot;</span>&gt;</span>切換<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">x-if</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段可動態新增或刪除的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-7-x-for"><a href="#3-7-x-for" class="headerlink" title="3.7 x-for"></a>3.7 x-for</h3><p><code>x-for</code> 用於迭代陣列。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; items: [&#x27;蘋果&#x27;, &#x27;香蕉&#x27;, &#x27;橘子&#x27;] &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">x-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">x-text</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-8-計時器與非同步操作"><a href="#3-8-計時器與非同步操作" class="headerlink" title="3.8 計時器與非同步操作"></a>3.8 計時器與非同步操作</h3><p>Alpine.js 支援 <code>setTimeout</code> 和 <code>fetch</code> 等 JavaScript 方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    message: &#x27;載入中...&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    async fetchData() &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        let response = await fetch(&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;);</span></span></span><br><span class="line"><span class="string"><span class="tag">        let data = await response.json();</span></span></span><br><span class="line"><span class="string"><span class="tag">        this.message = data.title;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span> <span class="attr">x-init</span>=<span class="string">&quot;fetchData&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">x-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Alpine-js-與-Tailwind-CSS"><a href="#4-Alpine-js-與-Tailwind-CSS" class="headerlink" title="4. Alpine.js 與 Tailwind CSS"></a>4. Alpine.js 與 Tailwind CSS</h2><p>Alpine.js 常與 Tailwind CSS 搭配使用，打造簡潔的 UI。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; open: false &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p-5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">x-on:click</span>=<span class="string">&quot;open = !open&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-500 text-white px-4 py-2 rounded&quot;</span>&gt;</span></span><br><span class="line">        切換選單</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">x-show</span>=<span class="string">&quot;open&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mt-2 border p-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>選單 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>選單 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>選單 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Alpine-js-進階應用"><a href="#5-Alpine-js-進階應用" class="headerlink" title="5. Alpine.js 進階應用"></a>5. Alpine.js 進階應用</h2><h3 id="5-1-Alpine-store"><a href="#5-1-Alpine-store" class="headerlink" title="5.1 Alpine.store"></a>5.1 Alpine.store</h3><p><code>Alpine.store</code> 可用於全域狀態管理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;alpine:init&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Alpine</span>.<span class="title function_">store</span>(<span class="string">&#x27;app&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">x-on:click</span>=<span class="string">&quot;$store.app.count++&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>計數：<span class="tag">&lt;<span class="name">span</span> <span class="attr">x-text</span>=<span class="string">&quot;$store.app.count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-Alpine-plugin"><a href="#5-2-Alpine-plugin" class="headerlink" title="5.2 Alpine.plugin"></a>5.2 Alpine.plugin</h3><p>Alpine.js 提供外掛支援，例如 <code>persist</code>（本地儲存）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;alpine:init&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Alpine</span>.<span class="title function_">plugin</span>(<span class="title class_">Alpine</span>.<span class="property">persist</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">x-data</span>=<span class="string">&quot;&#123; count: $persist(0) &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">x-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>計數：<span class="tag">&lt;<span class="name">span</span> <span class="attr">x-text</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><p>Alpine.js 是一個靈活且輕量的框架，適合用於簡單互動需求，如表單驗證、選單切換、即時更新內容等。它不需要複雜的配置，能夠快速增強靜態 HTML 頁面。</p>
<p>如果你的專案需要更強大的功能，可以考慮與 Vue.js 或 React 搭配，或在更大規模的應用中使用其他框架。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>模組</tag>
        <tag>Alpine</tag>
        <tag>Alpine.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/19/learning-notes-angular-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言：什麼是-Angular？"><a href="#前言：什麼是-Angular？" class="headerlink" title="前言：什麼是 Angular？"></a>前言：什麼是 Angular？</h2><p>Angular 是由 Google 支持與維護的前端框架，採用 <code>TypeScript</code> 開發，用於建構單頁應用程式（SPA）。Angular 提供了強大的資料繫結（Data Binding）、組件化設計（Component-based Architecture）、模組化管理（Modules）、路由（Routing）等功能，適合用來開發大型且可維護性的應用。</p>
<p>Angular 與其他前端框架（如 React、Vue）最大的不同在於它是一個完整框架，除了 UI 呈現外，也包含完整的<code>路由</code>、<code>HTTP 通訊</code>、<code>表單管理</code>等功能。</p>
<hr>
<h2 id="Angular-基本架構"><a href="#Angular-基本架構" class="headerlink" title="Angular 基本架構"></a>Angular 基本架構</h2><ul>
<li><strong>模組（Module）</strong>：用來組織應用程式的功能區塊，至少有一個根模組 <code>AppModule</code>。</li>
<li><strong>組件（Component）</strong>：UI 的基本單位，每個組件包含 HTML 模板、CSS 樣式與 TypeScript 類別。</li>
<li><strong>服務（Service）</strong>：用來封裝業務邏輯和資料存取，可被組件注入使用。</li>
<li><strong>路由（Router）</strong>：用於處理頁面間的切換。</li>
</ul>
<hr>
<h2 id="開發環境準備"><a href="#開發環境準備" class="headerlink" title="開發環境準備"></a>開發環境準備</h2><ol>
<li><p>安裝 Node.js（建議版本 16+）</p>
</li>
<li><p>安裝 Angular CLI（命令列工具）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立新專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-angular-app</span><br></pre></td></tr></table></figure>

<p>期間會詢問是否要加入路由、使用 CSS 或 SCSS 等，可依需求選擇。</p>
</li>
<li><p>進入專案資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-angular-app</span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動開發伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure>
</li>
<li><p>開啟瀏覽器，輸入 <code>http://localhost:4200</code> 即可看到預設的 Angular 首頁。</p>
</li>
</ol>
<hr>
<h2 id="實際範例：簡單的計數器應用"><a href="#實際範例：簡單的計數器應用" class="headerlink" title="實際範例：簡單的計數器應用"></a>實際範例：簡單的計數器應用</h2><p>以下將示範如何用 Angular 建立一個簡單的計數器，包含按鈕點擊事件與資料顯示。</p>
<h3 id="Step-1-建立計數器組件"><a href="#Step-1-建立計數器組件" class="headerlink" title="Step 1: 建立計數器組件"></a>Step 1: 建立計數器組件</h3><p>使用 Angular CLI 建立組件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component counter</span><br></pre></td></tr></table></figure>

<p>這會產生一個新的資料夾 <code>src/app/counter</code>，包含四個檔案：</p>
<ul>
<li><code>counter.component.ts</code>（TypeScript 程式碼）</li>
<li><code>counter.component.html</code>（HTML 模板）</li>
<li><code>counter.component.css</code>（樣式）</li>
<li><code>counter.component.spec.ts</code>（測試）</li>
</ul>
<h3 id="Step-2-編輯組件程式碼"><a href="#Step-2-編輯組件程式碼" class="headerlink" title="Step 2: 編輯組件程式碼"></a>Step 2: 編輯組件程式碼</h3><p><strong>counter.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-counter&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./counter.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./counter.component.css&quot;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CounterComponent</span> &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡我們定義了一個 <code>count</code> 屬性，以及三個方法：<code>increment()</code>、<code>decrement()</code> 和 <code>reset()</code>，用來操作計數值。</p>
<h3 id="Step-3-編輯-HTML-模板"><a href="#Step-3-編輯-HTML-模板" class="headerlink" title="Step 3: 編輯 HTML 模板"></a>Step 3: 編輯 HTML 模板</h3><p><strong>counter.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>簡單計數器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>目前數值：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;increment()&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;decrement()&quot;</span>&gt;</span>減少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;reset()&quot;</span>&gt;</span>重設<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這裡使用 Angular 的資料繫結語法 <code>&#123;&#123; count &#125;&#125;</code> 顯示目前的計數值，並用 <code>(click)</code> 綁定按鈕點擊事件，呼叫組件方法。</p>
<h3 id="Step-4-將組件放入主畫面"><a href="#Step-4-將組件放入主畫面" class="headerlink" title="Step 4: 將組件放入主畫面"></a>Step 4: 將組件放入主畫面</h3><p>打開 <code>src/app/app.component.html</code>，將預設內容替換成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">app-counter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這樣就會在首頁顯示剛剛建立的計數器組件。</p>
<hr>
<h2 id="Angular-的重要概念說明"><a href="#Angular-的重要概念說明" class="headerlink" title="Angular 的重要概念說明"></a>Angular 的重要概念說明</h2><ol>
<li><p><strong>資料繫結（Data Binding）</strong></p>
<ul>
<li>插值表達式 <code>&#123;&#123; &#125;&#125;</code>：用來顯示組件的變數。</li>
<li>事件繫結 <code>(event)</code>：如 <code>(click)</code> 綁定按鈕事件。</li>
<li>雙向繫結 <code>[(ngModel)]</code>：常用於表單元素，需引入 <code>FormsModule</code>。</li>
</ul>
</li>
<li><p><strong>組件生命週期（Lifecycle Hooks）</strong><br>Angular 組件有多個生命週期方法，如 <code>ngOnInit()</code>（初始化時呼叫）、<code>ngOnDestroy()</code>（銷毀時呼叫），可用於在特定時機執行程式碼。</p>
</li>
<li><p><strong>依賴注入（Dependency Injection, DI）</strong><br>Angular 內建 DI 系統，可以將服務注入組件，提高模組化與可測試性。</p>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li>Angular 是功能完整的前端框架，適合開發大型 SPA。</li>
<li>透過 CLI 工具，可以快速建立專案與組件。</li>
<li>基本組件包含 TypeScript 類別與 HTML 模板，藉由資料繫結和事件綁定實現互動。</li>
<li>了解 Angular 核心概念如模組、組件、服務與路由，能幫助設計良好的應用結構。</li>
</ul>
<p>如果想更深入學習，可以參考官方文件 <a href="https://angular.dev/">Angular 官方網站</a>，或是搭配範例專案與實作練習，進一步掌握 Angular 的強大功能。</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>AOS（Animate On Scroll Library）入門教學筆記 | 學習筆記</title>
    <url>/2024/08/31/learning-notes-aos-animate-on-scroll-library-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在現代網頁設計中，視覺效果和互動性已經成為提升使用者體驗的重要元素。當使用者向下滾動頁面時，如果某些區塊能夠平滑地出現、滑入、淡入或放大，能大大提升網站的專業感和吸引力。這類效果通常被稱為「滾動動畫」。</p>
<p><a href="https://michalsnik.github.io/aos/">AOS (Animate On Scroll)</a> 是一個輕量級的 JavaScript 函式庫，讓你可以輕鬆地為 HTML 元素加上動畫效果，並且在元素進入畫面時自動播放動畫。它不需要你手動寫 JavaScript 控制事件，也不依賴大型框架，學習曲線平緩，非常適合想快速加上動畫效果的開發者。</p>
<hr>
<h2 id="一、AOS-的特點"><a href="#一、AOS-的特點" class="headerlink" title="一、AOS 的特點"></a>一、AOS 的特點</h2><ul>
<li><strong>輕量</strong>：只有數十 KB，對效能影響小。</li>
<li><strong>易於使用</strong>：只需要加幾個 <code>data-aos</code> 屬性在 HTML 元素上即可。</li>
<li><strong>可自訂動畫</strong>：支援動畫類型、延遲時間、持續時間、執行次數等調整。</li>
<li><strong>無框架依賴</strong>：可搭配純 HTML&#x2F;CSS&#x2F;JS 使用，也支援 React、Vue 等框架。</li>
<li><strong>良好的瀏覽器支援</strong>：支援所有現代瀏覽器。</li>
</ul>
<hr>
<h2 id="二、如何安裝-AOS"><a href="#二、如何安裝-AOS" class="headerlink" title="二、如何安裝 AOS"></a>二、如何安裝 AOS</h2><h3 id="方法一：使用-CDN（最簡單方式）"><a href="#方法一：使用-CDN（最簡單方式）" class="headerlink" title="方法一：使用 CDN（最簡單方式）"></a>方法一：使用 CDN（最簡單方式）</h3><p>在你的 HTML 檔案 <code>&lt;head&gt;</code> 加入 CSS：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.4/dist/aos.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;body&gt;</code> 結尾加入 JS：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.4/dist/aos.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  AOS.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二：透過-npm-安裝（建議在模組化專案中使用）"><a href="#方法二：透過-npm-安裝（建議在模組化專案中使用）" class="headerlink" title="方法二：透過 npm 安裝（建議在模組化專案中使用）"></a>方法二：透過 npm 安裝（建議在模組化專案中使用）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install aos --save</span><br></pre></td></tr></table></figure>

<p>在你的 JavaScript 中引入與初始化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">AOS</span> <span class="keyword">from</span> <span class="string">&#x27;aos&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;aos/dist/aos.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">AOS</span>.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、基本用法"><a href="#三、基本用法" class="headerlink" title="三、基本用法"></a>三、基本用法</h2><p>只要在 HTML 元素上加入 <code>data-aos</code> 屬性即可。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span></span><br><span class="line">  這段文字將會在滾動時從下方淡入出現</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常見的動畫效果："><a href="#常見的動畫效果：" class="headerlink" title="常見的動畫效果："></a>常見的動畫效果：</h3><table>
<thead>
<tr>
<th>效果名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>fade</td>
<td>淡入</td>
</tr>
<tr>
<td>fade-up</td>
<td>向上淡入</td>
</tr>
<tr>
<td>fade-down</td>
<td>向下淡入</td>
</tr>
<tr>
<td>fade-left</td>
<td>向左淡入</td>
</tr>
<tr>
<td>fade-right</td>
<td>向右淡入</td>
</tr>
<tr>
<td>zoom-in</td>
<td>放大淡入</td>
</tr>
<tr>
<td>zoom-out</td>
<td>縮小淡入</td>
</tr>
<tr>
<td>flip-left</td>
<td>向左翻轉進場</td>
</tr>
<tr>
<td>slide-up</td>
<td>向上滑入</td>
</tr>
<tr>
<td>slide-down</td>
<td>向下滑入</td>
</tr>
</tbody></table>
<hr>
<h2 id="四、進階設定"><a href="#四、進階設定" class="headerlink" title="四、進階設定"></a>四、進階設定</h2><p>AOS 提供許多自訂參數，以下為常用屬性說明：</p>
<h3 id="1-data-aos-duration"><a href="#1-data-aos-duration" class="headerlink" title="1. data-aos-duration"></a>1. <code>data-aos-duration</code></h3><p>動畫持續時間（毫秒），預設為 400ms：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span> <span class="attr">data-aos-duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  動畫持續 1 秒</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-data-aos-delay"><a href="#2-data-aos-delay" class="headerlink" title="2. data-aos-delay"></a>2. <code>data-aos-delay</code></h3><p>動畫延遲時間（毫秒），可用來讓多個元素依序出現：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span> <span class="attr">data-aos-delay</span>=<span class="string">&quot;0&quot;</span>&gt;</span>第一個<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span> <span class="attr">data-aos-delay</span>=<span class="string">&quot;200&quot;</span>&gt;</span>第二個<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span> <span class="attr">data-aos-delay</span>=<span class="string">&quot;400&quot;</span>&gt;</span>第三個<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-data-aos-once"><a href="#3-data-aos-once" class="headerlink" title="3. data-aos-once"></a>3. <code>data-aos-once</code></h3><p>設定是否只執行一次動畫（預設為 false，表示每次滾動進入都會重新動畫）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span> <span class="attr">data-aos-once</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  只播放一次動畫</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-data-aos-offset"><a href="#4-data-aos-offset" class="headerlink" title="4. data-aos-offset"></a>4. <code>data-aos-offset</code></h3><p>控制動畫啟動前的滾動距離（單位：像素）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span> <span class="attr">data-aos-offset</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">  滾動到距離螢幕頂端 300px 時才開始動畫</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、實際範例"><a href="#五、實際範例" class="headerlink" title="五、實際範例"></a>五、實際範例</h2><p>以下是一個完整的簡單 HTML 範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>AOS 教學範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.4/dist/aos.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span>第一個區塊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;zoom-in&quot;</span> <span class="attr">data-aos-delay</span>=<span class="string">&quot;200&quot;</span>&gt;</span>第二個區塊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;slide-left&quot;</span> <span class="attr">data-aos-duration</span>=<span class="string">&quot;800&quot;</span>&gt;</span>第三個區塊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.4/dist/aos.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    AOS.init();</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以將這段程式碼儲存為 HTML 檔案後，直接打開瀏覽器觀看滾動動畫效果。</p>
<hr>
<h2 id="六、常見問題與注意事項"><a href="#六、常見問題與注意事項" class="headerlink" title="六、常見問題與注意事項"></a>六、常見問題與注意事項</h2><ol>
<li><p><strong>AOS 沒有效果？</strong><br>確認你有正確載入 <code>aos.css</code> 和執行 <code>AOS.init()</code>。</p>
</li>
<li><p><strong>元素進入畫面但沒有動畫？</strong><br>嘗試調整 <code>data-aos-offset</code> 或確認元素是否真的進入視窗中。</p>
</li>
<li><p><strong>動畫無法重複？</strong><br>預設會重複，除非你加上了 <code>data-aos-once=&quot;true&quot;</code>。</p>
</li>
<li><p><strong>與 SPA 框架（如 React、Vue）整合時動畫失效？</strong><br>動態渲染的頁面需在 DOM 更新完後重新執行 <code>AOS.refresh()</code>。</p>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>AOS 是一個非常實用又容易上手的前端動畫工具。你不需要寫複雜的 JavaScript，只要加幾行 <code>data-aos</code> 屬性就能為你的網站加入吸引人的動態效果。無論是製作個人作品集、商業網站或展示頁面，AOS 都是快速提升視覺層次感的絕佳利器。</p>
<p>當你需要更細緻的動畫控制或複雜的交互邏輯，也可以進一步探索 <code>GSAP</code>、<code>ScrollMagic</code> 等更強大的動畫工具。但若只是想快速達到流暢的滾動動畫，AOS 絕對是一個值得推薦的選擇。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://gsap.com/">gsap</a></li>
<li><a href="https://scrollmagic.io/">scrollmagic</a></li>
</ol>
]]></content>
      <tags>
        <tag>AOS</tag>
        <tag>Animate On Scroll Library</tag>
        <tag>css</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Backend For Frontend（BFF）入門教學筆記 | 學習筆記</title>
    <url>/2024/12/12/learning-notes-backend-for-frontend-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當今前端與後端開發越趨分離，加上行動裝置、多樣化的使用者端（Web、App、IoT 等）快速成長，<strong>Backend for Frontend（BFF）</strong> 架構逐漸成為微服務與現代應用中不可或缺的一環。本文將介紹 BFF 的基本概念、優缺點、使用情境與實際範例，幫助你快速理解並在專案中應用。</p>
<h2 id="一、什麼是-Backend-For-Frontend？"><a href="#一、什麼是-Backend-For-Frontend？" class="headerlink" title="一、什麼是 Backend For Frontend？"></a>一、什麼是 Backend For Frontend？</h2><p><strong>Backend For Frontend（簡稱 BFF）</strong> 是一種後端架構模式，其核心理念是：<strong>每種前端應用（Web、Mobile App、Smart TV）都由各自專屬的後端服務來支援</strong>，這個後端只為對應的前端量身打造。</p>
<p>傳統系統中，前端直接呼叫後端 API 或微服務，常會遇到以下問題：</p>
<ul>
<li>回傳資料過多（浪費頻寬）</li>
<li>回傳資料不夠（還要多次請求）</li>
<li>錯誤格式（不適合前端解析）</li>
<li>缺乏聚合邏輯（需要組裝多個 API 回應）</li>
</ul>
<p>BFF 則專門為特定前端處理這些問題，讓資料更適合顯示、傳輸與渲染，減少耦合與重複工作。</p>
<hr>
<h2 id="二、BFF-架構示意圖"><a href="#二、BFF-架構示意圖" class="headerlink" title="二、BFF 架構示意圖"></a>二、BFF 架構示意圖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          +---------------+          +-------------------+</span><br><span class="line">Web App → |  BFF for Web  |  → REST  |   User Service    |</span><br><span class="line">          +---------------+          +-------------------+</span><br><span class="line">                                        ↑</span><br><span class="line">          +----------------+           |  REST / RPC</span><br><span class="line">Mobile →  | BFF for Mobile |  → GraphQL| Order Service    |</span><br><span class="line">          +----------------+           |</span><br><span class="line">                                        ↓</span><br><span class="line">                                    Product Service</span><br></pre></td></tr></table></figure>

<p>每一個 BFF 可以：</p>
<ul>
<li>聚合多個微服務的資料</li>
<li>轉換資料格式供前端使用</li>
<li>處理權限與驗證邏輯（例如 token 驗證）</li>
<li>實作快取策略（如 CDN, Redis）</li>
<li>提供更穩定的 API 給前端</li>
</ul>
<hr>
<h2 id="三、什麼情況適合使用-BFF？"><a href="#三、什麼情況適合使用-BFF？" class="headerlink" title="三、什麼情況適合使用 BFF？"></a>三、什麼情況適合使用 BFF？</h2><ol>
<li><strong>有多種前端平台</strong>：Web 和 App 須分別調整 API。</li>
<li><strong>資料需聚合多個來源</strong>：例如組合訂單資料與商品詳細資訊。</li>
<li><strong>前端需要特別的資料結構或格式轉換</strong></li>
<li><strong>希望讓前端開發獨立部署、測試、開發</strong></li>
<li><strong>希望簡化前端邏輯，把複雜邏輯搬到後端處理</strong></li>
</ol>
<hr>
<h2 id="四、BFF-優點與缺點"><a href="#四、BFF-優點與缺點" class="headerlink" title="四、BFF 優點與缺點"></a>四、BFF 優點與缺點</h2><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ul>
<li>前後端明確分工，降低耦合</li>
<li>加快前端開發速度</li>
<li>可根據裝置特性量身打造 API</li>
<li>改善效能（避免多餘資料，提升快取）</li>
<li>更容易實施權限控管與安全策略</li>
</ul>
<h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul>
<li>增加部署與維護成本（每個前端都需對應 BFF）</li>
<li>需要資源維護 BFF 團隊</li>
<li>需協調不同 BFF 的資料一致性與邏輯重複問題</li>
</ul>
<hr>
<h2 id="五、實際範例：Node-js-建立一個-BFF"><a href="#五、實際範例：Node-js-建立一個-BFF" class="headerlink" title="五、實際範例：Node.js 建立一個 BFF"></a>五、實際範例：Node.js 建立一個 BFF</h2><p>假設有以下微服務：</p>
<ul>
<li><code>GET /users/:id</code> 回傳使用者資料</li>
<li><code>GET /orders/user/:id</code> 回傳該用戶的訂單清單</li>
</ul>
<p>現在我們為 Web 建立一個 BFF，統一提供 <code>/profile/:id</code> 接口，回傳使用者基本資訊與訂單清單。</p>
<h3 id="BFF-架構（Node-js-Express）"><a href="#BFF-架構（Node-js-Express）" class="headerlink" title="BFF 架構（Node.js + Express）"></a>BFF 架構（Node.js + Express）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bff/web-server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/profile/:id&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [userRes, ordersRes] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      axios.<span class="title function_">get</span>(<span class="string">`http://users-service/users/<span class="subst">$&#123;userId&#125;</span>`</span>),</span><br><span class="line">      axios.<span class="title function_">get</span>(<span class="string">`http://orders-service/orders/user/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">user</span>: userRes.<span class="property">data</span>,</span><br><span class="line">      <span class="attr">orders</span>: ordersRes.<span class="property">data</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;資料取得失敗&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;BFF for Web running at http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用說明"><a href="#使用說明" class="headerlink" title="使用說明"></a>使用說明</h3><ul>
<li>前端只需呼叫 <code>GET /profile/123</code> 即可拿到整合後的資料。</li>
<li>BFF 內部負責跟不同服務串接、組裝、錯誤處理與轉換格式。</li>
</ul>
<hr>
<h2 id="六、BFF-和-GraphQL-的關係"><a href="#六、BFF-和-GraphQL-的關係" class="headerlink" title="六、BFF 和 GraphQL 的關係"></a>六、BFF 和 GraphQL 的關係</h2><p>GraphQL 本身也常用於 BFF 的實作方式之一。透過 GraphQL：</p>
<ul>
<li>前端可以自己定義要的欄位（防止 over-fetch）</li>
<li>可以統一查詢不同來源資料（類似 BFF 的聚合邏輯）</li>
<li>可搭配 Apollo Server 快速搭建</li>
</ul>
<p><strong>BFF 可以使用 REST，也可以使用 GraphQL，取決於前後端的需求與團隊熟悉度。</strong></p>
<hr>
<h2 id="七、延伸應用：BFF-搭配微前端（Micro-Frontend）"><a href="#七、延伸應用：BFF-搭配微前端（Micro-Frontend）" class="headerlink" title="七、延伸應用：BFF 搭配微前端（Micro Frontend）"></a>七、延伸應用：BFF 搭配微前端（Micro Frontend）</h2><p>當前端本身也是多團隊分工、模組化（例如大型企業的後台管理系統），BFF 可以依照模組拆分，例如：</p>
<ul>
<li>Order 模組對應一個 BFF</li>
<li>Admin 模組對應另一個 BFF</li>
</ul>
<p>讓後端資料與前端 UI 模組相對應，利於組織協作與部署。</p>
<hr>
<h2 id="八、總結"><a href="#八、總結" class="headerlink" title="八、總結"></a>八、總結</h2><table>
<thead>
<tr>
<th>面向</th>
<th>傳統 API</th>
<th>BFF 架構</th>
</tr>
</thead>
<tbody><tr>
<td>資料格式</td>
<td>後端決定</td>
<td>針對前端定製</td>
</tr>
<tr>
<td>跨平台支援</td>
<td>不佳</td>
<td>良好</td>
</tr>
<tr>
<td>前端彈性</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>擴充性</td>
<td>中</td>
<td>高</td>
</tr>
<tr>
<td>成本</td>
<td>低</td>
<td>中～高（需維護 BFF）</td>
</tr>
</tbody></table>
<p>BFF 並不是萬靈丹，但在多平台、多樣前端需求的專案中，非常實用，能夠有效地降低溝通成本、提升開發效率，並提供更佳的 API 使用體驗。</p>
<p>如果你的團隊正在建構大型應用系統，或前端開發頻繁改動，不妨考慮導入 BFF 架構，讓前後端協作更流暢、更可維護。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://hackmd.io/@yaahsin/BJPCnvnLh">Backend For Frontend 前端模式的後端</a></li>
<li><a href="https://medium.com/starbugs/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E8%A9%B2%E8%B2%A0%E8%B2%AC%E5%AF%AB-api-endpoints-%E5%97%8E-the-backend-for-frontend-pattern-bff-in-microservices-world-1368362c141c">前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">Backends for Frontends pattern</a></li>
<li><a href="https://medium.com/mobilepeople/backend-for-frontend-pattern-why-you-need-to-know-it-46f94ce420b0">Backend for frontend (BFF) pattern— why do you need to know it?</a></li>
</ol>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>Redux</tag>
        <tag>React Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Bloom Filter 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/15/learning-notes-bloom-filter-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在處理大數據或需要大量查詢的系統中，「是否存在某個元素」是一個常見的需求。例如：檢查某個使用者是否已註冊、某筆資料是否已儲存、或某個網址是否在黑名單中。這些操作如果都直接查詢資料庫，會造成效能瓶頸，尤其在資料量非常大的情況下。</p>
<p>為了解決這個問題，<strong>Bloom Filter（布隆過濾器）</strong>誕生了。這是一種<strong>空間效率極高且速度快速</strong>的<strong>概率型資料結構</strong>，用於檢查元素是否在集合中。它的特點是可以節省大量記憶體與查詢時間，代價是可能會有「誤判存在」的情況，但保證不會漏判。</p>
<p>Bloom Filter 並不是用來取代資料庫，而是作為<strong>第一層快速判斷工具</strong>，幫助系統更有效率地篩選資料，提升整體效能。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>定義</strong>：Bloom Filter 是一種用於判斷元素是否存在於集合中的資料結構，具有一定誤判率。</p>
</li>
<li><p><strong>特點</strong>：</p>
<ul>
<li>省記憶體：只使用位元陣列來表示集合</li>
<li>查詢速度快：時間複雜度為 O(k)，k 為 hash 函數數量</li>
<li>有誤判率：可能錯誤地認為某元素存在，但不會錯誤地排除已存在的元素</li>
<li>不可刪除：傳統 Bloom Filter 不支援元素刪除（可改用 Counting Bloom Filter）</li>
</ul>
</li>
<li><p><strong>運作方式</strong>：</p>
<ol>
<li><p>建立一個 bit array（位元陣列），初始為全 0</p>
</li>
<li><p>每個元素經由多個 hash 函數映射為數個 bit 位址，並設為 1</p>
</li>
<li><p>查詢元素時，將元素經過相同的 hash 函數，檢查對應 bit 是否都為 1</p>
<ul>
<li>若任一為 0，則元素<strong>一定不存在</strong></li>
<li>若全部為 1，則元素<strong>可能存在</strong></li>
</ul>
</li>
</ol>
</li>
<li><p><strong>應用場景</strong>：</p>
<ul>
<li>快取系統的查詢優化</li>
<li>URL 黑名單篩選</li>
<li>防止 email 重複註冊</li>
<li>分散式系統中的資源去重</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例（Python-語言）"><a href="#實際範例（Python-語言）" class="headerlink" title="實際範例（Python 語言）"></a>實際範例（Python 語言）</h2><p>以下示範如何使用 Python 實作 Bloom Filter，並透過 <code>pybloom-live</code> 套件進行簡易操作。</p>
<h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pybloom-live</span><br></pre></td></tr></table></figure>

<h3 id="基本使用範例"><a href="#基本使用範例" class="headerlink" title="基本使用範例"></a>基本使用範例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pybloom_live <span class="keyword">import</span> BloomFilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一個 Bloom Filter，容量為 10000 筆，容忍誤判率為 1%</span></span><br><span class="line">bloom = BloomFilter(capacity=<span class="number">10000</span>, error_rate=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入元素</span></span><br><span class="line">bloom.add(<span class="string">&quot;apple&quot;</span>)</span><br><span class="line">bloom.add(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查詢元素是否存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;apple&quot;</span> <span class="keyword">in</span> bloom)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;banana&quot;</span> <span class="keyword">in</span> bloom)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;grape&quot;</span> <span class="keyword">in</span> bloom)   <span class="comment"># False（或可能 True，機率很小）</span></span><br></pre></td></tr></table></figure>

<h3 id="解釋程式碼"><a href="#解釋程式碼" class="headerlink" title="解釋程式碼"></a>解釋程式碼</h3><ul>
<li><code>capacity</code>: 預估將要儲存的元素數量，Bloom Filter 的大小與 hash 數量會依此設定</li>
<li><code>error_rate</code>: 容許誤判率（預測某元素在集合中時，實際不在）</li>
<li><code>.add()</code>: 將元素加入 Bloom Filter</li>
<li><code>in</code>: 使用 Python 語法糖來查詢元素是否在 Bloom Filter 中</li>
</ul>
<h3 id="模擬誤判情況"><a href="#模擬誤判情況" class="headerlink" title="模擬誤判情況"></a>模擬誤判情況</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">false_positives = <span class="number">0</span></span><br><span class="line">test_data = [<span class="string">&quot;item&quot;</span> + <span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>, <span class="number">10100</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> test_data:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">in</span> bloom:</span><br><span class="line">        false_positives += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;誤判次數：<span class="subst">&#123;false_positives&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>這段程式碼將檢查 100 筆從未加入過的資料，看有多少筆被錯誤地判斷為「已存在」。由於設定誤判率為 1%，實際誤判筆數大致會落在 0~2 筆之間。</p>
<hr>
<h2 id="進階補充：Bloom-Filter-的數學基礎"><a href="#進階補充：Bloom-Filter-的數學基礎" class="headerlink" title="進階補充：Bloom Filter 的數學基礎"></a>進階補充：Bloom Filter 的數學基礎</h2><p>假設：</p>
<ul>
<li><code>n</code> 為預估儲存的元素數量</li>
<li><code>m</code> 為 bit 陣列大小</li>
<li><code>k</code> 為 hash 函數數量</li>
</ul>
<p>則誤判率約為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1 - e^(-kn/m))^k</span><br></pre></td></tr></table></figure>

<p>透過微積分分析，可以得出在給定 <code>m</code> 與 <code>n</code> 的情況下，最理想的 hash 函數數量為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k = (m/n) * ln(2)</span><br></pre></td></tr></table></figure>

<p>Bloom Filter 的實作常會根據這些公式自動配置最佳參數。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Bloom Filter 是一個非常實用的資料結構，適合用於需要<strong>高效率查詢與記憶體節省</strong>的場景。雖然它無法完全準確地判斷元素是否存在，但在可以接受少量誤判的場景（例如快取、URL 過濾、黑名單系統等）中，它是非常有效率的選擇。</p>
<p>理解 Bloom Filter 的基本概念與限制，可以幫助我們在設計大型系統時做出更合適的架構選擇。如果你正在處理大量資料或需要快速查詢的場景，不妨試著將 Bloom Filter 納入考量。</p>
]]></content>
      <tags>
        <tag>Bloom Filter</tag>
        <tag>布隆過濾器</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome.storage.local vs. localStorage：資料儲存方式差異入門教學筆記 | 學習筆記</title>
    <url>/2024/12/20/learning-notes-chrome-extension-local-storage-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端與 Chrome 擴充功能（Chrome Extension）開發中，「資料儲存」是一項常見需求。開發者常見的兩種方式為：</p>
<ul>
<li><code>localStorage</code>：瀏覽器原生提供的本地儲存 API</li>
<li><code>chrome.storage.local</code>：Chrome Extension 提供的本地儲存 API</li>
</ul>
<p>兩者名稱相似，功能也都能儲存 key-value 結構資料，但其用途、行為、效能與限制卻有顯著差異。本篇筆記將帶你掌握這兩者的差別，並透過實作範例協助你在開發時做出正確選擇。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><h3 id="1-定義與使用場景"><a href="#1-定義與使用場景" class="headerlink" title="1. 定義與使用場景"></a>1. 定義與使用場景</h3><ul>
<li><code>localStorage</code> 是 Web API，適用於一般網頁與 Content Script，操作簡便但同步。</li>
<li><code>chrome.storage.local</code> 是專為 Chrome 擴充功能設計的非同步儲存 API，適用於 Background、Popup、Options、Content Script 等擴充功能組件。</li>
</ul>
<h3 id="2-主要差異比較"><a href="#2-主要差異比較" class="headerlink" title="2. 主要差異比較"></a>2. 主要差異比較</h3><table>
<thead>
<tr>
<th>項目</th>
<th><code>chrome.storage.local</code></th>
<th><code>localStorage</code></th>
</tr>
</thead>
<tbody><tr>
<td>API 類型</td>
<td>非同步</td>
<td>同步</td>
</tr>
<tr>
<td>儲存容量</td>
<td>約 5MB 以上，可依平台調整</td>
<td>約 5MB（視瀏覽器而定）</td>
</tr>
<tr>
<td>使用範圍</td>
<td>限於 Chrome Extension</td>
<td>網頁與 Content Script</td>
</tr>
<tr>
<td>安全性與隔離性</td>
<td>高（與其他網站與擴充隔離）</td>
<td>中（每個 domain 隔離）</td>
</tr>
<tr>
<td>可與 background&#x2F;popup 共用</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>是否支援跨裝置同步</td>
<td>使用 <code>chrome.storage.sync</code> 可支援</td>
<td>否</td>
</tr>
</tbody></table>
<h3 id="3-實作差異"><a href="#3-實作差異" class="headerlink" title="3. 實作差異"></a>3. 實作差異</h3><ul>
<li><code>localStorage</code> 使用方式簡單、同步，可立即取得值。</li>
<li><code>chrome.storage.local</code> 是非同步設計，需透過 callback 或 Promise 取得值。</li>
</ul>
<hr>
<h2 id="實際範例比較"><a href="#實際範例比較" class="headerlink" title="實際範例比較"></a>實際範例比較</h2><p>以下為兩者的典型儲存與讀取操作實作方式。</p>
<hr>
<h3 id="一、使用-localStorage（同步）"><a href="#一、使用-localStorage（同步）" class="headerlink" title="一、使用 localStorage（同步）"></a>一、使用 <code>localStorage</code>（同步）</h3><h4 id="儲存資料"><a href="#儲存資料" class="headerlink" title="儲存資料"></a>儲存資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;kdchang&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="讀取資料"><a href="#讀取資料" class="headerlink" title="讀取資料"></a>讀取資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 輸出：kdchang</span></span><br></pre></td></tr></table></figure>

<h4 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="優點與限制"><a href="#優點與限制" class="headerlink" title="優點與限制"></a>優點與限制</h4><ul>
<li><strong>優點</strong>：簡單、直覺、無需 callback</li>
<li><strong>限制</strong>：無法在 background script 中使用、同步操作可能阻塞 UI、無跨 component 溝通機制</li>
</ul>
<hr>
<h3 id="二、使用-chrome-storage-local（非同步）"><a href="#二、使用-chrome-storage-local（非同步）" class="headerlink" title="二、使用 chrome.storage.local（非同步）"></a>二、使用 <code>chrome.storage.local</code>（非同步）</h3><h4 id="儲存資料-1"><a href="#儲存資料-1" class="headerlink" title="儲存資料"></a>儲存資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;kdchang&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;儲存成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="讀取資料-1"><a href="#讀取資料-1" class="headerlink" title="讀取資料"></a>讀取資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&#x27;username&#x27;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀到的值:&#x27;</span>, result.<span class="property">username</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="刪除資料-1"><a href="#刪除資料-1" class="headerlink" title="刪除資料"></a>刪除資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">remove</span>(<span class="string">&#x27;username&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已刪除 username&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="優點與限制-1"><a href="#優點與限制-1" class="headerlink" title="優點與限制"></a>優點與限制</h4><ul>
<li><strong>優點</strong>：資料與擴充功能隔離、安全性高、能跨組件共享</li>
<li><strong>限制</strong>：需處理非同步流程（可用 async&#x2F;await 解決）</li>
</ul>
<hr>
<h2 id="實戰應用：擴充功能記錄使用者偏好設定"><a href="#實戰應用：擴充功能記錄使用者偏好設定" class="headerlink" title="實戰應用：擴充功能記錄使用者偏好設定"></a>實戰應用：擴充功能記錄使用者偏好設定</h2><h3 id="專案背景"><a href="#專案背景" class="headerlink" title="專案背景"></a>專案背景</h3><p>你開發了一個可自訂主題配色的擴充功能，使用者可以切換「深色」或「淺色」模式，並希望記錄下來。</p>
<hr>
<h3 id="localStorage-實作方式（限-Content-Script）"><a href="#localStorage-實作方式（限-Content-Script）" class="headerlink" title="localStorage 實作方式（限 Content Script）"></a>localStorage 實作方式（限 Content Script）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 儲存使用者偏好</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 頁面載入時讀取</span></span><br><span class="line"><span class="keyword">const</span> theme = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;theme&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>, theme);</span><br></pre></td></tr></table></figure>

<p>此方法雖然簡便，但無法在 background script、popup 等元件中共用。</p>
<hr>
<h3 id="chrome-storage-local-實作方式（推薦）"><a href="#chrome-storage-local-實作方式（推薦）" class="headerlink" title="chrome.storage.local 實作方式（推薦）"></a>chrome.storage.local 實作方式（推薦）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 儲存</span></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123; <span class="attr">theme</span>: <span class="string">&#x27;dark&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;儲存主題成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讀取</span></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&#x27;theme&#x27;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>, result.<span class="property">theme</span> || <span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這種方式可讓 background.js、popup.html、options.html 都能取得相同資料，並透過 message passing 進一步溝通。</p>
<hr>
<h2 id="使用建議與最佳實踐"><a href="#使用建議與最佳實踐" class="headerlink" title="使用建議與最佳實踐"></a>使用建議與最佳實踐</h2><h3 id="選擇依據："><a href="#選擇依據：" class="headerlink" title="選擇依據："></a>選擇依據：</h3><ul>
<li><strong>Chrome Extension 專案開發時</strong>：建議一律使用 <code>chrome.storage.local</code>，搭配 async&#x2F;await 管理非同步流程。</li>
<li><strong>Content Script 或網頁前端小工具</strong>：若不考慮擴充功能架構，可使用 <code>localStorage</code> 快速開發。</li>
</ul>
<h3 id="注意事項："><a href="#注意事項：" class="headerlink" title="注意事項："></a>注意事項：</h3><ul>
<li><code>chrome.storage.local</code> 每次寫入都是非同步，避免過度頻繁更新（例如輸入框每秒觸發）</li>
<li><code>localStorage</code> 資料若寫入太大或格式不當，可能造成同步錯誤或被清除</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><table>
<thead>
<tr>
<th>問題</th>
<th>建議做法</th>
</tr>
</thead>
<tbody><tr>
<td>在 popup、background、content script 共享設定資料</td>
<td>使用 <code>chrome.storage.local</code></td>
</tr>
<tr>
<td>快速暫存使用者動作、不需跨頁</td>
<td>可用 <code>localStorage</code></td>
</tr>
<tr>
<td>需考慮非同步、可擴充、跨頁共享與安全性</td>
<td>優先使用 <code>chrome.storage.local</code></td>
</tr>
</tbody></table>
<p><code>chrome.storage.local</code> 與 <code>localStorage</code> 各有適用場景與特點，選擇時需考量使用環境、效能、安全性與 API 特性。透過本文你應該能更清楚何時該用哪一種方式，並應用在擴充功能與網頁開發中，打造穩定且高效的儲存邏輯。</p>
]]></content>
      <tags>
        <tag>Chrome Extension</tag>
        <tag>Chrome</tag>
        <tag>chrome.storage.local</tag>
        <tag>localStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>Claude Code 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/20/learning-notes-claude-code-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隨著 AI 編程助手的發展，越來越多開發者開始使用 AI 工具來加速開發流程。由 Anthropic 推出的 <strong>Claude Code</strong>，是一個專為程式設計任務設計的生成式 AI 模型。它結合 Claude 的強大語言理解能力，專注於代碼撰寫、重構、除錯與文件生成，並支援多種程式語言。</p>
<p>與 GitHub Copilot、ChatGPT 等工具類似，Claude Code 目標是協助開發者更有效率地完成日常開發任務。不過，它也有獨特的優勢：例如更嚴謹的安全性考量、對上下文理解的廣度，以及與 Anthropic 所提倡的 Constitutional AI 架構相結合的「安全設計」。</p>
<p>本篇筆記將說明 Claude Code 的特色與基礎使用方式，協助你快速上手。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>Claude Code 是什麼？</strong></p>
<ul>
<li>由 Anthropic 推出的 AI 編程輔助模型，基於 Claude 模型微調。</li>
<li>專注於程式碼相關任務，如生成、除錯、補完與重構。</li>
</ul>
</li>
<li><p><strong>支援的平台與模式</strong></p>
<ul>
<li>可透過 Claude 官網、Slack 整合、API 介面使用。</li>
<li>Claude 3 模型家族中的 Sonnet 與 Opus 皆支援 Code 能力。</li>
</ul>
</li>
<li><p><strong>支援語言與任務</strong></p>
<ul>
<li>語言：Python、JavaScript、TypeScript、Java、C&#x2F;C++、HTML&#x2F;CSS、SQL 等。</li>
<li>任務類型：代碼生成、文件產生、除錯、測試碼產出、重構與最佳化。</li>
</ul>
</li>
<li><p><strong>與其他工具的差異</strong></p>
<ul>
<li>支援更長的上下文（可達 200k tokens）</li>
<li>回應更具可讀性與解釋性</li>
<li>Anthropic 特別強調「可控性」與「安全性」</li>
</ul>
</li>
<li><p><strong>使用方式</strong></p>
<ul>
<li>Claude 聊天介面中貼上程式碼片段與指令</li>
<li>使用 prompt 提示具體任務，例如 “請優化這段程式碼” 或 “請解釋下列 Python 函數的功能”</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例教學"><a href="#實際範例教學" class="headerlink" title="實際範例教學"></a>實際範例教學</h2><p>以下範例將以 Claude Code 處理 Python 程式碼為例，展示常見任務的應用。</p>
<h3 id="1-程式碼生成"><a href="#1-程式碼生成" class="headerlink" title="1. 程式碼生成"></a>1. 程式碼生成</h3><p><strong>Prompt：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">請用 Python 寫一個函式，接收一個整數列表，回傳最大值與最小值。</span><br></pre></td></tr></table></figure>

<p><strong>Claude Code 回應：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_max</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> numbers:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(numbers), <span class="built_in">max</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用範例</span></span><br><span class="line">nums = [<span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line">min_val, max_val = find_min_max(nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最小值: <span class="subst">&#123;min_val&#125;</span>, 最大值: <span class="subst">&#123;max_val&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-程式碼除錯"><a href="#2-程式碼除錯" class="headerlink" title="2. 程式碼除錯"></a>2. 程式碼除錯</h3><p><strong>輸入錯誤程式碼：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">10</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p><strong>Prompt：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">這段程式碼會發生什麼錯誤？要怎麼修改？</span><br></pre></td></tr></table></figure>

<p><strong>Claude Code 回應：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">這段程式碼會在除以 0 時產生 ZeroDivisionError 錯誤。你可以加入 try-except 來處理例外：</span><br></pre></td></tr></table></figure>

<p><strong>建議修改版本：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;除數不能為零&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">10</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-重構程式碼"><a href="#3-重構程式碼" class="headerlink" title="3. 重構程式碼"></a>3. 重構程式碼</h3><p><strong>Prompt：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">請幫我重構以下 Python 程式，使其更簡潔易讀</span><br></pre></td></tr></table></figure>

<p><strong>原始程式碼：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">data</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            result.append(item * item)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p><strong>Claude Code 回應：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> [item ** <span class="number">2</span> <span class="keyword">for</span> item <span class="keyword">in</span> data <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="實用建議與提示"><a href="#實用建議與提示" class="headerlink" title="實用建議與提示"></a>實用建議與提示</h2><ul>
<li><strong>具體的指令更有效</strong>：直接說明你要做什麼，例如「請將下列 TypeScript 重構為具名函式」，比「幫我修改程式碼」效果更好。</li>
<li><strong>使用上下文編輯技巧</strong>：可貼上整個 class 或 module，再指明哪個函式需要優化。</li>
<li><strong>加入期望輸出範例</strong>：讓 Claude Code 理解你的預期輸入與輸出格式。</li>
<li><strong>搭配 API 使用</strong>：進階用戶可透過 Anthropic API 將 Claude Code 整合進開發工作流程或 IDE 插件。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Claude Code 是新一代 AI 編程輔助工具的代表之一，其簡潔清晰的語言理解能力與較高的上下文記憶範圍，使其特別適合處理複雜的程式重構與跨檔案邏輯分析。無論你是初學者還是資深開發者，只要善用 prompt 的語言描述能力與 Claude Code 的生成特性，就能提升開發效率與程式品質。</p>
<p>若你正尋求 Copilot 或 ChatGPT 的替代方案，Claude Code 值得一試。</p>
<hr>
<p>若你有特定開發環境（如 VSCode、CLI、Slack）或語言需求，我可以進一步為你量身規劃 Claude Code 的使用方式與整合建議。需要的話也可以補充教學範例。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://github.com/doggy8088/github-copilot-configs">最佳 GitHub Copilot 設定</a></li>
<li><a href="https://medium.com/@cct0201/%E5%BE%9E-%E5%AF%AB%E7%A8%8B%E5%BC%8F-%E5%88%B0-%E8%88%87-ai-%E5%85%B1%E8%88%9E-%E6%88%91%E5%9C%A8%E5%85%AC%E5%8F%B8%E6%8E%A8%E5%8B%95-vibe-coding-%E7%9A%84%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB-015e28909290">從「寫程式」到「與 AI 共舞」── 我在公司推動 Vibe Coding 的經驗分享</a></li>
<li><a href="https://gitmind.com/tw/best-vibe-coding-tools-2025.html">2025 年最強推薦 Vibe Coding 工具一次看懂</a></li>
</ol>
]]></content>
      <tags>
        <tag>Claude</tag>
        <tag>Claude Code</tag>
        <tag>編輯器</tag>
        <tag>AI IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome Extension 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/20/learning-notes-chrome-extension-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Chrome Extension（Chrome 擴充功能）是針對 Google Chrome 瀏覽器開發的瀏覽器插件，能夠延伸瀏覽器的功能，提供更高效的使用體驗。你可以用它來自動化操作、強化 UI、增加捷徑、記錄內容、攔截請求等等。</p>
<p>本教學將介紹 Chrome Extension 的基本架構、開發流程與一個簡單的實作範例，協助你快速入門。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ol>
<li><p><strong>基本架構：</strong></p>
<ul>
<li><code>manifest.json</code>：擴充功能的核心設定檔</li>
<li><code>background.js</code> &#x2F; <code>service_worker.js</code>：背景邏輯（例如攔截請求、常駐任務）</li>
<li><code>popup.html</code> + <code>popup.js</code>：點擊圖示後的互動 UI</li>
<li><code>content.js</code>：注入頁面的腳本，直接與 DOM 互動</li>
</ul>
</li>
<li><p><strong>開發步驟：</strong></p>
<ul>
<li>建立資料夾結構與設定檔</li>
<li>撰寫功能腳本與 UI</li>
<li>在 Chrome 中載入未封裝的擴充功能</li>
<li>測試與除錯</li>
</ul>
</li>
<li><p><strong>核心權限與功能：</strong></p>
<ul>
<li><code>permissions</code> 欄位需指定所需功能（如 <code>tabs</code>, <code>storage</code>, <code>scripting</code>）</li>
<li><code>host_permissions</code> 控制哪些網站允許注入腳本</li>
<li>可與頁面雙向通訊</li>
</ul>
</li>
<li><p><strong>常見用途：</strong></p>
<ul>
<li>提高生產力（截圖、標記、翻譯）</li>
<li>資料擷取與分析（網頁爬蟲輔助）</li>
<li>儲存內容（書籤、待辦清單）</li>
<li>網站 UI 客製化</li>
</ul>
</li>
</ol>
<hr>
<h2 id="實際範例：儲存選取文字的小擴充功能"><a href="#實際範例：儲存選取文字的小擴充功能" class="headerlink" title="實際範例：儲存選取文字的小擴充功能"></a>實際範例：儲存選取文字的小擴充功能</h2><h3 id="功能簡介"><a href="#功能簡介" class="headerlink" title="功能簡介"></a>功能簡介</h3><p>當使用者在網頁上選取一段文字並點擊擴充功能圖示，會將選取的文字儲存到 <code>localStorage</code>，方便後續檢視。</p>
<hr>
<h3 id="1-專案結構"><a href="#1-專案結構" class="headerlink" title="1. 專案結構"></a>1. 專案結構</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-extension/</span><br><span class="line">├── manifest.json</span><br><span class="line">├── popup.html</span><br><span class="line">├── popup.js</span><br><span class="line">├── content.js</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-manifest-json"><a href="#2-manifest-json" class="headerlink" title="2. manifest.json"></a>2. manifest.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Save Selected Text&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;儲存網頁中選取的文字&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;scripting&quot;</span><span class="punctuation">,</span> <span class="string">&quot;storage&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host_permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon128.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;content.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-popup-html"><a href="#3-popup-html" class="headerlink" title="3. popup.html"></a>3. popup.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>已儲存文字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你儲存的文字：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;text-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;popup.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-popup-js"><a href="#4-popup-js" class="headerlink" title="4. popup.js"></a>4. popup.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&#x27;savedTexts&#x27;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text-list&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> texts = result.<span class="property">savedTexts</span> || [];</span><br><span class="line">    texts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">      li.<span class="property">textContent</span> = text;</span><br><span class="line">      list.<span class="title function_">appendChild</span>(li);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-content-js"><a href="#5-content-js" class="headerlink" title="5. content.js"></a>5. content.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> selectedText = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line">  <span class="keyword">if</span> (selectedText) &#123;</span><br><span class="line">    chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&#x27;savedTexts&#x27;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> current = result.<span class="property">savedTexts</span> || [];</span><br><span class="line">      current.<span class="title function_">push</span>(selectedText);</span><br><span class="line">      chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123; <span class="attr">savedTexts</span>: current &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-載入擴充功能"><a href="#6-載入擴充功能" class="headerlink" title="6. 載入擴充功能"></a>6. 載入擴充功能</h3><ol>
<li>打開 Chrome 瀏覽器</li>
<li>前往 <code>chrome://extensions/</code></li>
<li>開啟右上角「開發人員模式」</li>
<li>點選「載入未封裝項目」</li>
<li>選取專案資料夾（my-extension）</li>
</ol>
<hr>
<h3 id="7-測試方式"><a href="#7-測試方式" class="headerlink" title="7. 測試方式"></a>7. 測試方式</h3><ol>
<li>任意打開一個網頁</li>
<li>選取文字後放開滑鼠</li>
<li>點擊瀏覽器右上角的擴充功能圖示</li>
<li>在彈出的視窗中查看剛才儲存的文字</li>
</ol>
<hr>
<h2 id="小技巧與補充"><a href="#小技巧與補充" class="headerlink" title="小技巧與補充"></a>小技巧與補充</h2><ul>
<li><strong>使用 TypeScript</strong>：可結合 <code>Vite</code> 或 <code>webpack</code> 實現模組化開發。</li>
<li><strong>Hot Reload</strong>：透過專案如 <code>crxjs</code> 可達成自動刷新套件。</li>
<li><strong>權限最小化原則</strong>：僅使用必要權限以通過審核。</li>
<li><strong>Storage API</strong>：可選擇使用 <code>localStorage</code>、<code>chrome.storage.local</code>、<code>sync</code> 等不同儲存方式。</li>
<li><strong>message passing</strong>：背景與 content script 可用 <code>chrome.runtime.sendMessage</code> 溝通。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Chrome Extension 是一個強大的平台，讓開發者能以 HTML、CSS、JavaScript 等前端技術打造自己的工具。無論是為了解決個人需求、改善使用體驗，還是作為產品 MVP 的雛型開發平台，Chrome Extension 都是值得投資時間學習的技術。</p>
<p>從簡單的文字儲存開始，你可以慢慢拓展功能，加入右鍵選單、快捷鍵、網頁改寫、API 串接等高階應用，打造出屬於你自己的瀏覽器擴充小工具。</p>
]]></content>
      <tags>
        <tag>Chrome Extension</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>concurrently.js 入門教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-concurrently-js-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端與全端開發中，我們經常需要<strong>同時執行多個指令</strong>，例如一邊啟動前端開發伺服器，一邊啟動後端 API 伺服器，或一邊監看 Sass 編譯，一邊執行 TypeScript 編譯。在這樣的情境下，<code>concurrently</code> 是一個非常實用的工具，它能讓我們在同一個命令列同時執行多個命令。</p>
<p>本篇筆記將介紹 <code>concurrently</code> 是什麼、如何安裝、基本用法，以及實際應用範例。</p>
<hr>
<h3 id="什麼是-concurrently？"><a href="#什麼是-concurrently？" class="headerlink" title="什麼是 concurrently？"></a>什麼是 concurrently？</h3><p><code>concurrently</code> 是一個 Node.js 套件，可以在一個命令中<strong>同時執行多個命令行指令</strong>，而且會把各個執行的結果分別以不同顏色標示，方便辨認。它常用來取代 <code>npm-run-all</code>、<code>gulp</code> 等工具中針對「平行執行任務」的需求。</p>
<p>官方說明：<strong>“Run multiple commands concurrently.”</strong></p>
<p>例如你想同時執行一個 React 專案的前端開發伺服器與後端 API 伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start-frontend &amp; npm run start-backend</span><br></pre></td></tr></table></figure>

<p>在不同系統或 shell 可能有兼容性問題，用 <code>concurrently</code> 則會簡單許多。</p>
<hr>
<h2 id="1️⃣-安裝-concurrently"><a href="#1️⃣-安裝-concurrently" class="headerlink" title="1️⃣ 安裝 concurrently"></a>1️⃣ 安裝 concurrently</h2><p>首先，你需要在專案中安裝 <code>concurrently</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install concurrently --save-dev</span><br></pre></td></tr></table></figure>

<p>或者使用 yarn：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add concurrently --dev</span><br></pre></td></tr></table></figure>

<p>安裝完成後，你可以在 <code>package.json</code> 的 <code>scripts</code> 區塊中使用它。</p>
<hr>
<h2 id="2️⃣-基本用法"><a href="#2️⃣-基本用法" class="headerlink" title="2️⃣ 基本用法"></a>2️⃣ 基本用法</h2><p>最基本的用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx concurrently <span class="string">&quot;command1&quot;</span> <span class="string">&quot;command2&quot;</span></span><br></pre></td></tr></table></figure>

<p>例如，同時執行 <code>npm run server</code> 和 <code>npm run client</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx concurrently <span class="string">&quot;npm run server&quot;</span> <span class="string">&quot;npm run client&quot;</span></span><br></pre></td></tr></table></figure>

<p>執行時會在終端顯示兩個任務的 log，並自動用不同顏色標示來源。</p>
<hr>
<h2 id="3️⃣-在-package-json-中使用"><a href="#3️⃣-在-package-json-中使用" class="headerlink" title="3️⃣ 在 package.json 中使用"></a>3️⃣ 在 <code>package.json</code> 中使用</h2><p>通常我們會把 <code>concurrently</code> 寫在 <code>package.json</code> 裡的 scripts 區塊：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;client&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently \&quot;npm run server\&quot; \&quot;npm run client\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>執行 <code>npm run dev</code>，就會同時執行 <code>server.js</code>（後端）與 <code>react-scripts start</code>（前端）。</p>
<p>這樣只需要一個指令就能同時啟動兩個服務，對開發非常方便。</p>
<hr>
<h2 id="4️⃣-實際範例：React-Express-同時啟動"><a href="#4️⃣-實際範例：React-Express-同時啟動" class="headerlink" title="4️⃣ 實際範例：React + Express 同時啟動"></a>4️⃣ 實際範例：React + Express 同時啟動</h2><p>假設你有一個專案結構如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-app/</span><br><span class="line">  client/</span><br><span class="line">    (React 專案)</span><br><span class="line">  server/</span><br><span class="line">    (Express 後端)</span><br></pre></td></tr></table></figure>

<h3 id="server-package-json"><a href="#server-package-json" class="headerlink" title="server/package.json"></a><code>server/package.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;server&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="client-package-json"><a href="#client-package-json" class="headerlink" title="client/package.json"></a><code>client/package.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在專案根目錄的 <code>package.json</code> 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently \&quot;npm start --prefix server\&quot; \&quot;npm start --prefix client\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;concurrently&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>--prefix</code> 是讓 npm 到指定資料夾執行</li>
<li><code>npm start --prefix server</code> 會到 <code>server/</code> 資料夾執行 <code>npm start</code></li>
<li><code>npm start --prefix client</code> 會到 <code>client/</code> 資料夾執行 <code>npm start</code></li>
</ul>
<p>此時執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>就會<strong>同時啟動 React 前端與 Express 後端</strong>，而且都會在終端中顯示 log，方便觀察開發情況。</p>
<hr>
<h2 id="5️⃣-進階用法"><a href="#5️⃣-進階用法" class="headerlink" title="5️⃣ 進階用法"></a>5️⃣ 進階用法</h2><h3 id="✅-自訂-prefix-與顏色"><a href="#✅-自訂-prefix-與顏色" class="headerlink" title="✅ 自訂 prefix 與顏色"></a>✅ 自訂 prefix 與顏色</h3><p>可以自訂 log 標籤與顏色，方便辨識哪一個 log 來自哪個指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx concurrently --names <span class="string">&quot;BACK,FRONT&quot;</span> --prefix-colors <span class="string">&quot;bgBlue.bold,bgMagenta.bold&quot;</span> <span class="string">&quot;npm run server&quot;</span> <span class="string">&quot;npm run client&quot;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[BACK] server running on port 5000</span><br><span class="line">[FRONT] webpack compiled successfully</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="✅-自動終止所有執行中的任務"><a href="#✅-自動終止所有執行中的任務" class="headerlink" title="✅ 自動終止所有執行中的任務"></a>✅ 自動終止所有執行中的任務</h3><p>當一個任務失敗時，讓其他任務也自動停止：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx concurrently --kill-others <span class="string">&quot;npm run server&quot;</span> <span class="string">&quot;npm run client&quot;</span></span><br></pre></td></tr></table></figure>

<p>當其中一個 command 錯誤，另一個也會被 kill，避免殘留無用的背景 process。</p>
<hr>
<h2 id="6️⃣-常見用途"><a href="#6️⃣-常見用途" class="headerlink" title="6️⃣ 常見用途"></a>6️⃣ 常見用途</h2><p><code>concurrently</code> 常見的使用情境有：</p>
<ul>
<li>同時啟動多個 Node.js 服務</li>
<li>一邊監看 Sass&#x2F;LESS 編譯，一邊執行 webpack</li>
<li>同時跑 test 與 build</li>
<li>同時監看前端與後端程式碼</li>
</ul>
<p>如果你用 <code>create-react-app</code>、<code>Next.js</code>、<code>Vite</code>、<code>Express</code>、<code>NestJS</code> 這些框架開發全端應用，<code>concurrently</code> 非常適合整合開發流程。</p>
<hr>
<h2 id="7️⃣-與其他工具比較"><a href="#7️⃣-與其他工具比較" class="headerlink" title="7️⃣ 與其他工具比較"></a>7️⃣ 與其他工具比較</h2><p><code>concurrently</code> 的特色在於：</p>
<ul>
<li>簡單語法（不需要額外配置檔）</li>
<li>支援 Windows、Linux、Mac</li>
<li>輕量、僅做平行執行，不強制任務流程</li>
<li>log 輸出自帶標籤與顏色</li>
<li>可搭配 npm script 或 npx 單獨執行</li>
</ul>
<p>如果需要「先後順序執行多個任務」，則可以搭配 <code>npm-run-all</code>。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><code>concurrently</code> 是一個適合在開發環境中同時執行多個命令的小工具，對需要前後端同時啟動、前端多個編譯工作並行的開發者非常實用。</p>
<p>它用法簡單、安裝快速、跨平台，推薦將它納入專案開發腳本中，以提升開發效率。</p>
<p>希望這篇筆記能幫助你了解 <code>concurrently</code> 的用途與基本操作！</p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/01/learning-notes-cookie-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cookie 是一種儲存在使用者瀏覽器上的小型文字檔案，用於保存使用者的狀態或資訊。常見用途包含：</p>
<p><strong>紀錄登入狀態</strong>：讓使用者在網站上保持登入，不需每次重新輸入帳號。<br><strong>使用者偏好設定</strong>：保存使用者選擇的語言、主題等個人化設定。<br><strong>追蹤使用者行為</strong>：例如分析網站流量、廣告投放追蹤等。</p>
<h1 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h1><p>Cookie 依據不同的分類方式，可以分為以下幾種常見種類：</p>
<h3 id="一、依用途分類："><a href="#一、依用途分類：" class="headerlink" title="一、依用途分類："></a>一、依用途分類：</h3><ol>
<li><p><strong>功能性 Cookie（Functional Cookies）</strong>  </p>
<ul>
<li>主要用於提升網站使用體驗，例如記住使用者的登入狀態、語言設定、購物車內容等。</li>
</ul>
</li>
<li><p><strong>必要性 Cookie（Strictly Necessary Cookies）</strong>  </p>
<ul>
<li>維持網站基本運作所需，例如登入認證、網頁導航等，通常無法被關閉。</li>
</ul>
</li>
<li><p><strong>分析型 Cookie（Analytical&#x2F;Performance Cookies）</strong>  </p>
<ul>
<li>用於收集網站流量數據，分析使用者行為，幫助網站優化，例如 Google Analytics。</li>
</ul>
</li>
<li><p><strong>廣告追蹤 Cookie（Advertising&#x2F;Targeting Cookies）</strong>  </p>
<ul>
<li>用於追蹤使用者瀏覽行為，以提供個人化廣告或推薦內容。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、依存放時間分類："><a href="#二、依存放時間分類：" class="headerlink" title="二、依存放時間分類："></a>二、依存放時間分類：</h3><ol>
<li><p><strong>暫時性 Cookie（Session Cookies）</strong>  </p>
<ul>
<li>只在<code>使用者開啟網頁期間有效</code>，<code>關閉瀏覽器後即刪除</code>。</li>
</ul>
</li>
<li><p><strong>永久性 Cookie（Persistent Cookies）</strong>  </p>
<ul>
<li>設定到期日期，存放於使用者裝置上，保存時間較長，即使關閉瀏覽器也不會刪除，<code>直到設定的到期日或手動刪除</code>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、依來源分類："><a href="#三、依來源分類：" class="headerlink" title="三、依來源分類："></a>三、依來源分類：</h3><ol>
<li><p><strong>第一方 Cookie（First-party Cookies）</strong>  </p>
<ul>
<li>由<code>使用者瀏覽的網站</code>所設定，通常用於<code>記錄該網站上的互動紀錄</code>。</li>
</ul>
</li>
<li><p><strong>第三方 Cookie（Third-party Cookies）</strong>  </p>
<ul>
<li>由非該網站的<code>第三方</code>（如廣告商）設定，用於<code>跨網站追蹤使用者行為</code>，以<code>推送廣告</code>等。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、特殊類型："><a href="#四、特殊類型：" class="headerlink" title="四、特殊類型："></a>四、特殊類型：</h3><ol>
<li><p><strong>安全性 Cookie（Secure Cookies）</strong>  </p>
<ul>
<li>只能透過 <code>HTTPS</code> 傳輸，避免被攔截，主要保障敏感資料安全。</li>
</ul>
</li>
<li><p><strong>HttpOnly Cookie</strong>  </p>
<ul>
<li>僅限伺服器端存取，JavaScript 無法讀取，用於防範 <code>XSS</code> 攻擊。</li>
</ul>
</li>
<li><p><strong>SameSite Cookie</strong>  </p>
<ul>
<li>限制跨站請求攜帶 Cookie，減少 <code>CSRF</code> 攻擊風險，值可設為：</li>
<li><code>Strict</code>：禁止跨站請求攜帶 Cookie。</li>
<li><code>Lax</code>：部分允許，如從第三方網站點擊連結進來時可帶 Cookie。</li>
<li><code>None</code>：允許跨站攜帶，但須配合 Secure。</li>
</ul>
</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>這些分類會依需求搭配使用，例如一個「<code>必要性第一方暫時性 Cookie</code>」可能用於維護<code>登入和操作狀態</code>；一個「<code>第三方廣告追蹤永久性 Cookie</code>」則可能用於<code>跨網站顯示個人化廣告</code>。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>前端渲染模式入門教學筆記：CSR、SSR、SSG、ISR、DPR | 學習筆記</title>
    <url>/2024/12/12/learning-notes-csr-ssr-ssg-isr-dpr-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隨著前端框架如 React、Vue、Next.js、Nuxt 的普及，網站渲染方式也變得更加多樣化。不再只是單純地將 HTML 靜態輸出，開發者可依據產品需求選擇合適的渲染模式，如 CSR（Client Side Rendering）、SSR（Server Side Rendering）、SSG（Static Site Generation）、ISR（Incremental Static Regeneration）和 DPR（Distributed Persistent Rendering）。這些策略在效能、SEO、使用者體驗與部署維運上各有優劣。</p>
<p>本篇將簡明扼要介紹這些渲染方式的基本概念、特性差異與適用情境，並透過簡單範例說明。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>CSR（Client Side Rendering）</strong></p>
<ul>
<li>完整渲染交由瀏覽器執行</li>
<li>初始速度慢但互動性高</li>
<li>適合 SPA 應用與登入後系統</li>
</ul>
</li>
<li><p><strong>SSR（Server Side Rendering）</strong></p>
<ul>
<li>首次請求由伺服器生成 HTML</li>
<li>較佳的 SEO 與初次載入速度</li>
<li>適合需要即時資料更新與 SEO 的網站</li>
</ul>
</li>
<li><p><strong>SSG（Static Site Generation）</strong></p>
<ul>
<li>編譯階段預先產出 HTML</li>
<li>非常快、可搭配 CDN 快取</li>
<li>適合內容固定或更新頻率低的網站</li>
</ul>
</li>
<li><p><strong>ISR（Incremental Static Regeneration）</strong></p>
<ul>
<li>結合 SSG 和 SSR 優勢</li>
<li>預先生成 + 背景重新生成</li>
<li>適合部份動態又希望維持快取效能的頁面</li>
</ul>
</li>
<li><p><strong>DPR（Distributed Persistent Rendering）</strong></p>
<ul>
<li>通常指 Vercel、Netlify 的延遲生成與儲存機制</li>
<li>第一次請求時產生頁面並儲存供後續使用</li>
<li>可視為 ISR 的延伸架構</li>
</ul>
</li>
</ul>
<hr>
<h2 id="各種渲染方式概念與範例"><a href="#各種渲染方式概念與範例" class="headerlink" title="各種渲染方式概念與範例"></a>各種渲染方式概念與範例</h2><h3 id="1-Client-Side-Rendering（CSR）"><a href="#1-Client-Side-Rendering（CSR）" class="headerlink" title="1. Client Side Rendering（CSR）"></a>1. Client Side Rendering（CSR）</h3><p><strong>概念：</strong><br>網站載入時只傳送一個空的 HTML 檔案和 JavaScript 程式，資料由瀏覽器下載後執行渲染。常見於 React、Vue 等 SPA 應用。</p>
<p><strong>優點：</strong></p>
<ul>
<li>使用者體驗流暢，適合高度互動介面</li>
<li>遷移頁面不需重新載入</li>
</ul>
<p><strong>缺點：</strong></p>
<ul>
<li>首次載入慢，對 SEO 不利</li>
<li>如果 JS 載入失敗，畫面會呈現空白</li>
</ul>
<p><strong>範例：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React CSR 應用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(container);</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>部署後的 HTML 初始如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-Server-Side-Rendering（SSR）"><a href="#2-Server-Side-Rendering（SSR）" class="headerlink" title="2. Server Side Rendering（SSR）"></a>2. Server Side Rendering（SSR）</h3><p><strong>概念：</strong><br>每次請求時，伺服器動態產生完整 HTML 頁面並傳給瀏覽器。Next.js 等框架支援 SSR。</p>
<p><strong>優點：</strong></p>
<ul>
<li>快速呈現內容，對 SEO 友善</li>
<li>可根據請求產出客製化內容</li>
</ul>
<p><strong>缺點：</strong></p>
<ul>
<li>每次請求都需重新計算，伺服器壓力大</li>
<li>開發與維護相對複雜</li>
</ul>
<p><strong>範例（Next.js）</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-Static-Site-Generation（SSG）"><a href="#3-Static-Site-Generation（SSG）" class="headerlink" title="3. Static Site Generation（SSG）"></a>3. Static Site Generation（SSG）</h3><p><strong>概念：</strong><br>在建置階段預先產生所有 HTML 頁面，部署後為靜態檔案，可用 CDN 快取。</p>
<p><strong>優點：</strong></p>
<ul>
<li>載入速度快</li>
<li>可用於免費 CDN，例如 GitHub Pages、Vercel</li>
</ul>
<p><strong>缺點：</strong></p>
<ul>
<li>無法處理頻繁變動的資料</li>
<li>若內容變更需重新部署</li>
</ul>
<p><strong>範例（Next.js）</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-Incremental-Static-Regeneration（ISR）"><a href="#4-Incremental-Static-Regeneration（ISR）" class="headerlink" title="4. Incremental Static Regeneration（ISR）"></a>4. Incremental Static Regeneration（ISR）</h3><p><strong>概念：</strong><br>在 SSG 基礎上增加「背景重新建置」能力。首次請求使用舊版頁面，背景靜默更新最新版本。</p>
<p><strong>優點：</strong></p>
<ul>
<li>同享 SSG 的快取效能</li>
<li>同時具備動態更新能力</li>
</ul>
<p><strong>缺點：</strong></p>
<ul>
<li>實作較複雜，需要平台支援（如 Next.js on Vercel）</li>
</ul>
<p><strong>範例（Next.js）</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123; data &#125;,</span><br><span class="line">    <span class="attr">revalidate</span>: <span class="number">60</span>, <span class="comment">// 每 60 秒可重新生成一次</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-Distributed-Persistent-Rendering（DPR）"><a href="#5-Distributed-Persistent-Rendering（DPR）" class="headerlink" title="5. Distributed Persistent Rendering（DPR）"></a>5. Distributed Persistent Rendering（DPR）</h3><p><strong>概念：</strong><br>首度請求頁面時即時產生內容並儲存於分散式快取（如 CDN 或 edge network），後續請求使用快取內容。</p>
<p><strong>優點：</strong></p>
<ul>
<li>初次請求稍慢，但之後快如 SSG</li>
<li>不需事先建構所有頁面（省資源）</li>
</ul>
<p><strong>缺點：</strong></p>
<ul>
<li>首次請求延遲較高</li>
<li>需仰賴平台（如 Vercel 的 On-Demand ISR）</li>
</ul>
<p><strong>範例：</strong><br>在 Next.js 中使用 <code>revalidate: &#39;on-demand&#39;</code> 需搭配 Vercel 平台設定。</p>
<hr>
<h2 id="各渲染方式比較表"><a href="#各渲染方式比較表" class="headerlink" title="各渲染方式比較表"></a>各渲染方式比較表</h2><table>
<thead>
<tr>
<th>渲染方式</th>
<th>初次速度</th>
<th>SEO 友善</th>
<th>動態內容</th>
<th>開發複雜度</th>
<th>適用場景</th>
</tr>
</thead>
<tbody><tr>
<td>CSR</td>
<td>慢</td>
<td>差</td>
<td>好</td>
<td>低</td>
<td>SPA、登入後介面</td>
</tr>
<tr>
<td>SSR</td>
<td>中等</td>
<td>好</td>
<td>好</td>
<td>中</td>
<td>部落格、商品頁</td>
</tr>
<tr>
<td>SSG</td>
<td>快</td>
<td>好</td>
<td>差</td>
<td>中</td>
<td>文件、靜態頁面</td>
</tr>
<tr>
<td>ISR</td>
<td>快</td>
<td>好</td>
<td>中</td>
<td>高</td>
<td>新聞、部份變動頁面</td>
</tr>
<tr>
<td>DPR</td>
<td>首次慢後快</td>
<td>好</td>
<td>好</td>
<td>高</td>
<td>海量頁面動態生成</td>
</tr>
</tbody></table>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>選擇正確的渲染模式，取決於你的網站目標、使用情境與部署資源。對於希望提升初次載入速度與 SEO 的內容網站，SSR 或 SSG 是合適的選擇；若偏重互動性或使用者登入後操作，CSR 更適合。對於需要兼顧靜態快取與動態更新的情境，ISR 或 DPR 提供了良好的平衡。</p>
]]></content>
      <tags>
        <tag>CSR</tag>
        <tag>SSR</tag>
        <tag>SSG</tag>
        <tag>ISR</tag>
        <tag>DPR</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Animation 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-css-animation-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在現代網頁開發中，動畫是一種強而有力的表現手法，能提升使用者體驗，使介面更加生動、有趣。相比 JavaScript，CSS Animation 提供一種更簡潔、性能更佳的動畫解法，尤其適合製作 UI 中的小型動畫效果。</p>
<p>本篇教學筆記將介紹 CSS Animation 的基本語法、常見屬性與一個實際範例，幫助你快速上手。</p>
<hr>
<h2 id="為什麼使用-CSS-Animation？"><a href="#為什麼使用-CSS-Animation？" class="headerlink" title="為什麼使用 CSS Animation？"></a>為什麼使用 CSS Animation？</h2><p>CSS Animation 的優點：</p>
<ol>
<li><strong>簡單易用</strong>：使用純 CSS 撰寫動畫，不需額外 JavaScript。</li>
<li><strong>效能佳</strong>：瀏覽器針對 CSS Animation 做過優化，效能較好。</li>
<li><strong>語意清楚</strong>：樣式與行為分離，程式碼結構清晰。</li>
</ol>
<hr>
<h2 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h2><p>CSS 動畫的基本概念分為兩大部分：</p>
<ol>
<li><code>@keyframes</code>：定義動畫的每個階段（狀態）</li>
<li>動畫屬性（如 <code>animation-name</code>、<code>animation-duration</code> 等）：設定動畫的名稱、時間、重複次數等</li>
</ol>
<h3 id="1-定義動畫步驟：-keyframes"><a href="#1-定義動畫步驟：-keyframes" class="headerlink" title="1. 定義動畫步驟：@keyframes"></a>1. 定義動畫步驟：<code>@keyframes</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> fadeIn &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用百分比表示中間過程：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> moveBox &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-套用動畫屬性"><a href="#2-套用動畫屬性" class="headerlink" title="2. 套用動畫屬性"></a>2. 套用動畫屬性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: fadeIn;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用簡寫語法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: fadeIn <span class="number">1s</span> ease-in-out <span class="number">0s</span> <span class="number">1</span> forwards;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="常見屬性說明"><a href="#常見屬性說明" class="headerlink" title="常見屬性說明"></a>常見屬性說明</h2><table>
<thead>
<tr>
<th>屬性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>animation-name</code></td>
<td>對應的 <code>@keyframes</code> 名稱</td>
</tr>
<tr>
<td><code>animation-duration</code></td>
<td>動畫持續時間（如 <code>2s</code>、<code>500ms</code>）</td>
</tr>
<tr>
<td><code>animation-delay</code></td>
<td>動畫延遲時間</td>
</tr>
<tr>
<td><code>animation-iteration-count</code></td>
<td>播放次數（數字或 <code>infinite</code>）</td>
</tr>
<tr>
<td><code>animation-direction</code></td>
<td>播放方向（如 <code>normal</code>、<code>reverse</code>、<code>alternate</code>）</td>
</tr>
<tr>
<td><code>animation-timing-function</code></td>
<td>動畫速度曲線（如 <code>linear</code>、<code>ease</code>、<code>ease-in-out</code>、<code>cubic-bezier</code>）</td>
</tr>
<tr>
<td><code>animation-fill-mode</code></td>
<td>動畫結束後元素狀態（如 <code>none</code>、<code>forwards</code>、<code>backwards</code>、<code>both</code>）</td>
</tr>
</tbody></table>
<hr>
<h2 id="實際範例：淡入移動效果"><a href="#實際範例：淡入移動效果" class="headerlink" title="實際範例：淡入移動效果"></a>實際範例：淡入移動效果</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Animation 入門範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animated-box&quot;</span>&gt;</span>Hello CSS Animation<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS（style-css）"><a href="#CSS（style-css）" class="headerlink" title="CSS（style.css）"></a>CSS（style.css）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animated-box</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4a90e2</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">animation</span>: fadeSlideIn <span class="number">1s</span> ease-out forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> fadeSlideIn &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果說明"><a href="#效果說明" class="headerlink" title="效果說明"></a>效果說明</h3><p>當頁面載入時，<code>.animated-box</code> 元素會從下方淡入移動到原位。這種效果常用於元件出現時的動畫，例如：卡片載入、提示訊息出現等。</p>
<hr>
<h2 id="進階補充"><a href="#進階補充" class="headerlink" title="進階補充"></a>進階補充</h2><h3 id="多個動畫階段"><a href="#多個動畫階段" class="headerlink" title="多個動畫階段"></a>多個動畫階段</h3><p>可以使用百分比定義多個狀態：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> bounce &#123;</span><br><span class="line">  <span class="number">0%</span>   &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>); &#125;</span><br><span class="line">  <span class="number">30%</span>  &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50px</span>); &#125;</span><br><span class="line">  <span class="number">50%</span>  &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>); &#125;</span><br><span class="line">  <span class="number">70%</span>  &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">25px</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搭配-hover-做互動動畫"><a href="#搭配-hover-做互動動畫" class="headerlink" title="搭配 hover 做互動動畫"></a>搭配 <code>hover</code> 做互動動畫</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>雖然這是使用 <code>transition</code>，但若需要更多控制，就可以改用 <code>animation</code>。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>CSS Animation 提供一套簡潔的方式，能有效為網頁增添動態效果。適合使用在進場動畫、提示動畫、狀態變化等場合。若需求單純、動畫步驟不複雜，建議優先使用 CSS Animation 來取代 JavaScript，提升效能與維護性。</p>
<p>如果你剛開始學前端，建議從觀察現有網站的動畫效果出發，試著模仿並自己實作，會對 CSS Animation 有更深的理解。下一步你可以學習 <code>transition</code>、<code>transform</code> 與 <code>cubic-bezier</code>，讓動畫更自然、細緻。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>css</tag>
        <tag>Animation</tag>
        <tag>transition</tag>
        <tag>transform</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Flexbox align-items 和 align-content 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-css-flexbox-align-items-align-content-garden-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 CSS Flexbox 和 Grid 佈局中，<code>align-items</code> 和 <code>align-content</code> 兩者都與「對齊」有關，但適用的情境不同（單行 vs 多行）：</p>
<h2 id="1-align-items"><a href="#1-align-items" class="headerlink" title="1. align-items"></a>1. <code>align-items</code></h2><ul>
<li>作用於<strong>單行內容</strong>（單行 Flexbox 或 Grid 容器內的項目）。</li>
<li>控制<strong>子元素</strong>在<strong>交叉軸（cross-axis）</strong>上的對齊方式。</li>
</ul>
<h3 id="常見值"><a href="#常見值" class="headerlink" title="常見值"></a><strong>常見值</strong></h3><table>
<thead>
<tr>
<th>值</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>stretch</code></td>
<td>預設值，子元素會拉伸填滿容器的交叉軸</td>
</tr>
<tr>
<td><code>flex-start</code></td>
<td>對齊交叉軸的起始點</td>
</tr>
<tr>
<td><code>flex-end</code></td>
<td>對齊交叉軸的結束點</td>
</tr>
<tr>
<td><code>center</code></td>
<td>置中對齊</td>
</tr>
<tr>
<td><code>baseline</code></td>
<td>以文字基線（baseline）對齊</td>
</tr>
</tbody></table>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a><strong>範例</strong></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 子元素在交叉軸上置中對齊 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <strong>效果</strong>：<code>item</code> 會在 <code>container</code> 的交叉軸（垂直方向）置中對齊。</p>
<hr>
<h2 id="2-align-content"><a href="#2-align-content" class="headerlink" title="2. align-content"></a>2. <code>align-content</code></h2><ul>
<li>作用於<strong>多行內容</strong>（當 <code>flex-wrap: wrap</code> 或 Grid 有多行時）。</li>
<li>控制<strong>整體行的對齊</strong>，而不是單個項目。</li>
</ul>
<h3 id="常見值-1"><a href="#常見值-1" class="headerlink" title="常見值"></a><strong>常見值</strong></h3><table>
<thead>
<tr>
<th>值</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>stretch</code></td>
<td>預設值，行會拉伸填滿容器</td>
</tr>
<tr>
<td><code>flex-start</code></td>
<td>行對齊交叉軸的起始點</td>
</tr>
<tr>
<td><code>flex-end</code></td>
<td>行對齊交叉軸的結束點</td>
</tr>
<tr>
<td><code>center</code></td>
<td>行置中對齊</td>
</tr>
<tr>
<td><code>space-between</code></td>
<td>第一行靠起始點，最後一行靠結束點，其他行平均分布</td>
</tr>
<tr>
<td><code>space-around</code></td>
<td>每行之間有相等的間距</td>
</tr>
<tr>
<td><code>space-evenly</code></td>
<td>每行之間及兩側間距相等</td>
</tr>
</tbody></table>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a><strong>範例</strong></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: center; <span class="comment">/* 整體行群組在交叉軸上置中 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：當 <code>.container</code> 高度足夠時，多行 <code>.item</code> 會整體置中排列。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h2><table>
<thead>
<tr>
<th>屬性</th>
<th>影響對象</th>
<th>適用於</th>
<th>主要功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>align-items</code></td>
<td>子元素</td>
<td>單行（未換行）</td>
<td>控制子元素在交叉軸上的對齊</td>
</tr>
<tr>
<td><code>align-content</code></td>
<td>整體行</td>
<td>多行（<code>flex-wrap: wrap</code>）</td>
<td>控制多行的整體對齊</td>
</tr>
</tbody></table>
<p>如果容器內只有<strong>一行</strong>，<code>align-content</code> 通常不會有影響，這時候應該使用 <code>align-items</code>。</p>
<p>需要 <code>align-content</code> 發揮作用時，請確保：</p>
<ol>
<li>容器有 <code>flex-wrap: wrap;</code>（多行）</li>
<li>容器有足夠的<strong>高度</strong>（不然內容會自動填滿）</li>
</ol>
]]></content>
      <tags>
        <tag>Grid Garden</tag>
        <tag>Grid</tag>
        <tag>align-items</tag>
        <tag>align-content</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Flexbox Froggy 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-css-flexbox-froggy-tutorial/</url>
    <content><![CDATA[<h1 id="1-Flexbox-簡介"><a href="#1-Flexbox-簡介" class="headerlink" title="1. Flexbox 簡介"></a>1. Flexbox 簡介</h1><p><code>Flexbox</code>（Flexible Box Layout）是一種 CSS3 佈局模式，專門用來設計一維的彈性佈局，適用於水平或垂直排列元素，使網頁排版更加靈活且易於維護。</p>
<p>Flexbox Froggy 透過小青蛙過河遊戲化方式去介紹 Flexbox 使用方式：</p>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>Welcome to Flexbox Froggy, a game where you help Froggy and friends by writing CSS code! Guide this frog to the lilypad on the right by using the justify-content property, which aligns items horizontally and accepts the following values:</p>
<p>flex-start: Items align to the left side of the container.<br>flex-end: Items align to the right side of the container.<br>center: Items align at the center of the container.<br>space-between: Items display with equal spacing between them.<br>space-around: Items display with equal spacing around them.<br>For example, justify-content: flex-end; will move the frog to the right. </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>Use justify-content again to help these frogs get to their lilypads. Remember that this CSS property aligns items horizontally and accepts the following values:</p>
<p><code>flex-start</code>: Items align to the left side of the container.<br><code>flex-end</code>: Items align to the right side of the container.<br><code>center</code>: Items align at the center of the container.<br><code>space-between</code>: Items display with equal spacing between them.<br><code>space-around</code>: Items display with equal spacing around them.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>Help all three frogs find their lilypads just by using justify-content. This time, the lilypads have lots of space all around them.</p>
<p>If you find yourself forgetting the possible values for a property, you can click on the property name to view them. Try clicking on justify-content.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p>Now the lilypads on the edges have drifted to the shore, increasing the space between them. Use justify-content. This time, the lilypads have equal spacing between them.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><p>Now use align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:</p>
<p><code>flex-start</code>: Items align to the top of the container.<br><code>flex-end</code>: Items align to the bottom of the container.<br><code>center</code>: Items align at the vertical center of the container.<br><code>baseline</code>: Items display at the baseline of the container.<br><code>stretch</code>: Items are stretched to fit the container.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><p>Lead the frog to the center of the pond using a combination of justify-content and align-items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><p>The frogs need to cross the pond again, this time for some lilypads with plenty of space around them. Use a combination of justify-content and align-items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><p>The frogs need to get in the same order as their lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:</p>
<p><code>row</code>: Items are placed the same as the text direction.<br><code>row-reverse</code>: Items are placed opposite to the text direction.<br><code>column</code>: Items are placed top to bottom.<br><code>column-reverse</code>: Items are placed bottom to top.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><p>Help the frogs find their column of lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:</p>
<p><code>row</code>: Items are placed the same as the text direction.<br><code>row-reverse</code>: Items are placed opposite to the text direction.<br><code>column</code>: Items are placed top to bottom.<br><code>column-reverse</code>: Items are placed bottom to top.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><p>Help the frogs get to their own lilypads. Although they seem close, it will take both flex-direction and justify-content to get them there.</p>
<p>Notice that when you set the direction to a reversed row or column, start and end are also reversed.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><p>Help the frogs find their lilypads using flex-direction and justify-content.</p>
<p>Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><p>Help the frogs find their lilypads using flex-direction and justify-content.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><p>Help the frogs find their lilypads using flex-direction, justify-content, and align-items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><p>Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value <code>(-2, -1, 0, 1, 2)</code>.</p>
<p>Use the order property to reorder the frogs according to their lilypads.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><p>Use the order property to send the red frog to his lilypad.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><p>Another property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><p>Combine order with align-self to help the frogs to their destinations.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><p>Oh no! The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:</p>
<p>nowrap: Every item is fit to a single line.<br>wrap: Items wrap around to additional lines.<br>wrap-reverse: Items wrap around to additional lines in reverse.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><p>Help this army of frogs form three orderly columns using a combination of flex-direction and flex-wrap.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><p>The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of the two properties separated by a space.</p>
<p>For example, you can use flex-flow: row wrap to set rows and wrap them.</p>
<p>Try using flex-flow to repeat the previous level.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: column wrap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-21"><a href="#Level-21" class="headerlink" title="Level 21"></a>Level 21</h2><p>The frogs are spread all over the pond, but the lilypads are bunched at the top. You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:</p>
<p><code>flex-start</code>: Lines are packed at the top of the container.<br><code>flex-end</code>: Lines are packed at the bottom of the container.<br><code>center</code>: Lines are packed at the vertical center of the container.<br><code>space-between</code>: Lines display with equal spacing between them.<br><code>space-around</code>: Lines display with equal spacing around them.<br><code>stretch</code>: Lines are stretched to fit the container.<br>This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-22"><a href="#Level-22" class="headerlink" title="Level 22"></a>Level 22</h2><p>Now the current has bunched the lilypads at the bottom. Use align-content to guide the frogs there.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-23"><a href="#Level-23" class="headerlink" title="Level 23"></a>Level 23</h2><p>The frogs have had a party, but it is time to go home. Use a combination of flex-direction and align-content to get them to their lilypads.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-24"><a href="#Level-24" class="headerlink" title="Level 24"></a>Level 24</h2><p>Bring the frogs home one last time by using the CSS properties you’ve learned:</p>
<p><code>justify-content</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>align-items</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>flex-direction</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>order</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>align-self</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>flex-wrap</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>flex-flow</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>align-content</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://flexboxfroggy.com/">flexboxfroggy</a></li>
</ol>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>Flexbox Froggy</tag>
        <tag>Flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Flexbox 網頁排版技巧入門教學筆記 | 學習筆記</title>
    <url>/2024/11/14/learning-notes-css-flexbox-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-Flexbox-簡介"><a href="#1-Flexbox-簡介" class="headerlink" title="1. Flexbox 簡介"></a>1. Flexbox 簡介</h2><p><code>Flexbox</code>（Flexible Box Layout）是一種 CSS3 佈局模式，專門用來設計一維的彈性佈局，適用於水平或垂直排列元素，使網頁排版更加靈活且易於維護。</p>
<h3 id="1-1-為何使用-Flexbox？"><a href="#1-1-為何使用-Flexbox？" class="headerlink" title="1.1 為何使用 Flexbox？"></a>1.1 為何使用 Flexbox？</h3><ul>
<li><strong>彈性調整</strong>：元素可根據可用空間動態調整大小。</li>
<li><strong>簡化佈局</strong>：減少對 <code>float</code>、<code>inline-block</code> 及 <code>position</code> 依賴。</li>
<li><strong>更好的對齊方式</strong>：內建強大的對齊與分佈控制。</li>
</ul>
<h2 id="2-Flexbox-基本概念"><a href="#2-Flexbox-基本概念" class="headerlink" title="2. Flexbox 基本概念"></a>2. Flexbox 基本概念</h2><p>Flexbox 佈局的核心概念是 <strong>容器（container）</strong> 和 <strong>子項目（items）</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦對容器使用 <code>display: flex</code>，其內部的子元素將自動變成 Flex 子項目，並受 Flex 佈局影響。</p>
<h2 id="3-Flex-容器屬性"><a href="#3-Flex-容器屬性" class="headerlink" title="3. Flex 容器屬性"></a>3. Flex 容器屬性</h2><h3 id="3-1-flex-direction"><a href="#3-1-flex-direction" class="headerlink" title="3.1 flex-direction"></a>3.1 <code>flex-direction</code></h3><p>決定主軸（main axis）方向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row; <span class="comment">/* 預設值，水平排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse; <span class="comment">/* 反向水平排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column; <span class="comment">/* 垂直排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/* 反向垂直排列 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-justify-content"><a href="#3-2-justify-content" class="headerlink" title="3.2 justify-content"></a>3.2 <code>justify-content</code></h3><p>控制子項目在主軸上的對齊方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start; <span class="comment">/* 預設，從左到右排列 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end; <span class="comment">/* 靠右排列 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/* 置中排列 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* 兩端對齊，間距平均分布 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around; <span class="comment">/* 子項目兩側有相等的間距 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly; <span class="comment">/* 所有間距均等 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-align-items"><a href="#3-3-align-items" class="headerlink" title="3.3 align-items"></a>3.3 <code>align-items</code></h3><p>控制子項目在交叉軸（cross axis）上的對齊方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; <span class="comment">/* 靠起始位置對齊 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: flex-end; <span class="comment">/* 靠末端對齊 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 垂直置中對齊 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: stretch; <span class="comment">/* 預設，撐滿高度 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: baseline; <span class="comment">/* 依據文本基線對齊 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-align-content"><a href="#3-4-align-content" class="headerlink" title="3.4 align-content"></a>3.4 <code>align-content</code></h3><p>適用於多行佈局，控制多行之間的間距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Flex-子項目屬性"><a href="#4-Flex-子項目屬性" class="headerlink" title="4. Flex 子項目屬性"></a>4. Flex 子項目屬性</h2><h3 id="4-1-flex-grow"><a href="#4-1-flex-grow" class="headerlink" title="4.1 flex-grow"></a>4.1 <code>flex-grow</code></h3><p>設定子項目如何分配多餘空間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="comment">/* 所有子項目平均分配空間 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-flex-shrink"><a href="#4-2-flex-shrink" class="headerlink" title="4.2 flex-shrink"></a>4.2 <code>flex-shrink</code></h3><p>控制子項目如何縮小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">/* 防止縮小 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-flex-basis"><a href="#4-3-flex-basis" class="headerlink" title="4.3 flex-basis"></a>4.3 <code>flex-basis</code></h3><p>設定子項目的初始大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">200px</span>; <span class="comment">/* 設定初始寬度或高度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-flex"><a href="#4-4-flex" class="headerlink" title="4.4 flex"></a>4.4 <code>flex</code></h3><p>綜合 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">100px</span>; <span class="comment">/* grow, shrink, basis */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-Flexbox-常見佈局範例"><a href="#5-Flexbox-常見佈局範例" class="headerlink" title="5. Flexbox 常見佈局範例"></a>5. Flexbox 常見佈局範例</h2><h3 id="5-1-水平置中"><a href="#5-1-水平置中" class="headerlink" title="5.1 水平置中"></a>5.1 水平置中</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-等寬三欄佈局"><a href="#5-2-等寬三欄佈局" class="headerlink" title="5.2 等寬三欄佈局"></a>5.2 等寬三欄佈局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-兩欄固定-自適應"><a href="#5-3-兩欄固定-自適應" class="headerlink" title="5.3 兩欄固定 + 自適應"></a>5.3 兩欄固定 + 自適應</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>; <span class="comment">/* 固定 200px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 佔滿剩餘空間 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-結論"><a href="#6-結論" class="headerlink" title="6. 結論"></a>6. 結論</h2><p>Flexbox 是一種強大且直觀的 CSS 佈局方式，能夠解決傳統排版難題，使開發者能夠輕鬆實現響應式佈局與對齊方式。本篇筆記介紹了 Flexbox 的基本屬性及常見佈局範例，進一步學習可以研究 CSS Grid 和更進階的排版技巧。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>Flexbox</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS font-size 單位介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/12/14/learning-notes-css-font-size-intro-tutorial/</url>
    <content><![CDATA[<p>在 CSS 中，<code>px</code>、<code>rem</code>、<code>em</code> 和 <code>vh</code> 都可以用來設定 <code>font-size</code>，但它們的用途和適用場景不同。以下是詳細解析與使用建議：</p>
<hr>
<h3 id="1️-px（像素，固定單位）"><a href="#1️-px（像素，固定單位）" class="headerlink" title="1️. px（像素，固定單位）"></a>1️. <strong><code>px</code>（像素，固定單位）</strong></h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li>絕對單位，與螢幕解析度無關。</li>
<li>不會受父元素影響，設定多少就是多少。</li>
</ul>
<h4 id="適用場景"><a href="#適用場景" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p>精確控制字體大小，例如：</p>
<ul>
<li><strong>Logo、按鈕字體</strong></li>
<li><strong>小型 UI 元素（如標籤、提示訊息）</strong></li>
<li><strong>避免字體大小變動的情境</strong></li>
</ul>
<h4 id="範例"><a href="#範例" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">32px</span>; &#125;  <span class="comment">/* 確保標題大小為 32px */</span></span><br><span class="line"><span class="selector-tag">button</span> &#123; <span class="attribute">font-size</span>: <span class="number">14px</span>; &#125;  <span class="comment">/* UI 按鈕文字固定 14px */</span></span><br></pre></td></tr></table></figure>

<p><strong>何時避免？</strong></p>
<ul>
<li>不利於 <strong>響應式設計</strong>，無法根據使用者的設定（如無障礙放大字體）自適應。</li>
</ul>
<hr>
<h3 id="2️-rem（Root-EM，根元素相對單位）"><a href="#2️-rem（Root-EM，根元素相對單位）" class="headerlink" title="2️. rem（Root EM，根元素相對單位）"></a>2️. <strong><code>rem</code>（Root EM，根元素相對單位）</strong></h3><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li>參照 <strong><code>html</code> 根元素</strong> 的 <code>font-size</code> 來計算。</li>
<li>預設 <code>html</code> 的 <code>font-size</code> 為 <code>16px</code>（可透過 <code>html &#123; font-size: 10px; &#125;</code> 調整）。</li>
<li>可用於全站統一調整字體大小。</li>
</ul>
<h4 id="適用場景-1"><a href="#適用場景-1" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p><strong>全站一致字體設計</strong>，方便調整：</p>
<ul>
<li><strong>段落、標題（H1-H6）</strong></li>
<li><strong>文章內容</strong></li>
<li><strong>大部分標準排版</strong></li>
</ul>
<h4 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;  <span class="comment">/* 設定根元素大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.5rem</span>; &#125;  <span class="comment">/* 16px * 1.5 = 24px */</span></span><br></pre></td></tr></table></figure>
<p>只要改變 <code>html</code> 的 <code>font-size</code>，所有 <code>rem</code> 設定的字體大小都會一起調整。</p>
<p><strong>何時避免？</strong></p>
<ul>
<li><strong>局部組件內縮放時</strong>，可能需要用 <code>em</code> 而不是 <code>rem</code>。</li>
</ul>
<hr>
<h3 id="3️-em（相對單位）"><a href="#3️-em（相對單位）" class="headerlink" title="3️. em（相對單位）"></a>3️. <strong><code>em</code>（相對單位）</strong></h3><h4 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li>相對於 <strong>父元素的 <code>font-size</code></strong> 來計算。</li>
<li>父層字體大小變大，子層 <code>em</code> 設定的大小也會跟著變。</li>
</ul>
<h4 id="適用場景-2"><a href="#適用場景-2" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p><strong>組件內部的字體調整</strong>，適用於：</p>
<ul>
<li><strong>按鈕、卡片、區塊內的標題</strong></li>
<li><strong>排版時要根據父層調整的字體</strong></li>
<li><strong>不同區域需要稍微變大的字體</strong></li>
</ul>
<h4 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;  <span class="comment">/* 設定父層大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125;  <span class="comment">/* 20px * 1.2 = 24px */</span></span><br></pre></td></tr></table></figure>
<p>當 <code>.container</code> <code>font-size</code> 改變時，內部 <code>p</code> 的大小也會跟著變。</p>
<p><strong>何時避免？</strong></p>
<ul>
<li>多層 <code>em</code> 巢狀結構時，字體大小可能會變得難以控制。</li>
</ul>
<hr>
<h3 id="4️-vh（視窗高度單位）"><a href="#4️-vh（視窗高度單位）" class="headerlink" title="4️. vh（視窗高度單位）"></a>4️. <strong><code>vh</code>（視窗高度單位）</strong></h3><h4 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li><code>1vh</code> 代表 **視窗高度的 1%**。</li>
<li><strong>適合動態字體大小</strong>，可以讓字體隨視窗大小變化。</li>
</ul>
<h4 id="適用場景-3"><a href="#適用場景-3" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p><strong>全螢幕標題或 Hero 文字</strong>：</p>
<ul>
<li><strong>首頁橫幅標題</strong></li>
<li><strong>全螢幕展示頁面</strong></li>
<li><strong>需隨裝置變化的動態字體</strong></li>
</ul>
<h4 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">10vh</span>; &#125;  <span class="comment">/* 視窗高度的 10% */</span></span><br></pre></td></tr></table></figure>
<p>當視窗縮小，字體會自動變小。</p>
<p><strong>何時避免？</strong></p>
<ul>
<li>文字變化太大時，可能導致小螢幕閱讀困難。</li>
</ul>
<hr>
<h2 id="如何選擇？"><a href="#如何選擇？" class="headerlink" title="如何選擇？"></a><strong>如何選擇？</strong></h2><table>
<thead>
<tr>
<th>單位</th>
<th>依據</th>
<th>優點</th>
<th>缺點</th>
<th>適用場景</th>
</tr>
</thead>
<tbody><tr>
<td><code>px</code></td>
<td>固定大小</td>
<td>精確控制、不變動</td>
<td>無法適應不同裝置</td>
<td>Logo、按鈕、小 UI 元件</td>
</tr>
<tr>
<td><code>rem</code></td>
<td>根元素大小</td>
<td>可全站統一調整</td>
<td>父層無影響，局部調整時需考慮</td>
<td>文章內容、標題、標準排版</td>
</tr>
<tr>
<td><code>em</code></td>
<td>父層大小</td>
<td>組件內可相對調整</td>
<td>巢狀結構時較難控制</td>
<td>按鈕、卡片區塊內標題</td>
</tr>
<tr>
<td><code>vh</code></td>
<td>視窗高度</td>
<td>可隨視窗變化</td>
<td>小螢幕可能太小、大螢幕可能過大</td>
<td>全螢幕標題、動態字體</td>
</tr>
</tbody></table>
<hr>
<h2 id="最佳實踐"><a href="#最佳實踐" class="headerlink" title="最佳實踐"></a><strong>最佳實踐</strong></h2><p><strong>一般網站內容</strong></p>
<ul>
<li>使用 <code>rem</code> 設定主字體，確保一致性：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;  </span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1rem</span>; &#125;  <span class="comment">/* 16px */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">2rem</span>; &#125;  <span class="comment">/* 32px */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>局部 UI 組件</strong></p>
<ul>
<li>使用 <code>em</code>，確保字體相對變化：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123; <span class="attribute">font-size</span>: <span class="number">1em</span>; &#125;  <span class="comment">/* 依據父層大小 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>全螢幕標題</strong></p>
<ul>
<li>使用 <code>vh</code>，確保字體適應畫面：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hero-title</span> &#123; <span class="attribute">font-size</span>: <span class="number">8vh</span>; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>特殊 UI（固定大小）</strong></p>
<ul>
<li>使用 <code>px</code>，避免字體縮放：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123; <span class="attribute">font-size</span>: <span class="number">24px</span>; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h3><ul>
<li><strong>固定字體</strong> → <code>px</code></li>
<li><strong>全站一致性</strong> → <code>rem</code></li>
<li><strong>組件內相對縮放</strong> → <code>em</code></li>
<li><strong>視窗自適應</strong> → <code>vh</code></li>
</ul>
<p>若有特定的設計需求或專案需求，可以再根據需求細調合適的單位。</p>
]]></content>
      <tags>
        <tag>font-size</tag>
        <tag>px</tag>
        <tag>rem</tag>
        <tag>em</tag>
        <tag>vh</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid Garden 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-css-grid-garden-tutorial/</url>
    <content><![CDATA[<h1 id="1-Grid-簡介"><a href="#1-Grid-簡介" class="headerlink" title="1. Grid 簡介"></a>1. Grid 簡介</h1><p><code>Grid</code>（Grid Layout）是一種 CSS3 佈局模式，專門用來設計一維的彈性佈局，適用於水平或垂直排列元素，使網頁排版更加靈活且易於維護。</p>
<p>Grid Garden 透過花圃澆花遊戲化方式去介紹 Grid 使用方式</p>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>Welcome to Grid Garden, where you write CSS code to grow your carrot garden! Water only the areas that have carrots by using the grid-column-start property.</p>
<p>For example, grid-column-start: 3; will water the area starting at the 3rd vertical grid line, which is another way of saying the 3rd vertical border from the left in the grid.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>Uh oh, looks like weeds are growing in the corner of your garden. Use grid-column-start to poison them. Note that the weeds start at the 5th vertical grid line.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>When grid-column-start is used alone, the grid item by default will span exactly one column. However, you can extend the item across multiple columns by adding the grid-column-end property.</p>
<p>Using grid-column-end, water all of your carrots while avoiding the dirt. We don’t want to waste any water! Note that the carrots start at the 1st vertical grid line and end at the 4th.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p>When pairing grid-column-start and grid-column-end, you might assume that the end value has to be greater than the start value. But this turns out not the case!</p>
<p>Try setting grid-column-end to a value less than 5 to water your carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><p>If you want to count grid lines from the right instead of the left, you can give grid-column-start and grid-column-end negative values. For example, you can set it to -1 to specify the first grid line from the right.</p>
<p>Try setting grid-column-end to a negative value.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: -<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><p>Now try setting grid-column-start to a negative value.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><p>Instead of defining a grid item based on the start and end positions of the grid lines, you can define it based on your desired column width using the span keyword. Keep in mind that span only works with positive values.</p>
<p>For example, water these carrots with the rule grid-column-end: span 2;.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><p>Try using grid-column-end with the span keyword again to water your carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><p>You can also use the span keyword with grid-column-start to set your item’s width relative to the end position.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><p>Typing both grid-column-start and grid-column-end every time can get tiring. Fortunately, grid-column is a shorthand property that can accept both values at once, separated by a slash.</p>
<p>For example, grid-column: 2 &#x2F; 4; will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">4</span>/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><p>Try using grid-column to water these carrots. The span keyword also works with this shorthand property so give it a try!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>/<span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><p>One of the things that sets CSS grids apart from flexbox is that you can easily position items in two dimensions: columns and rows. grid-row-start works much like grid-column-start except along the vertical axis.</p>
<p>Use grid-row-start to water these carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><p>Now give the shorthand property grid-row a try.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">3</span>/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><p>Use grid-column and grid-row at the same time to set position in both dimensions.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><p>You can also use grid-column and grid-row together to span larger areas within the grid. Give it a try!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>/<span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><p>If typing out both grid-column and grid-row is too much for you, there’s yet another shorthand for that. grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.</p>
<p>One example of this would be grid-area: 1 &#x2F; 1 &#x2F; 3 &#x2F; 6;.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">2</span> / <span class="number">4</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><p>How about multiple items? You can overlap them without any trouble. Use grid-area to define a second area that covers all of the unwatered carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">4</span> / <span class="number">6</span> / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water-2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">3</span> / <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><p>If grid items aren’t explicitly placed with grid-area, grid-column, grid-row, etc., they are automatically placed according to their order in the source code. We can override this using the order property, which is one of the advantages of grid over table-based layout.</p>
<p>By default, all grid items have an order of 0, but this can be set to any positive or negative value, similar to z-index.</p>
<p>Right now, the carrots in the second column are being poisoned and the weeds in the last column are being watered. Change the order value of the poison to fix this right away!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.water</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><p>Now the water and poison are alternating, even though all of the weeds are at the start of your garden. Set the order of the poisons to remedy this.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.water</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poison</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><p>Up to this point, you’ve had your garden set up as a grid with five columns, each 20% of the full width, and five rows, each 20% of the full height.</p>
<p>This was done with the rules grid-template-columns: 20% 20% 20% 20% 20%; and grid-template-rows: 20% 20% 20% 20% 20%; Each rule has five values which create five columns, each set to 20% of the overall width of the garden.</p>
<p>But you can set the grid up however you like. Give grid-template-columns a new value to water your carrots. You’ll want to set the width of the 1st column to be 50%.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50%</span> <span class="number">10%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-21"><a href="#Level-21" class="headerlink" title="Level 21"></a>Level 21</h2><p>Specifying a bunch of columns with identical widths can get tedious. Luckily there’s a repeat function to help with that.</p>
<p>For example, we previously defined five 20% columns with the rule grid-template-columns: 20% 20% 20% 20% 20%;. This can be simplified as grid-template-columns: repeat(5, 20%);</p>
<p>Using grid-template-columns with the repeat function, create eight columns each with 12.5% width. This way you won’t overwater your garden.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">12.5%</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-22"><a href="#Level-22" class="headerlink" title="Level 22"></a>Level 22</h2><p>grid-template-columns doesn’t just accept values in percentages, but also length units like pixels and ems. You can even mix different units together.</p>
<p>Here, set three columns to 100px, 3em, and 40% respectively.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">3em</span> <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-23"><a href="#Level-23" class="headerlink" title="Level 23"></a>Level 23</h2><p>Grid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; the first element occupies 1&#x2F;4 and the second element 3&#x2F;4 of any leftover space.</p>
<p>Here, weeds make up the left 1&#x2F;6 of your first row and carrots the remaining 5&#x2F;6. Create two columns with these widths using fr units.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">5</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-24"><a href="#Level-24" class="headerlink" title="Level 24"></a>Level 24</h2><p>When columns are set with pixels, percentages, or ems, any other columns set with fr will divvy up the space that’s left over.</p>
<p>Here the carrots form a 50 pixel column on the left, and the weeds a 50 pixel column on the right. With grid-template-columns, create these two columns, and use fr to make three more columns that take up the remaining space in between.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">6</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">5</span> / <span class="number">6</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-25"><a href="#Level-25" class="headerlink" title="Level 25"></a>Level 25</h2><p>Now there is a 75 pixel column of weeds on the left side of your garden. 3&#x2F;5 of the remaining space is growing carrots, while 2&#x2F;5 has been overrun with weeds.</p>
<p>Use grid-template-columns with a combination of px and fr units to make the necessary columns.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">75px</span> <span class="number">3</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-26"><a href="#Level-26" class="headerlink" title="Level 26"></a>Level 26</h2><p>grid-template-rows works much the same as grid-template-columns.</p>
<p>Use grid-template-rows to water all but the top 50 pixels of your garden. Note that the water is set to fill only your 5th row, so you’ll need to create 5 rows in total.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">12.5px</span> <span class="number">12.5px</span> <span class="number">12.5px</span> <span class="number">12.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-27"><a href="#Level-27" class="headerlink" title="Level 27"></a>Level 27</h2><p>grid-template is a shorthand property that combines grid-template-rows and grid-template-columns.</p>
<p>For example, grid-template: 50% 50% &#x2F; 200px; will create a grid with two rows that are 50% each, and one column that is 200 pixels wide.</p>
<p>Try using grid-template to water an area that includes the top 60% and left 200 pixels of your garden.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template</span>: <span class="number">60%</span> / <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-28"><a href="#Level-28" class="headerlink" title="Level 28"></a>Level 28</h2><p>Your garden is looking great. Here you’ve left a 50 pixel path at the bottom of your garden and filled the rest with carrots.</p>
<p>Unfortunately, the left 20% of your carrots have been overrun with weeds. Use CSS grid one last time to treat your garden.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template</span>: <span class="number">1</span>fr <span class="number">50px</span> / <span class="number">1</span>fr <span class="number">4</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://programmingmentor.com/post/playing-css-grid-garden/">Playing CSS Grid Garden with Answers Explained</a></li>
</ol>
]]></content>
      <tags>
        <tag>Grid Garden</tag>
        <tag>Grid</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid 網頁排版技巧入門教學筆記 | 學習筆記</title>
    <url>/2024/11/15/learning-notes-css-grid-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在現今網頁設計中，排版的結構與呈現方式對於用戶體驗至關重要。隨著網頁設計的演進，CSS <code>Grid</code> 成為了最強大且靈活的排版工具之一。透過 CSS Grid，你可以輕鬆創建複雜的佈局，並且適應不同設備的需求。本文將介紹 CSS Grid 的基本概念與使用技巧，幫助你迅速掌握如何在網頁設計中使用 Grid。</p>
<h4 id="1-什麼是-CSS-Grid？"><a href="#1-什麼是-CSS-Grid？" class="headerlink" title="1. 什麼是 CSS Grid？"></a>1. 什麼是 CSS Grid？</h4><p>CSS Grid Layout（簡稱 Grid）是 CSS3 的一個強大功能，允許開發者以列和行的方式來設計網頁佈局。它使得網頁設計更加直觀和靈活，不再需要依賴浮動（float）或定位（position）等老舊技巧，簡化了許多複雜的布局問題。</p>
<p>Grid 是由「<code>容器</code>」和「<code>項目</code>」兩部分組成。容器定義了網格的結構，而項目則是容器內部的元素。你可以在容器內輕鬆地將項目放置在指定的網格區域中，從而創建各種排版樣式。</p>
<h4 id="2-CSS-Grid-的基本語法"><a href="#2-CSS-Grid-的基本語法" class="headerlink" title="2. CSS Grid 的基本語法"></a>2. CSS Grid 的基本語法</h4><p>在使用 CSS Grid 時，首先需要定義一個容器元素並啟用 Grid 布局。這樣，容器內的子元素將成為 Grid 項目。以下是基本的設置步驟：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>display: grid;</code> 啟用容器的 Grid 布局。</li>
<li><code>grid-template-columns: repeat(3, 1fr);</code> 設定三列，每列的寬度為等比例（<code>1fr</code>）。<code>1fr</code> 代表容器寬度的 1&#x2F;3。</li>
<li><code>grid-template-rows: auto;</code> 使得行的高度根據內容自動調整。</li>
<li><code>gap: 10px;</code> 定義網格項目之間的間距。</li>
</ul>
<h4 id="3-定義-Grid-容器的列和行"><a href="#3-定義-Grid-容器的列和行" class="headerlink" title="3. 定義 Grid 容器的列和行"></a>3. 定義 Grid 容器的列和行</h4><p>你可以使用 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 來設置容器內列和行的數量、大小及比例。</p>
<h5 id="定義列"><a href="#定義列" class="headerlink" title="定義列"></a>定義列</h5><p>例如，若想創建四列的佈局，可以這樣寫：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">300px</span> <span class="number">400px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡，我們設置了四列的寬度，前三列有固定的像素寬度，最後一列使用 <code>1fr</code>，即佔據剩餘的可用空間。</p>
<h5 id="定義行"><a href="#定義行" class="headerlink" title="定義行"></a>定義行</h5><p>類似地，你可以設置行的大小。若要讓每一行的高度根據內容自動調整，可以使用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這表示網格容器有兩行，第一行的高度固定為 100px，第二行的高度將根據內容自動調整。</p>
<h4 id="4-放置-Grid-項目"><a href="#4-放置-Grid-項目" class="headerlink" title="4. 放置 Grid 項目"></a>4. 放置 Grid 項目</h4><p>Grid 容器的子元素會自動成為 Grid 項目。你可以使用 <code>grid-column</code> 和 <code>grid-row</code> 屬性來指定某個項目占據的列與行。</p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這表示 <code>.item1</code> 元素會從第 1 列跨越到第 3 列，占據第一行。</p>
<ul>
<li><code>grid-column: 1 / 3;</code> 表示該元素會從第 1 列起，跨越兩列，直到第 3 列結束。</li>
<li><code>grid-row: 1;</code> 表示該元素位於第 1 行。</li>
</ul>
<h4 id="5-使用-fr-單位設置比例"><a href="#5-使用-fr-單位設置比例" class="headerlink" title="5. 使用 fr 單位設置比例"></a>5. 使用 <code>fr</code> 單位設置比例</h4><p>CSS Grid 中最重要的單位之一是 <code>fr</code>（fraction，分數），它讓你可以設定元素在可用空間中所佔比例。</p>
<p>假設你有三列，且希望第一列占 1 部分，第二列占 2 部分，第三列占 3 部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣會將總寬度分成六等份，其中第一列占 1 份，第二列占 2 份，第三列占 3 份。這樣的佈局適合於動態響應式設計。</p>
<h4 id="6-設置間距"><a href="#6-設置間距" class="headerlink" title="6. 設置間距"></a>6. 設置間距</h4><p>除了 <code>gap</code> 屬性，你還可以為列與行的間距分別設置不同的值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡，<code>gap: 10px 20px;</code> 的第一個數值設定了行之間的間距為 10px，第二個數值設定了列之間的間距為 20px。</p>
<h4 id="7-嵌套-Grid"><a href="#7-嵌套-Grid" class="headerlink" title="7. 嵌套 Grid"></a>7. 嵌套 Grid</h4><p>Grid 允許你在網格項目內再次使用 Grid 佈局，這樣可以創建更複雜的排版結構。例如，假設你在某個項目內再創建一個小的網格：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，<code>.item1</code> 是一個 Grid 項目，它內部再次使用 Grid 排版，定義兩列，其中第一列占據 1 部分，第二列占據 2 部分。</p>
<h4 id="8-響應式設計"><a href="#8-響應式設計" class="headerlink" title="8. 響應式設計"></a>8. 響應式設計</h4><p>Grid 讓你輕鬆應對不同設備的佈局需求。你可以使用媒體查詢來調整 Grid 排版。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段程式碼會根據螢幕寬度變化調整容器的列數：在寬度大於 768px 時顯示四列，在寬度小於 768px 時顯示兩列，在寬度小於 480px 時顯示單列。</p>
<h4 id="9-小結"><a href="#9-小結" class="headerlink" title="9. 小結"></a>9. 小結</h4><p>CSS Grid 為現代網頁設計提供了一個簡單、強大且靈活的排版解決方案。它不僅能夠解決過去使用浮動或定位方法無法達成的複雜佈局，還能輕鬆適應響應式設計的需求。掌握 CSS Grid，你將能夠更高效地創建現代化的網頁佈局，提升設計的精確度與可維護性。希望本文的介紹能幫助你快速入門並將這項技術應用到你的項目中。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>Grid</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/14/learning-notes-css-intro-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-CSS？"><a href="#1-什麼是-CSS？" class="headerlink" title="1. 什麼是 CSS？"></a>1. 什麼是 CSS？</h4><p>CSS（Cascading Style Sheets，層疊樣式表）是一種用來美化 HTML 頁面的樣式語言。透過 CSS，可以設定字體、顏色、間距、佈局等，讓網頁更具吸引力和可讀性。  </p>
<p>CSS 透過選擇器（Selectors）來指定 HTML 元素，並套用樣式規則（Rules）。  </p>
<hr>
<h4 id="2-CSS-的使用方式"><a href="#2-CSS-的使用方式" class="headerlink" title="2. CSS 的使用方式"></a>2. CSS 的使用方式</h4><p>有三種方式可以在 HTML 文件中使用 CSS：  </p>
<h5 id="2-1-內部-CSS（Internal-CSS）"><a href="#2-1-內部-CSS（Internal-CSS）" class="headerlink" title="2.1 內部 CSS（Internal CSS）"></a>2.1 內部 CSS（Internal CSS）</h5><p>將 CSS 直接寫在 HTML 的 <code>&lt;style&gt;</code> 標籤內：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>內部 CSS 範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>這是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-外部-CSS（External-CSS）"><a href="#2-2-外部-CSS（External-CSS）" class="headerlink" title="2.2 外部 CSS（External CSS）"></a>2.2 外部 CSS（External CSS）</h5><p>將 CSS 放入獨立的 <code>.css</code> 檔案，並透過 <code>&lt;link&gt;</code> 引入：  </p>
<p><strong>styles.css</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HTML 文件：</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部 CSS 範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>這是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-行內-CSS（Inline-CSS）"><a href="#2-3-行內-CSS（Inline-CSS）" class="headerlink" title="2.3 行內 CSS（Inline CSS）"></a>2.3 行內 CSS（Inline CSS）</h5><p>直接在 HTML 標籤內使用 <code>style</code> 屬性：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red; text-align: center;&quot;</span>&gt;</span>這是紅色標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>行內 CSS 只能用於單一元素，不利於維護，因此不建議大量使用。</p>
<hr>
<h4 id="3-CSS-選擇器（Selectors）"><a href="#3-CSS-選擇器（Selectors）" class="headerlink" title="3. CSS 選擇器（Selectors）"></a>3. CSS 選擇器（Selectors）</h4><p>選擇器用於選取 HTML 元素並套用樣式，常見的選擇器有：</p>
<h5 id="3-1-元素選擇器（Element-Selector）"><a href="#3-1-元素選擇器（Element-Selector）" class="headerlink" title="3.1 元素選擇器（Element Selector）"></a>3.1 元素選擇器（Element Selector）</h5><p>直接指定 HTML 標籤：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-類別選擇器（Class-Selector）"><a href="#3-2-類別選擇器（Class-Selector）" class="headerlink" title="3.2 類別選擇器（Class Selector）"></a>3.2 類別選擇器（Class Selector）</h5><p>使用 <code>.</code> 選擇類別，適用於多個元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.important-text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;important-text&quot;</span>&gt;</span>這是一段重要的文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-ID-選擇器（ID-Selector）"><a href="#3-3-ID-選擇器（ID-Selector）" class="headerlink" title="3.3 ID 選擇器（ID Selector）"></a>3.3 ID 選擇器（ID Selector）</h5><p>使用 <code>#</code> 選擇 ID，適用於單一元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;main-title&quot;</span>&gt;</span>這是主標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-4-群組選擇器（Group-Selector）"><a href="#3-4-群組選擇器（Group-Selector）" class="headerlink" title="3.4 群組選擇器（Group Selector）"></a>3.4 群組選擇器（Group Selector）</h5><p>同時選取多個元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-後代選擇器（Descendant-Selector）"><a href="#3-5-後代選擇器（Descendant-Selector）" class="headerlink" title="3.5 後代選擇器（Descendant Selector）"></a>3.5 後代選擇器（Descendant Selector）</h5><p>選取某個元素內的特定元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這段文字會變成灰色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="4-盒模型（Box-Model）"><a href="#4-盒模型（Box-Model）" class="headerlink" title="4. 盒模型（Box Model）"></a>4. 盒模型（Box Model）</h4><p>CSS 中的所有元素都遵循盒模型（Box Model），包含以下部分：</p>
<ul>
<li><strong>Content（內容）</strong>：元素內部的內容，如文字或圖片。  </li>
<li><strong>Padding（內邊距）</strong>：內容與邊框之間的距離。  </li>
<li><strong>Border（邊框）</strong>：元素的邊界。  </li>
<li><strong>Margin（外邊距）</strong>：元素與其他元素之間的距離。</li>
</ul>
<p>範例：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>這是一個盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：box-sizing 屬性： content-box（預設）、border-box（寬高合計包含 padding 和 border）</p>
<hr>
<h4 id="5-常見的-CSS-屬性"><a href="#5-常見的-CSS-屬性" class="headerlink" title="5. 常見的 CSS 屬性"></a>5. 常見的 CSS 屬性</h4><h5 id="5-1-文字樣式"><a href="#5-1-文字樣式" class="headerlink" title="5.1 文字樣式"></a>5.1 文字樣式</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-背景樣式"><a href="#5-2-背景樣式" class="headerlink" title="5.2 背景樣式"></a>5.2 背景樣式</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;background.jpg&quot;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-3-邊框與圓角"><a href="#5-3-邊框與圓角" class="headerlink" title="5.3 邊框與圓角"></a>5.3 邊框與圓角</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-4-Flexbox-佈局"><a href="#5-4-Flexbox-佈局" class="headerlink" title="5.4 Flexbox 佈局"></a>5.4 Flexbox 佈局</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>置中內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="6-響應式設計（Responsive-Design）"><a href="#6-響應式設計（Responsive-Design）" class="headerlink" title="6. 響應式設計（Responsive Design）"></a>6. 響應式設計（Responsive Design）</h4><p>使用 <code>@media</code> 來適應不同裝置：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當螢幕寬度小於 600px 時，背景變為淺灰色。</p>
<hr>
<h4 id="7-總結"><a href="#7-總結" class="headerlink" title="7. 總結"></a>7. 總結</h4><p>本篇筆記介紹了 CSS 的基本概念，包括選擇器、樣式屬性、盒模型與佈局技巧。熟練 CSS 之後，可以進一步學習 Flexbox、Grid、動畫（Animation）等進階技術，並與 JavaScript 結合，打造互動性更高的網頁。實際練習與製作小型專案是學習 CSS 的最佳方式。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>stylesheet</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 權重（Specificity）入門教學筆記 | 學習筆記</title>
    <url>/2021/12/15/learning-notes-css-specificity-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-CSS-權重？"><a href="#1-什麼是-CSS-權重？" class="headerlink" title="1. 什麼是 CSS 權重？"></a>1. 什麼是 CSS 權重？</h4><p>CSS 權重（Specificity）是指當多個選擇器同時作用於同一個元素時，瀏覽器決定應用哪條 CSS 規則的優先級機制。不同選擇器具有不同的權重，權重高的樣式會覆蓋權重低的樣式。  </p>
<hr>
<h4 id="2-CSS-權重的計算方式"><a href="#2-CSS-權重的計算方式" class="headerlink" title="2. CSS 權重的計算方式"></a>2. CSS 權重的計算方式</h4><p>CSS 權重由四個部分組成，從高到低分別是：  </p>
<ol>
<li><strong>行內樣式（Inline Styles）</strong></li>
<li><strong>ID 選擇器（ID Selectors）</strong></li>
<li><strong>類別、偽類與屬性選擇器（Class, Pseudo-classes, Attribute Selectors）</strong></li>
<li><strong>元素與偽元素選擇器（Element, Pseudo-elements）</strong></li>
</ol>
<p>每種類型的選擇器都有固定的權重值，計算時以「數值」方式比較：</p>
<table>
<thead>
<tr>
<th>選擇器類型</th>
<th>權重值</th>
</tr>
</thead>
<tbody><tr>
<td>行內樣式（<code>style=&quot;&quot;</code>）</td>
<td>1000</td>
</tr>
<tr>
<td>ID 選擇器（<code>#id</code>）</td>
<td>100</td>
</tr>
<tr>
<td>類別選擇器（<code>.class</code>）、偽類（<code>:hover</code>）、屬性選擇器（<code>[type=&quot;text&quot;]</code>）</td>
<td>10</td>
</tr>
<tr>
<td>元素選擇器（<code>div</code>、<code>p</code>）、偽元素（<code>::before</code>、<code>::after</code>）</td>
<td>1</td>
</tr>
</tbody></table>
<hr>
<h4 id="3-權重計算範例"><a href="#3-權重計算範例" class="headerlink" title="3. 權重計算範例"></a>3. 權重計算範例</h4><h5 id="3-1-元素選擇器-vs-類別選擇器"><a href="#3-1-元素選擇器-vs-類別選擇器" class="headerlink" title="3.1 元素選擇器 vs. 類別選擇器"></a>3.1 元素選擇器 vs. 類別選擇器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 權重 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是紅色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>.text</code> 的權重為 10，比 <code>p</code> 的權重 1 高，因此文字顯示為紅色。</p>
<hr>
<h5 id="3-2-類別-vs-ID-選擇器"><a href="#3-2-類別-vs-ID-選擇器" class="headerlink" title="3.2 類別 vs. ID 選擇器"></a>3.2 類別 vs. ID 選擇器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green; <span class="comment">/* 權重 100 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是綠色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>#main</code> 的權重 100 高於 <code>.text</code> 的 10，因此文字顯示為綠色。</p>
<hr>
<h5 id="3-3-屬性選擇器與偽類"><a href="#3-3-屬性選擇器與偽類" class="headerlink" title="3.3 屬性選擇器與偽類"></a>3.3 屬性選擇器與偽類</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black; <span class="comment">/* 權重 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;Example&quot;</span>&gt;</span>這段文字會是紅色，滑鼠懸停時變藍色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>p[title]</code> 與 <code>p:hover</code> 權重相同（10），但 <code>p:hover</code> 只在滑鼠懸停時生效，因此預設為紅色，懸停時變藍色。</p>
<hr>
<h4 id="4-多個選擇器組合計算"><a href="#4-多個選擇器組合計算" class="headerlink" title="4. 多個選擇器組合計算"></a>4. 多個選擇器組合計算</h4><p>當一個 CSS 規則包含多種選擇器時，其權重會累加計算。</p>
<h5 id="4-1-複合選擇器"><a href="#4-1-複合選擇器" class="headerlink" title="4.1 複合選擇器"></a>4.1 複合選擇器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 權重 2 (div=1 + p=1) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 11 (div=1 + .text=10) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green; <span class="comment">/* 權重 110 (#container=100 + .text=10) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是綠色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>#container .text</code> 的權重 110 高於 <code>div .text</code>（11）和 <code>div p</code>（2），所以文字顯示為綠色。</p>
<hr>
<h5 id="4-2-important-覆蓋權重"><a href="#4-2-important-覆蓋權重" class="headerlink" title="4.2 !important 覆蓋權重"></a>4.2 !important 覆蓋權重</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是紅色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> 即使 <code>#main</code> 的權重較高，<code>!important</code> 仍然強制覆蓋樣式，使文字變紅。</p>
<hr>
<h4 id="5-權重衝突的解決策略"><a href="#5-權重衝突的解決策略" class="headerlink" title="5. 權重衝突的解決策略"></a>5. 權重衝突的解決策略</h4><ol>
<li><strong>避免使用 <code>!important</code>，除非是必要的</strong></li>
<li><strong>使用更具體的選擇器</strong></li>
<li><strong>組織 CSS 層級結構</strong></li>
<li><strong>使用適當的 CSS 預處理器（如 SCSS、LESS）</strong></li>
</ol>
<hr>
<h4 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h4><p>理解 CSS 權重是撰寫高效、可維護樣式表的關鍵。透過計算選擇器的權重，可以精確控制樣式的優先級，避免不必要的覆蓋問題，提升開發效率。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>stylesheet</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Stacking Context 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/14/learning-notes-css-stacking-context-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網頁開發中，當多個 HTML 元素重疊時，決定它們顯示順序的機制稱為 <strong>Stacking Context（堆疊上下文）</strong>。這是一個重要概念，影響 <code>z-index</code> 的行為，並決定元素在畫面上的排列順序。</p>
<hr>
<h2 id="1-什麼是-Stacking-Context"><a href="#1-什麼是-Stacking-Context" class="headerlink" title="1. 什麼是 Stacking Context"></a><strong>1. 什麼是 Stacking Context</strong></h2><p><strong>Stacking Context</strong> 是一個獨立的層級空間，內部的元素會依照特定規則進行排序，但不會影響外部的層級。當一個元素建立了 Stacking Context，裡面的元素只會與其內部其他元素比較 <code>z-index</code>，而不會與外部的 <code>z-index</code> 直接互動。</p>
<hr>
<h2 id="2-Stacking-Context-的建立方式"><a href="#2-Stacking-Context-的建立方式" class="headerlink" title="2. Stacking Context 的建立方式"></a><strong>2. Stacking Context 的建立方式</strong></h2><p>某些 CSS 屬性和條件會觸發 Stacking Context 的建立，以下是常見的觸發方式：</p>
<h3 id="2-1-根元素-lt-html-gt"><a href="#2-1-根元素-lt-html-gt" class="headerlink" title="2.1 根元素 (&lt;html&gt;)"></a><strong>2.1 根元素 (<code>&lt;html&gt;</code>)</strong></h3><p>HTML 的根元素 (<code>&lt;html&gt;</code>) 本身是一個 Stacking Context，所有的元素都在這個上下文中運作。</p>
<h3 id="2-2-z-index-非-auto-並且-position-為-relative、absolute-或-fixed"><a href="#2-2-z-index-非-auto-並且-position-為-relative、absolute-或-fixed" class="headerlink" title="2.2 z-index 非 auto 並且 position 為 relative、absolute 或 fixed"></a><strong>2.2 <code>z-index</code> 非 <code>auto</code> 並且 <code>position</code> 為 <code>relative</code>、<code>absolute</code> 或 <code>fixed</code></strong></h3><p>當 <code>position</code> 為 <code>relative</code>、<code>absolute</code> 或 <code>fixed</code>，且 <code>z-index</code> 設定為非 <code>auto</code> 時，該元素會創建新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-opacity-小於-1"><a href="#2-3-opacity-小於-1" class="headerlink" title="2.3 opacity 小於 1"></a><strong>2.3 <code>opacity</code> 小於 1</strong></h3><p>任何 <code>opacity</code> 設定小於 <code>1</code>（但大於 <code>0</code>）的元素都會建立新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transparent-box</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-transform、filter、clip-path、perspective-不為-none"><a href="#2-4-transform、filter、clip-path、perspective-不為-none" class="headerlink" title="2.4 transform、filter、clip-path、perspective 不為 none"></a><strong>2.4 <code>transform</code>、<code>filter</code>、<code>clip-path</code>、<code>perspective</code> 不為 <code>none</code></strong></h3><p>只要元素應用了 <code>transform</code>（例如 <code>scale</code>、<code>rotate</code>）、<code>filter</code> 或 <code>clip-path</code>，它就會建立新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transformed-box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>); <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-will-change-設定特定值"><a href="#2-5-will-change-設定特定值" class="headerlink" title="2.5 will-change 設定特定值"></a><strong>2.5 <code>will-change</code> 設定特定值</strong></h3><p>如果 <code>will-change</code> 被設定為 <code>transform</code>、<code>opacity</code>、<code>filter</code> 這類的屬性，該元素會創建新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.optimized-box</span> &#123;</span><br><span class="line">    <span class="attribute">will-change</span>: transform; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-Stacking-Context-的影響"><a href="#3-Stacking-Context-的影響" class="headerlink" title="3. Stacking Context 的影響"></a><strong>3. Stacking Context 的影響</strong></h2><h3 id="3-1-z-index-影響範圍"><a href="#3-1-z-index-影響範圍" class="headerlink" title="3.1 z-index 影響範圍"></a><strong>3.1 <code>z-index</code> 影響範圍</strong></h3><p>如果某個元素在新的 Stacking Context 中，即使它的 <code>z-index</code> 設定得很高，也不會超過它所在的 Stacking Context。這意味著：</p>
<ul>
<li>內部 <code>z-index</code> 的值 <strong>只在該 Stacking Context 內比較</strong>。</li>
<li>外部的元素如果 <code>z-index</code> 更高，仍然可能覆蓋內部 Stacking Context 內的元素。</li>
</ul>
<h3 id="範例：z-index-失效的情境"><a href="#範例：z-index-失效的情境" class="headerlink" title="範例：z-index 失效的情境"></a><strong>範例：z-index 失效的情境</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>; <span class="comment">/* 只在 .parent 內生效 */</span></span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outside</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong></p>
<ul>
<li><code>.child</code> 的 <code>z-index: 9999</code> 只在 <code>.parent</code> 內生效。</li>
<li><code>.outside</code> 的 <code>z-index: 20</code> 屬於 <code>html</code> 根 Stacking Context，所以 <code>.outside</code> 會蓋住 <code>.child</code>。</li>
</ul>
<hr>
<h2 id="4-如何-Debug-Stacking-Context"><a href="#4-如何-Debug-Stacking-Context" class="headerlink" title="4. 如何 Debug Stacking Context"></a><strong>4. 如何 Debug Stacking Context</strong></h2><p>當 <code>z-index</code> 沒有如預期運作時，可以用以下方式檢查：</p>
<h3 id="4-1-使用開發者工具"><a href="#4-1-使用開發者工具" class="headerlink" title="4.1 使用開發者工具"></a><strong>4.1 使用開發者工具</strong></h3><ul>
<li>在 <strong>Chrome 開發者工具</strong>（F12）內，檢查 <code>z-index</code> 的層級。</li>
<li>在「Elements」面板檢查 <code>z-index</code> 及是否有 <code>opacity</code>、<code>transform</code> 等影響屬性。</li>
</ul>
<h3 id="4-2-確保-Stacking-Context"><a href="#4-2-確保-Stacking-Context" class="headerlink" title="4.2 確保 Stacking Context"></a><strong>4.2 確保 Stacking Context</strong></h3><p>如果發現 <code>z-index</code> 設定沒有影響，可以：</p>
<ol>
<li>確認父元素是否創建了新的 Stacking Context。</li>
<li>嘗試移除 <code>transform</code>、<code>opacity</code> 或 <code>filter</code>，看看是否影響 <code>z-index</code>。</li>
</ol>
<hr>
<h2 id="5-Stacking-Context-的應用場景"><a href="#5-Stacking-Context-的應用場景" class="headerlink" title="5. Stacking Context 的應用場景"></a><strong>5. Stacking Context 的應用場景</strong></h2><h3 id="5-1-固定導覽列與內容遮罩"><a href="#5-1-固定導覽列與內容遮罩" class="headerlink" title="5.1 固定導覽列與內容遮罩"></a><strong>5.1 固定導覽列與內容遮罩</strong></h3><p>當 <code>position: fixed</code> 的導覽列無法覆蓋其他元素時，可以確保它擁有較高 <code>z-index</code>，並避免它被無意創建的 Stacking Context 影響。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-Modal（模態視窗）"><a href="#5-2-Modal（模態視窗）" class="headerlink" title="5.2 Modal（模態視窗）"></a><strong>5.2 Modal（模態視窗）</strong></h3><p>確保 <code>modal</code> 的 <code>z-index</code> 高於其他元素，並避免 <code>opacity</code> 或 <code>transform</code> 影響 <code>z-index</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a><strong>6. 總結</strong></h2><ul>
<li><strong>Stacking Context</strong> 影響 <code>z-index</code> 的作用範圍，讓 <code>z-index</code> 不總是依照數值大小決定順序。</li>
<li>多種 CSS 屬性（如 <code>opacity</code>、<code>transform</code>）會創建 Stacking Context，可能影響層級渲染結果。</li>
<li><strong>在開發時，應注意哪些元素創建了 Stacking Context，以確保 <code>z-index</code> 如預期運作</strong>。</li>
</ul>
<p>透過以上概念與技巧，可以更靈活地管理 HTML 元素的層級關係，確保視覺效果正確。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>stylesheet</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS transform 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/13/learning-notes-css-transform-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS <code>transform</code> 屬性是一個強大的工具，可以用來對 HTML 元素進行旋轉、縮放、移動及傾斜等變換，而不會影響其他元素的佈局。這使得 <code>transform</code> 非常適合用來建立動畫效果、視覺調整以及 UI 微調。</p>
<h2 id="1-transform-基礎概念"><a href="#1-transform-基礎概念" class="headerlink" title="1. transform 基礎概念"></a>1. <code>transform</code> 基礎概念</h2><p><code>transform</code> 屬性可以接受一個或多個變換函數，使元素在不影響文檔流的情況下進行變換。這些變換主要包含：</p>
<ul>
<li><strong>平移 (translate)</strong></li>
<li><strong>縮放 (scale)</strong></li>
<li><strong>旋轉 (rotate)</strong></li>
<li><strong>傾斜 (skew)</strong></li>
<li><strong>矩陣變換 (matrix)</strong></li>
</ul>
<h2 id="2-transform-常見屬性"><a href="#2-transform-常見屬性" class="headerlink" title="2. transform 常見屬性"></a>2. <code>transform</code> 常見屬性</h2><h3 id="2-1-平移-translate"><a href="#2-1-平移-translate" class="headerlink" title="2.1 平移 (translate)"></a>2.1 平移 (<code>translate</code>)</h3><p><code>translate(x, y)</code> 用於移動元素的 X 軸與 Y 軸位置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此範例將 <code>.box</code> 元素向右移動 50px，向下移動 100px。</p>
<h4 id="單軸平移"><a href="#單軸平移" class="headerlink" title="單軸平移"></a>單軸平移</h4><ul>
<li><code>translateX(50px)</code>：僅在 X 軸移動 50px。</li>
<li><code>translateY(100px)</code>：僅在 Y 軸移動 100px。</li>
</ul>
<h3 id="2-2-縮放-scale"><a href="#2-2-縮放-scale" class="headerlink" title="2.2 縮放 (scale)"></a>2.2 縮放 (<code>scale</code>)</h3><p><code>scale(x, y)</code> 用於縮放元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此範例將 <code>.box</code> 元素的寬度放大 1.5 倍，高度縮小為原來的一半。</p>
<h4 id="單軸縮放"><a href="#單軸縮放" class="headerlink" title="單軸縮放"></a>單軸縮放</h4><ul>
<li><code>scaleX(2)</code>：寬度變為 2 倍。</li>
<li><code>scaleY(0.5)</code>：高度變為 0.5 倍。</li>
</ul>
<h3 id="2-3-旋轉-rotate"><a href="#2-3-旋轉-rotate" class="headerlink" title="2.3 旋轉 (rotate)"></a>2.3 旋轉 (<code>rotate</code>)</h3><p><code>rotate(angle)</code> 用於旋轉元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此範例將 <code>.box</code> 元素順時針旋轉 45 度。</p>
<h3 id="2-4-傾斜-skew"><a href="#2-4-傾斜-skew" class="headerlink" title="2.4 傾斜 (skew)"></a>2.4 傾斜 (<code>skew</code>)</h3><p><code>skew(x-angle, y-angle)</code> 用於使元素傾斜。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>, <span class="number">10deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此範例將 <code>.box</code> 在 X 軸方向傾斜 30 度，在 Y 軸方向傾斜 10 度。</p>
<h4 id="單軸傾斜"><a href="#單軸傾斜" class="headerlink" title="單軸傾斜"></a>單軸傾斜</h4><ul>
<li><code>skewX(15deg)</code>：僅在 X 軸傾斜 15 度。</li>
<li><code>skewY(25deg)</code>：僅在 Y 軸傾斜 25 度。</li>
</ul>
<h3 id="2-5-矩陣變換-matrix"><a href="#2-5-矩陣變換-matrix" class="headerlink" title="2.5 矩陣變換 (matrix)"></a>2.5 矩陣變換 (<code>matrix</code>)</h3><p><code>matrix(a, b, c, d, e, f)</code> 是一個綜合性變換函數，允許透過 6 個參數來同時應用縮放、旋轉、傾斜與位移。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣的矩陣表示：</p>
<ul>
<li><code>1</code>：X 軸縮放。</li>
<li><code>0.5</code>：X 軸傾斜。</li>
<li><code>0.5</code>：Y 軸傾斜。</li>
<li><code>1</code>：Y 軸縮放。</li>
<li><code>50</code>：X 軸位移。</li>
<li><code>100</code>：Y 軸位移。</li>
</ul>
<h2 id="3-transform-的應用範例"><a href="#3-transform-的應用範例" class="headerlink" title="3. transform 的應用範例"></a>3. <code>transform</code> 的應用範例</h2><h3 id="3-1-建立簡單的-hover-效果"><a href="#3-1-建立簡單的-hover-效果" class="headerlink" title="3.1 建立簡單的 hover 效果"></a>3.1 建立簡單的 hover 效果</h3><p>利用 <code>transform</code>，可以輕鬆製作滑鼠懸停的動畫效果，例如按鈕放大效果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-圖片翻轉效果"><a href="#3-2-圖片翻轉效果" class="headerlink" title="3.2 圖片翻轉效果"></a>3.2 圖片翻轉效果</h3><p>使用 <code>rotateY(180deg)</code> 來製作翻轉效果，常用於卡片翻轉動畫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-旋轉動畫"><a href="#3-3-旋轉動畫" class="headerlink" title="3.3 旋轉動畫"></a>3.3 旋轉動畫</h3><p>結合 <code>@keyframes</code> 和 <code>transform</code>，可以製作無限旋轉動畫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spinner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">animation</span>: spin <span class="number">2s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-transform-origin-的應用"><a href="#4-transform-origin-的應用" class="headerlink" title="4. transform-origin 的應用"></a>4. <code>transform-origin</code> 的應用</h2><p><code>transform-origin</code> 屬性用於指定變換的基準點，預設值為 <code>50% 50%</code>（元素中心）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform-origin</span>: top left;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此範例中，元素將以左上角為旋轉點，而非默認的中心點。</p>
<h2 id="5-perspective-與-3D-變換"><a href="#5-perspective-與-3D-變換" class="headerlink" title="5. perspective 與 3D 變換"></a>5. <code>perspective</code> 與 3D 變換</h2><p>當使用 3D 變換（如 <code>rotateX</code>、<code>rotateY</code>）時，可使用 <code>perspective</code> 來模擬景深效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此範例讓 <code>.box</code> 具有 3D 透視效果，使其看起來更真實。</p>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><p>CSS <code>transform</code> 是一個靈活且強大的屬性，可以用來製作動畫、視覺調整及增強 UI 體驗。透過 <code>translate</code>、<code>scale</code>、<code>rotate</code>、<code>skew</code> 等函數，你可以輕鬆地操控元素的外觀，讓你的網頁更具吸引力。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>css</tag>
        <tag>transform</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS transition 入門教學筆記 | 學習筆記</title>
    <url>/2022/12/13/learning-notes-css-transition-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS <code>transition</code> 屬性允許元素在狀態變化時產生平滑的動畫效果，使 UI 更加流暢和自然。這項技術通常應用於按鈕、圖片、卡片等 UI 元素的互動效果，如懸停、點擊或狀態變更。</p>
<h2 id="1-transition-基礎概念"><a href="#1-transition-基礎概念" class="headerlink" title="1. transition 基礎概念"></a>1. <code>transition</code> 基礎概念</h2><p>CSS <code>transition</code> 屬性用於定義當元素的某些 CSS 屬性發生變化時，該變化應如何逐漸呈現，而非立即改變。基本語法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: property duration timing-function delay;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>property</code>：指定要應用過渡效果的 CSS 屬性。</li>
<li><code>duration</code>：設定過渡動畫的時間（如 <code>0.5s</code>、<code>200ms</code>）。</li>
<li><code>timing-function</code>：定義動畫的速度曲線（如 <code>ease</code>、<code>linear</code>）。</li>
<li><code>delay</code>：動畫開始前的延遲時間（可選，默認為 <code>0s</code>）。</li>
</ul>
<h2 id="2-transition-常見應用"><a href="#2-transition-常見應用" class="headerlink" title="2. transition 常見應用"></a>2. <code>transition</code> 常見應用</h2><h3 id="2-1-過渡單一屬性"><a href="#2-1-過渡單一屬性" class="headerlink" title="2.1 過渡單一屬性"></a>2.1 過渡單一屬性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當滑鼠懸停在 <code>.button</code> 上時，背景顏色將在 <code>0.3s</code> 內從 <code>blue</code> 變為 <code>darkblue</code>。</p>
<h3 id="2-2-過渡多個屬性"><a href="#2-2-過渡多個屬性" class="headerlink" title="2.2 過渡多個屬性"></a>2.2 過渡多個屬性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease, transform <span class="number">0.5s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當滑鼠懸停時，<code>.card</code> 的背景顏色會變深，並且整個卡片會放大 <code>1.1</code> 倍。</p>
<h2 id="3-transition-進階應用"><a href="#3-transition-進階應用" class="headerlink" title="3. transition 進階應用"></a>3. <code>transition</code> 進階應用</h2><h3 id="3-1-transition-timing-function（動畫速度曲線）"><a href="#3-1-transition-timing-function（動畫速度曲線）" class="headerlink" title="3.1 transition-timing-function（動畫速度曲線）"></a>3.1 <code>transition-timing-function</code>（動畫速度曲線）</h3><p><code>timing-function</code> 用於定義動畫的速度變化方式，常見的值如下：</p>
<ul>
<li><code>linear</code>：等速變化。</li>
<li><code>ease</code>（預設值）：開始與結束較慢，中間較快。</li>
<li><code>ease-in</code>：開始較慢，之後加速。</li>
<li><code>ease-out</code>：開始較快，最後減速。</li>
<li><code>ease-in-out</code>：開始和結束都較慢。</li>
</ul>
<p>範例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當滑鼠懸停時，<code>.box</code> 會平滑地向右移動 <code>200px</code>，並且動畫在開始和結束時較慢。</p>
<h3 id="3-2-transition-delay（延遲時間）"><a href="#3-2-transition-delay（延遲時間）" class="headerlink" title="3.2 transition-delay（延遲時間）"></a>3.2 <code>transition-delay</code>（延遲時間）</h3><p>可以設定 <code>transition-delay</code> 來延遲動畫的開始時間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span> ease-in <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當滑鼠懸停時，<code>background-color</code> 會延遲 <code>1s</code> 後才開始變化。</p>
<h2 id="4-transition-實際應用範例"><a href="#4-transition-實際應用範例" class="headerlink" title="4. transition 實際應用範例"></a>4. <code>transition</code> 實際應用範例</h2><h3 id="4-1-按鈕的點擊效果"><a href="#4-1-按鈕的點擊效果" class="headerlink" title="4.1 按鈕的點擊效果"></a>4.1 按鈕的點擊效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff5733</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.95</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當按下 <code>.button</code> 時，按鈕會稍微縮小，產生按壓感。</p>
<h3 id="4-2-漸變顯示效果"><a href="#4-2-漸變顯示效果" class="headerlink" title="4.2 漸變顯示效果"></a>4.2 漸變顯示效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fade-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-box</span><span class="selector-class">.show</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當 <code>.show</code> 類別被添加時，<code>.fade-box</code> 會在 <code>1s</code> 內逐漸顯示。</p>
<h3 id="4-3-圖片放大效果"><a href="#4-3-圖片放大效果" class="headerlink" title="4.3 圖片放大效果"></a>4.3 圖片放大效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.image-container</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image-container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當滑鼠懸停時，圖片會平滑地放大。</p>
<h2 id="5-transition-vs-animation"><a href="#5-transition-vs-animation" class="headerlink" title="5. transition vs animation"></a>5. <code>transition</code> vs <code>animation</code></h2><p>雖然 <code>transition</code> 和 <code>animation</code> 都能用來製作動畫，但它們的用途不同：</p>
<ul>
<li>**<code>transition</code>**：適合用於元素的狀態變更（如 <code>hover</code>、<code>focus</code>）。</li>
<li>**<code>animation</code>**：適用於更複雜的動畫，如連續循環的動畫。</li>
</ul>
<p>如果需要更高級的動畫，例如無限重複、按時間順序變化的動畫，則應使用 <code>@keyframes</code> 和 <code>animation</code>。</p>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><p>CSS <code>transition</code> 是製作動畫效果最簡單且高效的方法之一。透過 <code>transition</code>，可以讓 UI 更加生動，使使用者體驗更流暢。掌握 <code>transition</code> 的基本語法與進階應用後，可以靈活運用於各種互動效果，如按鈕動畫、圖片過渡、淡入淡出等，讓網頁更加吸引人。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>css</tag>
        <tag>transition</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>資料庫索引（Index）介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/02/20/learning-notes-database-index-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在資料庫中，隨著資料筆數的增加，查詢效率成為一個重要的議題。舉例來說，若在百萬筆資料中查找某一筆特定紀錄，如果沒有任何輔助結構，資料庫就必須逐筆掃描（Full Table Scan），效率極差。為了解決這個問題，資料庫系統引入了「索引（Index）」這個概念，來加速查詢與特定操作。索引的設計與使用，是每一位軟體工程師與資料庫設計者都必須掌握的核心技能。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><p><strong>一、索引的主要功能：</strong></p>
<ul>
<li>加速查詢（SELECT）</li>
<li>優化條件篩選（WHERE）</li>
<li>提升排序效率（ORDER BY）</li>
<li>支援唯一性約束（UNIQUE）</li>
<li>加快資料關聯查詢（JOIN）</li>
</ul>
<p><strong>二、常見索引類型：</strong></p>
<ul>
<li>B-Tree Index：最常見的預設索引類型，適合範圍查詢。</li>
<li>Hash Index：適合等值查詢（&#x3D;），不支援範圍查詢。</li>
<li>Composite Index（複合索引）：由多個欄位組成，適用多條件查詢。</li>
<li>Full-text Index：針對全文搜尋設計。</li>
<li>Spatial Index：用於地理空間查詢。</li>
</ul>
<p><strong>三、索引的優點：</strong></p>
<ul>
<li>提升查詢速度</li>
<li>減少 I&#x2F;O 操作</li>
<li>加快 JOIN 與 GROUP BY 的效能</li>
<li>強化資料的唯一性驗證</li>
</ul>
<p><strong>四、索引的缺點：</strong></p>
<ul>
<li>佔用磁碟空間</li>
<li>寫入（INSERT&#x2F;UPDATE&#x2F;DELETE）成本增加</li>
<li>過多或不當索引會影響效能</li>
<li>需定期維護（如重建或重組索引）</li>
</ul>
<p><strong>五、何時應該使用索引：</strong></p>
<ul>
<li>查詢常出現的欄位（如常出現在 WHERE、JOIN、ORDER BY 中）</li>
<li>欄位選擇性高（值分布離散，代表這個欄位的值分布非常分散，不同值很多、不重複，如身分證字號）</li>
<li>查詢慢、Table Scan 明顯的情況</li>
</ul>
<p><strong>六、何時不應使用索引：</strong></p>
<ul>
<li>小資料表（資料筆數很少）</li>
<li>經常被更新的欄位</li>
<li>欄位選擇性低（如性別只有兩種值）</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><p>以 MySQL 為例，假設有一個 <code>users</code> 表格如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  created_at DATETIME</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>現在若經常根據 <code>email</code> 來查詢使用者：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;user@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>若未建立索引，MySQL 將會進行全表掃描。為了加速查詢，我們可以加上索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_email <span class="keyword">ON</span> users(email);</span><br></pre></td></tr></table></figure>

<p>查詢效率將大幅提升，特別是在資料筆數達到十萬以上的情況。</p>
<hr>
<h3 id="2-複合索引"><a href="#2-複合索引" class="headerlink" title="2. 複合索引"></a>2. 複合索引</h3><p>如果我們常查詢條件如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> created_at <span class="operator">&gt;</span> <span class="string">&#x27;2025-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以建立複合索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_created <span class="keyword">ON</span> users(age, created_at);</span><br></pre></td></tr></table></figure>

<p>但注意複合索引有「最左前綴原則」，必須按照索引欄位的排列順序來使用，否則可能無法被使用。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 可使用 idx_age_created</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可使用 idx_age_created</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> created_at <span class="operator">&gt;</span> <span class="string">&#x27;2025-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 無法使用 idx_age_created</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> created_at <span class="operator">&gt;</span> <span class="string">&#x27;2025-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-檢查查詢是否使用索引"><a href="#3-檢查查詢是否使用索引" class="headerlink" title="3. 檢查查詢是否使用索引"></a>3. 檢查查詢是否使用索引</h3><p>可以利用 <code>EXPLAIN</code> 關鍵字來檢查查詢是否有使用索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;user@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>若 <code>key</code> 欄位顯示為 <code>idx_email</code>，表示查詢有使用到索引。</p>
<hr>
<h3 id="4-索引對寫入的影響"><a href="#4-索引對寫入的影響" class="headerlink" title="4. 索引對寫入的影響"></a>4. 索引對寫入的影響</h3><p>當對有索引的欄位進行大量更新時，索引也需要同步更新，可能導致效能下降。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> email <span class="operator">=</span> CONCAT(email, <span class="string">&#x27;.tw&#x27;</span>) <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>此時 <code>email</code> 有索引，會導致該索引也被修改，因此執行效率會受到影響。</p>
<hr>
<h3 id="5-刪除不必要的索引"><a href="#5-刪除不必要的索引" class="headerlink" title="5. 刪除不必要的索引"></a>5. 刪除不必要的索引</h3><p>過多的索引會拖慢寫入效能並佔用磁碟空間。可以定期使用以下指令刪除不再使用的索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_email <span class="keyword">ON</span> users;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>索引是資料庫查詢效能優化的關鍵利器，但同時也是一把雙面刃。正確使用索引能大幅加速系統效能，不當使用則可能導致資源浪費甚至拖慢效能。實務上應透過實際的查詢分析與監控（如慢查詢日誌、<code>EXPLAIN</code>），謹慎設計與調整索引策略，才能在讀寫效能間取得最佳平衡。</p>
]]></content>
      <tags>
        <tag>編輯器</tag>
        <tag>Roo Code</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Cypress 測試入門教學筆記 | 學習筆記</title>
    <url>/2024/12/08/learning-notes-cypress-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-Cypress-基礎概念"><a href="#1-Cypress-基礎概念" class="headerlink" title="1. Cypress 基礎概念"></a>1. Cypress 基礎概念</h1><p><code>Cypress</code> 是一款現代化的前端自動化測試工具，主要用於測試 Web 應用程式，支援端對端（<code>E2E</code>）測試、<code>元件測試</code>等。</p>
<h3 id="1-1-為何選擇-Cypress？"><a href="#1-1-為何選擇-Cypress？" class="headerlink" title="1.1 為何選擇 Cypress？"></a>1.1 為何選擇 Cypress？</h3><ul>
<li>簡單易用，直接運行於瀏覽器。</li>
<li>提供即時回饋，方便 Debug。</li>
<li>內建等待機制，避免手動處理異步問題。</li>
<li>支援截圖與錄影，方便測試分析。</li>
</ul>
<h1 id="2-安裝與設定"><a href="#2-安裝與設定" class="headerlink" title="2. 安裝與設定"></a>2. 安裝與設定</h1><h3 id="2-1-安裝-Cypress"><a href="#2-1-安裝-Cypress" class="headerlink" title="2.1 安裝 Cypress"></a>2.1 安裝 Cypress</h3><p>使用 npm 或 yarn 安裝 Cypress：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install cypress --save-dev</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add cypress --dev</span><br></pre></td></tr></table></figure>

<h3 id="2-2-執行-Cypress"><a href="#2-2-執行-Cypress" class="headerlink" title="2.2 執行 Cypress"></a>2.2 執行 Cypress</h3><p>安裝完成後，可以使用以下指令開啟 Cypress GUI：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx cypress open</span><br></pre></td></tr></table></figure>
<p>或直接執行測試：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx cypress run</span><br></pre></td></tr></table></figure>

<h1 id="3-撰寫-Cypress-測試"><a href="#3-撰寫-Cypress-測試" class="headerlink" title="3. 撰寫 Cypress 測試"></a>3. 撰寫 Cypress 測試</h1><h3 id="3-1-建立測試檔案"><a href="#3-1-建立測試檔案" class="headerlink" title="3.1 建立測試檔案"></a>3.1 建立測試檔案</h3><p>Cypress 預設的測試檔案放置於 <code>cypress/e2e/</code> 目錄下，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cypress/e2e/sample_spec.cy.js</span><br></pre></td></tr></table></figure>

<h3 id="3-2-基本測試範例"><a href="#3-2-基本測試範例" class="headerlink" title="3.2 基本測試範例"></a>3.2 基本測試範例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;My First Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://example.cypress.io&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;type&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    cy.<span class="title function_">url</span>().<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;/commands/actions&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-選擇器與操作"><a href="#3-3-選擇器與操作" class="headerlink" title="3.3 選擇器與操作"></a>3.3 選擇器與操作</h3><p>Cypress 提供多種選擇器來查找元素，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(); <span class="comment">// 透過標籤名稱選擇</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.btn-primary&#x27;</span>).<span class="title function_">click</span>(); <span class="comment">// 透過 class 選擇</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#submit-btn&#x27;</span>).<span class="title function_">click</span>(); <span class="comment">// 透過 ID 選擇</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-斷言（Assertions）"><a href="#3-4-斷言（Assertions）" class="headerlink" title="3.4 斷言（Assertions）"></a>3.4 斷言（Assertions）</h3><p>使用 <code>.should()</code> 進行斷言，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.success-message&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Welcome&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="4-進階功能"><a href="#4-進階功能" class="headerlink" title="4. 進階功能"></a>4. 進階功能</h1><h3 id="4-1-錯誤處理與偵錯"><a href="#4-1-錯誤處理與偵錯" class="headerlink" title="4.1 錯誤處理與偵錯"></a>4.1 錯誤處理與偵錯</h3><p>Cypress 提供 <code>cy.pause()</code> 和 <code>cy.debug()</code> 來幫助偵錯：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">pause</span>(); <span class="comment">// 測試暫停</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.result&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-2-假資料與-API-模擬（Mock-API）"><a href="#4-2-假資料與-API-模擬（Mock-API）" class="headerlink" title="4.2 假資料與 API 模擬（Mock API）"></a>4.2 假資料與 API 模擬（Mock API）</h3><p>可以使用 <code>cy.intercept()</code> 攔截 API 請求，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api/user&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;).<span class="title function_">as</span>(<span class="string">&#x27;getUser&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/profile&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@getUser&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-自訂命令"><a href="#4-3-自訂命令" class="headerlink" title="4.3 自訂命令"></a>4.3 自訂命令</h3><p>可以在 <code>cypress/support/commands.js</code> 內定義自訂命令，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;login&#x27;</span>, <span class="function">(<span class="params">email, password</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#email&#x27;</span>).<span class="title function_">type</span>(email);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">type</span>(password);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button[type=&quot;submit&quot;]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然後在測試中使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">login</span>(<span class="string">&#x27;test@example.com&#x27;</span>, <span class="string">&#x27;password123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="5-CI-x2F-CD-整合"><a href="#5-CI-x2F-CD-整合" class="headerlink" title="5. CI&#x2F;CD 整合"></a>5. CI&#x2F;CD 整合</h1><p>Cypress 可以與 CI&#x2F;CD 工具整合，如 GitHub Actions 或 GitLab CI&#x2F;CD。</p>
<h3 id="5-1-GitHub-Actions-設定範例"><a href="#5-1-GitHub-Actions-設定範例" class="headerlink" title="5.1 GitHub Actions 設定範例"></a>5.1 GitHub Actions 設定範例</h3><p>在 <code>.github/workflows/cypress.yml</code> 中新增：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">Tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span></span><br></pre></td></tr></table></figure>

<h1 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h1><p>透過 Cypress，可以輕鬆進行 Web 應用的測試，提高開發效率與穩定性。建議多練習不同測試場景，如表單驗證、API 測試與 RWD 測試，以熟悉 Cypress 強大的測試能力。</p>
]]></content>
      <tags>
        <tag>Cypress</tag>
        <tag>測試</tag>
        <tag>E2E</tag>
        <tag>QA</tag>
      </tags>
  </entry>
  <entry>
    <title>Django、Flask、FastAPI 吞吐量比較入門教學筆記 | 學習筆記</title>
    <url>/2025/02/23/learning-notes-django-flask-fastapi-throughput-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Python Web 開發領域，Django、Flask 與 FastAPI 是三個非常熱門且廣泛使用的框架。它們各有特點與適用場景，但在性能表現，特別是吞吐量（throughput）方面，存在一定差異。吞吐量通常指每秒鐘能處理的請求數量，是衡量 Web 框架在高併發環境中效率的重要指標。</p>
<p>本篇筆記將簡要介紹這三個框架的基本架構與設計理念，並透過簡單測試與範例比較其吞吐量，幫助初學者理解如何依需求選擇適合的框架。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>Django</strong></p>
<ul>
<li>全功能、重量級框架，內建 ORM、管理後台、驗證系統等</li>
<li>同步同步處理，基於 WSGI，預設不支援非同步（Asynchronous）請求</li>
<li>適合需要完整解決方案的中大型專案</li>
<li>吞吐量相較較低，因同步阻塞限制高併發能力</li>
</ul>
</li>
<li><p><strong>Flask</strong></p>
<ul>
<li>輕量級框架，核心簡單，擴展彈性高</li>
<li>同樣基於同步 WSGI，預設不支援非同步</li>
<li>適合小型、原型開發及彈性需求較多的專案</li>
<li>吞吐量與 Django 相近，瓶頸多來自同步阻塞與部署環境</li>
</ul>
</li>
<li><p><strong>FastAPI</strong></p>
<ul>
<li>新興的輕量且高性能框架，採用 ASGI 標準，內建非同步支援</li>
<li>基於 Starlette 與 Pydantic，支援非同步 I&#x2F;O，大幅提升吞吐量</li>
<li>適合高併發、API 開發需求強烈的專案</li>
<li>吞吐量明顯優於 Django、Flask，適合現代微服務架構</li>
</ul>
</li>
<li><p><strong>吞吐量測試環境與結果</strong></p>
<ul>
<li>使用同一台機器與相同測試工具（如 <code>wrk</code>、<code>ab</code>、<code>Locust</code>）對簡單 API 進行測試</li>
<li>Django、Flask 在同步阻塞環境吞吐量約數千至上萬請求&#x2F;秒</li>
<li>FastAPI 在非同步環境可突破十萬請求&#x2F;秒，具備更好擴展性</li>
</ul>
</li>
<li><p><strong>部署差異</strong></p>
<ul>
<li>Django、Flask 多搭配 Gunicorn（WSGI）同步服務器部署</li>
<li>FastAPI 搭配 Uvicorn、Hypercorn（ASGI）非同步服務器，性能最佳化</li>
</ul>
</li>
</ul>
<hr>
<h2 id="吞吐量比較實際範例"><a href="#吞吐量比較實際範例" class="headerlink" title="吞吐量比較實際範例"></a>吞吐量比較實際範例</h2><p>以下將以簡單「Hello World」API 為例，展示三個框架的基本實作，並提供吞吐量測試方法參考。</p>
<h3 id="1-Django-範例"><a href="#1-Django-範例" class="headerlink" title="1. Django 範例"></a>1. Django 範例</h3><p><strong>程式碼（<code>views.py</code>）：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>URL 設定（<code>urls.py</code>）：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> hello</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, hello),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>啟動方式：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>（正式部署可用 Gunicorn）</p>
<h3 id="2-Flask-範例"><a href="#2-Flask-範例" class="headerlink" title="2. Flask 範例"></a>2. Flask 範例</h3><p><strong>程式碼（<code>app.py</code>）：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> jsonify(message=<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p><strong>啟動方式：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure>

<p>（正式部署可用 Gunicorn）</p>
<h3 id="3-FastAPI-範例"><a href="#3-FastAPI-範例" class="headerlink" title="3. FastAPI 範例"></a>3. FastAPI 範例</h3><p><strong>程式碼（<code>main.py</code>）：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/hello&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>啟動方式：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="吞吐量測試方法簡介"><a href="#吞吐量測試方法簡介" class="headerlink" title="吞吐量測試方法簡介"></a>吞吐量測試方法簡介</h2><p>使用 Linux 下的 <code>wrk</code> 工具對三個 API 進行測試：</p>
<p>若使用 Mac 作業系統可以安裝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install wrk</span><br></pre></td></tr></table></figure>

<p>下指令測試：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wrk -t4 -c100 -d30s http://localhost:8000/hello</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-t4</code>：4 個 thread</li>
<li><code>-c100</code>：100 個持續連線</li>
<li><code>-d30s</code>：測試持續 30 秒</li>
</ul>
<p>測試結果可觀察 Requests&#x2F;sec 欄位，即為吞吐量。</p>
<hr>
<h2 id="性能分析與比較"><a href="#性能分析與比較" class="headerlink" title="性能分析與比較"></a>性能分析與比較</h2><ul>
<li><strong>Django</strong> 在簡單請求下可達數千請求&#x2F;秒，但因同步處理與較重的框架開銷，無法輕易擴展至高併發環境。</li>
<li><strong>Flask</strong> 同樣是同步，吞吐量略優於 Django，但主要瓶頸仍在同步阻塞與伺服器資源分配。</li>
<li><strong>FastAPI</strong> 採用非同步設計，利用 Python 的 async&#x2F;await 及高效事件迴圈，能在相同硬體資源下達到數倍甚至十倍以上吞吐量，尤其適合 I&#x2F;O 密集型服務。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>選擇適合的 Python Web 框架時，需根據專案規模、功能需求及預期流量做權衡。Django 適合快速搭建大型且功能完整的應用，Flask 適合靈活開發與小型專案，而 FastAPI 則是現代高效能 API 開發的首選。</p>
<p>在吞吐量需求高、需要非同步處理的情境下，FastAPI 明顯優勢突出。未來隨著非同步技術普及，FastAPI 的應用範圍將持續擴大。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://locust.io/">locust 官方文件</a></li>
</ol>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>Flask</tag>
        <tag>FastAPI</tag>
        <tag>locust</tag>
        <tag>throughput</tag>
        <tag>Load testing</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 入門教學筆記 | 學習筆記</title>
    <url>/2023/07/01/learning-notes-django-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Django 是一個由 Python 編寫的高階 Web 框架，強調快速開發與簡潔設計。它提供完整的功能模組如 ORM、Admin 介面、Form 處理、URL 路由與認證系統，讓開發者能專注於商業邏輯而非重複造輪子。本文將帶你一步一步建立一個基本的 Django 應用程式，並說明其核心概念。</p>
<h2 id="一、環境安裝"><a href="#一、環境安裝" class="headerlink" title="一、環境安裝"></a>一、環境安裝</h2><p>首先，請確保你已安裝好 Python（建議 3.8+）與 pip。以下是建立虛擬環境並安裝 Django 的方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv myenv</span><br><span class="line"><span class="built_in">source</span> myenv/bin/activate  <span class="comment"># Windows 請使用 myenv\Scripts\activate</span></span><br><span class="line">pip install django</span><br></pre></td></tr></table></figure>

<p>確認安裝成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin --version</span><br></pre></td></tr></table></figure>

<h2 id="二、建立-Django-專案"><a href="#二、建立-Django-專案" class="headerlink" title="二、建立 Django 專案"></a>二、建立 Django 專案</h2><p>Django 使用專案（project）與應用程式（app）來組織程式碼。先建立一個新的專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br><span class="line"><span class="built_in">cd</span> mysite</span><br></pre></td></tr></table></figure>

<p>你會看到以下結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>

<h2 id="三、建立應用程式"><a href="#三、建立應用程式" class="headerlink" title="三、建立應用程式"></a>三、建立應用程式</h2><p>應用程式是 Django 專案的功能模組。例如一個部落格、用戶系統或留言板就是一個 app。以下我們建立一個簡單的留言板：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp guestbook</span><br></pre></td></tr></table></figure>

<p>在 <code>guestbook/</code> 資料夾中會看到以下結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">guestbook/</span><br><span class="line">    models.py</span><br><span class="line">    views.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    tests.py</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>接著，在 <code>mysite/settings.py</code> 中註冊這個 app：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;guestbook&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="四、定義資料模型（Model）"><a href="#四、定義資料模型（Model）" class="headerlink" title="四、定義資料模型（Model）"></a>四、定義資料模型（Model）</h2><p>編輯 <code>guestbook/models.py</code>，新增一個留言的資料模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    created_at = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> 說：<span class="subst">&#123;self.content[:<span class="number">20</span>]&#125;</span>...&#x27;</span></span><br></pre></td></tr></table></figure>

<p>建立資料表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h2 id="五、啟用後台管理介面"><a href="#五、啟用後台管理介面" class="headerlink" title="五、啟用後台管理介面"></a>五、啟用後台管理介面</h2><p>Django 提供強大的 admin 功能。先建立一個 superuser：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p>然後在 <code>guestbook/admin.py</code> 中註冊 model：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">admin.site.register(Message)</span><br></pre></td></tr></table></figure>

<p>啟動伺服器並進入後台：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>前往瀏覽器開啟 <code>http://127.0.0.1:8000/admin/</code>，使用剛建立的帳號登入，即可操作資料。</p>
<h2 id="六、建立-Views-與-Templates"><a href="#六、建立-Views-與-Templates" class="headerlink" title="六、建立 Views 與 Templates"></a>六、建立 Views 與 Templates</h2><p>接下來，我們撰寫一個簡單的留言列表與新增留言的畫面。</p>
<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        content = request.POST.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">and</span> content:</span><br><span class="line">            Message.objects.create(name=name, content=content)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;message_list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    messages = Message.objects.order_by(<span class="string">&#x27;-created_at&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;guestbook/message_list.html&#x27;</span>, &#123;<span class="string">&#x27;messages&#x27;</span>: messages&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h3><p>建立目錄 <code>guestbook/templates/guestbook/message_list.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        留言：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;送出&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;% for msg in messages %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; msg.name &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 說：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg.content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123; msg.created_at &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、設定-URL-路由"><a href="#七、設定-URL-路由" class="headerlink" title="七、設定 URL 路由"></a>七、設定 URL 路由</h2><p>在 <code>guestbook/</code> 建立 <code>urls.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.message_list, name=<span class="string">&#x27;message_list&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然後到 <code>mysite/urls.py</code> 中加入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;guestbook.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="八、啟動開發伺服器"><a href="#八、啟動開發伺服器" class="headerlink" title="八、啟動開發伺服器"></a>八、啟動開發伺服器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>在瀏覽器開啟 <code>http://127.0.0.1:8000/</code>，你將看到留言板畫面，並能提交留言。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Django 是功能非常齊全且具可擴展性的 Web 框架，初學者可從資料模型、後台管理、表單處理與模板引擎著手。本文僅為入門教學，未來更多進階功能如使用 class-based views、form 類別、自訂 middleware、部署到雲端等，規劃在之後的教學筆記進行介紹。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>setTimeout</tag>
        <tag>for loop</tag>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Middleware 入門教學筆記</title>
    <url>/2024/11/16/learning-notes-django-middleware-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Web 應用程式中，每一次的 HTTP 請求與回應都會經過一連串的處理流程。在 Django 框架中，這些處理流程的攔截點與操作邏輯就是透過「Middleware（中介軟體）」來實現。</p>
<p>Middleware 是 Django 請求與回應處理流程中一個極為關鍵的機制，允許開發者在請求進入 View 前或回應送出前進行特定操作，例如：身份驗證、日誌紀錄、權限控制、跨域處理、錯誤攔截、壓縮回應等。</p>
<p>掌握 Middleware 的基本原理與撰寫方式，將有助於你更靈活地控制整個應用程式的行為與安全性。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p>Middleware 是介於「請求 → View → 回應」流程中，可插入自訂邏輯的中介處理元件。</p>
</li>
<li><p>每個 Middleware 類別皆需實作特定的方法，如 <code>__call__()</code> 或 <code>process_request()</code>、<code>process_response()</code>。</p>
</li>
<li><p>Middleware 可用於：日誌、認證、CORS、壓縮、IP 限制、防止 CSRF 等。</p>
</li>
<li><p>所有 Middleware 的執行順序依 <code>settings.py</code> 的 <code>MIDDLEWARE</code> 設定順序為準。</p>
</li>
<li><p>Middleware 執行順序為：</p>
<ul>
<li>請求階段（request）：從上往下</li>
<li>回應階段（response）：從下往上</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Middleware-執行流程簡述"><a href="#Middleware-執行流程簡述" class="headerlink" title="Middleware 執行流程簡述"></a>Middleware 執行流程簡述</h2><p>以下是 Django 處理請求的標準流程：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Request</span><br><span class="line">  ↓</span><br><span class="line">Middleware（request）→ View 處理 → Middleware（response）</span><br><span class="line">  ↓</span><br><span class="line">Response</span><br></pre></td></tr></table></figure>

<p>舉例來說，假設你有三個 Middleware：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;myproject.middleware.FirstMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;myproject.middleware.SecondMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;myproject.middleware.ThirdMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>執行順序會是：</p>
<ul>
<li>請求階段：First → Second → Third → View</li>
<li>回應階段：Third → Second → First → Client</li>
</ul>
<hr>
<h2 id="Middleware-的基本結構與方法"><a href="#Middleware-的基本結構與方法" class="headerlink" title="Middleware 的基本結構與方法"></a>Middleware 的基本結構與方法</h2><p>從 Django 1.10 起，Middleware 使用「新式 Middleware」架構，基於 <code>__call__()</code> 方法設計。基本範例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># middleware.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        <span class="comment"># 這裡是初始化，只在伺服器啟動時執行一次</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 處理請求邏輯（View 前）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before view&quot;</span>)</span><br><span class="line"></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 處理回應邏輯（View 後）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After view&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="實際範例一：請求時間計算-Middleware"><a href="#實際範例一：請求時間計算-Middleware" class="headerlink" title="實際範例一：請求時間計算 Middleware"></a>實際範例一：請求時間計算 Middleware</h2><p>此範例會計算 View 執行所花費的時間，並加入到 HTTP 回應標頭中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># middleware.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimerMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        duration = time.time() - start_time</span><br><span class="line">        response[<span class="string">&quot;X-Process-Time&quot;</span>] = <span class="string">f&quot;<span class="subst">&#123;duration:<span class="number">.4</span>f&#125;</span>s&quot;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>在 <code>settings.py</code> 中啟用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 其他內建 middleware...</span></span><br><span class="line">    <span class="string">&#x27;myapp.middleware.TimerMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>當你訪問任意頁面時，HTTP 回應標頭中會出現類似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Process-Time: 0.0321s</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="實際範例二：只允許特定-IP-的-Middleware"><a href="#實際範例二：只允許特定-IP-的-Middleware" class="headerlink" title="實際範例二：只允許特定 IP 的 Middleware"></a>實際範例二：只允許特定 IP 的 Middleware</h2><p>你可以建立一個 Middleware，用來限制只有某些 IP 位址可以訪問網站。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># middleware.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseForbidden</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IPWhitelistMiddleware</span>:</span><br><span class="line">    ALLOWED_IPS = [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;192.168.1.100&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        ip = request.META.get(<span class="string">&quot;REMOTE_ADDR&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> self.ALLOWED_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponseForbidden(<span class="string">&quot;Access denied.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br></pre></td></tr></table></figure>

<p>這可以用來防止內部 API 被外部訪問。</p>
<hr>
<h2 id="常見用途與建議實作"><a href="#常見用途與建議實作" class="headerlink" title="常見用途與建議實作"></a>常見用途與建議實作</h2><table>
<thead>
<tr>
<th>用途</th>
<th>建議工具或方式</th>
</tr>
</thead>
<tbody><tr>
<td>請求&#x2F;回應紀錄</td>
<td>實作 logging Middleware</td>
</tr>
<tr>
<td>使用者權限控管</td>
<td>自訂 Middleware 或使用 Django Authentication</td>
</tr>
<tr>
<td>防止過多請求</td>
<td>與 Redis 結合實作 Rate Limiting Middleware</td>
</tr>
<tr>
<td>跨域（CORS）處理</td>
<td>使用 django-cors-headers 套件</td>
</tr>
<tr>
<td>錯誤攔截與通知</td>
<td>捕捉例外並結合外部通知工具（如 Sentry）</td>
</tr>
</tbody></table>
<hr>
<h2 id="注意事項與開發建議"><a href="#注意事項與開發建議" class="headerlink" title="注意事項與開發建議"></a>注意事項與開發建議</h2><ol>
<li><strong>Middleware 應保持單一職責</strong>：一個 Middleware 做一件事，方便測試與維護。</li>
<li><strong>避免過度耦合 View 或 Model</strong>：Middleware 應專注於請求與回應處理，不應過度介入業務邏輯。</li>
<li><strong>注意 Middleware 順序</strong>：Django 會依照 <code>MIDDLEWARE</code> 陣列順序執行，不當排序可能導致無效或錯誤。</li>
<li><strong>善用內建 Middleware</strong>：如 <code>SecurityMiddleware</code>, <code>CommonMiddleware</code>, <code>AuthenticationMiddleware</code>，無須重造輪子。</li>
<li><strong>除錯技巧</strong>：可在 Middleware 中使用 <code>print()</code>、<code>logging</code> 或加入 HTTP 標頭協助觀察執行情況。</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Middleware 是 Django 框架中攔截與處理請求／回應流程的核心機制之一。學會撰寫與使用 Middleware，能讓你更有效地實現各種橫向功能（如安全、效能、紀錄等），並保持應用架構的乾淨與可維護性。</p>
<p>透過本教學筆記，你應該已理解：</p>
<ul>
<li>Middleware 的基本概念與執行流程</li>
<li>如何撰寫一個簡單的 Middleware 類別</li>
<li>幾種常見的 Middleware 實用場景與範例</li>
</ul>
<p>進一步建議可以閱讀 Django 官方文件中的 Middleware 章節，並觀察第三方套件的 Middleware 是如何實作的，將更有助於理解其威力與應用彈性。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>Django</tag>
        <tag>RESTful</tag>
        <tag>後端</tag>
        <tag>軟體工程</tag>
        <tag>Middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 中的 n+1 問題入門教學筆記</title>
    <url>/2024/11/16/learning-notes-django-orm-n-plus-1-intro-tutorial/</url>
    <content><![CDATA[<h1 id="Django-中的-n-1-問題入門教學筆記"><a href="#Django-中的-n-1-問題入門教學筆記" class="headerlink" title="Django 中的 n+1 問題入門教學筆記"></a>Django 中的 n+1 問題入門教學筆記</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Django 作為一個功能完整的 Python Web 框架，其 ORM（Object-Relational Mapping）能讓開發者以物件導向方式操作資料庫。然而，這樣的便利也容易隱藏一些效能陷阱，其中最常見也最容易忽略的就是 <strong>n+1 查詢問題（n+1 query problem）</strong>。</p>
<p>n+1 問題會導致程式在執行查詢時產生大量多餘的 SQL 語句，影響效能並拖慢頁面載入速度，特別是在處理關聯資料時（如 ForeignKey 或 ManyToManyField）。本篇筆記將帶你認識 n+1 問題在 Django 中的成因、辨識方法與解法。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>n+1 問題定義</strong>：查詢一個主物件（n 筆），卻對每筆物件再執行一次額外查詢，總共造成 n+1 次查詢。</p>
</li>
<li><p><strong>常見發生情境</strong>：在模板或程式中存取 ForeignKey 或 ManyToManyField 時，未預先載入（eager loading）相關資料。</p>
</li>
<li><p><strong>效能影響</strong>：每個物件觸發一次額外 SQL，當資料量增加時，查詢數可能達到數百次以上。</p>
</li>
<li><p><strong>解法</strong>：</p>
<ul>
<li>使用 <code>select_related()</code> 預先載入「多對一」與「一對一」的關聯。</li>
<li>使用 <code>prefetch_related()</code> 預先載入「一對多」與「多對多」的關聯。</li>
</ul>
</li>
<li><p><strong>如何偵測 n+1 問題</strong>：</p>
<ul>
<li>開啟 <code>django.db.backends</code> 日誌觀察查詢數量與內容。</li>
<li>使用 <a href="https://django-debug-toolbar.readthedocs.io/">Django Debug Toolbar</a> 查看 SQL 查詢次數與細節。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例：部落格文章與作者"><a href="#實際範例：部落格文章與作者" class="headerlink" title="實際範例：部落格文章與作者"></a>實際範例：部落格文章與作者</h2><p>假設有以下兩個模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<h3 id="n-1-問題範例"><a href="#n-1-問題範例" class="headerlink" title="n+1 問題範例"></a>n+1 問題範例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_list</span>(<span class="params">request</span>):</span><br><span class="line">    posts = Post.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;blog/post_list.html&quot;</span>, &#123;<span class="string">&quot;posts&quot;</span>: posts&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# post_list.html #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> posts %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="language-xml"> - </span><span class="template-variable">&#123;&#123; post.author.name &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>這段程式會發生 n+1 問題：</p>
<ul>
<li>第一次查詢取得所有文章 <code>SELECT * FROM post</code></li>
<li>每篇文章查詢一次作者 <code>SELECT * FROM author WHERE id = ?</code></li>
</ul>
<p>如果有 100 篇文章，總共會執行 101 次查詢。</p>
<hr>
<h2 id="解法一：使用-select-related"><a href="#解法一：使用-select-related" class="headerlink" title="解法一：使用 select_related()"></a>解法一：使用 <code>select_related()</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py（改進）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_list</span>(<span class="params">request</span>):</span><br><span class="line">    posts = Post.objects.select_related(<span class="string">&quot;author&quot;</span>).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;blog/post_list.html&quot;</span>, &#123;<span class="string">&quot;posts&quot;</span>: posts&#125;)</span><br></pre></td></tr></table></figure>

<p><code>select_related</code> 會使用 SQL JOIN 一次把作者資料一起載入。查詢數減少為 1 次：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> post.<span class="operator">*</span>, author.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> post</span><br><span class="line"><span class="keyword">JOIN</span> author <span class="keyword">ON</span> post.author_id <span class="operator">=</span> author.id;</span><br></pre></td></tr></table></figure>

<p>這種方式適合用於 ForeignKey（多對一）與 OneToOneField 關聯。</p>
<hr>
<h2 id="解法二：使用-prefetch-related"><a href="#解法二：使用-prefetch-related" class="headerlink" title="解法二：使用 prefetch_related()"></a>解法二：使用 <code>prefetch_related()</code></h2><p>若改為一對多或多對多關係，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    tags = models.ManyToManyField(Tag)</span><br></pre></td></tr></table></figure>

<p>如果在模板中使用：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> posts %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="language-xml">:</span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> tag <span class="keyword">in</span> post.tags.all %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; tag.name &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>這樣會產生 n+1 查詢問題（每個 post 查一次 tag）。解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">posts = Post.objects.prefetch_related(<span class="string">&quot;tags&quot;</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<p><code>prefetch_related()</code> 會先查出所有關聯，再用 Python 記憶體關聯對應資料，不用 JOIN。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> post;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> post_tags <span class="keyword">WHERE</span> post_id <span class="keyword">IN</span> (...);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tag <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (...);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="select-related-與-prefetch-related-差異整理"><a href="#select-related-與-prefetch-related-差異整理" class="headerlink" title="select_related 與 prefetch_related 差異整理"></a>select_related 與 prefetch_related 差異整理</h2><table>
<thead>
<tr>
<th>特性</th>
<th>select_related</th>
<th>prefetch_related</th>
</tr>
</thead>
<tbody><tr>
<td>關係類型</td>
<td>一對一、外鍵（ForeignKey）</td>
<td>一對多、多對多</td>
</tr>
<tr>
<td>查詢方式</td>
<td>使用 JOIN 一次查出</td>
<td>分別查詢後用 Python 關聯</td>
</tr>
<tr>
<td>查詢數量</td>
<td>一次查詢即可完成</td>
<td>最少兩次查詢</td>
</tr>
<tr>
<td>效能適用情境</td>
<td>關聯資料不多且關係單純</td>
<td>關聯資料多或複雜嵌套</td>
</tr>
</tbody></table>
<hr>
<h2 id="如何偵測與除錯-n-1-問題"><a href="#如何偵測與除錯-n-1-問題" class="headerlink" title="如何偵測與除錯 n+1 問題"></a>如何偵測與除錯 n+1 問題</h2><ol>
<li><p><strong>開啟 SQL 日誌</strong>：<br>在 <code>settings.py</code> 中設定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;django.db.backends&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>],</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 Django Debug Toolbar</strong>：<br>安裝與設定後可視覺化查詢次數與內容。</p>
</li>
<li><p><strong>查看 QuerySet 查詢次數</strong>：<br>使用 <code>len(connection.queries)</code> 或中間件分析每個 request 的查詢數。</p>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>n+1 問題是 Django ORM 中最常見的效能陷阱之一，但只要了解其原理與解法，透過 <code>select_related()</code> 和 <code>prefetch_related()</code> 搭配得當，幾乎可以完全避免這個問題。</p>
<p>掌握以下原則即可：</p>
<ul>
<li>遇到 ForeignKey 或 OneToOne 時用 <code>select_related()</code></li>
<li>遇到 ManyToMany 或反向 ForeignKey 時用 <code>prefetch_related()</code></li>
<li>避免在模板中直接使用 <code>.related_set.all()</code> 未預先載入資料</li>
<li>對列表頁或頻繁查詢頁進行效能測試與 SQL 分析</li>
</ul>
<p>良好的 ORM 使用習慣能大幅提升系統穩定性與使用者體驗，是每位 Django 開發者必備的基礎功。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>Django</tag>
        <tag>RESTful</tag>
        <tag>後端</tag>
        <tag>軟體工程</tag>
        <tag>Middleware</tag>
        <tag>N + 1</tag>
      </tags>
  </entry>
  <entry>
    <title>Django RESTful API 入門教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-django-rest-api-framework-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>隨著 Web 與行動應用的發展，API（應用程式介面）已成為前後端溝通的橋樑。RESTful API 是目前最常見的 API 設計風格之一，而 Django REST Framework（簡稱 DRF）則是基於 Django 的強大工具，讓開發 RESTful API 變得更簡單。</p>
<p>本篇筆記將帶我們從零開始，快速建立一個 Django RESTful API 專案，實作一個基本的「文章系統」。</p>
<hr>
<h3 id="1-安裝-Django-與-Django-REST-Framework"><a href="#1-安裝-Django-與-Django-REST-Framework" class="headerlink" title="1. 安裝 Django 與 Django REST Framework"></a>1. 安裝 Django 與 Django REST Framework</h3><p>首先，建立一個虛擬環境並安裝必要套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate  <span class="comment"># Windows 用戶請使用 venv\Scripts\activate</span></span><br><span class="line">pip install django djangorestframework</span><br></pre></td></tr></table></figure>

<p>接著，建立 Django 專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject myapi</span><br><span class="line"><span class="built_in">cd</span> myapi</span><br></pre></td></tr></table></figure>

<p>建立一個 app 來處理文章功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp articles</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-設定專案"><a href="#2-設定專案" class="headerlink" title="2. 設定專案"></a>2. 設定專案</h3><p>在 <code>myapi/settings.py</code> 中，將 <code>rest_framework</code> 與 <code>articles</code> 加入 <code>INSTALLED_APPS</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;articles&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-建立模型"><a href="#3-建立模型" class="headerlink" title="3. 建立模型"></a>3. 建立模型</h3><p>打開 <code>articles/models.py</code>，定義一個 <code>Article</code> 模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    created_at = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure>

<p>然後執行遷移：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-建立序列化器（Serializer）"><a href="#4-建立序列化器（Serializer）" class="headerlink" title="4. 建立序列化器（Serializer）"></a>4. 建立序列化器（Serializer）</h3><p>在 <code>articles</code> 資料夾中建立 <code>serializers.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>

<p>這樣就完成了資料庫模型與 JSON 之間的轉換設定。</p>
<hr>
<h3 id="5-建立-API-View"><a href="#5-建立-API-View" class="headerlink" title="5. 建立 API View"></a>5. 建立 API View</h3><p>在 <code>articles/views.py</code> 中加入以下程式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleListCreateView</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleDetailView</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br></pre></td></tr></table></figure>

<p>我們使用了 DRF 的「通用類別視圖」，大幅減少手寫程式碼。</p>
<hr>
<h3 id="6-設定-URL"><a href="#6-設定-URL" class="headerlink" title="6. 設定 URL"></a>6. 設定 URL</h3><p>在 <code>articles</code> 資料夾中建立 <code>urls.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> ArticleListCreateView, ArticleDetailView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/&#x27;</span>, ArticleListCreateView.as_view(), name=<span class="string">&#x27;article-list-create&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:pk&gt;/&#x27;</span>, ArticleDetailView.as_view(), name=<span class="string">&#x27;article-detail&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>接著將 <code>articles/urls.py</code> 加入主專案的 <code>myapi/urls.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api/&#x27;</span>, include(<span class="string">&#x27;articles.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>現在 API 路由已經設定完成。</p>
<hr>
<h3 id="7-測試-API"><a href="#7-測試-API" class="headerlink" title="7. 測試 API"></a>7. 測試 API</h3><p>啟動開發伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>打開瀏覽器，造訪 <code>http://127.0.0.1:8000/api/articles/</code>，我們會看到 DRF 提供的漂亮瀏覽介面，可以直接用網頁表單測試 API。</p>
<p>我們也可以用工具如 Postman 或 curl 測試：</p>
<h4 id="建立新文章"><a href="#建立新文章" class="headerlink" title="建立新文章"></a>建立新文章</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">    -d <span class="string">&#x27;&#123;&quot;title&quot;: &quot;第一篇文章&quot;, &quot;content&quot;: &quot;這是一篇測試文章&quot;&#125;&#x27;</span> \</span><br><span class="line">    http://127.0.0.1:8000/api/articles/</span><br></pre></td></tr></table></figure>

<h4 id="取得文章列表"><a href="#取得文章列表" class="headerlink" title="取得文章列表"></a>取得文章列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:8000/api/articles/</span><br></pre></td></tr></table></figure>

<h4 id="取得單篇文章"><a href="#取得單篇文章" class="headerlink" title="取得單篇文章"></a>取得單篇文章</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:8000/api/articles/1/</span><br></pre></td></tr></table></figure>

<h4 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">    -d <span class="string">&#x27;&#123;&quot;title&quot;: &quot;更新後標題&quot;, &quot;content&quot;: &quot;更新後內容&quot;&#125;&#x27;</span> \</span><br><span class="line">    http://127.0.0.1:8000/api/articles/1/</span><br></pre></td></tr></table></figure>

<h4 id="刪除文章"><a href="#刪除文章" class="headerlink" title="刪除文章"></a>刪除文章</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X DELETE http://127.0.0.1:8000/api/articles/1/</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-總結"><a href="#8-總結" class="headerlink" title="8. 總結"></a>8. 總結</h2><p>透過這篇筆記，我們完成了：</p>
<ul>
<li>安裝 Django 與 DRF</li>
<li>定義模型與序列化器</li>
<li>使用泛型類別視圖實作 CRUD API</li>
<li>設定 URL 路由</li>
<li>使用瀏覽器或命令列工具測試 API</li>
</ul>
<p>Django REST Framework 提供了許多自動化與簡化開發的工具，讓我們能快速建立出符合 REST 標準的 API。當然，隨著需求增加，我們也可以進一步學習自定義權限、驗證、過濾與分頁等功能。</p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 入門語法教學筆記 | 學習筆記</title>
    <url>/2017/02/01/learning-notes-ecmascript6-es6-javascript-intro-tutorial%20copy/</url>
    <content><![CDATA[<p>ECMAScript 6 又稱 ECMAScript 2015，是 JavaScript 語言的新一代標準，讓 JavaScript 可以更容易撰寫大型複雜的應用程式並避免不必要的錯誤。</p>
<p>以下介紹常用 ES6 入門語法：</p>
<h2 id="一、let-amp-const-變數宣告"><a href="#一、let-amp-const-變數宣告" class="headerlink" title="一、let &amp; const 變數宣告"></a>一、let &amp; const 變數宣告</h2><ol>
<li><p><code>let</code>：用於宣告變數，可重新賦值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">name = <span class="string">&#x27;Mike&#x27;</span>;  <span class="comment">// 可以重新賦值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>const</code>：用於宣告常數，賦值後不可更改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">3.1415</span>;  <span class="comment">// 會報錯</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>建議預設使用 <code>const</code>，僅需變更時使用 <code>let</code>。兩者作用域為 block scope</p>
</blockquote>
</li>
</ol>
<p>在 <strong>ES6</strong> 中，<code>let</code> 的 <strong>區塊作用域（Block Scope）</strong> 是它與舊有的 <code>var</code> 最大的不同之一。</p>
<hr>
<h3 id="什麼是-Block-Scope（區塊作用域）？"><a href="#什麼是-Block-Scope（區塊作用域）？" class="headerlink" title="什麼是 Block Scope（區塊作用域）？"></a>什麼是 <strong>Block Scope（區塊作用域）</strong>？</h3><ul>
<li>使用 <code>let</code> 宣告的變數，只能在<strong>該程式區塊 <code>&#123;&#125;</code></strong> 內部存取。</li>
<li>區塊作用域指的是任何用 <code>&#123;&#125;</code> 包起來的範圍，例如：<ul>
<li><code>if</code>、<code>for</code>、<code>while</code> 等程式區塊。</li>
<li>一般 <code>&#123;&#125;</code> 花括號內的區域。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h3><h4 id="1-let-在區塊內的作用範圍"><a href="#1-let-在區塊內的作用範圍" class="headerlink" title="1. let 在區塊內的作用範圍"></a>1. <code>let</code> 在區塊內的作用範圍</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>x</code> 在 <code>&#123;&#125;</code> 區塊內宣告，僅在該區塊內有效。</li>
<li>區塊外存取會出錯。</li>
</ul>
<hr>
<h4 id="2-var-沒有區塊作用域（舊語法對比）"><a href="#2-var-沒有區塊作用域（舊語法對比）" class="headerlink" title="2. var 沒有區塊作用域（舊語法對比）"></a>2. <code>var</code> 沒有區塊作用域（舊語法對比）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);  <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>var</code> 沒有區塊作用域，<code>y</code> 雖在 <code>&#123;&#125;</code> 內宣告，但可在區塊外存取。</li>
</ul>
<hr>
<h4 id="3-for-迴圈中的-let"><a href="#3-for-迴圈中的-let" class="headerlink" title="3. for 迴圈中的 let"></a>3. <code>for</code> 迴圈中的 <code>let</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);  <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);  <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>i</code> 只在 <code>for</code> 迴圈內有效。</li>
</ul>
<hr>
<h4 id="let-的區塊作用域優點"><a href="#let-的區塊作用域優點" class="headerlink" title="let 的區塊作用域優點"></a><code>let</code> 的區塊作用域優點</h4><ol>
<li>避免變數污染：<code>let</code> 限制變數在區塊內，避免影響區塊外的程式碼。</li>
<li>防止重複定義：同一區塊內不能重複宣告相同變數。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;  <span class="comment">// SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure></li>
<li>更安全、可預期的變數管理。</li>
</ol>
<hr>
<h4 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h4><table>
<thead>
<tr>
<th>關鍵字</th>
<th>區塊作用域</th>
<th>重複宣告</th>
<th>提升（Hoisting）行為</th>
</tr>
</thead>
<tbody><tr>
<td><code>let</code></td>
<td>有</td>
<td>不可</td>
<td>提升但不初始化（TDZ）</td>
</tr>
<tr>
<td><code>var</code></td>
<td>無</td>
<td>可</td>
<td>提升並初始化 <code>undefined</code></td>
</tr>
</tbody></table>
<p>**建議盡量用 <code>let</code> 和 <code>const</code>，避免使用 <code>var</code>**！<br>這樣可以減少潛在的 bug，也符合現代 JavaScript 開發的最佳實踐。</p>
<hr>
<h2 id="二、模板字串（Template-Literals）"><a href="#二、模板字串（Template-Literals）" class="headerlink" title="二、模板字串（Template Literals）"></a>二、模板字串（Template Literals）</h2><p>以前字串串變數要使用 <code>+</code>，現在可以使用反引號 (&#96;&#96;) 定義字串，可插入變數。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫 <span class="subst">$&#123;name&#125;</span>，今年 <span class="subst">$&#123;age&#125;</span> 歲`</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、箭頭函式（Arrow-Functions）"><a href="#三、箭頭函式（Arrow-Functions）" class="headerlink" title="三、箭頭函式（Arrow Functions）"></a>三、箭頭函式（Arrow Functions）</h2><ol>
<li>基本語法：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>簡寫形式：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure></li>
<li>單一參數可省略括號：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">square</span> = n =&gt; n * n;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>箭頭函式不會綁定自己的 <code>this</code>，繼承外層作用域的 <code>this</code>。</p>
</blockquote>
</li>
</ol>
<hr>
<p>沒錯！這句話是 <strong>箭頭函式（Arrow Function）</strong> 很重要的特性之一，這裡幫你拆解得更清楚一點：</p>
<hr>
<h4 id="什麼是-this？"><a href="#什麼是-this？" class="headerlink" title="什麼是 this？"></a>什麼是 <code>this</code>？</h4><p><code>this</code> 代表<strong>函式執行時所屬的物件</strong>，依照函式被呼叫的方式不同，<code>this</code> 的值也會不同。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">normalFunction</span>(); <span class="comment">// 在瀏覽器環境中，this 會是 window 物件</span></span><br></pre></td></tr></table></figure>

<p>如果這個函式被某個物件呼叫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>(); <span class="comment">// John，this 指向 obj</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="箭頭函式的-this-特性"><a href="#箭頭函式的-this-特性" class="headerlink" title="箭頭函式的 this 特性"></a>箭頭函式的 <code>this</code> 特性</h4><p><strong>箭頭函式不會綁定自己的 <code>this</code>，它會「繼承外層作用域」的 <code>this</code>。</strong></p>
<p>也就是說：</p>
<ul>
<li>傳統函式：<code>this</code> 依賴呼叫方式來決定。</li>
<li>箭頭函式：<code>this</code> 取決於**箭頭函式宣告時所在的外層作用域的 <code>this</code>**。</li>
</ul>
<p>範例說明：</p>
<h4 id="傳統函式-vs-箭頭函式"><a href="#傳統函式-vs-箭頭函式" class="headerlink" title="傳統函式 vs 箭頭函式"></a>傳統函式 vs 箭頭函式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">normalFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// this 指向 obj</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arrowFunc</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// this 指向外層（通常是 window 或 undefined）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">normalFunc</span>(); <span class="comment">// John</span></span><br><span class="line">obj.<span class="title function_">arrowFunc</span>();  <span class="comment">// undefined（或瀏覽器中可能是 window.name）</span></span><br></pre></td></tr></table></figure>

<h4 id="常見應用場景：回呼函式（callback）中的-this"><a href="#常見應用場景：回呼函式（callback）中的-this" class="headerlink" title="常見應用場景：回呼函式（callback）中的 this"></a>常見應用場景：回呼函式（callback）中的 <code>this</code></h4><p>假設我們有一個計時器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">timer</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// undefined 或 window.name</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">timer</span>();</span><br></pre></td></tr></table></figure>
<p>因為 setTimeout 裡的傳統函式，它的 <code>this</code> 在執行時會指向 <code>window</code>。</p>
<p>若改用箭頭函式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">timer</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">timer</span>();</span><br></pre></td></tr></table></figure>
<p>箭頭函式不會綁定自己的 <code>this</code>，會繼承 <code>timer</code> 函式的 <code>this</code>，因此會正確印出 <code>John</code>。</p>
<hr>
<h4 id="常見疑問"><a href="#常見疑問" class="headerlink" title="常見疑問"></a>常見疑問</h4><h5 id="為什麼箭頭函式不綁定自己的-this？"><a href="#為什麼箭頭函式不綁定自己的-this？" class="headerlink" title="為什麼箭頭函式不綁定自己的 this？"></a>為什麼箭頭函式不綁定自己的 <code>this</code>？</h5><p>主要是為了解決<strong>回呼函式中 <code>this</code> 易出錯的問題</strong>。</p>
<p>以前會這樣解法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> that = <span class="variable language_">this</span>; <span class="comment">// 變數 that 保存正確的 this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">name</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>現在有箭頭函式，就不用這麼麻煩。</p>
<hr>
<h4 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h4><table>
<thead>
<tr>
<th>類型</th>
<th><code>this</code> 綁定方式</th>
<th>一般用途</th>
</tr>
</thead>
<tbody><tr>
<td>傳統函式 function</td>
<td>執行時決定</td>
<td>物件方法、建構函式</td>
</tr>
<tr>
<td>箭頭函式 &#x3D;&gt;</td>
<td>定義時決定</td>
<td>callback 回呼函式、內部函式需要使用外部 <code>this</code> 的情境</td>
</tr>
</tbody></table>
<hr>
<p>總結：</p>
<ul>
<li><strong>一般物件方法用傳統函式。this 由呼叫的物件決定</strong></li>
<li><strong>callback 回呼函式、內部函式用箭頭函式。</strong></li>
</ul>
<p>這樣就可以避免大部分 <code>this</code> 的混亂狀況！</p>
<h2 id="四、解構賦值（Destructuring）"><a href="#四、解構賦值（Destructuring）" class="headerlink" title="四、解構賦值（Destructuring）"></a>四、解構賦值（Destructuring）</h2><ol>
<li>陣列解構：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = arr;</span><br></pre></td></tr></table></figure></li>
<li>物件解構：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = person;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="五、展開運算符（Spread-Operator）"><a href="#五、展開運算符（Spread-Operator）" class="headerlink" title="五、展開運算符（Spread Operator）"></a>五、展開運算符（Spread Operator）</h2><ol>
<li>陣列展開：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure></li>
<li>物件展開：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj1, <span class="attr">city</span>: <span class="string">&#x27;Taipei&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="六、預設參數（Default-Parameters）"><a href="#六、預設參數（Default-Parameters）" class="headerlink" title="六、預設參數（Default Parameters）"></a>六、預設參數（Default Parameters）</h2><p>函式參數可設定預設值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name = <span class="string">&#x27;訪客&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>();         <span class="comment">// Hello, 訪客!</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;John&#x27;</span>);   <span class="comment">// Hello, John!</span></span><br></pre></td></tr></table></figure>

<hr>
<p>這些 ES6 基礎語法，是現代 JavaScript 開發的常用技巧，掌握這些概念能大幅提升程式撰寫效率。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>ES6</tag>
        <tag>ECMAScript</tag>
        <tag>ECMAScript6</tag>
        <tag>ECMAScript2015</tag>
      </tags>
  </entry>
  <entry>
    <title>Emotion CSS 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/30/learning-notes-emotion-css-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-Emotion-CSS-簡介"><a href="#1-Emotion-CSS-簡介" class="headerlink" title="1. Emotion CSS 簡介"></a>1. Emotion CSS 簡介</h2><p>Emotion 是一款強大的 CSS-in-JS 解決方案，提供高效能且靈活的樣式管理方式，適用於 React 應用。Emotion 支援兩種主要的使用方式：</p>
<ol>
<li><strong>CSS Prop</strong>（使用 JSX 內嵌樣式）</li>
<li><strong>styled API</strong>（使用 <code>styled</code> 函式創建元件）</li>
</ol>
<h2 id="2-安裝-Emotion"><a href="#2-安裝-Emotion" class="headerlink" title="2. 安裝 Emotion"></a>2. 安裝 Emotion</h2><p>使用 npm 或 yarn 安裝 Emotion 核心套件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @emotion/react @emotion/styled</span><br></pre></td></tr></table></figure>

<p>如果專案使用 Babel，建議安裝 Emotion 的 Babel 插件來提高效能：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @emotion/babel-plugin</span><br></pre></td></tr></table></figure>

<p>並在 <code>.babelrc</code> 中添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@emotion&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-CSS-Prop-用法"><a href="#3-CSS-Prop-用法" class="headerlink" title="3. CSS Prop 用法"></a>3. CSS Prop 用法</h2><p>CSS Prop 允許你直接在 JSX 中定義 CSS 樣式。</p>
<h3 id="基本範例"><a href="#基本範例" class="headerlink" title="基本範例"></a>基本範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@jsxImportSource</span> <span class="doctag">@emotion</span>/react */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = css`<span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;style&#125;</span>&gt;</span>Hello, Emotion!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="傳遞-props-變更樣式"><a href="#傳遞-props-變更樣式" class="headerlink" title="傳遞 props 變更樣式"></a>傳遞 props 變更樣式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dynamicStyle</span> = (<span class="params">color</span>) =&gt; css`<span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: </span><span class="subst">$&#123;color&#125;</span><span class="language-css">;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">&#123; color = <span class="string">&#x27;lightblue&#x27;</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;dynamicStyle(color)&#125;</span>&gt;</span>Dynamic Emotion<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-styled-API-用法"><a href="#4-styled-API-用法" class="headerlink" title="4. styled API 用法"></a>4. styled API 用法</h2><p><code>styled</code> API 讓我們能夠創建具備 CSS 樣式的 React 元件。</p>
<h3 id="基本範例-1"><a href="#基本範例-1" class="headerlink" title="基本範例"></a>基本範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;@emotion/styled&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background-color: #3498db;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    background-color: #2980b9;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="傳遞-props-變更樣式-1"><a href="#傳遞-props-變更樣式-1" class="headerlink" title="傳遞 props 變更樣式"></a>傳遞 props 變更樣式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.bg || <span class="string">&#x27;#3498db&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; props.color || <span class="string">&#x27;white&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    background-color: <span class="subst">$&#123;(props) =&gt; (props.bg ? darken(<span class="number">0.1</span>, props.bg) : <span class="string">&#x27;#2980b9&#x27;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">bg</span>=<span class="string">&quot;tomato&quot;</span>&gt;</span>Custom Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-全域樣式與-Theme"><a href="#5-全域樣式與-Theme" class="headerlink" title="5. 全域樣式與 Theme"></a>5. 全域樣式與 Theme</h2><h3 id="使用-Global-樣式"><a href="#使用-Global-樣式" class="headerlink" title="使用 Global 樣式"></a>使用 Global 樣式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Global</span>, css &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globalStyles = css`<span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Global</span> <span class="attr">styles</span>=<span class="string">&#123;globalStyles&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, Global Emotion!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-Theme"><a href="#使用-Theme" class="headerlink" title="使用 Theme"></a>使用 Theme</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;@emotion/styled&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> theme = &#123;</span><br><span class="line">  <span class="attr">colors</span>: &#123;</span><br><span class="line">    <span class="attr">primary</span>: <span class="string">&#x27;#3498db&#x27;</span>,</span><br><span class="line">    <span class="attr">secondary</span>: <span class="string">&#x27;#2ecc71&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemedButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.theme.colors.primary&#125;</span>;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemedButton</span>&gt;</span>Themed Button<span class="tag">&lt;/<span class="name">ThemedButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><p>Emotion 是一款靈活且高效的 CSS-in-JS 解決方案，適用於 React 應用。它提供 <code>css</code> prop 以及 <code>styled</code> API 來幫助開發者管理樣式，並支援全域樣式與主題設定。這篇教學筆記涵蓋了基礎概念與常見用法，希望對你的開發過程有所幫助。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>Emotion CSS</tag>
        <tag>styled</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 i18n 入門教學與注意事項整理筆記 | 學習筆記</title>
    <url>/2025/01/13/learning-notes-frontend-i18n-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現今的全球化應用中，網站或產品若希望觸及更多用戶，提供多語系支援幾乎是必須的功能。這就是所謂的國際化（Internationalization，簡稱 i18n），意即在程式設計階段預先做好結構設計，使系統能根據不同語言與地區的需求，自動載入對應的文案、格式與顯示方式。</p>
<p>本篇筆記將說明前端 i18n 的核心觀念、開發時常見的注意事項，以及如何透過實際程式碼實作一個簡單的多語系功能，協助你快速掌握前端 i18n 的基本功。</p>
<hr>
<h2 id="重點摘要：i18n-實作注意事項"><a href="#重點摘要：i18n-實作注意事項" class="headerlink" title="重點摘要：i18n 實作注意事項"></a>重點摘要：i18n 實作注意事項</h2><ol>
<li><strong>避免硬編碼文字</strong>：所有顯示文字應抽離為 key-value 翻譯檔，便於日後維護與翻譯。</li>
<li><strong>使用成熟 i18n 套件</strong>：例如 React 的 <code>react-i18next</code>、Vue 的 <code>vue-i18n</code>。</li>
<li><strong>結構化管理翻譯檔案</strong>：依功能模組分類翻譯內容，避免 key 混亂或重複。</li>
<li><strong>支援變數插值與格式化</strong>：例如姓名、時間、數字等內容應透過參數傳遞給翻譯函數。</li>
<li><strong>避免字串拼接組合句子</strong>：不同語言語序不同，拼接容易導致語意錯誤。</li>
<li><strong>設計 UI 時預留文字空間</strong>：不同語言的字串長度可能差異很大。</li>
<li><strong>處理 RTL 語言與排版</strong>：如阿拉伯語需設定 <code>direction: rtl</code>，必要時翻轉 UI。</li>
<li><strong>提供語系切換機制與偵測</strong>：可從 <code>navigator.language</code>、URL、cookie 判斷語系。</li>
<li><strong>設計 fallback 機制</strong>：若某語系未翻譯的 key，應自動 fallback 至預設語系。</li>
<li><strong>翻譯流程建議自動化與工具化</strong>：搭配翻譯平台（如 Lokalise、Crowdin）管理翻譯流程與品質。</li>
</ol>
<hr>
<h2 id="實作範例：使用-React-react-i18next-實現簡單的-i18n-功能"><a href="#實作範例：使用-React-react-i18next-實現簡單的-i18n-功能" class="headerlink" title="實作範例：使用 React + react-i18next 實現簡單的 i18n 功能"></a>實作範例：使用 React + react-i18next 實現簡單的 i18n 功能</h2><p>假設我們有一個需要支援中英文切換的 React 專案，以下將一步步實作基本功能。</p>
<h3 id="步驟一：安裝相關套件"><a href="#步驟一：安裝相關套件" class="headerlink" title="步驟一：安裝相關套件"></a>步驟一：安裝相關套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install i18next react-i18next i18next-browser-languagedetector</span><br></pre></td></tr></table></figure>

<h3 id="步驟二：建立翻譯檔案（放在-src-locales-）"><a href="#步驟二：建立翻譯檔案（放在-src-locales-）" class="headerlink" title="步驟二：建立翻譯檔案（放在 src/locales/）"></a>步驟二：建立翻譯檔案（放在 <code>src/locales/</code>）</h3><p><strong>src&#x2F;locales&#x2F;en&#x2F;translation.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;greeting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, &#123;&#123;name&#125;&#125;!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Welcome to the homepage&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>src&#x2F;locales&#x2F;zh&#x2F;translation.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;greeting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;哈囉，&#123;&#123;name&#125;&#125;！&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歡迎來到首頁&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="步驟三：初始化-i18n-設定（src-x2F-i18n-js）"><a href="#步驟三：初始化-i18n-設定（src-x2F-i18n-js）" class="headerlink" title="步驟三：初始化 i18n 設定（src&#x2F;i18n.js）"></a>步驟三：初始化 i18n 設定（src&#x2F;i18n.js）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LanguageDetector</span> <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&#x27;./locales/en/translation.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&#x27;./locales/zh/translation.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  .<span class="title function_">use</span>(<span class="title class_">LanguageDetector</span>)</span><br><span class="line">  .<span class="title function_">use</span>(initReactI18next)</span><br><span class="line">  .<span class="title function_">init</span>(&#123;</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123; <span class="attr">translation</span>: en &#125;,</span><br><span class="line">      <span class="attr">zh</span>: &#123; <span class="attr">translation</span>: zh &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure>

<h3 id="步驟四：在應用入口引入-i18n-設定（例如-index-js）"><a href="#步驟四：在應用入口引入-i18n-設定（例如-index-js）" class="headerlink" title="步驟四：在應用入口引入 i18n 設定（例如 index.js）"></a>步驟四：在應用入口引入 i18n 設定（例如 index.js）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="步驟五：在元件中使用翻譯"><a href="#步驟五：在元件中使用翻譯" class="headerlink" title="步驟五：在元件中使用翻譯"></a>步驟五：在元件中使用翻譯</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HomePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = <span class="title function_">useTranslation</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeLanguage</span> = (<span class="params">lang</span>) =&gt; &#123;</span><br><span class="line">    i18n.<span class="title function_">changeLanguage</span>(lang);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;home.title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;greeting&#x27;, &#123; name: &#x27;KD&#x27; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> changeLanguage(&#x27;en&#x27;)&#125;&gt;English<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> changeLanguage(&#x27;zh&#x27;)&#125;&gt;中文<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HomePage</span>;</span><br></pre></td></tr></table></figure>

<h3 id="預期畫面輸出"><a href="#預期畫面輸出" class="headerlink" title="預期畫面輸出"></a>預期畫面輸出</h3><p>使用者進入頁面，根據瀏覽器語言自動載入對應語系，或透過按鈕切換語言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">歡迎來到首頁</span><br><span class="line">哈囉，KD！</span><br><span class="line">[English] [中文]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>i18n 是每個想要「走向國際」的產品所必備的基礎建設之一。透過妥善設計的翻譯架構與工具整合，不僅能提升使用者體驗，也有助於日後擴展新市場與新語系。</p>
<p>建議開發者在專案初期就規劃好 i18n 架構，並搭配良好的團隊流程與翻譯管理工具，將繁瑣的翻譯作業系統化，避免日後重構的成本。</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>react</tag>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 指令學習筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-git-command-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git 是現代軟體開發中最常使用的分散式版本控制系統，它幫助開發者管理源代碼的版本和協作。這篇教學將從基礎開始，介紹 Git 的常用命令並提供實際範例，幫助你熟悉如何使用 Git 來進行版本控制與協作。</p>
<h2 id="1-初始化-Git-倉庫-git-init"><a href="#1-初始化-Git-倉庫-git-init" class="headerlink" title="1. 初始化 Git 倉庫 (git init)"></a>1. 初始化 Git 倉庫 (<code>git init</code>)</h2><p>在專案資料夾中使用 <code>git init</code> 可以初始化一個新的 Git 倉庫，這樣就可以開始使用 Git 來管理專案中的檔案版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>執行後會在專案資料夾內建立一個 <code>.git</code> 的隱藏資料夾，這表示這個資料夾已經被 Git 所管理。</p>
<h2 id="2-查看當前狀態-git-status"><a href="#2-查看當前狀態-git-status" class="headerlink" title="2. 查看當前狀態 (git status)"></a>2. 查看當前狀態 (<code>git status</code>)</h2><p>在進行版本控制時，使用 <code>git status</code> 可以查看專案的當前狀態。這個命令會顯示哪些檔案已經被修改、哪些檔案尚未加入版本控制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>這會列出所有變更過的檔案（包括已修改、尚未追蹤的檔案等）以及當前分支的狀態。</p>
<h2 id="3-新增檔案到暫存區-git-add"><a href="#3-新增檔案到暫存區-git-add" class="headerlink" title="3. 新增檔案到暫存區 (git add)"></a>3. 新增檔案到暫存區 (<code>git add</code>)</h2><p>修改檔案後，必須先使用 <code>git add</code> 把檔案新增到暫存區，才可以進行提交。使用 <code>git add</code> 可以指定單一檔案或多個檔案，或者一次將所有檔案加入暫存區。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add filename.txt</span><br></pre></td></tr></table></figure>

<p>或將所有變更加入暫存區：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h2 id="4-提交變更-git-commit"><a href="#4-提交變更-git-commit" class="headerlink" title="4. 提交變更 (git commit)"></a>4. 提交變更 (<code>git commit</code>)</h2><p>將檔案從暫存區提交到本地版本庫使用 <code>git commit</code>。每次提交時，需要提供一個簡短的描述，解釋這次提交的內容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;新增使用者登錄功能&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-設定-Git-使用者資訊-git-config"><a href="#5-設定-Git-使用者資訊-git-config" class="headerlink" title="5. 設定 Git 使用者資訊 (git config)"></a>5. 設定 Git 使用者資訊 (<code>git config</code>)</h2><p>在進行提交之前，必須設定 Git 的使用者名稱和電子郵件。這些資料會與每次提交關聯。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your.email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>這會把你的名稱和郵箱寫入全域設定，未來每次提交都會使用這些設定。</p>
<h2 id="6-查看提交歷史-git-log"><a href="#6-查看提交歷史-git-log" class="headerlink" title="6. 查看提交歷史 (git log)"></a>6. 查看提交歷史 (<code>git log</code>)</h2><p>使用 <code>git log</code> 可以查看專案的提交歷史。這會顯示每次提交的詳細信息，包括提交哈希值、作者、日期和提交訊息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>如果希望更簡潔的輸出，可以使用 <code>--oneline</code> 參數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure>

<h2 id="7-恢復檔案-git-restore"><a href="#7-恢復檔案-git-restore" class="headerlink" title="7. 恢復檔案 (git restore)"></a>7. 恢復檔案 (<code>git restore</code>)</h2><p>如果你修改了一些檔案並且還沒有提交，可以使用 <code>git restore</code> 恢復檔案到上次提交的狀態，撤銷變更。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore filename.txt</span><br></pre></td></tr></table></figure>

<p>如果想撤銷暫存區的變更，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore --staged filename.txt</span><br></pre></td></tr></table></figure>

<h2 id="8-追蹤檔案變動紀錄-git-blame"><a href="#8-追蹤檔案變動紀錄-git-blame" class="headerlink" title="8. 追蹤檔案變動紀錄 (git blame)"></a>8. 追蹤檔案變動紀錄 (<code>git blame</code>)</h2><p>如果你想查看某個檔案每一行是誰在什麼時候修改的，可以使用 <code>git blame</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame filename.txt</span><br></pre></td></tr></table></figure>

<p>這會顯示每一行的修改者與修改時間，有助於了解程式碼的歷史。</p>
<h2 id="9-建立分支-git-branch"><a href="#9-建立分支-git-branch" class="headerlink" title="9. 建立分支 (git branch)"></a>9. 建立分支 (<code>git branch</code>)</h2><p>在 Git 中，分支讓你能夠並行地進行多個工作。你可以使用 <code>git branch</code> 查看目前所有的分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>要創建新的分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature-login</span><br></pre></td></tr></table></figure>

<h2 id="10-切換分支-git-switch"><a href="#10-切換分支-git-switch" class="headerlink" title="10. 切換分支 (git switch)"></a>10. 切換分支 (<code>git switch</code>)</h2><p>要切換到不同的分支，可以使用 <code>git switch</code>。例如，切換到 <code>feature-login</code> 分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch feature-login</span><br></pre></td></tr></table></figure>

<p>如果你要創建並切換到一個新的分支，可以加上 <code>-c</code> 選項：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch -c feature-register</span><br></pre></td></tr></table></figure>

<h2 id="11-切換提交紀錄或分支-git-checkout"><a href="#11-切換提交紀錄或分支-git-checkout" class="headerlink" title="11. 切換提交紀錄或分支 (git checkout)"></a>11. 切換提交紀錄或分支 (<code>git checkout</code>)</h2><p>雖然 <code>git switch</code> 是較新的命令，但仍然可以使用 <code>git checkout</code> 切換分支或還原檔案。要切換到某個分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature-login</span><br></pre></td></tr></table></figure>

<p>若要還原某個檔案到指定的提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;commit_hash&gt; filename.txt</span><br></pre></td></tr></table></figure>

<h2 id="12-合併分支-git-merge"><a href="#12-合併分支-git-merge" class="headerlink" title="12. 合併分支 (git merge)"></a>12. 合併分支 (<code>git merge</code>)</h2><p>將不同分支的更改合併回主分支可以使用 <code>git merge</code>。首先切換到目標分支（例如 <code>main</code>），然後執行合併操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch main</span><br><span class="line">git merge feature-login</span><br></pre></td></tr></table></figure>

<p>如果有衝突，Git 會提示你解決衝突。</p>
<h2 id="13-重新整理提交歷史-git-rebase"><a href="#13-重新整理提交歷史-git-rebase" class="headerlink" title="13. 重新整理提交歷史 (git rebase)"></a>13. 重新整理提交歷史 (<code>git rebase</code>)</h2><p><code>git rebase</code> 用來重新整理提交歷史，將一個分支的更改重新應用到另一個分支上，使歷史更為線性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch feature-login</span><br><span class="line">git rebase main</span><br></pre></td></tr></table></figure>

<p>這會將 <code>feature-login</code> 分支的變更，重新應用到 <code>main</code> 分支的最新提交上。</p>
<h2 id="14-重置提交-git-reset"><a href="#14-重置提交-git-reset" class="headerlink" title="14. 重置提交 (git reset)"></a>14. 重置提交 (<code>git reset</code>)</h2><p>如果你想取消最近一次的提交，可以使用 <code>git reset</code>。使用 <code>--soft</code> 保留檔案變更，<code>--hard</code> 則會刪除變更：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>

<p>這會將上一個提交撤回，但保留檔案變更；若使用 <code>--hard</code>，則會完全撤回提交及變更。</p>
<h2 id="15-查看操作紀錄-git-reflog"><a href="#15-查看操作紀錄-git-reflog" class="headerlink" title="15. 查看操作紀錄 (git reflog)"></a>15. 查看操作紀錄 (<code>git reflog</code>)</h2><p><code>git reflog</code> 可以幫助你查看 HEAD 的操作紀錄，即便你進行了 <code>reset</code> 或 <code>checkout</code> 等操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p>這個命令列出所有曾經指向 HEAD 的 commit 參考，並且可以用來恢復丟失的提交。</p>
<h2 id="16-暫存變更-git-stash"><a href="#16-暫存變更-git-stash" class="headerlink" title="16. 暫存變更 (git stash)"></a>16. 暫存變更 (<code>git stash</code>)</h2><p>如果你正在進行某些變更，但又需要切換到其他分支處理緊急問題，可以使用 <code>git stash</code> 暫時儲存未提交的變更：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<p>這會暫時保存變更，並恢復工作目錄到最後一次提交的狀態。待你完成緊急工作後，可以使用 <code>git stash pop</code> 恢復變更。</p>
<h2 id="17-選擇性地應用提交-git-cherry-pick"><a href="#17-選擇性地應用提交-git-cherry-pick" class="headerlink" title="17. 選擇性地應用提交 (git cherry-pick)"></a>17. 選擇性地應用提交 (<code>git cherry-pick</code>)</h2><p><code>git cherry-pick</code> 讓你可以選擇性地將某個提交應用到當前分支。例如，將 <code>feature-login</code> 分支的某個提交應用到 <code>main</code> 分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commit_hash&gt;</span><br></pre></td></tr></table></figure>

<p>這對於選擇性地將某些特定變更移動到其他分支非常有用。</p>
<h2 id="18-子模組-git-submodule"><a href="#18-子模組-git-submodule" class="headerlink" title="18. 子模組 (git submodule)"></a>18. 子模組 (<code>git submodule</code>)</h2><p>當專案中有其他專案作為依賴時，可以使用 Git 子模組來管理。首先，將子模組加入專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;repository_url&gt; path/to/submodule</span><br></pre></td></tr></table></figure>

<p>這會在專案中加入一個指向其他 Git 倉庫的子模組。在克隆專案時，記得加上 <code>--recurse-submodules</code> 來獲取子模組的內容。</p>
<hr>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上介紹了 Git 中一些常用的命令，這些命令幾乎涵蓋了日常開發中的大部分需求。熟練掌握 Git 讓你在開發過程中更加高效，無論是單人開發還是團隊協作，都能大大提高工作流的順暢性。如果你還有進一步的需求或疑問，隨時可以深入學習 Git 的進階技巧。</p>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Flow 介紹與 GitHub Flow 介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/12/04/learning-notes-git-flow-github-flow-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在軟體開發中，版本控制是協作開發中至關重要的工具。Git 作為當前最受歡迎的版本控制系統，其強大的分支管理和版本控制功能，使得開發團隊能夠高效地進行協作。兩種常見的 Git 工作流是 Git Flow 和 GitHub Flow，這些工作流提供了清晰的分支管理策略，讓團隊可以更加有序地開發和部署代碼。本文將介紹 Git Flow 和 GitHub Flow 的基本概念、使用方法，以及它們之間的區別。</p>
<h1 id="一、Git-Flow-介紹"><a href="#一、Git-Flow-介紹" class="headerlink" title="一、Git Flow 介紹"></a>一、Git Flow 介紹</h1><p>Git Flow 是一個基於 Git 的分支管理模型，主要由 Vincent Driessen 提出，旨在幫助開發團隊實現規範化的分支管理，並對不同開發階段的代碼進行有效的管理。Git Flow 工作流適合需要頻繁發布新版本的項目，並且開發流程中包含多個階段，如開發、測試、發佈等。其工作流程通常包含以下幾個核心分支：</p>
<h4 id="1-1-主要分支"><a href="#1-1-主要分支" class="headerlink" title="1.1 主要分支"></a>1.1 主要分支</h4><ol>
<li><p><strong>master 分支</strong>：<br><code>master</code> 分支是 Git Flow 中的核心分支，所有穩定的代碼都應該存在於此。每當一個新版本的代碼準備好發佈時，都會從 <code>develop</code> 分支合併到 <code>master</code>，並標記相應的版本號。這個分支通常只包含穩定的代碼，並且代表了隨時可以部署的代碼。</p>
</li>
<li><p><strong>develop 分支</strong>：<br><code>develop</code> 分支用於開發中的代碼。所有的功能開發都應該從這個分支進行，並且當開發完成後，合併回 <code>develop</code>。這個分支是整個項目的集成區，開發人員應該從 <code>develop</code> 分支開始開發新功能。</p>
</li>
</ol>
<h4 id="1-2-輔助分支"><a href="#1-2-輔助分支" class="headerlink" title="1.2 輔助分支"></a>1.2 輔助分支</h4><ol>
<li><p><strong>feature 分支</strong>：<br><code>feature</code> 分支用於開發新的功能。每個新功能都應該從 <code>develop</code> 分支創建一個新的 <code>feature</code> 分支，並且在功能開發完成後，將該分支合併回 <code>develop</code> 分支。<code>feature</code> 分支的命名通常為 <code>feature/&lt;功能名稱&gt;</code>。</p>
</li>
<li><p><strong>release 分支</strong>：<br>當 <code>develop</code> 分支上的代碼準備好進入測試階段時，會創建一個 <code>release</code> 分支。這個分支用來準備最終的發佈版本。在 <code>release</code> 分支上進行的主要工作包括 bug 修復、文檔編寫等，確保最終版本的穩定性。當測試完成並且代碼準備發佈時，<code>release</code> 分支會被合併到 <code>master</code> 和 <code>develop</code> 分支。</p>
</li>
<li><p><strong>hotfix 分支</strong>：<br><code>hotfix</code> 分支用於修復已經發佈到 <code>master</code> 分支的緊急錯誤。當發佈的版本發現重大問題時，可以立即從 <code>master</code> 分支創建 <code>hotfix</code> 分支，進行修復後，將其合併回 <code>master</code> 和 <code>develop</code> 分支。</p>
</li>
</ol>
<h4 id="1-3-Git-Flow-的流程"><a href="#1-3-Git-Flow-的流程" class="headerlink" title="1.3 Git Flow 的流程"></a>1.3 Git Flow 的流程</h4><p>Git Flow 的流程大致如下：</p>
<ul>
<li>開發新功能時，從 <code>develop</code> 分支創建 <code>feature</code> 分支。</li>
<li>當 <code>feature</code> 分支開發完成後，合併回 <code>develop</code> 分支。</li>
<li>當代碼達到穩定版本，創建 <code>release</code> 分支，進行測試和 bug 修復。</li>
<li>測試完成後，將 <code>release</code> 分支合併回 <code>master</code> 和 <code>develop</code> 分支，並標註版本。</li>
<li>若發現緊急錯誤，從 <code>master</code> 分支創建 <code>hotfix</code> 分支，進行修復並合併回 <code>master</code> 和 <code>develop</code>。</li>
</ul>
<h1 id="二、GitHub-Flow-介紹"><a href="#二、GitHub-Flow-介紹" class="headerlink" title="二、GitHub Flow 介紹"></a>二、GitHub Flow 介紹</h1><p>GitHub Flow 是 GitHub 提出的另一種工作流，主要針對快速迭代和持續集成的開發模式。與 Git Flow 複雜的分支管理相比，GitHub Flow 更加簡單和輕量，適合需要快速交付和頻繁部署的團隊。GitHub Flow 主要有以下幾個步驟：</p>
<h4 id="2-1-GitHub-Flow-的基本流程"><a href="#2-1-GitHub-Flow-的基本流程" class="headerlink" title="2.1 GitHub Flow 的基本流程"></a>2.1 GitHub Flow 的基本流程</h4><ol>
<li><p><strong>創建分支</strong>：<br>每當開始一個新功能或修復一個 bug 時，都應該從 <code>main</code> 分支創建一個新的分支。這個分支通常用來開發新的特性或修復某個問題。</p>
</li>
<li><p><strong>開發與提交</strong>：<br>在新創建的分支上進行開發，並定期將代碼提交到遠程倉庫。這些提交應該是增量的，便於代碼審查和測試。</p>
</li>
<li><p><strong>發送 Pull Request</strong>：<br>當開發完成後，將自己的分支提交為 Pull Request（PR），並請求團隊成員進行代碼審查。PR 是 GitHub Flow 中的關鍵步驟，能夠確保代碼的質量和協作。</p>
</li>
<li><p><strong>代碼審查與測試</strong>：<br>團隊成員進行代碼審查，確保代碼的質量和功能正確性。GitHub Flow 推崇頻繁的測試和集成，因此在 Pull Request 發送後，通常會自動觸發 CI（持續集成）測試，檢查代碼是否有錯誤。</p>
</li>
<li><p><strong>合併分支</strong>：<br>經過代碼審查和測試後，Pull Request 被批准，並將代碼合併到 <code>main</code> 分支。此時，新的代碼版本已經可以進行部署。</p>
</li>
<li><p><strong>部署與發佈</strong>：<br>GitHub Flow 的一大優勢是可以實現持續部署。當代碼合併到 <code>main</code> 分支後，可以立即部署到生產環境，快速交付新版本。</p>
</li>
</ol>
<h4 id="2-2-GitHub-Flow-的特點"><a href="#2-2-GitHub-Flow-的特點" class="headerlink" title="2.2 GitHub Flow 的特點"></a>2.2 GitHub Flow 的特點</h4><p>GitHub Flow 的流程非常簡單，沒有像 Git Flow 那樣的複雜分支結構，適合小型和中型的項目。它的優點在於快速迭代和持續交付，並且便於團隊成員協作。GitHub Flow 更加強調分支管理的簡化，並且強調測試和部署的自動化。</p>
<h1 id="三、Git-Flow-與-GitHub-Flow-的比較"><a href="#三、Git-Flow-與-GitHub-Flow-的比較" class="headerlink" title="三、Git Flow 與 GitHub Flow 的比較"></a>三、Git Flow 與 GitHub Flow 的比較</h1><ul>
<li><p><strong>分支結構</strong>：<br>Git Flow 有多個分支（<code>master</code>、<code>develop</code>、<code>feature</code>、<code>release</code>、<code>hotfix</code>），適用於需要穩定版本發佈的團隊。而 GitHub Flow 只有 <code>main</code> 分支和特性分支，適用於快速迭代和持續集成的開發模式。</p>
</li>
<li><p><strong>適用場景</strong>：<br>Git Flow 更適合複雜的開發流程，尤其是有多個版本和發佈周期的項目。GitHub Flow 更適合快速迭代的小型或中型項目，尤其是需要頻繁部署和交付的團隊。</p>
</li>
<li><p><strong>流程複雜度</strong>：<br>Git Flow 的流程較為繁瑣，對於小型團隊來說可能會顯得過於複雜。GitHub Flow 流程簡單，適合希望保持敏捷和快速交付的團隊。</p>
</li>
</ul>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Git Flow 和 GitHub Flow 各有優缺點，適用的場景也有所不同。選擇哪一種工作流，應根據團隊的規模、項目的複雜度以及發佈頻率來決定。對於需要穩定發佈和多版本管理的項目，Git Flow 是一個更好的選擇。而對於需要快速迭代和頻繁部署的小型項目，GitHub Flow 則是一個更簡單有效的選擇。</p>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>Git Flow</tag>
        <tag>Github Flow</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 入門教學筆記：從零開始學版本控制 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-git-intro-tutorial/</url>
    <content><![CDATA[<h2 id="為什麼要學-Git？"><a href="#為什麼要學-Git？" class="headerlink" title="為什麼要學 Git？"></a>為什麼要學 Git？</h2><p>在軟體開發中，版本控制是一個不可或缺的工具。Git 是目前最流行的版本控制系統，它能幫助你：</p>
<ul>
<li>記錄每次修改的歷史紀錄</li>
<li>回復到任一個過去的狀態</li>
<li>多人協作開發不衝突</li>
<li>管理分支進行實驗性開發</li>
</ul>
<p>無論是獨立開發者、團隊協作，還是參與開源專案，Git 都是你的好夥伴。</p>
<hr>
<h2 id="一、安裝-Git"><a href="#一、安裝-Git" class="headerlink" title="一、安裝 Git"></a>一、安裝 Git</h2><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-x2F-Debian"><a href="#Ubuntu-x2F-Debian" class="headerlink" title="Ubuntu &#x2F; Debian"></a>Ubuntu &#x2F; Debian</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>請至官網下載安裝：<a href="https://git-scm.com/">https://git-scm.com</a></p>
<hr>
<h2 id="二、基本設定"><a href="#二、基本設定" class="headerlink" title="二、基本設定"></a>二、基本設定</h2><p>第一次使用 Git 前，請先設定你的名稱與 Email（這會記錄在每次提交的資訊中）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>你也可以檢查目前的設定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、建立本地倉庫（repository）"><a href="#三、建立本地倉庫（repository）" class="headerlink" title="三、建立本地倉庫（repository）"></a>三、建立本地倉庫（repository）</h2><h3 id="建立一個新資料夾並初始化-Git"><a href="#建立一個新資料夾並初始化-Git" class="headerlink" title="建立一個新資料夾並初始化 Git"></a>建立一個新資料夾並初始化 Git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>此時 <code>.git/</code> 目錄會被建立，代表你已經在這個資料夾啟用了版本控制。</p>
<hr>
<h2 id="四、版本控制的基本流程"><a href="#四、版本控制的基本流程" class="headerlink" title="四、版本控制的基本流程"></a>四、版本控制的基本流程</h2><p>Git 的工作流程大致分為三個區域：</p>
<ol>
<li><strong>工作區（Working Directory）</strong>：你實際修改的檔案</li>
<li><strong>暫存區（Staging Area）</strong>：準備提交的檔案</li>
<li><strong>版本庫（Repository）</strong>：正式提交的版本歷史</li>
</ol>
<h3 id="1-查看狀態"><a href="#1-查看狀態" class="headerlink" title="1. 查看狀態"></a>1. 查看狀態</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="2-將檔案加入暫存區"><a href="#2-將檔案加入暫存區" class="headerlink" title="2. 將檔案加入暫存區"></a>2. 將檔案加入暫存區</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 檔名</span><br><span class="line"><span class="comment"># 或加入全部變動檔案</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h3 id="3-提交版本（commit）"><a href="#3-提交版本（commit）" class="headerlink" title="3. 提交版本（commit）"></a>3. 提交版本（commit）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;加入了首頁 HTML 結構&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、版本紀錄與回溯"><a href="#五、版本紀錄與回溯" class="headerlink" title="五、版本紀錄與回溯"></a>五、版本紀錄與回溯</h2><h3 id="查看提交紀錄"><a href="#查看提交紀錄" class="headerlink" title="查看提交紀錄"></a>查看提交紀錄</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>如果想要簡潔查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure>

<h3 id="回到先前的狀態（例如最近一次提交）"><a href="#回到先前的狀態（例如最近一次提交）" class="headerlink" title="回到先前的狀態（例如最近一次提交）"></a>回到先前的狀態（例如最近一次提交）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD^</span><br><span class="line"><span class="comment"># 回到上上一個版本</span></span><br><span class="line">git checkout HEAD~2</span><br></pre></td></tr></table></figure>

<p>但請注意這樣會進入「detached HEAD」狀態，只是暫時查看，不適合繼續開發。</p>
<hr>
<h2 id="六、分支操作（branch）"><a href="#六、分支操作（branch）" class="headerlink" title="六、分支操作（branch）"></a>六、分支操作（branch）</h2><p>分支是 Git 強大的一環，可以讓你同時開發多個功能而互不干擾。</p>
<h3 id="建立新分支"><a href="#建立新分支" class="headerlink" title="建立新分支"></a>建立新分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature-login</span><br></pre></td></tr></table></figure>

<h3 id="切換分支"><a href="#切換分支" class="headerlink" title="切換分支"></a>切換分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature-login</span><br></pre></td></tr></table></figure>

<p>或合併成一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature-login</span><br></pre></td></tr></table></figure>

<h3 id="合併分支"><a href="#合併分支" class="headerlink" title="合併分支"></a>合併分支</h3><p>切回主分支（通常是 <code>main</code> 或 <code>master</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge feature-login</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、遠端倉庫（Remote-Repository）"><a href="#七、遠端倉庫（Remote-Repository）" class="headerlink" title="七、遠端倉庫（Remote Repository）"></a>七、遠端倉庫（Remote Repository）</h2><p>若你使用 GitHub、GitLab 等服務，可以將本地專案推送到遠端：</p>
<h3 id="新增遠端倉庫"><a href="#新增遠端倉庫" class="headerlink" title="新增遠端倉庫"></a>新增遠端倉庫</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/yourname/yourproject.git</span><br></pre></td></tr></table></figure>

<h3 id="推送本地分支"><a href="#推送本地分支" class="headerlink" title="推送本地分支"></a>推送本地分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<h3 id="拉取遠端最新變更"><a href="#拉取遠端最新變更" class="headerlink" title="拉取遠端最新變更"></a>拉取遠端最新變更</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="八、-gitignore-檔案"><a href="#八、-gitignore-檔案" class="headerlink" title="八、.gitignore 檔案"></a>八、.gitignore 檔案</h2><p><code>.gitignore</code> 用來指定不想被 Git 管理的檔案，例如：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">.env</span><br><span class="line">*.log</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure>

<p>建立一個 <code>.gitignore</code> 檔案，放進你專案根目錄，就能避免把不該版本控制的東西送到遠端倉庫。</p>
<hr>
<h2 id="九、常見狀況與解法"><a href="#九、常見狀況與解法" class="headerlink" title="九、常見狀況與解法"></a>九、常見狀況與解法</h2><h3 id="修改後不小心沒-add-就-commit-了？"><a href="#修改後不小心沒-add-就-commit-了？" class="headerlink" title="修改後不小心沒 add 就 commit 了？"></a>修改後不小心沒 add 就 commit 了？</h3><p>可用下列方式補上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 新增的檔案</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<h3 id="想撤銷修改？"><a href="#想撤銷修改？" class="headerlink" title="想撤銷修改？"></a>想撤銷修改？</h3><p>還沒 add 的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- 檔案名</span><br></pre></td></tr></table></figure>

<p>已經 add 了但還沒 commit：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD 檔案名</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十、總結：從習慣開始，讓版本控制變簡單"><a href="#十、總結：從習慣開始，讓版本控制變簡單" class="headerlink" title="十、總結：從習慣開始，讓版本控制變簡單"></a>十、總結：從習慣開始，讓版本控制變簡單</h2><p>熟悉 Git 的過程一開始可能會覺得繁瑣，但當你習慣了之後，它會成為你每天工作中不可或缺的工具。建議你在小專案中練習基本指令，隨手記錄每次的變更，透過良好的 commit message，讓未來的你感謝現在有好好整理的你。</p>
<p>如果你希望與他人協作開發，Git 更能大幅簡化流程、避免衝突。下一步，你可以學習 Pull Request（PR）、Git Flow、Rebase 等進階技巧，逐步精進你的版本控制能力。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a></li>
<li><a href="https://www.conventionalcommits.org/zh-hant/v1.0.0/">約定式提交</a></li>
<li><a href="https://hackmd.io/@ohQEG7SsQoeXVwVP2-v06A/rkhtpmyXa">[Git] Conventional Commits 規範性提交</a></li>
<li><a href="https://w3c.hexschool.com/git/10bf7677">git reflog - 還原大招</a></li>
<li><a href="https://gitbook.tw/">為你自己學 Git</a></li>
</ol>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Copilot 與 Copilot Agent 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/20/learning-notes-github-copilot-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自 2021 年推出以來，<strong>GitHub Copilot</strong> 已成為全球數百萬開發者的編程助手，能根據上下文即時補全程式碼。2024 年，GitHub 推出進階功能 <strong>Copilot Workspace</strong> 和 <strong>Copilot Agents</strong>，進一步從單一代碼補全進化為具備「理解、操作與協作」能力的智慧 AI 開發助理。</p>
<p>這些新功能不僅能幫助你完成程式碼撰寫，還能協助理解需求、分析問題、規劃專案、重構模組，甚至提出 pull request 變更。本文將帶你全面認識 GitHub Copilot 及其 Agent 功能，從基本操作到進階應用，協助你提升開發效率與品質。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><h3 id="1-GitHub-Copilot-基本功能"><a href="#1-GitHub-Copilot-基本功能" class="headerlink" title="1. GitHub Copilot 基本功能"></a>1. GitHub Copilot 基本功能</h3><ul>
<li>AI 程式碼補全：根據上下文推薦下一行或整段程式碼。</li>
<li>註解驅動撰寫：使用自然語言描述意圖，自動轉換為程式碼。</li>
<li>測試與樣板產生：自動產出單元測試與樣板邏輯。</li>
<li>支援 VS Code、JetBrains IDE、Neovim 等。</li>
</ul>
<h3 id="2-Copilot-Agents-新功能"><a href="#2-Copilot-Agents-新功能" class="headerlink" title="2. Copilot Agents 新功能"></a>2. Copilot Agents 新功能</h3><ul>
<li><strong>工作區理解（Workspace Contextualization）</strong>：理解整個專案結構，非僅單一檔案。</li>
<li><strong>任務導向操作（Task-oriented Autonomy）</strong>：透過自然語言指令，Agent 可主動找出需要修改的檔案與程式邏輯。</li>
<li><strong>互動式任務視窗（Copilot Workspace）</strong>：能與你共同規劃、分解、執行修改。</li>
<li><strong>自動產生 Pull Request</strong>：Agent 能根據需求描述，自動建立符合需求的 PR 變更建議。</li>
<li><strong>支援自然語言任務指令</strong>：如 “Add pagination to the user list page” 或 “Refactor login logic to support OAuth”。</li>
</ul>
<h3 id="3-適用場景"><a href="#3-適用場景" class="headerlink" title="3. 適用場景"></a>3. 適用場景</h3><ul>
<li>新功能導入（快速建構雛型）</li>
<li>現有程式碼重構與除錯</li>
<li>快速理解大型專案結構</li>
<li>撰寫測試與文件</li>
<li>協作開發與程式碼審查輔助</li>
</ul>
<hr>
<h2 id="使用條件與環境設置"><a href="#使用條件與環境設置" class="headerlink" title="使用條件與環境設置"></a>使用條件與環境設置</h2><ol>
<li><p><strong>基本需求</strong></p>
<ul>
<li>GitHub 帳號</li>
<li>VS Code 或 GitHub 官方網站（Copilot Workspace）</li>
<li>GitHub Copilot 訂閱（個人 &#x2F; 企業方案）</li>
</ul>
</li>
<li><p><strong>啟用方式</strong></p>
<ul>
<li>在 VS Code Marketplace 安裝「GitHub Copilot」擴充功能</li>
<li>若已啟用 Agent 功能（目前逐步開放），將會在 Copilot 介面看到 Workspace 或 Chat 模式</li>
</ul>
</li>
<li><p><strong>使用 Copilot Workspace</strong>（預設僅企業帳戶開放測試）</p>
<ul>
<li>登入 GitHub，進入某個 repo</li>
<li>點擊 <code>Copilot</code> 按鈕開啟 Workspace</li>
<li>輸入任務描述，例如：<code>Convert all date logic to use UTC</code></li>
<li>Copilot 會分析整個程式碼庫，自動生成變更建議與 Pull Request</li>
</ul>
</li>
</ol>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="範例一：註解驅動補全"><a href="#範例一：註解驅動補全" class="headerlink" title="範例一：註解驅動補全"></a>範例一：註解驅動補全</h3><p>輸入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寫一個可以將字串反轉的函式</span></span><br></pre></td></tr></table></figure>

<p>Copilot 自動補全：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="範例二：Copilot-Chat-對話式問答"><a href="#範例二：Copilot-Chat-對話式問答" class="headerlink" title="範例二：Copilot Chat 對話式問答"></a>範例二：Copilot Chat 對話式問答</h3><p>使用快捷鍵 <code>Cmd+I</code> 或從 VS Code Copilot Chat 面板提問：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">請幫我解釋這段程式碼的作用：parseDate(input, &#x27;YYYY-MM-DD&#x27;)</span><br></pre></td></tr></table></figure>

<p>Copilot 回應：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">這段程式碼會將字串 input 解析為特定格式的日期物件，格式為 &#x27;YYYY-MM-DD&#x27;，可能使用的是 dayjs 或 moment 函式庫。</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="範例三：Copilot-Agent-自動任務執行（需-Workspace-模式）"><a href="#範例三：Copilot-Agent-自動任務執行（需-Workspace-模式）" class="headerlink" title="範例三：Copilot Agent 自動任務執行（需 Workspace 模式）"></a>範例三：Copilot Agent 自動任務執行（需 Workspace 模式）</h3><p>任務描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Refactor login controller to support Google OAuth</span><br></pre></td></tr></table></figure>

<p>流程：</p>
<ol>
<li>Copilot 會分析 <code>controllers/login.js</code> 或相似檔案</li>
<li>自動識別現有的登入邏輯</li>
<li>插入 Google OAuth 處理邏輯（可能使用 passport.js 或其他第三方庫）</li>
<li>產生變更摘要與建議 Pull Request</li>
<li>開發者審閱後即可 merge</li>
</ol>
<hr>
<h3 id="範例四：整合單元測試建議"><a href="#範例四：整合單元測試建議" class="headerlink" title="範例四：整合單元測試建議"></a>範例四：整合單元測試建議</h3><p>輸入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s == s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>在測試檔案中輸入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_is_palindrome</span>():</span><br></pre></td></tr></table></figure>

<p>Copilot 自動補全：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> is_palindrome(<span class="string">&quot;racecar&quot;</span>) == <span class="literal">True</span></span><br><span class="line"><span class="keyword">assert</span> is_palindrome(<span class="string">&quot;hello&quot;</span>) == <span class="literal">False</span></span><br><span class="line"><span class="keyword">assert</span> is_palindrome(<span class="string">&quot;&quot;</span>) == <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="建議與最佳實踐"><a href="#建議與最佳實踐" class="headerlink" title="建議與最佳實踐"></a>建議與最佳實踐</h2><ol>
<li><p><strong>善用自然語言描述</strong><br>Copilot Agent 具有語意理解能力，越具體的任務描述，越能產出正確結果。</p>
</li>
<li><p><strong>審核與測試不可省略</strong><br>AI 輔助雖強，但仍可能產生誤邏輯或不符合風格的程式碼，請務必加入測試與審查。</p>
</li>
<li><p><strong>適合用於重複與樣板任務</strong><br>例如 CRUD、測試、自動 refactor、邏輯轉換等。</p>
</li>
<li><p><strong>搭配 GitHub Actions 使用更強大</strong><br>可結合 CI&#x2F;CD 流程，自動執行 Copilot Agent 產生的 PR。</p>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>GitHub Copilot 已從單純的程式補全工具，蛻變為具備理解上下文、可互動操作的智慧開發代理人。透過 Copilot Agent，你不僅能提升撰寫速度，還能更高層次地規劃、修改與維護專案。</p>
<p>對個人開發者而言，Copilot 是每日開發的好助手；對團隊而言，Copilot Agent 更像是一位全天候不下班的開發實習生，協助你管理技術債、維護程式庫、強化開發工作流。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://github.com/doggy8088/github-copilot-configs">最佳 GitHub Copilot 設定</a></li>
<li><a href="https://medium.com/@cct0201/%E5%BE%9E-%E5%AF%AB%E7%A8%8B%E5%BC%8F-%E5%88%B0-%E8%88%87-ai-%E5%85%B1%E8%88%9E-%E6%88%91%E5%9C%A8%E5%85%AC%E5%8F%B8%E6%8E%A8%E5%8B%95-vibe-coding-%E7%9A%84%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB-015e28909290">從「寫程式」到「與 AI 共舞」── 我在公司推動 Vibe Coding 的經驗分享</a></li>
<li><a href="https://gitmind.com/tw/best-vibe-coding-tools-2025.html">2025 年最強推薦 Vibe Coding 工具一次看懂</a></li>
</ol>
]]></content>
      <tags>
        <tag>編輯器</tag>
        <tag>GitHub</tag>
        <tag>GitHub Copilot</tag>
        <tag>Copilot</tag>
        <tag>Copilot Agent</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL 入門教學筆記（ESM 模組版）| 學習筆記</title>
    <url>/2024/11/16/learning-notes-graphql-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在傳統的 REST API 中，前端往往需要根據不同的需求，呼叫多個端點取得資料，有時還會遇到資料過多（Over-fetching）或不足（Under-fetching）的問題。為了解決這些痛點，Facebook 在 2015 年開源了 <strong>GraphQL</strong>，一種靈活且高效率的查詢語言。</p>
<p>GraphQL 讓前端可以<strong>明確指定想要的資料欄位</strong>，伺服器僅回傳需要的資料，改善資料浪費與重複請求的問題。此語言既可以查詢（Query）、也可以修改資料（Mutation），更支援訂閱（Subscription）即時變化，成為 REST 的強大替代方案。</p>
<p>本文將以 ESM（ECMAScript Module）模組格式，搭配現代 Node.js 環境與 Apollo Server，手把手實作一個簡易 GraphQL API。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>GraphQL 是什麼？</strong><br>一種用於 API 的查詢語言（Query Language），由 Facebook 開發。它不是資料庫，而是用來建立伺服器與用戶端之間通訊的一種規格。</p>
</li>
<li><p><strong>特色與優點</strong></p>
<ul>
<li>客戶端可以精確指定所需資料</li>
<li>單一端點處理所有請求</li>
<li>減少 over-fetching &#x2F; under-fetching 問題</li>
<li>強型別系統（Schema 定義清楚 API 結構）</li>
<li>自帶文件化功能（如 Apollo Studio &#x2F; GraphQL Playground）</li>
</ul>
</li>
<li><p><strong>核心概念</strong></p>
<ul>
<li><code>Schema</code>：定義資料型別與查詢結構</li>
<li><code>Query</code>：讀取資料</li>
<li><code>Mutation</code>：修改資料（新增、刪除、更新）</li>
<li><code>Resolver</code>：實際執行資料存取邏輯的函式</li>
<li><code>Type</code>：定義資料欄位與型別，例如 <code>type Book &#123; title: String &#125;</code></li>
</ul>
</li>
<li><p><strong>GraphQL vs REST</strong></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>REST</th>
<th>GraphQL</th>
</tr>
</thead>
<tbody><tr>
<td>資料請求</td>
<td>多個端點</td>
<td>單一端點</td>
</tr>
<tr>
<td>回傳資料</td>
<td>固定欄位，可能過多或不足</td>
<td>客戶端可自訂所需欄位</td>
</tr>
<tr>
<td>文件維護</td>
<td>手動撰寫 Swagger&#x2F;OpenAPI</td>
<td>自動產生於 Playground &#x2F; Studio</td>
</tr>
<tr>
<td>資料關聯查詢</td>
<td>多次 HTTP 請求</td>
<td>一次查詢可取得巢狀關聯資料</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h2 id="實作範例（Node-js-Apollo-Server-ESM）"><a href="#實作範例（Node-js-Apollo-Server-ESM）" class="headerlink" title="實作範例（Node.js + Apollo Server + ESM）"></a>實作範例（Node.js + Apollo Server + ESM）</h2><h3 id="一、專案初始化"><a href="#一、專案初始化" class="headerlink" title="一、專案初始化"></a>一、專案初始化</h3><p>建立資料夾並初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> graphql-esm-demo</span><br><span class="line"><span class="built_in">cd</span> graphql-esm-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install @apollo/server graphql</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code> 啟用 ESM 模組：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="二、撰寫-GraphQL-API（server-js）"><a href="#二、撰寫-GraphQL-API（server-js）" class="headerlink" title="二、撰寫 GraphQL API（server.js）"></a>二、撰寫 GraphQL API（server.js）</h3><p>建立 <code>server.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApolloServer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; startStandaloneServer &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/server/standalone&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模擬資料</span></span><br><span class="line"><span class="keyword">const</span> books = [</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&#x27;GraphQL 教學指南&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&#x27;現代 JavaScript&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義 Schema</span></span><br><span class="line"><span class="keyword">const</span> typeDefs = <span class="string">`</span></span><br><span class="line"><span class="string">  type Book &#123;</span></span><br><span class="line"><span class="string">    title: String</span></span><br><span class="line"><span class="string">    author: String</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  type Query &#123;</span></span><br><span class="line"><span class="string">    books: [Book]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義 Resolver</span></span><br><span class="line"><span class="keyword">const</span> resolvers = &#123;</span><br><span class="line">  <span class="title class_">Query</span>: &#123;</span><br><span class="line">    <span class="attr">books</span>: <span class="function">() =&gt;</span> books,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 Apollo Server 實例</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">ApolloServer</span>(&#123; typeDefs, resolvers &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動伺服器</span></span><br><span class="line"><span class="keyword">const</span> &#123; url &#125; = <span class="keyword">await</span> <span class="title function_">startStandaloneServer</span>(server, &#123;</span><br><span class="line">  <span class="attr">listen</span>: &#123; <span class="attr">port</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 Server ready at <span class="subst">$&#123;url&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="三、啟動伺服器並測試"><a href="#三、啟動伺服器並測試" class="headerlink" title="三、啟動伺服器並測試"></a>三、啟動伺服器並測試</h3><p>執行伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<p>啟動後會顯示伺服器位置（通常是 <a href="http://localhost:4000），可在瀏覽器開啟">http://localhost:4000），可在瀏覽器開啟</a> Apollo Studio，或使用 Postman &#x2F; Altair &#x2F; curl 測試。</p>
<hr>
<h3 id="四、查詢範例（GraphQL-Playground-中輸入）"><a href="#四、查詢範例（GraphQL-Playground-中輸入）" class="headerlink" title="四、查詢範例（GraphQL Playground 中輸入）"></a>四、查詢範例（GraphQL Playground 中輸入）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  books &#123;</span><br><span class="line">    title</span><br><span class="line">    author</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們也可以僅查詢某個欄位，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  books &#123;</span><br><span class="line">    title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這正是 GraphQL 的威力所在：我們只拿我們需要的資料。</p>
<hr>
<h2 id="延伸功能與建議學習方向"><a href="#延伸功能與建議學習方向" class="headerlink" title="延伸功能與建議學習方向"></a>延伸功能與建議學習方向</h2><ul>
<li><p><strong>Mutation 實作</strong>（新增、刪除資料）<br>可以加入 <code>Mutation</code> 類型與 resolver，實作 POST&#x2F;PUT 功能。</p>
</li>
<li><p><strong>資料來源整合</strong><br>Resolver 可以整合 REST API、資料庫、第三方服務等來源。</p>
</li>
<li><p><strong>驗證與權限</strong><br>可透過 Context 傳入使用者驗證資訊，進行資料存取控管。</p>
</li>
<li><p><strong>使用工具</strong></p>
<ul>
<li><a href="https://studio.apollographql.com/">Apollo Studio</a>：視覺化介面與測試工具</li>
<li>GraphQL Codegen：產生型別定義與前端 Hooks</li>
<li>Relay &#x2F; urql &#x2F; Apollo Client：前端整合工具</li>
</ul>
</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>GraphQL 提供比 REST 更彈性與效率的 API 設計方式，尤其適合需要頻繁前後端協作或資料結構變化頻繁的專案。透過本篇教學，我們已經學會如何使用 Apollo Server 以 ESM 模組撰寫簡單的 GraphQL API，並實際查詢資料。</p>
<p>未來我們可以嘗試進一步加入 Mutation、串接資料庫（如 MongoDB、PostgreSQL）、前端 Apollo Client 等，打造一個全端的 GraphQL 應用。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>RESTful</tag>
        <tag>後端</tag>
        <tag>軟體工程</tag>
        <tag>GraphQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML &amp; CSS 切版入門教學筆記 | 學習筆記</title>
    <url>/2024/07/01/learning-notes-html-css-layout-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-HTML-基礎概念"><a href="#1-HTML-基礎概念" class="headerlink" title="1. HTML 基礎概念"></a>1. HTML 基礎概念</h1><p>HTML（HyperText Markup Language）是網頁的基礎結構，透過標籤（Tag）定義不同的內容與結構。</p>
<h3 id="1-1-常見標籤"><a href="#1-1-常見標籤" class="headerlink" title="1.1 常見標籤"></a>1.1 常見標籤</h3><ul>
<li><code>&lt;!DOCTYPE html&gt;</code>：宣告 HTML 文件類型。</li>
<li><code>&lt;html&gt;</code>：HTML 文件的根標籤。</li>
<li><code>&lt;head&gt;</code>：包含頁面設定、SEO 資訊、CSS 連結等。</li>
<li><code>&lt;title&gt;</code>：設定網頁標題。</li>
<li><code>&lt;body&gt;</code>：放置頁面可見內容。</li>
<li><code>&lt;h1&gt; ~ &lt;h6&gt;</code>：標題。</li>
<li><code>&lt;p&gt;</code>：段落。</li>
<li><code>&lt;a&gt;</code>：超連結。</li>
<li><code>&lt;img&gt;</code>：圖片。</li>
<li><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>：無序與有序列表。</li>
<li><code>&lt;div&gt;</code>：區塊。</li>
<li><code>&lt;span&gt;</code>：行內元素。</li>
<li><code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>：表格。</li>
</ul>
<h3 id="1-2-HTML5-新增語意標籤"><a href="#1-2-HTML5-新增語意標籤" class="headerlink" title="1.2 HTML5 新增語意標籤"></a>1.2 HTML5 新增語意標籤</h3><ul>
<li><code>&lt;header&gt;</code>：頁首。</li>
<li><code>&lt;nav&gt;</code>：導航。</li>
<li><code>&lt;section&gt;</code>：區段。</li>
<li><code>&lt;article&gt;</code>：獨立內容。</li>
<li><code>&lt;aside&gt;</code>：側邊欄。</li>
<li><code>&lt;footer&gt;</code>：頁尾。</li>
</ul>
<h1 id="2-CSS-基礎概念"><a href="#2-CSS-基礎概念" class="headerlink" title="2. CSS 基礎概念"></a>2. CSS 基礎概念</h1><p>CSS（Cascading Style Sheets）用於設計與美化 HTML 元素。</p>
<h3 id="2-1-CSS-引入方式"><a href="#2-1-CSS-引入方式" class="headerlink" title="2.1 CSS 引入方式"></a>2.1 CSS 引入方式</h3><ul>
<li><strong>內嵌樣式（Inline Style）</strong>：直接寫在 HTML 標籤內，例如：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 16px;&quot;</span>&gt;</span>這是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>內部樣式（Internal Style）</strong>：寫在 <code>&lt;style&gt;</code> 標籤內，例如：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: blue; <span class="attribute">font-size</span>: <span class="number">18px</span>; &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>外部樣式（External Style）</strong>：將 CSS 放入 <code>.css</code> 文件中，再用 <code>&lt;link&gt;</code> 連結，例如：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-CSS-選擇器"><a href="#2-2-CSS-選擇器" class="headerlink" title="2.2 CSS 選擇器"></a>2.2 CSS 選擇器</h3><ul>
<li><strong>標籤選擇器</strong>：影響所有相同標籤，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>類別選擇器（Class）</strong>：適用於多個元素，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123; <span class="attribute">background-color</span>: yellow; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>ID 選擇器</strong>：適用於單一元素，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123; <span class="attribute">font-size</span>: <span class="number">24px</span>; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>後代選擇器</strong>：選擇特定層級內的元素，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-盒模型（Box-Model）"><a href="#2-3-盒模型（Box-Model）" class="headerlink" title="2.3 盒模型（Box Model）"></a>2.3 盒模型（Box Model）</h3><p>盒模型包含四個部分：</p>
<ol>
<li><strong>Content</strong>（內容區域）。</li>
<li><strong>Padding</strong>（內距，內容與邊框之間的距離）。</li>
<li><strong>Border</strong>（邊框）。</li>
<li><strong>Margin</strong>（外距，與其他元素的距離）。</li>
</ol>
<p>範例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-常見版型切版技巧"><a href="#3-常見版型切版技巧" class="headerlink" title="3. 常見版型切版技巧"></a>3. 常見版型切版技巧</h1><h3 id="3-1-Flexbox-佈局"><a href="#3-1-Flexbox-佈局" class="headerlink" title="3.1 Flexbox 佈局"></a>3.1 Flexbox 佈局</h3><p><code>Flexbox</code> 用於彈性排列子元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Grid-佈局"><a href="#3-2-Grid-佈局" class="headerlink" title="3.2 Grid 佈局"></a>3.2 Grid 佈局</h3><p><code>Grid</code> 提供更強大的網格系統。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-響應式設計（RWD）"><a href="#3-3-響應式設計（RWD）" class="headerlink" title="3.3 響應式設計（RWD）"></a>3.3 響應式設計（RWD）</h3><p>使用 <code>@media</code> 來適應不同螢幕尺寸。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-實戰案例：基本網頁切版"><a href="#4-實戰案例：基本網頁切版" class="headerlink" title="4. 實戰案例：基本網頁切版"></a>4. 實戰案例：基本網頁切版</h1><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>簡單網頁<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的網站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>關於<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>聯絡<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的 HTML &amp; CSS 切版示範。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-總結"><a href="#5-總結" class="headerlink" title="5. 總結"></a>5. 總結</h1><p>透過學習 HTML 與 CSS，可以建立結構清晰、外觀美觀的網頁。建議多加練習不同的切版方式，如 Flexbox 和 Grid，並運用 RWD 技巧來提升適應性，讓網站在不同裝置上都能有良好的呈現效果。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>切版</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/13/learning-notes-html-intro-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-HTML？"><a href="#1-什麼是-HTML？" class="headerlink" title="1. 什麼是 HTML？"></a>1. 什麼是 HTML？</h4><p><code>HTML</code>（HyperText Markup Language，超文本標記語言）是建立網頁的標準語言。它用標籤（tags）來結構化內容，讓瀏覽器能夠解析並顯示網頁。HTML 主要負責網頁的結構，而樣式與行為則交由 CSS 和 JavaScript 負責。</p>
<hr>
<h4 id="2-HTML-文件基本結構"><a href="#2-HTML-文件基本結構" class="headerlink" title="2. HTML 文件基本結構"></a>2. HTML 文件基本結構</h4><p>一個基本的 HTML 文件包含以下部分：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一個 HTML 頁面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎來到我的網站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的 HTML 頁面。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;!DOCTYPE html&gt;</code>：宣告 HTML5 文件類型。  </li>
<li><code>&lt;html lang=&quot;zh-TW&quot;&gt;</code>：定義 HTML 根標籤，<code>lang=&quot;zh-TW&quot;</code> 表示使用繁體中文。  </li>
<li><code>&lt;head&gt;</code>：包含頁面的元資訊（meta information），如編碼、標題等。  </li>
<li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>：設定網頁使用 UTF-8 編碼，確保中文字元正確顯示。  </li>
<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>：讓網頁適應不同裝置的螢幕大小。  </li>
<li><code>&lt;title&gt;</code>：設定瀏覽器標籤上的標題。  </li>
<li><code>&lt;body&gt;</code>：放置網頁的主要內容，如標題、段落、圖片等。</li>
</ul>
<hr>
<h4 id="3-常見-HTML-標籤"><a href="#3-常見-HTML-標籤" class="headerlink" title="3. 常見 HTML 標籤"></a>3. 常見 HTML 標籤</h4><h5 id="3-1-標題與段落"><a href="#3-1-標題與段落" class="headerlink" title="3.1 標題與段落"></a>3.1 標題與段落</h5><p>HTML 提供六種標題 (<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>)，以及 <code>&lt;p&gt;</code> 用來表示段落。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>這是主標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>這是次標題<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>這是小標題<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字，HTML 會自動換行。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-超連結"><a href="#3-2-超連結" class="headerlink" title="3.2 超連結"></a>3.2 超連結</h5><p>使用 <code>&lt;a&gt;</code> 標籤建立超連結：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>前往 Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>href</code> 指定連結網址。  </li>
<li><code>target=&quot;_blank&quot;</code> 讓連結在新視窗開啟。</li>
</ul>
<h5 id="3-3-圖片"><a href="#3-3-圖片" class="headerlink" title="3.3 圖片"></a>3.3 圖片</h5><p>使用 <code>&lt;img&gt;</code> 來插入圖片：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示範圖片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>src</code> 指定圖片來源。  </li>
<li><code>alt</code> 提供替代文字。  </li>
<li><code>width</code> 設定圖片寬度（可用 <code>height</code> 指定高度）。</li>
</ul>
<h5 id="3-4-清單"><a href="#3-4-清單" class="headerlink" title="3.4 清單"></a>3.4 清單</h5><p>有序清單 (<code>&lt;ol&gt;</code>) 和無序清單 (<code>&lt;ul&gt;</code>)：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>購物清單<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>蘋果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>步驟<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>打開電腦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>開啟瀏覽器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>輸入網址<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-5-表格"><a href="#3-5-表格" class="headerlink" title="3.5 表格"></a>3.5 表格</h5><p>使用 <code>&lt;table&gt;</code> 來建立表格，並搭配 <code>&lt;tr&gt;</code>（表格列）、<code>&lt;th&gt;</code>（表頭）、<code>&lt;td&gt;</code>（儲存格）：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小華<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>border=&quot;1&quot;</code> 設定表格邊框。</li>
</ul>
<h5 id="3-6-表單"><a href="#3-6-表單" class="headerlink" title="3.6 表單"></a>3.6 表單</h5><p>使用 <code>&lt;form&gt;</code> 來建立表單：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;submit.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>電子郵件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>action=&quot;submit.php&quot;</code> 指定表單提交到 <code>submit.php</code>。  </li>
<li><code>method=&quot;post&quot;</code> 指定使用 POST 方法傳遞數據。  </li>
<li><code>required</code> 讓輸入欄位變成必填。</li>
</ul>
<hr>
<h4 id="4-HTML5-新增標籤"><a href="#4-HTML5-新增標籤" class="headerlink" title="4. HTML5 新增標籤"></a>4. HTML5 新增標籤</h4><p>HTML5 引入了一些語義化標籤，使網頁更具結構性。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>網站標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>聯絡我們<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>最新消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一則最新消息的內容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>版權所有 <span class="symbol">&amp;copy;</span> 2025<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;header&gt;</code>：頁首。  </li>
<li><code>&lt;nav&gt;</code>：導覽區塊。  </li>
<li><code>&lt;section&gt;</code>：內容區塊。  </li>
<li><code>&lt;footer&gt;</code>：頁尾資訊。</li>
</ul>
<hr>
<h4 id="5-HTML-與-CSS-結合"><a href="#5-HTML-與-CSS-結合" class="headerlink" title="5. HTML 與 CSS 結合"></a>5. HTML 與 CSS 結合</h4><p>雖然 HTML 定義了結構，但我們通常使用 CSS 來美化頁面。內嵌 CSS 可以寫在 <code>&lt;style&gt;</code> 內：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者外部引入 CSS 檔案：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h4><p>這篇教學筆記介紹了 HTML 的基本語法，包括標籤、結構與常見元素。學會這些後，可以進一步學習 CSS 來美化網頁，或是學習 JavaScript 增強互動性。最好的學習方式是透過實際練習與製作小專案來熟悉 HTML 語法。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP/2 介紹與入門教學筆記 | 學習筆記</title>
    <url>/2023/12/16/learning-notes-http2-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="1-HTTP-x2F-2-簡介"><a href="#1-HTTP-x2F-2-簡介" class="headerlink" title="1. HTTP&#x2F;2 簡介"></a>1. HTTP&#x2F;2 簡介</h2><p>HTTP&#x2F;2 是 HTTP&#x2F;1.1 的後繼版本，由 IETF HTTP 工作小組開發，並於 2015 年 5 月成為正式標準（RFC 7540）。HTTP&#x2F;2 的主要目標是提高 Web 的性能，減少延遲，並優化資源的傳輸方式。</p>
<h2 id="2-HTTP-x2F-2-的核心特性"><a href="#2-HTTP-x2F-2-的核心特性" class="headerlink" title="2. HTTP&#x2F;2 的核心特性"></a>2. HTTP&#x2F;2 的核心特性</h2><h3 id="2-1-二進制分幀層（Binary-Framing-Layer）"><a href="#2-1-二進制分幀層（Binary-Framing-Layer）" class="headerlink" title="2.1 二進制分幀層（Binary Framing Layer）"></a>2.1 二進制分幀層（Binary Framing Layer）</h3><p>HTTP&#x2F;2 以二進制格式進行數據傳輸，而非 HTTP&#x2F;1.1 的純文字格式。這使得解析和處理更高效，減少了協議的開銷。</p>
<h3 id="2-2-多路徑傳輸（Multiplexing）"><a href="#2-2-多路徑傳輸（Multiplexing）" class="headerlink" title="2.2 多路徑傳輸（Multiplexing）"></a>2.2 多路徑傳輸（Multiplexing）</h3><p>在 HTTP&#x2F;1.1 中，一個 TCP 連線同時只能處理一個請求，導致「線頭阻塞」問題。HTTP&#x2F;2 允許在單個 TCP 連線中並行傳輸多個請求與回應，顯著提高效率。</p>
<h3 id="2-3-流量控制與優先權（Stream-Prioritization）"><a href="#2-3-流量控制與優先權（Stream-Prioritization）" class="headerlink" title="2.3 流量控制與優先權（Stream Prioritization）"></a>2.3 流量控制與優先權（Stream Prioritization）</h3><p>HTTP&#x2F;2 允許客戶端為請求設定優先級，讓重要的資源（如 CSS、JS）優先傳輸，提高頁面載入速度。</p>
<h3 id="2-4-頭部壓縮（Header-Compression）"><a href="#2-4-頭部壓縮（Header-Compression）" class="headerlink" title="2.4 頭部壓縮（Header Compression）"></a>2.4 頭部壓縮（Header Compression）</h3><p>HTTP&#x2F;2 使用 HPACK 壓縮技術來減少 HTTP 標頭的大小，避免 HTTP&#x2F;1.1 中重複傳輸 Cookie、User-Agent 等大量標頭資訊的問題。</p>
<h3 id="2-5-伺服器推送（Server-Push）"><a href="#2-5-伺服器推送（Server-Push）" class="headerlink" title="2.5 伺服器推送（Server Push）"></a>2.5 伺服器推送（Server Push）</h3><p>伺服器可以主動推送客戶端尚未請求的資源，例如 HTML 請求回應時，伺服器可同時推送 CSS、JavaScript 檔案，減少額外的請求時間。</p>
<h2 id="3-HTTP-x2F-2-與-HTTP-x2F-1-1-的比較"><a href="#3-HTTP-x2F-2-與-HTTP-x2F-1-1-的比較" class="headerlink" title="3. HTTP&#x2F;2 與 HTTP&#x2F;1.1 的比較"></a>3. HTTP&#x2F;2 與 HTTP&#x2F;1.1 的比較</h2><table>
<thead>
<tr>
<th>特性</th>
<th>HTTP&#x2F;1.1</th>
<th>HTTP&#x2F;2</th>
</tr>
</thead>
<tbody><tr>
<td>資料格式</td>
<td>純文字</td>
<td>二進制</td>
</tr>
<tr>
<td>多路復用</td>
<td>不支援</td>
<td>支援</td>
</tr>
<tr>
<td>流量控制</td>
<td>無</td>
<td>有</td>
</tr>
<tr>
<td>頭部壓縮</td>
<td>無</td>
<td>HPACK</td>
</tr>
<tr>
<td>伺服器推送</td>
<td>無</td>
<td>有</td>
</tr>
</tbody></table>
<h2 id="4-HTTP-x2F-2-的使用與設定"><a href="#4-HTTP-x2F-2-的使用與設定" class="headerlink" title="4. HTTP&#x2F;2 的使用與設定"></a>4. HTTP&#x2F;2 的使用與設定</h2><h3 id="4-1-瀏覽器支援"><a href="#4-1-瀏覽器支援" class="headerlink" title="4.1 瀏覽器支援"></a>4.1 瀏覽器支援</h3><p>現代主流瀏覽器（Chrome、Firefox、Edge、Safari）皆支援 HTTP&#x2F;2，但通常需要搭配 HTTPS 使用。</p>
<h3 id="4-2-伺服器支援"><a href="#4-2-伺服器支援" class="headerlink" title="4.2 伺服器支援"></a>4.2 伺服器支援</h3><p>常見的 Web 伺服器如 Nginx、Apache、LiteSpeed 都已支援 HTTP&#x2F;2，但需進行適當的設定。</p>
<h4 id="4-2-1-在-Nginx-啟用-HTTP-x2F-2"><a href="#4-2-1-在-Nginx-啟用-HTTP-x2F-2" class="headerlink" title="4.2.1 在 Nginx 啟用 HTTP&#x2F;2"></a>4.2.1 在 Nginx 啟用 HTTP&#x2F;2</h4><p>若要在 Nginx 中啟用 HTTP&#x2F;2，需要確保已安裝支援 HTTP&#x2F;2 的 Nginx 版本（1.9.5 以上）並修改設定檔：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/cert.key;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>listen</code> 指令中加入 <code>http2</code> 即可啟用 HTTP&#x2F;2。</p>
<h4 id="4-2-2-在-Apache-啟用-HTTP-x2F-2"><a href="#4-2-2-在-Apache-啟用-HTTP-x2F-2" class="headerlink" title="4.2.2 在 Apache 啟用 HTTP&#x2F;2"></a>4.2.2 在 Apache 啟用 HTTP&#x2F;2</h4><p>Apache 2.4.17 以上版本支援 HTTP&#x2F;2，需要啟用 <code>mod_http2</code> 模組。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a2enmod http2</span><br><span class="line">systemctl restart apache2</span><br></pre></td></tr></table></figure>

<p>接著，在 VirtualHost 設定中加入：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:443</span>&gt;</span></span><br><span class="line">    <span class="attribute">Protocols</span> h2 http/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line">    <span class="attribute">DocumentRoot</span> /var/www/html</span><br><span class="line">    <span class="attribute">ServerName</span> example.com</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-HTTP-x2F-2-客戶端測試"><a href="#5-HTTP-x2F-2-客戶端測試" class="headerlink" title="5. HTTP&#x2F;2 客戶端測試"></a>5. HTTP&#x2F;2 客戶端測試</h2><p>可以使用 <code>curl</code> 測試 HTTP&#x2F;2 是否正常運作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -I --http2 https://example.com</span><br></pre></td></tr></table></figure>

<p>若顯示 <code>HTTP/2 200</code>，則表示伺服器已成功支援 HTTP&#x2F;2。</p>
<h2 id="6-HTTP-x2F-2-的實際應用"><a href="#6-HTTP-x2F-2-的實際應用" class="headerlink" title="6. HTTP&#x2F;2 的實際應用"></a>6. HTTP&#x2F;2 的實際應用</h2><h3 id="6-1-使用-HTTP-x2F-2-Server-Push"><a href="#6-1-使用-HTTP-x2F-2-Server-Push" class="headerlink" title="6.1 使用 HTTP&#x2F;2 Server Push"></a>6.1 使用 HTTP&#x2F;2 Server Push</h3><p>在 HTTP&#x2F;2 中，可以使用 <code>Link</code> 標頭來主動推送資源。例如，在 Nginx 配置中加入：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Link <span class="string">&quot;&lt;/style.css&gt;; rel=preload; as=style&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Link <span class="string">&quot;&lt;/script.js&gt;; rel=preload; as=script&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣當客戶端請求 <code>index.html</code> 時，伺服器會自動推送 <code>style.css</code> 和 <code>script.js</code>，減少 HTTP 請求數量。</p>
<h3 id="6-2-透過瀏覽器-DevTools-觀察-HTTP-x2F-2"><a href="#6-2-透過瀏覽器-DevTools-觀察-HTTP-x2F-2" class="headerlink" title="6.2 透過瀏覽器 DevTools 觀察 HTTP&#x2F;2"></a>6.2 透過瀏覽器 DevTools 觀察 HTTP&#x2F;2</h3><p>打開 Chrome 開發者工具（F12） → <code>Network</code> 分頁，查看 <code>Protocol</code> 欄位，若顯示 <code>h2</code>，則表示該請求使用了 HTTP&#x2F;2。</p>
<h2 id="7-總結"><a href="#7-總結" class="headerlink" title="7. 總結"></a>7. 總結</h2><p>HTTP&#x2F;2 改進了 HTTP&#x2F;1.1 的多項限制，透過多路徑傳輸、頭部壓縮與伺服器推送提高了 Web 效能。現代瀏覽器與伺服器已廣泛支援 HTTP&#x2F;2，建議在新專案中啟用 HTTP&#x2F;2，以提升用戶體驗與網站速度。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>HTTP/1</tag>
        <tag>HTTP</tag>
        <tag>HTTP/2</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 箭頭函式 (Arrow Function）入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-arrow-function-this-intro-tutorial/</url>
    <content><![CDATA[<p>在 JavaScript 的 <strong>箭頭函式 (Arrow Function, <code>=&gt;</code>)</strong> 中，<code>this</code> 的行為與傳統的 <strong>函式表達式 (Function Expression)</strong> 不同，主要特點如下：</p>
<hr>
<h2 id="箭頭函式的-this-綁定"><a href="#箭頭函式的-this-綁定" class="headerlink" title="箭頭函式的 this 綁定"></a><strong>箭頭函式的 <code>this</code> 綁定</strong></h2><ol>
<li><strong>箭頭函式不會建立自己的 <code>this</code><strong>，而是</strong>繼承</strong>定義它的上下文（也稱為 <strong>詞法作用域 Lexical Scope</strong>）。</li>
<li>在箭頭函式內部，<code>this</code> 指向的是<strong>箭頭函式所處的外部函式的 <code>this</code> 值</strong>。</li>
</ol>
<hr>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a><strong>範例</strong></h2><h3 id="1-一般函式的-this"><a href="#1-一般函式的-this" class="headerlink" title="1. 一般函式的 this"></a><strong>1. 一般函式的 <code>this</code></strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 取決於調用方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">method</span>: normalFunction</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">method</span>(); <span class="comment">// this 指向 obj</span></span><br><span class="line"><span class="title function_">normalFunction</span>(); <span class="comment">// this 指向全域物件 (在瀏覽器是 window，在 Node.js 是 global)</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-箭頭函式的-this"><a href="#2-箭頭函式的-this" class="headerlink" title="2. 箭頭函式的 this"></a><strong>2. 箭頭函式的 <code>this</code></strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFunction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 繼承外部作用域的 this</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">method</span>: arrowFunction</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj2.<span class="title function_">method</span>(); <span class="comment">// this 指向定義時的外部作用域，而不是 obj2</span></span><br></pre></td></tr></table></figure>
<p><strong>解析：</strong></p>
<ul>
<li>**<code>arrowFunction</code> 並未創建自己的 <code>this</code>，所以 <code>this</code> 仍然指向外部作用域的 <code>this</code>**，而不是 <code>obj2</code>。</li>
</ul>
<hr>
<h2 id="箭頭函式適用場景"><a href="#箭頭函式適用場景" class="headerlink" title="箭頭函式適用場景"></a><strong>箭頭函式適用場景</strong></h2><h3 id="1-在物件方法中避免-this-綁定問題"><a href="#1-在物件方法中避免-this-綁定問題" class="headerlink" title="1. 在物件方法中避免 this 綁定問題"></a><strong>1. 在物件方法中避免 <code>this</code> 綁定問題</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>); <span class="comment">// this 繼承 sayHello 的 this，即 person</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayHello</span>(); <span class="comment">// Hello, John</span></span><br></pre></td></tr></table></figure>
<p><strong>解析：</strong></p>
<ul>
<li><code>setTimeout</code> 中的箭頭函式不會創建新的 <code>this</code>，它會繼承 <code>sayHello</code> 方法中的 <code>this</code>，所以 <code>this.name</code> 正確指向 <code>person.name</code>。</li>
</ul>
<blockquote>
<p>若使用一般函式，<code>this</code> 會指向 <code>window</code>（瀏覽器環境）或 <code>undefined</code>（嚴格模式）。</p>
</blockquote>
<hr>
<h3 id="2-當作回呼函式-Callback"><a href="#2-當作回呼函式-Callback" class="headerlink" title="2. 當作回呼函式 (Callback)"></a><strong>2. 當作回呼函式 (Callback)</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭頭函式讓 this 指向外部作用域</span></span><br><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>map()</code> 內的箭頭函式不需要 <code>this</code>，但讓語法更簡潔。</p>
</blockquote>
<hr>
<h2 id="箭頭函式的-this-限制"><a href="#箭頭函式的-this-限制" class="headerlink" title="箭頭函式的 this 限制"></a><strong>箭頭函式的 <code>this</code> 限制</strong></h2><h3 id="1-不能作為建構函式-Constructor"><a href="#1-不能作為建構函式-Constructor" class="headerlink" title="1. 不能作為建構函式 (Constructor)"></a><strong>1. 不能作為建構函式 (Constructor)</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Person</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//  錯誤，this 不會指向新建的物件</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// TypeError: Person is not a constructor</span></span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong> 必須使用 <code>function</code> 來定義建構函式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">//  正常運作</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-不能使用-arguments"><a href="#2-不能使用-arguments" class="headerlink" title="2. 不能使用 arguments"></a><strong>2. 不能使用 <code>arguments</code></strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//  ReferenceError: arguments is not defined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p><strong>解法：</strong> 可以使用 <strong>展開運算符 <code>...args</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//  [1, 2, 3]</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-無法使用-bind-改變-this"><a href="#3-無法使用-bind-改變-this" class="headerlink" title="3. 無法使用 .bind() 改變 this"></a><strong>3. 無法使用 <code>.bind()</code> 改變 <code>this</code></strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newMethod = obj.<span class="property">method</span>.<span class="title function_">bind</span>(&#123; <span class="attr">value</span>: <span class="number">100</span> &#125;);</span><br><span class="line"><span class="title function_">newMethod</span>(); <span class="comment">// undefined (this 不會變)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>箭頭函式的 <code>this</code> 綁定無法透過 <code>bind()</code>、<code>call()</code> 或 <code>apply()</code> 來改變</strong>。</p>
</blockquote>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h2><table>
<thead>
<tr>
<th>特性</th>
<th>一般函式 (Function)</th>
<th>箭頭函式 (Arrow Function)</th>
</tr>
</thead>
<tbody><tr>
<td><code>this</code></td>
<td>依呼叫方式決定</td>
<td>繼承外部作用域</td>
</tr>
<tr>
<td><code>arguments</code></td>
<td>有 (<code>function</code> 內部)</td>
<td>無 (<code>...args</code> 取代)</td>
</tr>
<tr>
<td><code>bind()/call()/apply()</code></td>
<td>可改變 <code>this</code></td>
<td>無效</td>
</tr>
<tr>
<td><code>new</code> 關鍵字</td>
<td>可用於建構函式</td>
<td>無法當建構函式</td>
</tr>
</tbody></table>
<hr>
<h3 id="適用場景"><a href="#適用場景" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h3><p> <strong>適合使用箭頭函式：</strong></p>
<ul>
<li>短小的回呼函式 (e.g. <code>map</code>, <code>filter</code>, <code>forEach</code>)</li>
<li><code>setTimeout()</code> 或 <code>setInterval()</code></li>
<li>物件內部方法但不希望 <code>this</code> 被改變</li>
</ul>
<p> <strong>不適合使用箭頭函式：</strong></p>
<ul>
<li><strong>建構函式</strong></li>
<li><strong>需要動態 <code>this</code> 的方法</strong></li>
<li><strong>使用 <code>arguments</code> 物件的場合</strong></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>this</tag>
        <tag>Arrow Function</tag>
      </tags>
  </entry>
  <entry>
    <title>async/await 入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-async-await/</url>
    <content><![CDATA[<p><code>async</code> 和 <code>await</code> 是 JavaScript 中處理非同步操作的語法糖，它們使得非同步代碼更加易讀和易寫，避免了傳統回調函數（callback）或 <code>Promise</code> 的 <code>.then()</code> 鏈式調用的冗長性。</p>
<h3 id="1-async-關鍵字"><a href="#1-async-關鍵字" class="headerlink" title="1. async 關鍵字"></a>1. <code>async</code> 關鍵字</h3><p><code>async</code> 是一個關鍵字，用來標記一個函數為「非同步函數」。非同步函數會隱式地返回一個 <code>Promise</code>，並且在函數內部，你可以使用 <code>await</code> 來等待非同步操作的結果。</p>
<h4 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可以在這裡使用 await</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當你呼叫這個函數時，它會立即返回一個 <code>Promise</code>。如果函數內的代碼執行成功，這個 <code>Promise</code> 會被解析；如果有錯誤，<code>Promise</code> 會被拒絕。</p>
<h3 id="2-await-關鍵字"><a href="#2-await-關鍵字" class="headerlink" title="2. await 關鍵字"></a>2. <code>await</code> 關鍵字</h3><p><code>await</code> 必須在 <code>async</code> 函數內部使用，它會讓 JavaScript 等待某個 <code>Promise</code> 完成並返回結果。<code>await</code> 會使得後續代碼暫停，直到 <code>Promise</code> 被解決或拒絕（解決是指成功完成操作，拒絕則是發生錯誤）。</p>
<h4 id="語法-1"><a href="#語法-1" class="headerlink" title="語法"></a>語法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> promise; <span class="comment">// 等待 Promise 完成並取得結果</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>Promise</code> 解決（成功），<code>await</code> 會返回結果。如果 <code>Promise</code> 被拒絕（失敗），會拋出錯誤，這通常需要使用 <code>try...catch</code> 來處理。</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模擬一個非同步操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;Data fetched!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetching data...&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();  <span class="comment">// 等待 fetchData 完成</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 顯示結果</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  <span class="comment">// 處理錯誤</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>();  <span class="comment">// 呼叫 async 函數</span></span><br></pre></td></tr></table></figure>

<h3 id="3-async-await-的特點："><a href="#3-async-await-的特點：" class="headerlink" title="3. async/await 的特點："></a>3. <code>async/await</code> 的特點：</h3><ul>
<li><strong>簡化非同步代碼</strong>：<code>async/await</code> 讓非同步代碼的寫法更像是同步代碼，避免了回調函數的「Callback hell 回調地獄」。</li>
<li><strong>錯誤處理</strong>：你可以使用 <code>try...catch</code> 塊來捕獲非同步操作中的錯誤，這使得錯誤處理比傳統的 <code>.catch()</code> 更加簡單直觀。</li>
<li><strong>非阻塞執行</strong>：儘管代碼看起來是同步執行的，但非同步操作並不會阻塞主執行線程，其他代碼可以繼續執行。</li>
</ul>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li><code>async</code> 將函數標記為非同步函數。</li>
<li><code>await</code> 使代碼等待 <code>Promise</code> 的解決結果，並可以在 <code>async</code> 函數內使用。</li>
<li>使用 <code>async/await</code> 可以使非同步代碼更加簡潔且易於理解。</li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>非同步</tag>
        <tag>異步</tag>
        <tag>async/await</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Call Stack 入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-call-stack-intro-tutorial/</url>
    <content><![CDATA[<p>在 <code>JavaScript</code> 開發中，理解 <strong>Call Stack（呼叫堆疊）</strong> 是掌握執行流程與錯誤除錯的關鍵概念之一。它決定了程式碼執行的順序，也與同步與非同步行為密切相關。本文將深入介紹 Call Stack 的基本原理，並透過實際範例幫助你理解它的運作方式。</p>
<hr>
<h2 id="1-什麼是-Call-Stack？"><a href="#1-什麼是-Call-Stack？" class="headerlink" title="1. 什麼是 Call Stack？"></a><strong>1. 什麼是 Call Stack？</strong></h2><p>Call Stack 是 JavaScript 引擎用來<strong>管理函式呼叫的結構</strong>，它遵循 <strong>LIFO（Last In, First Out，後進先出）</strong> 原則。當一個函式被呼叫時，它會被推入（push）堆疊頂部，當函式執行完畢後，會從堆疊中彈出（pop）。</p>
<p>JavaScript 是<strong>單執行緒（single-threaded）</strong>的語言，這代表它一次只能執行一件事。Call Stack 便是 JavaScript 用來管理同步程式碼執行順序的機制。</p>
<hr>
<h2 id="2-Call-Stack-運作原理"><a href="#2-Call-Stack-運作原理" class="headerlink" title="2. Call Stack 運作原理"></a><strong>2. Call Stack 運作原理</strong></h2><p>讓我們用一個簡單的範例來說明 Call Stack 的運作方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First function start&quot;</span>);</span><br><span class="line">    <span class="title function_">second</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First function end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">second</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second function start&quot;</span>);</span><br><span class="line">    <span class="title function_">third</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second function end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">third</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Third function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>();</span><br></pre></td></tr></table></figure>

<h3 id="執行步驟"><a href="#執行步驟" class="headerlink" title="執行步驟"></a><strong>執行步驟</strong></h3><ol>
<li><code>first()</code> 被呼叫，推入 Call Stack。</li>
<li><code>first()</code> 內部呼叫 <code>second()</code>，<code>second()</code> 推入 Call Stack。</li>
<li><code>second()</code> 內部呼叫 <code>third()</code>，<code>third()</code> 推入 Call Stack。</li>
<li><code>third()</code> 執行 <code>console.log(&quot;Third function&quot;)</code>，然後執行完畢並從 Call Stack 移除。</li>
<li><code>second()</code> 繼續執行 <code>console.log(&quot;Second function end&quot;)</code>，執行完畢並從 Call Stack 移除。</li>
<li><code>first()</code> 繼續執行 <code>console.log(&quot;First function end&quot;)</code>，執行完畢並從 Call Stack 移除。</li>
<li>Call Stack 清空，程式執行結束。</li>
</ol>
<h3 id="執行輸出"><a href="#執行輸出" class="headerlink" title="執行輸出"></a><strong>執行輸出</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">First function start</span><br><span class="line">Second function start</span><br><span class="line">Third function</span><br><span class="line">Second function end</span><br><span class="line">First function end</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-Call-Stack-與錯誤訊息"><a href="#3-Call-Stack-與錯誤訊息" class="headerlink" title="3. Call Stack 與錯誤訊息"></a><strong>3. Call Stack 與錯誤訊息</strong></h2><p>如果函式之間發生無窮遞迴，Call Stack 會不斷推入函式，最終導致 <code>Maximum call stack size exceeded</code> 錯誤。</p>
<h3 id="範例：遞迴導致-Stack-Overflow"><a href="#範例：遞迴導致-Stack-Overflow" class="headerlink" title="範例：遞迴導致 Stack Overflow"></a><strong>範例：遞迴導致 Stack Overflow</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recursiveFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">recursiveFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">recursiveFunction</span>();</span><br></pre></td></tr></table></figure>

<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a><strong>錯誤訊息</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>
<p>這是因為 <code>recursiveFunction()</code> 不斷呼叫自己，導致 Call Stack 無法清空，最終超過瀏覽器設定的堆疊大小。</p>
<hr>
<h2 id="4-Call-Stack-與非同步"><a href="#4-Call-Stack-與非同步" class="headerlink" title="4. Call Stack 與非同步"></a><strong>4. Call Stack 與非同步</strong></h2><p>JavaScript 本質上是單執行緒的語言，但它透過 <strong>Event Loop（事件迴圈）</strong> 來處理非同步程式碼，例如 <code>setTimeout</code>、<code>fetch</code> 等。</p>
<h3 id="範例：setTimeout-與-Call-Stack"><a href="#範例：setTimeout-與-Call-Stack" class="headerlink" title="範例：setTimeout 與 Call Stack"></a><strong>範例：setTimeout 與 Call Stack</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Inside setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="執行輸出-1"><a href="#執行輸出-1" class="headerlink" title="執行輸出"></a><strong>執行輸出</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">End</span><br><span class="line">Inside setTimeout</span><br></pre></td></tr></table></figure>

<h3 id="執行流程解析"><a href="#執行流程解析" class="headerlink" title="執行流程解析"></a><strong>執行流程解析</strong></h3><ol>
<li><code>console.log(&quot;Start&quot;)</code> 直接執行，輸出 <code>Start</code>。</li>
<li><code>setTimeout</code> 被呼叫，但它是非同步函式，會被放入 <strong>Web API（瀏覽器環境）</strong>，不會影響 Call Stack。</li>
<li><code>console.log(&quot;End&quot;)</code> 直接執行，輸出 <code>End</code>。</li>
<li>當 Call Stack 清空後，事件迴圈（Event Loop）會將 <code>setTimeout</code> 內的回呼函式放入 Call Stack，執行 <code>console.log(&quot;Inside setTimeout&quot;)</code>。</li>
</ol>
<p>這說明了 Call Stack 只負責同步程式碼，非同步程式碼會透過 Web API 與 Event Loop 處理。</p>
<hr>
<h2 id="5-使用開發者工具檢查-Call-Stack"><a href="#5-使用開發者工具檢查-Call-Stack" class="headerlink" title="5. 使用開發者工具檢查 Call Stack"></a><strong>5. 使用開發者工具檢查 Call Stack</strong></h2><p>大多數現代瀏覽器（如 Chrome、Firefox）都內建開發者工具，可用來觀察 Call Stack。</p>
<h3 id="如何使用-Chrome-DevTools"><a href="#如何使用-Chrome-DevTools" class="headerlink" title="如何使用 Chrome DevTools"></a><strong>如何使用 Chrome DevTools</strong></h3><ol>
<li>開啟 Chrome 瀏覽器，按 <code>F12</code> 或 <code>Ctrl + Shift + I</code>（Mac 使用 <code>Cmd + Option + I</code>）。</li>
<li>進入 <strong>Sources</strong> 面板。</li>
<li>設置 <strong>斷點（breakpoint）</strong> 在 JavaScript 代碼內的某行。</li>
<li>重新載入頁面，當程式執行到該行時會暫停。</li>
<li>在右側 <strong>Call Stack 面板</strong> 中查看目前堆疊狀態。</li>
</ol>
<p>這個工具能幫助開發者更直觀地理解 Call Stack 的運作方式。</p>
<hr>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a><strong>6. 總結</strong></h2><p>Call Stack 是 JavaScript 引擎管理函式執行順序的核心機制，掌握它的運作原理對於理解 JavaScript 的同步與非同步行為至關重要。總結要點如下：</p>
<ol>
<li><strong>Call Stack 採用 LIFO（後進先出）原則</strong>，函式執行時會推入堆疊，結束後會移除。</li>
<li><strong>過多遞迴可能導致 Stack Overflow</strong>，應確保遞迴函式有適當的終止條件。</li>
<li><strong>JavaScript 是單執行緒的語言</strong>，但透過 Web API 和 Event Loop 可處理非同步操作。</li>
<li><strong>開發者工具能幫助分析 Call Stack</strong>，對於除錯非常有幫助。</li>
</ol>
<p>透過理解 Call Stack 的運作，開發者可以更有效地編寫、優化與除錯 JavaScript 程式碼。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>非同步</tag>
        <tag>異步</tag>
        <tag>Call Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 練習挑戰紀錄 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-javascript-challenge-intro-tutorial/</url>
    <content><![CDATA[<h2 id="Longest-Word"><a href="#Longest-Word" class="headerlink" title="Longest Word"></a>Longest Word</h2><p>當我們執行 <code>paragraph.match(/[a-z]+/gi)</code> 時，這段 JavaScript 程式碼的意思是：</p>
<h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a><strong>目的：</strong></h3><p>從 <code>paragraph</code> 字串中<strong>找出所有連續的英文字母（不分大小寫）組成的片段</strong>，並以陣列形式回傳。</p>
<hr>
<h3 id="語法拆解："><a href="#語法拆解：" class="headerlink" title="語法拆解："></a><strong>語法拆解：</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">paragraph.<span class="title function_">match</span>(<span class="regexp">/[a-z]+/gi</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>部分</th>
<th>意思</th>
</tr>
</thead>
<tbody><tr>
<td><code>paragraph</code></td>
<td>要處理的字串（變數名）</td>
</tr>
<tr>
<td><code>.match(...)</code></td>
<td>是一個字串的方法，會根據正則表達式去<strong>尋找所有符合條件的子字串</strong></td>
</tr>
<tr>
<td><code>/[a-z]+/gi</code></td>
<td>正則表達式：搜尋一或多個英文字母</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>表示小寫英文字母 a 到 z（大寫會由 <code>i</code> 修飾符處理）</td>
</tr>
<tr>
<td><code>+</code></td>
<td>表示「一個或多個」符合前面 <code>[a-z]</code> 的字元</td>
</tr>
<tr>
<td><code>g</code></td>
<td>global 全域搜尋，找到<strong>所有符合條件</strong>的片段</td>
</tr>
<tr>
<td><code>i</code></td>
<td>ignore case 忽略大小寫，讓 <code>[a-z]</code> 同時能配對 <code>A-Z</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="範例："><a href="#範例：" class="headerlink" title="範例："></a><strong>範例：</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&quot;Hello, 世界! This is a test123.&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> result = paragraph.<span class="title function_">match</span>(<span class="regexp">/[a-z]+/gi</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<h4 id="輸出："><a href="#輸出：" class="headerlink" title="輸出："></a>輸出：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&quot;Hello&quot;, &quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;test&quot;]</span><br></pre></td></tr></table></figure>

<p>這段程式會：</p>
<ul>
<li>忽略中文與數字</li>
<li>把英文字母串（不論大小寫）全都抓出來</li>
</ul>
<p>好，我們真的慢慢來，我會用<strong>超直白的說法、一步一步演示</strong>，幫你理解 <code>arr.sort((a, b) =&gt; a - b)</code> 是怎麼把數字從小排到大的。</p>
<hr>
<h2 id="先記住一個核心概念："><a href="#先記住一個核心概念：" class="headerlink" title="先記住一個核心概念："></a>先記住一個核心概念：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>

<p>這一行的意思是：</p>
<blockquote>
<p>陣列裡的「每兩個數字 a 和 b」，如果 a 比 b 小，就讓 a 排在 b 前面。</p>
</blockquote>
<hr>
<h2 id="一步一步來看："><a href="#一步一步來看：" class="headerlink" title="一步一步來看："></a>一步一步來看：</h2><p>假設這個陣列：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">30</span>, <span class="number">10</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>我們要用 <code>sort()</code> 排成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[5, 10, 30]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JS-怎麼做的？"><a href="#JS-怎麼做的？" class="headerlink" title="JS 怎麼做的？"></a>JS 怎麼做的？</h2><p>它會自動幫你「兩個兩個配對」來比較順序。</p>
<h3 id="第一次比較：30-和-10"><a href="#第一次比較：30-和-10" class="headerlink" title="第一次比較：30 和 10"></a>第一次比較：30 和 10</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">30</span>, b = <span class="number">10</span></span><br><span class="line">a - b = <span class="number">30</span> - <span class="number">10</span> = <span class="number">20</span>（是正數）</span><br><span class="line"></span><br><span class="line"><span class="title class_">JavaScript</span> 覺得：b（<span class="number">10</span>）比較小 → 讓 <span class="number">10</span> 排在 <span class="number">30</span> 前面</span><br></pre></td></tr></table></figure>

<p>結果變成這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[10, 30, 5]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第二次比較：30-和-5"><a href="#第二次比較：30-和-5" class="headerlink" title="第二次比較：30 和 5"></a>第二次比較：30 和 5</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">30</span>, b = <span class="number">5</span></span><br><span class="line">a - b = <span class="number">30</span> - <span class="number">5</span> = <span class="number">25</span>（是正數）</span><br><span class="line"></span><br><span class="line">b（<span class="number">5</span>）比較小 → 把 <span class="number">5</span> 放到前面</span><br></pre></td></tr></table></figure>

<p>結果變成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[10, 5, 30]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第三次比較：10-和-5"><a href="#第三次比較：10-和-5" class="headerlink" title="第三次比較：10 和 5"></a>第三次比較：10 和 5</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span>, b = <span class="number">5</span></span><br><span class="line">a - b = <span class="number">10</span> - <span class="number">5</span> = <span class="number">5</span>（是正數）</span><br><span class="line"></span><br><span class="line">b（<span class="number">5</span>）比較小 → 把 <span class="number">5</span> 放到前面</span><br></pre></td></tr></table></figure>

<p>最後得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[5, 10, 30]</span><br></pre></td></tr></table></figure>

<p>就是我們想要的「從小到大」排序！</p>
<hr>
<h2 id="最簡單的記法："><a href="#最簡單的記法：" class="headerlink" title="最簡單的記法："></a>最簡單的記法：</h2><table>
<thead>
<tr>
<th>語法</th>
<th>排序方式</th>
</tr>
</thead>
<tbody><tr>
<td><code>(a, b) =&gt; a - b</code></td>
<td>小到大</td>
</tr>
<tr>
<td><code>(a, b) =&gt; b - a</code></td>
<td>大到小</td>
</tr>
</tbody></table>
<hr>
<h2 id="小挑戰"><a href="#小挑戰" class="headerlink" title="小挑戰"></a>小挑戰</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">8</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">1</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// [1, 3, 8, 100]</span></span><br></pre></td></tr></table></figure>

<h1 id="Codeland-Username-Validation"><a href="#Codeland-Username-Validation" class="headerlink" title="Codeland Username Validation"></a>Codeland Username Validation</h1><p>符合條件的正則表達式：</p>
<h3 id="正則表達式："><a href="#正則表達式：" class="headerlink" title="正則表達式："></a>正則表達式：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^[A-Za-z][A-Za-z0-9_]&#123;2,23&#125;[A-Za-z0-9]$</span><br></pre></td></tr></table></figure>

<h3 id="解釋："><a href="#解釋：" class="headerlink" title="解釋："></a>解釋：</h3><ol>
<li>**<code>^</code>**：字串的開始。</li>
<li>**<code>[A-Za-z]</code>**：第一個字符必須是字母（無論是大寫還是小寫）。</li>
<li>**<code>[A-Za-z0-9_]&#123;2,23&#125;</code>**：接下來可以包含字母、數字或底線，並且長度必須在 2 到 23 之間。這確保了整個字串的長度在 4 到 25 之間（包括起始的字母）。</li>
<li>**<code>[A-Za-z0-9]</code>**：字串的結尾必須是字母或數字，不能是底線 <code>_</code>。</li>
<li>**<code>$</code>**：字串的結束。</li>
</ol>
<h3 id="規則解釋："><a href="#規則解釋：" class="headerlink" title="規則解釋："></a>規則解釋：</h3><ol>
<li>用戶名必須是 4 到 25 個字符。</li>
<li>用戶名的開頭必須是字母。</li>
<li>用戶名可以包含字母、數字和底線 <code>_</code>。</li>
<li>用戶名不能以底線 <code>_</code> 結尾。</li>
</ol>
<h3 id="範例：-1"><a href="#範例：-1" class="headerlink" title="範例："></a>範例：</h3><ul>
<li><code>&quot;username123&quot;</code> 會匹配成功。</li>
<li><code>&quot;user_name&quot;</code> 會匹配成功。</li>
<li><code>&quot;user_name_&quot;</code> 會匹配失敗（因為底線 <code>_</code> 在結尾）。</li>
<li><code>&quot;123username&quot;</code> 會匹配失敗（因為開頭不是字母）。</li>
<li><code>&quot;user&quot;</code> 會匹配成功。</li>
<li><code>&quot;a_1&quot;</code> 會匹配失敗（因為長度太短，少於 4 個字符）。</li>
</ul>
<h2 id="2620-Counter"><a href="#2620-Counter" class="headerlink" title="2620. Counter"></a>2620. Counter</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createCounter = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n++;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣做的好處是：</p>
<p>n 是外部函式的區域變數（<code>closure</code>）</p>
<p>每次呼叫內部函式都能使用並修改 n</p>
<p>n++ 會先回傳 n 的值，再讓 n 加 1</p>
<p>小補充：n++ vs ++n<br>n++：先回傳，再加一<br>++n：先加一，再回傳</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 模組系統：CommonJS 與 AMD 入門教學 | 學習筆記</title>
    <url>/2024/12/16/learning-notes-javascript-commonjs-amd-module-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 JavaScript 早期，所有程式碼通常寫在單一文件中，這樣的方式在小型專案中或許可行，但當應用程式變得更大、更複雜時，這種結構會導致管理困難。因此，模組化的概念被引入，允許開發者將程式碼拆分成可重複使用的獨立部分，提高可維護性與擴展性。  </p>
<p>在 ES6 標準推出之前，JavaScript 主要依賴 <strong>CommonJS（CJS）</strong> 和 <strong>Asynchronous Module Definition（AMD）</strong> 來實現模組化。這兩種模組系統有不同的設計理念與應用場景，以下將詳細介紹其特性與實作方式。</p>
<hr>
<h2 id="1-CommonJS（CJS）——-Node-js-的標準模組系統"><a href="#1-CommonJS（CJS）——-Node-js-的標準模組系統" class="headerlink" title="1. CommonJS（CJS）—— Node.js 的標準模組系統"></a><strong>1. CommonJS（CJS）—— Node.js 的標準模組系統</strong></h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><p><strong>CommonJS</strong> 由 <strong>Node.js</strong> 所採用，主要用於伺服器端開發。它的核心概念是 <strong>同步載入（Synchronous Loading）</strong>，這意味著模組在執行時會逐步載入，而不是並行載入。  </p>
<p>CommonJS 主要透過 <code>require()</code> 來載入模組，並使用 <code>module.exports</code> 或 <code>exports</code> 來匯出模組內容。</p>
<h3 id="CommonJS-語法"><a href="#CommonJS-語法" class="headerlink" title="CommonJS 語法"></a><strong>CommonJS 語法</strong></h3><h4 id="1-定義模組（匯出）"><a href="#1-定義模組（匯出）" class="headerlink" title="(1) 定義模組（匯出）"></a><strong>(1) 定義模組（匯出）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匯出模組</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    pi,</span><br><span class="line">    add,</span><br><span class="line">    subtract</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-使用模組（載入）"><a href="#2-使用模組（載入）" class="headerlink" title="(2) 使用模組（載入）"></a><strong>(2) 使用模組（載入）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="property">pi</span>); <span class="comment">// 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">20</span>, <span class="number">8</span>)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>

<h3 id="CommonJS-特點"><a href="#CommonJS-特點" class="headerlink" title="CommonJS 特點"></a><strong>CommonJS 特點</strong></h3><p>優點：<br><strong>適用於伺服器端（Node.js）</strong>，可輕鬆管理模組與依賴。<br><strong>簡單直覺的 <code>require()</code> 和 <code>module.exports</code> 語法</strong>。<br><strong>支援循環依賴（Circular Dependencies）</strong>，當兩個模組互相依賴時，仍能正確解析。  </p>
<p>缺點：<br><strong>同步載入（Synchronous Loading）</strong>，不適合瀏覽器端，因為會阻塞執行緒，影響頁面效能。<br><strong>不支援瀏覽器環境</strong>，需使用 Webpack 或 Browserify 來轉換為瀏覽器可用的程式碼。  </p>
<hr>
<h2 id="2-AMD（Asynchronous-Module-Definition）——-適用於瀏覽器的模組系統"><a href="#2-AMD（Asynchronous-Module-Definition）——-適用於瀏覽器的模組系統" class="headerlink" title="2. AMD（Asynchronous Module Definition）—— 適用於瀏覽器的模組系統"></a><strong>2. AMD（Asynchronous Module Definition）—— 適用於瀏覽器的模組系統</strong></h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a><strong>概述</strong></h3><p><strong>AMD</strong> 是專為 <strong>瀏覽器環境</strong> 設計的模組系統，解決了 CommonJS 無法在前端環境直接運作的問題。AMD 的關鍵特點是 <strong>非同步載入（Asynchronous Loading）</strong>，允許模組在需要時才載入，避免影響頁面效能。  </p>
<p>AMD 主要使用 <strong><code>define()</code></strong> 來定義模組，**<code>require()</code>** 來載入模組。</p>
<h3 id="AMD-語法"><a href="#AMD-語法" class="headerlink" title="AMD 語法"></a><strong>AMD 語法</strong></h3><h4 id="1-定義模組（匯出）-1"><a href="#1-定義模組（匯出）-1" class="headerlink" title="(1) 定義模組（匯出）"></a><strong>(1) 定義模組（匯出）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="title function_">define</span>([], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        pi,</span><br><span class="line">        add,</span><br><span class="line">        subtract</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-使用模組（載入）-1"><a href="#2-使用模組（載入）-1" class="headerlink" title="(2) 使用模組（載入）"></a><strong>(2) 使用模組（載入）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;math&#x27;</span>], <span class="keyword">function</span> (<span class="params">math</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="property">pi</span>); <span class="comment">// 3.14159</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">6</span>)); <span class="comment">// 11</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="AMD-特點"><a href="#AMD-特點" class="headerlink" title="AMD 特點"></a><strong>AMD 特點</strong></h3><p>優點：<br><strong>適用於瀏覽器環境</strong>，支援非同步載入，提高效能。<br><strong>使用 <code>define()</code> 與 <code>require()</code> 來管理模組，能夠載入多個依賴。</strong><br><strong>非同步執行，適合大型應用程式，減少載入時間。</strong>  </p>
<p>缺點：<br><strong>語法較繁瑣</strong>，比 CommonJS 需要更多設定。<br><strong>需要 RequireJS 來執行</strong>，瀏覽器無法直接支援 AMD。  </p>
<hr>
<h2 id="3-CommonJS-vs-AMD-vs-ES-Modules（ESM）"><a href="#3-CommonJS-vs-AMD-vs-ES-Modules（ESM）" class="headerlink" title="3. CommonJS vs AMD vs ES Modules（ESM）"></a><strong>3. CommonJS vs AMD vs ES Modules（ESM）</strong></h2><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>CommonJS（CJS）</strong></th>
<th><strong>AMD</strong></th>
<th><strong>ES Modules（ESM）</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>適用環境</strong></td>
<td>Node.js</td>
<td>瀏覽器</td>
<td>瀏覽器 &amp; Node.js</td>
</tr>
<tr>
<td><strong>載入方式</strong></td>
<td><code>require()</code></td>
<td><code>require()</code></td>
<td><code>import/export</code></td>
</tr>
<tr>
<td><strong>同步&#x2F;非同步</strong></td>
<td>同步（Synchronous）</td>
<td>非同步（Asynchronous）</td>
<td>靜態解析（Static）</td>
</tr>
<tr>
<td><strong>優勢</strong></td>
<td>簡單易用，適合伺服器端</td>
<td>適用瀏覽器，非同步載入</td>
<td>現代標準，支援 Tree Shaking</td>
</tr>
<tr>
<td><strong>限制</strong></td>
<td>不適合瀏覽器</td>
<td>需要 RequireJS</td>
<td>需要 ES6 瀏覽器或 Node.js 12+</td>
</tr>
</tbody></table>
<hr>
<h2 id="4-CommonJS-與-AMD-的使用時機"><a href="#4-CommonJS-與-AMD-的使用時機" class="headerlink" title="4. CommonJS 與 AMD 的使用時機"></a><strong>4. CommonJS 與 AMD 的使用時機</strong></h2><ul>
<li><strong>當開發伺服器端應用程式時，建議使用 CommonJS</strong>，因為它與 Node.js 相容性最佳。  </li>
<li><strong>當開發前端應用時，AMD 是一種選擇，但目前更推薦使用 ES Modules（ESM）</strong>。  </li>
<li><strong>現代 JavaScript 建議使用 ES Modules（import&#x2F;export），因為它已經成為標準</strong>，並且同時支援瀏覽器與 Node.js 環境。</li>
</ul>
<hr>
<h2 id="5-結論"><a href="#5-結論" class="headerlink" title="5. 結論"></a><strong>5. 結論</strong></h2><p>在 JavaScript 模組化的歷史發展中，<strong>CommonJS</strong> 被廣泛用於 <strong>伺服器端</strong>，而 <strong>AMD</strong> 則主要針對 <strong>瀏覽器環境</strong> 設計。隨著 ES6 的 <strong>ES Modules</strong>（ESM）標準化，許多開發者已經轉向 <strong>ESM</strong>，因為它在語法上更直覺，並且可以同時適用於前端與後端。  </p>
<p>雖然 CommonJS 和 AMD 仍然在某些專案中使用，但未來趨勢將逐漸轉向 ES Modules。因此，對於新專案，建議 <strong>優先使用 ES Modules（import&#x2F;export）</strong>，而對於舊專案或特定環境（如 Node.js 早期版本），仍可能需要使用 CommonJS 或 AMD。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>模組</tag>
        <tag>module</tag>
        <tag>CommonJS（CJS）</tag>
        <tag>Asynchronous Module Definition（AMD）</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 模組（Module）入門教學筆記 | 學習筆記</title>
    <url>/2024/12/16/learning-notes-javascript-es-module-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-什麼是-JavaScript-模組？"><a href="#1-什麼是-JavaScript-模組？" class="headerlink" title="1. 什麼是 JavaScript 模組？"></a><strong>1. 什麼是 JavaScript 模組？</strong></h2><p>JavaScript 模組（Module）是一種<strong>將程式碼拆分成多個獨立文件</strong>，並在不同文件間共享和管理程式碼的方式。透過模組化的設計，可以讓程式碼更具結構性、可讀性與可維護性。</p>
<p>在 ES6（ECMAScript 2015）之前，JavaScript 主要透過 <strong>IIFE（立即執行函式）、CommonJS 或 AMD</strong> 來模組化程式碼。而 ES6 之後，JavaScript 原生支援 <strong>ES Modules（ESM）</strong>，提供 <code>import</code> 和 <code>export</code> 來管理模組。</p>
<hr>
<h2 id="2-為什麼需要模組？"><a href="#2-為什麼需要模組？" class="headerlink" title="2. 為什麼需要模組？"></a><strong>2. 為什麼需要模組？</strong></h2><ol>
<li><strong>避免全域變數污染</strong>  <ul>
<li>模組能夠封裝變數，避免不同程式碼區塊互相影響。</li>
</ul>
</li>
<li><strong>提高可維護性</strong>  <ul>
<li>讓程式碼結構更清晰，拆分不同的功能至獨立文件中。</li>
</ul>
</li>
<li><strong>支援程式碼重用</strong>  <ul>
<li>可在多個專案中共享相同的模組，避免重複開發。</li>
</ul>
</li>
<li><strong>支援延遲載入（Lazy Loading）</strong>  <ul>
<li>透過動態 <code>import()</code>，按需載入模組，提高效能。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="3-ES6-模組語法"><a href="#3-ES6-模組語法" class="headerlink" title="3. ES6 模組語法"></a><strong>3. ES6 模組語法</strong></h2><p>在 ES6 中，我們主要使用 <code>export</code> 和 <code>import</code> 來定義和載入模組。</p>
<h3 id="1-export-的使用"><a href="#1-export-的使用" class="headerlink" title="(1) export 的使用"></a><strong>(1) <code>export</code> 的使用</strong></h3><h4 id="命名匯出（Named-Export）"><a href="#命名匯出（Named-Export）" class="headerlink" title="命名匯出（Named Export）"></a><strong>命名匯出（Named Export）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="預設匯出（Default-Export）"><a href="#預設匯出（Default-Export）" class="headerlink" title="預設匯出（Default Export）"></a><strong>預設匯出（Default Export）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// greeting.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-import-的使用"><a href="#2-import-的使用" class="headerlink" title="(2) import 的使用"></a><strong>(2) <code>import</code> 的使用</strong></h3><h4 id="匯入命名匯出"><a href="#匯入命名匯出" class="headerlink" title="匯入命名匯出"></a><strong>匯入命名匯出</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; pi, add, subtract &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi); <span class="comment">// 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">10</span>, <span class="number">4</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h4 id="匯入預設匯出"><a href="#匯入預設匯出" class="headerlink" title="匯入預設匯出"></a><strong>匯入預設匯出</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> sayHello <span class="keyword">from</span> <span class="string">&quot;./greeting.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>(<span class="string">&quot;Alice&quot;</span>)); <span class="comment">// &quot;Hello, Alice!&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="匯入所有模組內容"><a href="#匯入所有模組內容" class="headerlink" title="匯入所有模組內容"></a><strong>匯入所有模組內容</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="property">pi</span>); <span class="comment">// 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-as-重新命名"><a href="#使用-as-重新命名" class="headerlink" title="使用 as 重新命名"></a><strong>使用 <code>as</code> 重新命名</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add <span class="keyword">as</span> sum, subtract <span class="keyword">as</span> minus &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minus</span>(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-ES-模組的特性"><a href="#4-ES-模組的特性" class="headerlink" title="4. ES 模組的特性"></a><strong>4. ES 模組的特性</strong></h2><ol>
<li><p><strong>靜態解析（Static Analysis）</strong></p>
<ul>
<li><code>import</code> 和 <code>export</code> <strong>必須在頂層作用域</strong>，不能在條件語句或函式內部。</li>
<li>在編譯時（compile time）解析模組，而不是執行時（runtime）。</li>
</ul>
</li>
<li><p><strong>模組作用域</strong></p>
<ul>
<li>每個模組都有自己的作用域，變數不會污染全域作用域。</li>
</ul>
</li>
<li><p><strong>自動使用嚴格模式（Strict Mode）</strong></p>
<ul>
<li>ES6 模組內部自動啟用 <code>&quot;use strict&quot;</code>，無需手動指定。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="5-動態載入模組"><a href="#5-動態載入模組" class="headerlink" title="5. 動態載入模組"></a><strong>5. 動態載入模組</strong></h2><p>有時候我們希望在特定條件下載入模組，而不是在程式開始時就載入所有模組。這時可以使用 <strong><code>import()</code></strong> 來動態載入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&quot;./math.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">math</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">// 15</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>import()</code> 回傳一個 Promise，當模組載入完成後執行回調函式。</li>
<li>這種方式適合懶加載（Lazy Loading）與條件性載入。</li>
</ul>
<hr>
<h2 id="6-var、let-在模組中的行為"><a href="#6-var、let-在模組中的行為" class="headerlink" title="6. var、let 在模組中的行為"></a><strong>6. <code>var</code>、<code>let</code> 在模組中的行為</strong></h2><p>在模組內，變數 <code>var</code> 仍然會被提升（Hoisting），但 <code>let</code> 和 <code>const</code> 具有區塊作用域。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="string">&quot;I am global&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> localVar = <span class="string">&quot;I am local&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./module.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar); <span class="comment">// &quot;I am global&quot; （因為 var 會提升到全域）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localVar); <span class="comment">// ReferenceError: localVar is not defined</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-在瀏覽器與-Node-js-環境使用-ES-模組"><a href="#7-在瀏覽器與-Node-js-環境使用-ES-模組" class="headerlink" title="7. 在瀏覽器與 Node.js 環境使用 ES 模組"></a><strong>7. 在瀏覽器與 Node.js 環境使用 ES 模組</strong></h2><h3 id="1-瀏覽器"><a href="#1-瀏覽器" class="headerlink" title="(1) 瀏覽器"></a><strong>(1) 瀏覽器</strong></h3><p>在 HTML 文件中，使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 來載入 ES6 模組。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>, <span class="number">5</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="(2) Node.js"></a><strong>(2) Node.js</strong></h3><p>Node.js 14+ 版本支援 ES 模組，但需要：</p>
<ul>
<li>檔案副檔名改為 <code>.mjs</code></li>
<li>在 <code>package.json</code> 設定 <code>&quot;type&quot;: &quot;module&quot;</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; multiply &#125; <span class="keyword">from</span> <span class="string">&quot;./math.mjs&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-模組引入方式整理"><a href="#8-模組引入方式整理" class="headerlink" title="8. 模組引入方式整理"></a><strong>8. 模組引入方式整理</strong></h2><table>
<thead>
<tr>
<th><strong>環境</strong></th>
<th><strong>引入方式</strong></th>
</tr>
</thead>
<tbody><tr>
<td>瀏覽器（ESM）</td>
<td><code>&lt;script type=&quot;module&quot;&gt;</code></td>
</tr>
<tr>
<td>Node.js（ESM）</td>
<td><code>import &#123; foo &#125; from &#39;./module.mjs&#39;</code></td>
</tr>
<tr>
<td>Node.js（CommonJS）</td>
<td><code>const foo = require(&#39;./module.js&#39;)</code></td>
</tr>
<tr>
<td>動態載入（Lazy Load）</td>
<td><code>import(&#39;./module.js&#39;).then(...)</code></td>
</tr>
<tr>
<td>重新命名</td>
<td><code>import &#123; foo as newFoo &#125; from &#39;./module.js&#39;</code></td>
</tr>
<tr>
<td>匯入所有內容</td>
<td><code>import * as mod from &#39;./module.js&#39;</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="9-結論"><a href="#9-結論" class="headerlink" title="9. 結論"></a><strong>9. 結論</strong></h2><ol>
<li><strong>ES 模組是 JavaScript 原生模組系統</strong>，使用 <code>import</code> 和 <code>export</code> 來管理程式碼。</li>
<li><strong>模組有助於提升可讀性與可維護性</strong>，避免全域變數污染。</li>
<li><strong>動態載入（import()）可以優化效能</strong>，適合延遲載入模組。</li>
<li><strong>瀏覽器與 Node.js 都支援 ES6 模組</strong>，但 Node.js 需要 <code>.mjs</code> 或 <code>package.json</code> 設定 <code>&quot;type&quot;: &quot;module&quot;</code>。</li>
<li><strong>模組可以透過不同方式引入</strong>，根據環境選擇適合的方法。</li>
</ol>
<p>掌握 JavaScript 模組的概念，能夠讓你更有效地開發與維護大型專案。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>模組</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript this 使用情境入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-javascript-event-input-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 JavaScript 中，箭頭函式（arrow function）與傳統函式在 <code>this</code> 的行為上有一些不同。箭頭函式不會創建自己的 <code>this</code>，而是繼承外部作用域的 <code>this</code>，這就是為什麼你會遇到 <code>this</code> 的問題。</p>
<h3 id="傳統函式中的-this"><a href="#傳統函式中的-this" class="headerlink" title="傳統函式中的 this"></a>傳統函式中的 <code>this</code></h3><p>在傳統的函式中，<code>this</code> 會指向該函式被調用時的上下文。例如，當函式作為事件處理器時，<code>this</code> 會指向觸發事件的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">regularFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// &#x27;this&#x27; 是調用它的上下文</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;KD&#x27;</span>,</span><br><span class="line">  <span class="attr">show</span>: regularFunction</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">show</span>();  <span class="comment">// &#x27;this&#x27; 會指向 obj</span></span><br></pre></td></tr></table></figure>

<h3 id="箭頭函式中的-this"><a href="#箭頭函式中的-this" class="headerlink" title="箭頭函式中的 this"></a>箭頭函式中的 <code>this</code></h3><p>在箭頭函式中，<code>this</code> 並不會綁定到函式的上下文，而是繼承自外部作用域。這通常會讓箭頭函式的 <code>this</code> 變得不同於你預期的結果。</p>
<h3 id="例子：this-的問題"><a href="#例子：this-的問題" class="headerlink" title="例子：this 的問題"></a>例子：<code>this</code> 的問題</h3><p>假設有這樣的情境，當你在一個物件的方法中使用箭頭函式作為事件處理器，<code>this</code> 會指向外部作用域，而不是該物件本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;KD&#x27;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用傳統函式作為事件處理器</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// &#x27;this&#x27; 指向的是 &#x27;btn&#x27; 按鈕元素</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用箭頭函式作為事件處理器</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// &#x27;this&#x27; 指向外部作用域，即 &#x27;obj&#x27; 物件</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>在傳統函式中，<code>this</code> 會指向觸發事件的 DOM 元素（這裡是 <code>btn</code> 按鈕）。</li>
<li>在箭頭函式中，<code>this</code> 會指向外部作用域（這裡是 <code>obj</code> 物件），因為箭頭函式不會創建自己的 <code>this</code>。</li>
</ul>
<h3 id="解決方案：確保-this-正確指向"><a href="#解決方案：確保-this-正確指向" class="headerlink" title="解決方案：確保 this 正確指向"></a>解決方案：確保 <code>this</code> 正確指向</h3><p>如果你希望 <code>this</code> 指向物件本身，可以使用傳統函式或手動綁定 <code>this</code>。</p>
<h4 id="使用傳統函式"><a href="#使用傳統函式" class="headerlink" title="使用傳統函式"></a>使用傳統函式</h4><p>如果你希望在事件處理器中讓 <code>this</code> 指向物件本身，可以使用傳統函式，或者使用 <code>bind</code> 顯式綁定 <code>this</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;KD&#x27;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// &#x27;this&#x27; 指向 obj</span></span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>));  <span class="comment">// 顯式綁定 &#x27;this&#x27; 到 obj</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure>

<h4 id="另一個選項：箭頭函式和外部-this"><a href="#另一個選項：箭頭函式和外部-this" class="headerlink" title="另一個選項：箭頭函式和外部 this"></a>另一個選項：箭頭函式和外部 <code>this</code></h4><p>如果你希望繼續使用箭頭函式，你可以將物件的 <code>this</code> 儲存到外部變數中，並在箭頭函式中引用它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;KD&#x27;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;  <span class="comment">// 保存物件的 &#x27;this&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(self);  <span class="comment">// 使用外部的 &#x27;self&#x27;，指向 obj</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure>

<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li><strong>傳統函式</strong> 會根據調用上下文決定 <code>this</code> 的值。</li>
<li><strong>箭頭函式</strong> 會繼承外部作用域的 <code>this</code>，不會創建自己的 <code>this</code>，這樣在某些情況下會導致 <code>this</code> 不如預期。</li>
<li>如果你需要在事件處理器中使用物件的 <code>this</code>，可以選擇使用傳統函式或顯式綁定 <code>this</code>。</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
        <tag>arrow function</tag>
      </tags>
  </entry>
  <entry>
    <title>setTimeout + for loop + closure 核心介紹入門教學筆記 | 學習筆記</title>
    <url>/2023/07/01/learning-notes-javascript-event-loop-closure-problems/</url>
    <content><![CDATA[<h3 id="一、var-和-let-的作用域差異"><a href="#一、var-和-let-的作用域差異" class="headerlink" title="一、var 和 let 的作用域差異"></a>一、<code>var</code> 和 <code>let</code> 的作用域差異</h3><table>
<thead>
<tr>
<th>宣告方式</th>
<th>作用域</th>
<th>是否有暫時性死區（TDZ）</th>
</tr>
</thead>
<tbody><tr>
<td><code>var</code></td>
<td>函式作用域</td>
<td>否</td>
</tr>
<tr>
<td><code>let</code></td>
<td>區塊作用域</td>
<td>是</td>
</tr>
<tr>
<td><code>const</code></td>
<td>區塊作用域</td>
<td>是</td>
</tr>
</tbody></table>
<ul>
<li><code>var</code> 宣告的變數在整個函式內都可存取</li>
<li><code>let</code> 則只在所在區塊 <code>&#123;&#125;</code> 中有效</li>
</ul>
<hr>
<h3 id="二、閉包（Closure）"><a href="#二、閉包（Closure）" class="headerlink" title="二、閉包（Closure）"></a>二、閉包（Closure）</h3><p>閉包是指「函式能記住它被定義時的作用域，即使在外部執行也能存取當時的變數」。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>這個例子中，<code>inner</code> 函式記住了 <code>outer</code> 中的 <code>count</code> 變數。</p>
<hr>
<h3 id="三、事件迴圈與-setTimeout"><a href="#三、事件迴圈與-setTimeout" class="headerlink" title="三、事件迴圈與 setTimeout"></a>三、事件迴圈與 <code>setTimeout</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>輸出順序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure>

<p>原因是 <code>setTimeout</code> 是非同步的，它會被放入「事件佇列」（event queue）中，等主程式執行完後才會被處理。</p>
<hr>
<h3 id="四、面試陷阱：var-與-setTimeout-搭配"><a href="#四、面試陷阱：var-與-setTimeout-搭配" class="headerlink" title="四、面試陷阱：var 與 setTimeout 搭配"></a>四、面試陷阱：<code>var</code> 與 <code>setTimeout</code> 搭配</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段程式的輸出是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>因為：</p>
<ul>
<li><code>var</code> 沒有區塊作用域，所有的 <code>setTimeout</code> 都引用同一個 <code>i</code></li>
<li>當 <code>setTimeout</code> 執行時，迴圈已跑完，<code>i</code> 已是 3</li>
</ul>
<hr>
<h3 id="五、正確解法：使用-let"><a href="#五、正確解法：使用-let" class="headerlink" title="五、正確解法：使用 let"></a>五、正確解法：使用 <code>let</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>輸出為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>因為 <code>let</code> 有區塊作用域，每次迴圈都建立新的 <code>i</code>，閉包會記住各自的值。</p>
<hr>
<h3 id="六、另一個解法：IIFE（立即執行函式）"><a href="#六、另一個解法：IIFE（立即執行函式）" class="headerlink" title="六、另一個解法：IIFE（立即執行函式）"></a>六、另一個解法：IIFE（立即執行函式）</h3><p>若必須用 <code>var</code>，可以用 IIFE 綁定每次的 <code>i</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">j</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣也會正確輸出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="七、總結"><a href="#七、總結" class="headerlink" title="七、總結"></a>七、總結</h3><ol>
<li><code>var</code> 是函式作用域，容易被非同步邏輯影響</li>
<li><code>let</code> 是區塊作用域，與閉包搭配可解決常見陷阱</li>
<li><code>setTimeout</code> 是非同步，會延遲執行</li>
<li>通常面試會結合這些概念出題，考你對 JavaScript 執行流程、作用域與閉包的理解</li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>setTimeout</tag>
        <tag>for loop</tag>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Hoisting 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/15/learning-notes-javascript-hoisting-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-什麼是-Hoisting？"><a href="#1-什麼是-Hoisting？" class="headerlink" title="1. 什麼是 Hoisting？"></a>1. 什麼是 Hoisting？</h2><p>Hoisting（提升）是 JavaScript 中的一種行為，它允許變數與函式在執行時被提升到作用域的頂部，這表示你可以在宣告之前使用它們，而不會發生錯誤。「<code>建立期</code>」（<code>Creation Phase</code>）和「<code>執行期</code>」（<code>Execution Phase</code>），建立期主要為定義變數名稱，執行期為執行程式和指定賦值。</p>
<p>在 JavaScript 中，Hoisting 影響兩種類型的宣告：</p>
<ol>
<li><strong>變數宣告（var, let, const）</strong></li>
<li><strong>函式宣告（Function Declaration）</strong></li>
</ol>
<h2 id="2-變數-Hoisting"><a href="#2-變數-Hoisting" class="headerlink" title="2. 變數 Hoisting"></a>2. 變數 Hoisting</h2><h3 id="2-1-使用-var-的-Hoisting"><a href="#2-1-使用-var-的-Hoisting" class="headerlink" title="2.1 使用 var 的 Hoisting"></a>2.1 使用 <code>var</code> 的 Hoisting</h3><p><code>var</code> 宣告的變數會被提升，但不會初始化，這表示變數本身會被提升到作用域頂端，但其值不會。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>上述程式碼等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>在 Hoisting 過程中，變數 <code>a</code> 被提升（Hoist）到了作用域的頂部，但它的值 <code>10</code> 並沒有一起提升，因此第一次 <code>console.log(a);</code> 會輸出 <code>undefined</code>。</p>
<h3 id="2-2-使用-let-和-const-的-Hoisting"><a href="#2-2-使用-let-和-const-的-Hoisting" class="headerlink" title="2.2 使用 let 和 const 的 Hoisting"></a>2.2 使用 <code>let</code> 和 <code>const</code> 的 Hoisting</h3><p><code>let</code> 和 <code>const</code> 也會被提升，但它們不會自動初始化，因此在變數宣告之前存取會導致 <code>ReferenceError</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: Cannot access &#x27;b&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError</span></span><br><span class="line">b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p><code>let</code> 和 <code>const</code> 變數存在「暫時性死區（Temporal Dead Zone, TDZ）」，這表示變數在初始化之前無法被存取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-總結變數-Hoisting"><a href="#2-3-總結變數-Hoisting" class="headerlink" title="2.3 總結變數 Hoisting"></a>2.3 總結變數 Hoisting</h3><table>
<thead>
<tr>
<th>宣告方式</th>
<th>是否 Hoisting</th>
<th>是否初始化</th>
<th>TDZ 存在</th>
</tr>
</thead>
<tbody><tr>
<td><code>var</code></td>
<td>是</td>
<td><code>undefined</code></td>
<td>否</td>
</tr>
<tr>
<td><code>let</code></td>
<td>是</td>
<td>無</td>
<td>是</td>
</tr>
<tr>
<td><code>const</code></td>
<td>是</td>
<td>無</td>
<td>是</td>
</tr>
</tbody></table>
<h2 id="3-函式-Hoisting"><a href="#3-函式-Hoisting" class="headerlink" title="3. 函式 Hoisting"></a>3. 函式 Hoisting</h2><h3 id="3-1-Function-Declaration（函式宣告）"><a href="#3-1-Function-Declaration（函式宣告）" class="headerlink" title="3.1 Function Declaration（函式宣告）"></a>3.1 Function Declaration（函式宣告）</h3><p>函式宣告（<code>function foo() &#123;&#125;</code>）會完整 Hoisting，因此可以在定義之前調用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hello</span>(); <span class="comment">// Hello, world!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在執行時，JavaScript 會將函式整個提升到作用域頂部，因此 <code>hello()</code> 可以在函式宣告前執行。</p>
<p>等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(); <span class="comment">// Hello, world!</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-Function-Expression（函式表達式）"><a href="#3-2-Function-Expression（函式表達式）" class="headerlink" title="3.2 Function Expression（函式表達式）"></a>3.2 Function Expression（函式表達式）</h3><p>使用 <code>var</code> 宣告的函式表達式（Function Expression）僅會提升變數，但不會提升函式內容，因此無法在宣告前調用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi); <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// TypeError: sayHi is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述程式碼等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sayHi;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>因為 <code>sayHi</code> 在 Hoisting 時只被提升變數，但未初始化，因此 <code>console.log(sayHi);</code> 顯示 <code>undefined</code>，並且 <code>sayHi();</code> 會導致 <code>TypeError</code>。</p>
<h3 id="3-3-使用-let-和-const-的-Function-Expression"><a href="#3-3-使用-let-和-const-的-Function-Expression" class="headerlink" title="3.3 使用 let 和 const 的 Function Expression"></a>3.3 使用 <code>let</code> 和 <code>const</code> 的 Function Expression</h3><p>若函式表達式使用 <code>let</code> 或 <code>const</code>，則變數仍然會被提升，但會受到暫時性死區（TDZ）影響，因此在初始化前使用會導致 <code>ReferenceError</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHello); <span class="comment">// ReferenceError: Cannot access &#x27;sayHello&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-結論與最佳實踐"><a href="#4-結論與最佳實踐" class="headerlink" title="4. 結論與最佳實踐"></a>4. 結論與最佳實踐</h2><h3 id="4-1-總結-Hoisting-行為"><a href="#4-1-總結-Hoisting-行為" class="headerlink" title="4.1 總結 Hoisting 行為"></a>4.1 總結 Hoisting 行為</h3><ol>
<li><strong>變數宣告</strong>：<ul>
<li><code>var</code> 會被提升並初始化為 <code>undefined</code>。</li>
<li><code>let</code> 和 <code>const</code> 會被提升，但不會初始化（存在 TDZ）。</li>
</ul>
</li>
<li><strong>函式宣告</strong>：<ul>
<li><code>function</code> 會完整提升，可以在宣告前調用。</li>
<li><code>var</code> 宣告的函式表達式只提升變數，無法在宣告前調用。</li>
<li><code>let</code> 和 <code>const</code> 宣告的函式表達式受 TDZ 影響，無法在宣告前使用。</li>
</ul>
</li>
</ol>
<h3 id="4-2-最佳實踐"><a href="#4-2-最佳實踐" class="headerlink" title="4.2 最佳實踐"></a>4.2 最佳實踐</h3><ul>
<li>**避免使用 <code>var</code>**，改用 <code>let</code> 或 <code>const</code>。</li>
<li><strong>函式表達式應在使用前宣告</strong>，避免 <code>undefined</code> 或 <code>ReferenceError</code>。</li>
<li><strong>將所有變數與函式宣告放在作用域的開頭</strong>，可減少 Hoisting 帶來的困惑。</li>
</ul>
<h3 id="4-3-最佳實踐範例"><a href="#4-3-最佳實踐範例" class="headerlink" title="4.3 最佳實踐範例"></a>4.3 最佳實踐範例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確做法：將變數與函式宣告放在最上方</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<p>這樣可以確保程式碼易於理解，並避免因 Hoisting 造成的問題。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://medium.com/itsems-frontend/javascript-execution-context-and-call-stack-e36e7f77152e">[JavaScript] Javascript 的執行環境 (Execution context) 與堆疊 (Stack)</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-event-loop/">初學者指南：深入了解 JavaScript 中的 Event Loop（事件循環）</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-call-stack/">初學者指南：深入了解 JavaScript 的 Call Stack（呼叫堆疊）</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-execution-context/">初學者指南：深入了解 JavaScript 的執行環境（Execution Context）</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-creation-phase-execution-phase/">初學者指南：深入了解 JavaScript 的建立期與執行期</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-variable-function-creation-phase-execution-phase-difference/">初學者指南：深入了解 JavaScript 中函式與變數的建立期與執行期差異</a></li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS</tag>
        <tag>Hoisting</tag>
        <tag>變數提升</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/14/learning-notes-javascript-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>JavaScript</code>（簡稱 JS）是一種高階、直譯式、弱型別的程式語言，廣泛應用於 Web 開發。它最初用於瀏覽器端，現在也能在伺服器端（如 Node.js）運行，並支援多種應用開發，如網頁、行動應用、桌面應用等。</p>
<hr>
<h2 id="1-JavaScript-的基本語法"><a href="#1-JavaScript-的基本語法" class="headerlink" title="1. JavaScript 的基本語法"></a>1. JavaScript 的基本語法</h2><h3 id="1-1-變數與常數"><a href="#1-1-變數與常數" class="headerlink" title="1.1 變數與常數"></a>1.1 變數與常數</h3><p>在 JavaScript 中，可以使用 <code>var</code>、<code>let</code> 或 <code>const</code> 來宣告變數。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 傳統變數宣告（不建議使用）</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>; <span class="comment">// 可變變數</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">30</span>; <span class="comment">// 常數，無法重新賦值</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 和 <code>const</code> 具有區塊作用域（Block Scope），而 <code>var</code> 則具有函式作用域（Function Scope）。</p>
<hr>
<h3 id="1-2-資料型別"><a href="#1-2-資料型別" class="headerlink" title="1.2 資料型別"></a>1.2 資料型別</h3><p>JavaScript 主要的資料型別包括：  </p>
<ul>
<li><p><strong>原始型別（Primitive Types）</strong>：</p>
<ul>
<li><code>string</code>（字串）</li>
<li><code>number</code>（數字，包括整數與浮點數）</li>
<li><code>boolean</code>（布林值）</li>
<li><code>null</code>（空值）</li>
<li><code>undefined</code>（未定義）</li>
<li><code>symbol</code>（符號，ES6 引入）</li>
</ul>
</li>
<li><p><strong>參考型別（Reference Types）</strong>：</p>
<ul>
<li><code>object</code>（物件）</li>
<li><code>array</code>（陣列）</li>
<li><code>function</code>（函式）</li>
</ul>
</li>
</ul>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Alice&#x27;</span>; <span class="comment">// 字串</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>; <span class="comment">// 數字</span></span><br><span class="line"><span class="keyword">let</span> isStudent = <span class="literal">true</span>; <span class="comment">// 布林值</span></span><br><span class="line"><span class="keyword">let</span> hobby = <span class="literal">null</span>; <span class="comment">// 空值</span></span><br><span class="line"><span class="keyword">let</span> score; <span class="comment">// 未定義（undefined）</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;; <span class="comment">// 物件</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]; <span class="comment">// 陣列</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-運算子"><a href="#2-運算子" class="headerlink" title="2. 運算子"></a>2. 運算子</h2><h3 id="2-1-算術運算子"><a href="#2-1-算術運算子" class="headerlink" title="2.1 算術運算子"></a>2.1 算術運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x + y); <span class="comment">// 加法：15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x - y); <span class="comment">// 減法：5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x * y); <span class="comment">// 乘法：50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x / y); <span class="comment">// 除法：2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x % y); <span class="comment">// 餘數：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x ** <span class="number">2</span>); <span class="comment">// 次方運算：100</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-比較運算子"><a href="#2-2-比較運算子" class="headerlink" title="2.2 比較運算子"></a>2.2 比較運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt;= <span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt; <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> === <span class="string">&#x27;10&#x27;</span>); <span class="comment">// false（全等）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> == <span class="string">&#x27;10&#x27;</span>); <span class="comment">// true（寬鬆比較）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> !== <span class="string">&#x27;10&#x27;</span>); <span class="comment">// true（全不等）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> != <span class="string">&#x27;10&#x27;</span>); <span class="comment">// false（寬鬆不等）</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-邏輯運算子"><a href="#2-3-邏輯運算子" class="headerlink" title="2.3 邏輯運算子"></a>2.3 邏輯運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>); <span class="comment">// false（AND）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span>); <span class="comment">// true（OR）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>); <span class="comment">// false（NOT）</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-控制流程"><a href="#3-控制流程" class="headerlink" title="3. 控制流程"></a>3. 控制流程</h2><h3 id="3-1-條件判斷"><a href="#3-1-條件判斷" class="headerlink" title="3.1 條件判斷"></a>3.1 條件判斷</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-三元運算子"><a href="#3-2-三元運算子" class="headerlink" title="3.2 三元運算子"></a>3.2 三元運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> canVote = age &gt;= <span class="number">18</span> ? <span class="string">&#x27;可以投票&#x27;</span> : <span class="string">&#x27;不可以投票&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(canVote);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-switch-語法"><a href="#3-3-switch-語法" class="headerlink" title="3.3 switch 語法"></a>3.3 <code>switch</code> 語法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;banana&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;黃色&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;紅色&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未知&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-迴圈"><a href="#4-迴圈" class="headerlink" title="4. 迴圈"></a>4. 迴圈</h2><h3 id="4-1-for-迴圈"><a href="#4-1-for-迴圈" class="headerlink" title="4.1 for 迴圈"></a>4.1 <code>for</code> 迴圈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;數字：&#x27;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-while-迴圈"><a href="#4-2-while-迴圈" class="headerlink" title="4.2 while 迴圈"></a>4.2 <code>while</code> 迴圈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;數字：&#x27;</span> + num);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-forEach（適用於陣列）"><a href="#4-3-forEach（適用於陣列）" class="headerlink" title="4.3 forEach（適用於陣列）"></a>4.3 <code>forEach</code>（適用於陣列）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"></span><br><span class="line">colors.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-函式（Functions）"><a href="#5-函式（Functions）" class="headerlink" title="5. 函式（Functions）"></a>5. 函式（Functions）</h2><h3 id="5-1-一般函式"><a href="#5-1-一般函式" class="headerlink" title="5.1 一般函式"></a>5.1 一般函式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-箭頭函式（Arrow-Function）"><a href="#5-2-箭頭函式（Arrow-Function）" class="headerlink" title="5.2 箭頭函式（Arrow Function）"></a>5.2 箭頭函式（Arrow Function）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">4</span>, <span class="number">6</span>)); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-立即執行函式（IIFE）"><a href="#5-3-立即執行函式（IIFE）" class="headerlink" title="5.3 立即執行函式（IIFE）"></a>5.3 立即執行函式（IIFE）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是立即執行函式&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-陣列與物件"><a href="#6-陣列與物件" class="headerlink" title="6. 陣列與物件"></a>6. 陣列與物件</h2><h3 id="6-1-陣列操作"><a href="#6-1-陣列操作" class="headerlink" title="6.1 陣列操作"></a>6.1 陣列操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>];</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">push</span>(<span class="string">&#x27;grape&#x27;</span>); <span class="comment">// 新增</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;grape&#x27;]</span></span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">pop</span>(); <span class="comment">// 移除最後一個</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-物件操作"><a href="#6-2-物件操作" class="headerlink" title="6.2 物件操作"></a>6.2 物件操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &#x27;Alice&#x27;</span></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// &#x27;Hello, my name is Alice&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-非同步處理"><a href="#7-非同步處理" class="headerlink" title="7. 非同步處理"></a>7. 非同步處理</h2><h3 id="7-1-setTimeout-與-setInterval"><a href="#7-1-setTimeout-與-setInterval" class="headerlink" title="7.1 setTimeout 與 setInterval"></a>7.1 <code>setTimeout</code> 與 <code>setInterval</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這段文字將在 2 秒後出現&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-2-Promise"><a href="#7-2-Promise" class="headerlink" title="7.2 Promise"></a>7.2 Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fetchData = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;資料已載入&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fetchData.<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(message));</span><br></pre></td></tr></table></figure>

<h3 id="7-3-async-await"><a href="#7-3-async-await" class="headerlink" title="7.3 async/await"></a>7.3 <code>async/await</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;資料已載入&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>JavaScript 是一種靈活且功能強大的語言，適用於前端與後端開發。本文介紹了基本語法、變數、運算子、控制流程、函式、陣列、物件及非同步處理等內容，這些知識構成 JavaScript 入門的基礎。建議透過實際練習來加深理解，如使用瀏覽器開發者工具或建立小型專案來測試所學內容。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript let 閉包（Closure）入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-let-closure/</url>
    <content><![CDATA[<h4 id="什麼是閉包（Closure）？"><a href="#什麼是閉包（Closure）？" class="headerlink" title="什麼是閉包（Closure）？"></a>什麼是閉包（Closure）？</h4><p>閉包是 JavaScript 中的一個強大概念，它允許函式「記住」其外部作用域（lexical scope），即使該作用域已經執行完畢並離開了執行環境。閉包使得函式能夠存取其外部函式內部的變數，而這些變數通常在外部函式執行結束後仍然可以被存取。</p>
<p>在 JavaScript 中，每當一個函式被創建時，它都會自動獲得對其外部變數的存取權，這就是閉包的核心概念。</p>
<hr>
<h2 id="閉包的基本概念"><a href="#閉包的基本概念" class="headerlink" title="閉包的基本概念"></a><strong>閉包的基本概念</strong></h2><p>閉包的最基本形式是函式內部返回另一個函式，而返回的函式仍然能夠存取外部函式的變數，即使外部函式已經執行完畢。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> outerVariable = <span class="string">&quot;我是外部變數&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> innerFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> closureExample = <span class="title function_">outerFunction</span>(); </span><br><span class="line"><span class="title function_">closureExample</span>(); <span class="comment">// 輸出: &quot;我是外部變數&quot;</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中：</p>
<ol>
<li><code>outerFunction</code> 內部定義了一個變數 <code>outerVariable</code>，並宣告了一個 <code>innerFunction</code>。</li>
<li><code>innerFunction</code> 存取 <code>outerVariable</code>，然後被 <code>outerFunction</code> 返回。</li>
<li>當 <code>closureExample</code> 執行時，即使 <code>outerFunction</code> 已經執行完畢，它仍然可以存取 <code>outerVariable</code>，因為它形成了一個閉包。</li>
</ol>
<hr>
<h2 id="閉包的實際應用"><a href="#閉包的實際應用" class="headerlink" title="閉包的實際應用"></a><strong>閉包的實際應用</strong></h2><p>閉包在 JavaScript 中有許多實際用途，包括資料封裝、模擬私有變數、事件處理，以及避免全域變數污染等。</p>
<h3 id="1-資料封裝與模擬私有變數"><a href="#1-資料封裝與模擬私有變數" class="headerlink" title="1. 資料封裝與模擬私有變數"></a><strong>1. 資料封裝與模擬私有變數</strong></h3><p>在 JavaScript 中，沒有內建的 <code>private</code> 修飾符，但可以透過閉包來模擬私有變數：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 私有變數</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`計數器值: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`計數器值: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line">counter.<span class="title function_">increment</span>(); <span class="comment">// 計數器值: 1</span></span><br><span class="line">counter.<span class="title function_">increment</span>(); <span class="comment">// 計數器值: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">getCount</span>()); <span class="comment">// 2</span></span><br><span class="line">counter.<span class="title function_">decrement</span>(); <span class="comment">// 計數器值: 1</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中：</p>
<ul>
<li><code>count</code> 變數是 <code>createCounter</code> 的內部變數，外部無法直接存取。</li>
<li><code>increment</code>、<code>decrement</code> 和 <code>getCount</code> 方法則形成閉包，允許我們操作 <code>count</code>。</li>
</ul>
<p>這種方法可以防止外部直接修改 <code>count</code>，達到變數封裝的效果。</p>
<hr>
<h3 id="2-事件處理中的閉包"><a href="#2-事件處理中的閉包" class="headerlink" title="2. 事件處理中的閉包"></a><strong>2. 事件處理中的閉包</strong></h3><p>閉包在事件處理中特別有用，例如當我們需要讓事件處理函式記住某些狀態時：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">attachEventListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;clickButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`按鈕點擊次數: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">attachEventListener</span>();</span><br></pre></td></tr></table></figure>

<p>這裡：</p>
<ul>
<li><code>click</code> 事件處理函式記住了 <code>count</code> 變數，即使 <code>attachEventListener</code> 已執行完畢，每次點擊按鈕時，<code>count</code> 仍然會被持續累加。</li>
</ul>
<hr>
<h3 id="3-立即函式（IIFE-Immediately-Invoked-Function-Expression）"><a href="#3-立即函式（IIFE-Immediately-Invoked-Function-Expression）" class="headerlink" title="3. 立即函式（IIFE, Immediately Invoked Function Expression）"></a><strong>3. 立即函式（IIFE, Immediately Invoked Function Expression）</strong></h3><p>立即函式是一種使用閉包的技術，可用於模擬私有作用域，避免變數污染全域空間：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`計數器值: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`計數器值: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">counter.<span class="title function_">increment</span>(); <span class="comment">// 計數器值: 1</span></span><br><span class="line">counter.<span class="title function_">increment</span>(); <span class="comment">// 計數器值: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">getCount</span>()); <span class="comment">// 2</span></span><br><span class="line">counter.<span class="title function_">decrement</span>(); <span class="comment">// 計數器值: 1</span></span><br></pre></td></tr></table></figure>

<p>這裡：</p>
<ul>
<li><code>(function() &#123;...&#125;)()</code> 是一個立即執行函式，它執行後返回了一個對象，該對象內部的函式形成閉包，能夠存取 <code>count</code>。</li>
</ul>
<p>這種技術在早期 JavaScript 程式設計中常被用來創建模組化的程式碼，避免全域變數污染。</p>
<hr>
<h3 id="4-用於函式工廠（Function-Factory）"><a href="#4-用於函式工廠（Function-Factory）" class="headerlink" title="4. 用於函式工廠（Function Factory）"></a><strong>4. 用於函式工廠（Function Factory）</strong></h3><p>閉包可以用來創建不同的函式行為，例如建立不同的乘法器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMultiplier</span>(<span class="params">multiplier</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">number</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> number * multiplier;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> double = <span class="title function_">createMultiplier</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> triple = <span class="title function_">createMultiplier</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(<span class="number">5</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">triple</span>(<span class="number">5</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<p>這裡：</p>
<ul>
<li><code>createMultiplier</code> 接受 <code>multiplier</code> 作為參數，返回一個新的函式。</li>
<li>該函式形成閉包，記住 <code>multiplier</code>，即使 <code>createMultiplier</code> 已經執行完畢。</li>
</ul>
<p>這種模式在高階函式設計中非常常見。</p>
<hr>
<h2 id="閉包的注意事項"><a href="#閉包的注意事項" class="headerlink" title="閉包的注意事項"></a><strong>閉包的注意事項</strong></h2><p>雖然閉包提供了強大的功能，但如果不當使用，可能會導致記憶體洩漏。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createLargeClosure</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> largeArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>).<span class="title function_">fill</span>(<span class="string">&quot;資料&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(largeArray.<span class="property">length</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> closure = <span class="title function_">createLargeClosure</span>();</span><br><span class="line"><span class="comment">// 如果 closure 持續存在，largeArray 也不會被回收</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>largeArray</code> 變數被閉包記住，無法被垃圾回收機制（GC）回收，可能導致記憶體洩漏。</li>
<li>解決方案是確保不再使用閉包時，讓變數參考變為 <code>null</code> 或適時使用 <code>WeakMap</code> 來管理記憶體。</li>
</ul>
<hr>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a><strong>結論</strong></h2><p>閉包是 JavaScript 的核心概念之一，理解閉包有助於寫出更靈活、可維護的程式碼。它主要用於：</p>
<ul>
<li><strong>變數封裝</strong>（模擬私有變數）</li>
<li><strong>事件處理</strong>（記住狀態）</li>
<li><strong>函式工廠</strong>（創建可重複使用的函式）</li>
<li><strong>IIFE</strong>（避免變數污染）</li>
</ul>
<p>掌握閉包後，可以更進一步學習 JavaScript 中的函式式程式設計（Functional Programming），提升程式的模組化與可讀性。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>async/await</tag>
        <tag>Closure</tag>
        <tag>let</tag>
        <tag>閉包</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 物件導向（Object-oriented programming）入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-object-oriented-programming-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-物件導向與-new-關鍵字"><a href="#1-物件導向與-new-關鍵字" class="headerlink" title="1. 物件導向與 new 關鍵字"></a>1. 物件導向與 <code>new</code> 關鍵字</h2><p>JavaScript 是基於 <strong>原型 (Prototype)</strong> 的物件導向語言，而非典型的 <strong>類別 (Class)</strong> 為基礎的語言。但 ES6 之後，JavaScript 引入了 <code>class</code> 語法，使其更接近傳統的物件導向語言，如 Java 或 C++。</p>
<p>在 JavaScript 中，<code>new</code> 關鍵字用於建立物件，並且會執行以下步驟：</p>
<ol>
<li>建立一個新的空物件。</li>
<li>設定該物件的 <code>__proto__</code> 指向建構函式 (Constructor) 的 <code>prototype</code>。</li>
<li>執行建構函式內的程式碼，並將 <code>this</code> 綁定到新建立的物件。</li>
<li>如果建構函式沒有明確返回物件，則回傳該新物件。</li>
</ol>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="property">age</span>);  <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-proto-vs-prototype"><a href="#2-proto-vs-prototype" class="headerlink" title="2. __proto__ vs prototype"></a>2. <code>__proto__</code> vs <code>prototype</code></h2><p>在 JavaScript 中，<code>__proto__</code> 和 <code>prototype</code> 是兩個不同的概念。</p>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h3><p><code>prototype</code> 是<strong>建構函式</strong>的一個屬性，它是一個物件，當我們使用 <code>new</code> 建立物件時，該物件的 <code>__proto__</code> 會指向 <code>prototype</code>。</p>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">dog.<span class="title function_">sayHello</span>(); <span class="comment">// Hello, I am Dog</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h3><p><code>__proto__</code> 是物件的內部屬性，指向該物件的<strong>原型</strong>，即 <code>prototype</code>。</p>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>); <span class="comment">// Animal.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>); <span class="comment">// null (最終的原型鏈結束)</span></span><br></pre></td></tr></table></figure>

<p><strong>關鍵點整理：</strong></p>
<ul>
<li><code>prototype</code> 是<strong>函式</strong>的屬性。</li>
<li><code>__proto__</code> 是<strong>物件</strong>的屬性，指向它的 <code>prototype</code>。</li>
<li><code>Object.prototype</code> 是所有物件的最終原型。</li>
</ul>
<hr>
<h2 id="3-class-關鍵字"><a href="#3-class-關鍵字" class="headerlink" title="3. class 關鍵字"></a>3. <code>class</code> 關鍵字</h2><p>ES6 之後，JavaScript 引入了 <code>class</code> 語法，使物件導向的寫法更直覺。</p>
<h3 id="定義類別-Class"><a href="#定義類別-Class" class="headerlink" title="定義類別 (Class)"></a>定義類別 (Class)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">brand</span> + <span class="string">&quot; is driving&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">myCar.<span class="title function_">drive</span>(); <span class="comment">// Toyota is driving</span></span><br></pre></td></tr></table></figure>

<p><strong>等同於 ES5 的寫法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">brand</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">drive</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">brand</span> + <span class="string">&quot; is driving&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>優勢：</strong></p>
<ul>
<li><code>class</code> 提供更簡潔的語法。</li>
<li>更貼近傳統物件導向語言的語法風格。</li>
<li><code>constructor</code> 方法負責初始化物件。</li>
<li>方法定義在 <code>prototype</code> 上，並不會重複創建。</li>
</ul>
<hr>
<h2 id="4-extends-繼承"><a href="#4-extends-繼承" class="headerlink" title="4. extends 繼承"></a>4. <code>extends</code> 繼承</h2><p>在 ES6 之前，我們使用 <code>Object.create()</code> 或手動設定 <code>prototype</code> 來實現繼承。</p>
<h3 id="傳統的原型繼承"><a href="#傳統的原型繼承" class="headerlink" title="傳統的原型繼承"></a>傳統的原型繼承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">makeSound</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic sound&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 繼承屬性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 繼承方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Rex&quot;</span>, <span class="string">&quot;Golden Retriever&quot;</span>);</span><br><span class="line">myDog.<span class="title function_">makeSound</span>(); <span class="comment">// Some generic sound</span></span><br><span class="line">myDog.<span class="title function_">bark</span>(); <span class="comment">// Woof!</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-class-的繼承"><a href="#使用-class-的繼承" class="headerlink" title="使用 class 的繼承"></a>使用 <code>class</code> 的繼承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic sound&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, breed</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name); <span class="comment">// 呼叫父類別的 constructor</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Rex&quot;</span>, <span class="string">&quot;Golden Retriever&quot;</span>);</span><br><span class="line">myDog.<span class="title function_">makeSound</span>(); <span class="comment">// Some generic sound</span></span><br><span class="line">myDog.<span class="title function_">bark</span>(); <span class="comment">// Woof!</span></span><br></pre></td></tr></table></figure>

<p><strong>關鍵點：</strong></p>
<ul>
<li><code>extends</code> 用於建立類別的繼承。</li>
<li><code>super(name)</code> 呼叫父類別的 <code>constructor</code>，確保 <code>this</code> 正確初始化。</li>
<li>子類別可以新增自己的方法。</li>
</ul>
<hr>
<h2 id="5-物件導向開發的最佳實踐"><a href="#5-物件導向開發的最佳實踐" class="headerlink" title="5. 物件導向開發的最佳實踐"></a>5. 物件導向開發的最佳實踐</h2><ol>
<li><strong>使用 <code>class</code> 提供更清晰的結構。</strong></li>
<li><strong>使用 <code>extends</code> 來建立繼承關係，並呼叫 <code>super()</code> 確保正確初始化。</strong></li>
<li><strong>方法定義於 <code>prototype</code> 來減少記憶體浪費。</strong></li>
<li><strong>理解 <code>__proto__</code> 和 <code>prototype</code> 之間的關係，以便更好地管理原型鏈。</strong></li>
<li><strong>避免過度使用繼承，適時使用組合 (Composition) 來降低耦合度。</strong></li>
</ol>
<hr>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><table>
<thead>
<tr>
<th>特性</th>
<th>傳統原型 (Prototype)</th>
<th>ES6 <code>class</code></th>
</tr>
</thead>
<tbody><tr>
<td>建立物件</td>
<td><code>new Function()</code></td>
<td><code>new Class()</code></td>
</tr>
<tr>
<td>方法定義</td>
<td><code>Function.prototype.method = function() &#123;&#125;</code></td>
<td>直接定義於 <code>class</code></td>
</tr>
<tr>
<td>繼承</td>
<td><code>Object.create()</code> + <code>call()</code></td>
<td><code>extends</code> + <code>super()</code></td>
</tr>
<tr>
<td><code>this</code> 綁定</td>
<td>需要 <code>call()</code> 或 <code>bind()</code></td>
<td><code>super()</code> 自動綁定</td>
</tr>
</tbody></table>
<p>JavaScript 的物件導向概念提供了靈活的方式來組織程式碼，掌握 <code>prototype</code>、<code>class</code>、<code>extends</code> 和 <code>super()</code>，可以幫助開發者寫出更具可讀性與可維護性的程式碼。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>this</tag>
        <tag>OOP</tag>
        <tag>Object-oriented programming</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 可選鏈接運算符（Optional Chaining）介紹與入門教學 | 學習筆記</title>
    <url>/2024/12/21/learning-notes-javascript-optional-chaining-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>JavaScript</code> 中，處理深層嵌套結構時，我們經常會遇到 <code>null</code> 或 <code>undefined</code> 的問題。例如，當我們需要訪問一個對象的屬性，而該屬性本身可能不存在時，傳統的做法會導致錯誤，這樣的情況會非常繁瑣。為了解決這個問題，JavaScript 引入了 <strong>可選鏈接運算符（Optional Chaining）</strong>，簡化了屬性訪問過程，並防止了因為屬性為 <code>null</code> 或 <code>undefined</code> 造成的錯誤。</p>
<p>本文將詳細介紹可選鏈接運算符的概念、用法以及常見的實際應用場景。</p>
<h3 id="1-可選鏈接運算符的基本語法"><a href="#1-可選鏈接運算符的基本語法" class="headerlink" title="1. 可選鏈接運算符的基本語法"></a>1. 可選鏈接運算符的基本語法</h3><p><strong>可選鏈接運算符（<code>?.</code>）</strong> 是 JavaScript 中一種新的語法，通過它我們可以安全地訪問對象的屬性，並且在中途如果遇到 <code>null</code> 或 <code>undefined</code>，就會停止執行並返回 <code>undefined</code>，而不是拋出錯誤。</p>
<p>基本語法結構如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object?.<span class="property">property</span></span><br><span class="line">object?.[key]</span><br><span class="line">object?.<span class="title function_">method</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>object?.property</code>：如果 <code>object</code> 為 <code>null</code> 或 <code>undefined</code>，則返回 <code>undefined</code>，否則返回對象的 <code>property</code> 屬性。</li>
<li><code>object?.[key]</code>：這是動態屬性名的情況，與 <code>object?.property</code> 類似，當 <code>key</code> 是變數或表達式時，這種語法很有用。</li>
<li><code>object?.method()</code>：如果 <code>object</code> 或 <code>method</code> 為 <code>null</code> 或 <code>undefined</code>，則返回 <code>undefined</code>，不會調用該方法。</li>
</ul>
<h3 id="2-為什麼需要可選鏈接運算符？"><a href="#2-為什麼需要可選鏈接運算符？" class="headerlink" title="2. 為什麼需要可選鏈接運算符？"></a>2. 為什麼需要可選鏈接運算符？</h3><p>在傳統 JavaScript 中，當我們處理嵌套對象的屬性時，若某個屬性不存在或是 <code>null</code>、<code>undefined</code>，我們會遇到錯誤。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">street</span>: <span class="string">&#x27;123 Main St&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>.<span class="property">street</span>); <span class="comment">// &quot;123 Main St&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">phone</span>.<span class="property">number</span>); <span class="comment">// TypeError: Cannot read property &#x27;number&#x27; of undefined</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中，當我們嘗試訪問 <code>user.phone.number</code> 時，由於 <code>phone</code> 屬性不存在，會拋出錯誤。為了解決這個問題，通常我們需要進行多層檢查：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user &amp;&amp; user.<span class="property">phone</span> &amp;&amp; user.<span class="property">phone</span>.<span class="property">number</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>這樣的寫法看起來雜亂，並且很難處理更深層次的嵌套。可選鏈接運算符解決了這個問題，使得代碼更加簡潔和安全。</p>
<h3 id="3-可選鏈接運算符的應用場景"><a href="#3-可選鏈接運算符的應用場景" class="headerlink" title="3. 可選鏈接運算符的應用場景"></a>3. 可選鏈接運算符的應用場景</h3><h4 id="3-1-訪問對象屬性"><a href="#3-1-訪問對象屬性" class="headerlink" title="3.1 訪問對象屬性"></a>3.1 訪問對象屬性</h4><p>當我們需要訪問對象的某一層屬性時，如果中間層級的某個屬性為 <code>null</code> 或 <code>undefined</code>，那麼使用可選鏈接運算符就能防止錯誤的拋出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">street</span>: <span class="string">&#x27;123 Main St&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">street</span>); <span class="comment">// &quot;123 Main St&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">phone</span>?.<span class="property">number</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中，<code>user?.address?.street</code> 會安全地返回 <code>street</code> 屬性，而 <code>user?.phone?.number</code> 會返回 <code>undefined</code>，因為 <code>phone</code> 屬性並不存在。</p>
<h4 id="3-2-訪問數組元素"><a href="#3-2-訪問數組元素" class="headerlink" title="3.2 訪問數組元素"></a>3.2 訪問數組元素</h4><p>在操作數組時，如果我們想訪問某個索引的元素，也可以使用可選鏈接運算符來避免錯誤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array?.[<span class="number">1</span>]); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array?.[<span class="number">10</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>這裡，<code>array?.[1]</code> 會返回 <code>2</code>，而 <code>array?.[10]</code> 會返回 <code>undefined</code>，即使索引超出了數組的範圍。</p>
<h4 id="3-3-調用對象方法"><a href="#3-3-調用對象方法" class="headerlink" title="3.3 調用對象方法"></a>3.3 調用對象方法</h4><p>如果對象的方法不存在，使用可選鏈接運算符可以避免拋出錯誤，並且返回 <code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user?.<span class="title function_">greet</span>(); <span class="comment">// &quot;Hello!&quot;</span></span><br><span class="line">user?.<span class="title function_">sayGoodbye</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中，<code>user?.greet()</code> 會調用 <code>greet</code> 方法並顯示 “Hello!”，而 <code>user?.sayGoodbye()</code> 則返回 <code>undefined</code>，因為 <code>sayGoodbye</code> 方法不存在。</p>
<h4 id="3-4-動態屬性名"><a href="#3-4-動態屬性名" class="headerlink" title="3.4 動態屬性名"></a>3.4 動態屬性名</h4><p>可選鏈接運算符也支持用動態屬性名來訪問對象屬性，這在處理具有不確定屬性的對象時非常有用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">preferences</span>: &#123;</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;theme&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">preferences</span>?.[key]); <span class="comment">// &quot;dark&quot;</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中，<code>key</code> 是一個變量，表示要訪問的屬性名，<code>user?.preferences?.[key]</code> 可以安全地獲取 <code>preferences</code> 中的 <code>theme</code> 屬性。</p>
<h3 id="4-與傳統方法的比較"><a href="#4-與傳統方法的比較" class="headerlink" title="4. 與傳統方法的比較"></a>4. 與傳統方法的比較</h3><p>使用可選鏈接運算符，我們的代碼變得更加簡潔，減少了不必要的檢查。傳統的方式可能需要多次檢查對象的存在，才能安全地訪問某個屬性，而可選鏈接運算符讓這一過程變得直觀且易於維護。</p>
<p>傳統方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user &amp;&amp; user.<span class="property">address</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">street</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>.<span class="property">street</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用可選鏈接運算符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">street</span>);</span><br></pre></td></tr></table></figure>

<h3 id="5-可選鏈接運算符與-null-合併運算符（-）"><a href="#5-可選鏈接運算符與-null-合併運算符（-）" class="headerlink" title="5. 可選鏈接運算符與 null 合併運算符（??）"></a>5. 可選鏈接運算符與 <code>null</code> 合併運算符（<code>??</code>）</h3><p>可選鏈接運算符經常與 <code>null</code> 合併運算符（<code>??</code>）一起使用。<code>??</code> 用來返回當前值是否為 <code>null</code> 或 <code>undefined</code>，如果是則返回其右側的值，否則返回當前值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> name = user?.<span class="property">name</span> ?? <span class="string">&#x27;Default Name&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &quot;Default Name&quot;</span></span><br></pre></td></tr></table></figure>

<p>在這裡，<code>user?.name</code> 會返回 <code>undefined</code>，因為 <code>user</code> 是 <code>null</code>，而 <code>??</code> 會將其替換為 <code>&#39;Default Name&#39;</code>。</p>
<h3 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h3><p>可選鏈接運算符（<code>?.</code>）是 JavaScript 中非常實用的一個特性，它簡化了嵌套對象屬性訪問的邏輯，避免了 <code>null</code> 或 <code>undefined</code> 帶來的錯誤，使代碼更加簡潔且容易理解。無論是在處理複雜的 API 返回數據還是操作動態結構的對象時，可選鏈接運算符都能發揮重要作用。在日常開發中，我們可以利用它來編寫更健壯、可讀性更強的代碼。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>Optional Chaining</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 多事件處理綁定使用情境入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-javascript-this-cases-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 JavaScript 中，你可以通過事件處理的方式來為多個 <code>input</code> 元素綁定事件處理器。這樣做可以讓你在父容器上綁定一個事件處理器，並通過 <code>event.target</code> 確定觸發事件的具體 <code>input</code> 元素，而不需要為每個 <code>input</code> 元素單獨綁定事件。</p>
<h3 id="事件委派的概念"><a href="#事件委派的概念" class="headerlink" title="事件委派的概念"></a>事件委派的概念</h3><p>事件委派是一種常見的事件處理技術，它將事件綁定到父元素或容器上，然後通過 <code>event.target</code> 來確定哪個子元素觸發了事件。這種方式在動態生成的元素中非常有用，因為無論多少個元素，它們都會使用相同的事件處理器。</p>
<h3 id="例子：為多個-input-元素使用事件委派"><a href="#例子：為多個-input-元素使用事件委派" class="headerlink" title="例子：為多個 input 元素使用事件委派"></a>例子：為多個 <code>input</code> 元素使用事件委派</h3><p>假設有多個 <code>input</code> 元素，並且我們希望根據用戶在每個 <code>input</code> 中的輸入執行某些操作，可以像這樣使用 <code>event.target</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inputContainer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 綁定事件處理器到父容器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inputContainer&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 檢查事件目標是否為 input 元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;input&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;觸發的 input 元素 ID:&#x27;</span>, event.<span class="property">target</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;輸入的值:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解釋："><a href="#解釋：" class="headerlink" title="解釋："></a>解釋：</h3><ol>
<li>我們將 <code>input</code> 元素的 <code>input</code> 事件綁定到父容器 <code>#inputContainer</code> 上。</li>
<li>當任何一個 <code>input</code> 元素觸發 <code>input</code> 事件時，事件會冒泡到父容器，並且事件處理器會被執行。</li>
<li>在事件處理器中，我們使用 <code>event.target</code> 來確定是哪個 <code>input</code> 元素觸發了事件。<code>event.target</code> 會返回實際觸發事件的元素。</li>
<li>通過 <code>event.target.id</code> 和 <code>event.target.value</code>，我們可以獲取觸發事件的 <code>input</code> 元素的 ID 和輸入的值。</li>
</ol>
<h3 id="優點："><a href="#優點：" class="headerlink" title="優點："></a>優點：</h3><ul>
<li><strong>減少事件綁定數量</strong>：不需要為每個 <code>input</code> 元素單獨綁定事件，減少了冗餘代碼。</li>
<li><strong>動態元素支持</strong>：即使後來添加了新的 <code>input</code> 元素，父容器上的事件處理器也會自動處理新元素。</li>
</ul>
<h3 id="當-input-元素是動態創建時："><a href="#當-input-元素是動態創建時：" class="headerlink" title="當 input 元素是動態創建時："></a>當 <code>input</code> 元素是動態創建時：</h3><p>如果你有動態創建的 <code>input</code> 元素，事件委派依然有效，因為事件處理器是綁定在父容器上的，而不需要直接綁定在每個 <code>input</code> 元素上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假設需要動態創建 input 元素</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inputContainer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">  input.<span class="property">type</span> = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">  input.<span class="property">id</span> = <span class="string">&#x27;input&#x27;</span> + i;</span><br><span class="line">  container.<span class="title function_">appendChild</span>(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣，當你動態創建新的 <code>input</code> 元素時，父容器上的事件處理器會自動處理這些新的 <code>input</code> 元素。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
        <tag>arrow function</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript this 入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-this-intro-tutorial/</url>
    <content><![CDATA[<p>在 JavaScript 中，<code>this</code> 是一個關鍵字，它的值會根據執行環境的不同而改變。以下是 <code>this</code> 在不同情境下的行為：</p>
<hr>
<h2 id="1-全域環境-Global-Context"><a href="#1-全域環境-Global-Context" class="headerlink" title="1. 全域環境 (Global Context)"></a>1. <strong>全域環境 (Global Context)</strong></h2><p>在瀏覽器中，<code>this</code> 預設指向 <code>window</code> 物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在瀏覽器中，this 指向 window</span></span><br></pre></td></tr></table></figure>
<p>在 Node.js 環境下，<code>this</code> 則指向 <code>global</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在 Node.js 中，this 指向 global</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-函式內部-Function-Context"><a href="#2-函式內部-Function-Context" class="headerlink" title="2. 函式內部 (Function Context)"></a>2. <strong>函式內部 (Function Context)</strong></h2><p>在一般函式中，<code>this</code> 的值取決於是否使用 <code>&quot;use strict&quot;</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showThis</span>(); <span class="comment">// 在非嚴格模式下，this 指向 window (瀏覽器) 或 global (Node.js)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStrictThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showStrictThis</span>(); <span class="comment">// 在嚴格模式下，this 變成 undefined</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-物件方法-Object-Method"><a href="#3-物件方法-Object-Method" class="headerlink" title="3. 物件方法 (Object Method)"></a>3. <strong>物件方法 (Object Method)</strong></h2><p>當 <code>this</code> 被用在物件的方法內，它指向該物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-建構函式-Constructor-Function"><a href="#4-建構函式-Constructor-Function" class="headerlink" title="4. 建構函式 (Constructor Function)"></a>4. <strong>建構函式 (Constructor Function)</strong></h2><p>在建構函式中，<code>this</code> 會指向新建立的物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// &quot;Bob&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-箭頭函式-Arrow-Function"><a href="#5-箭頭函式-Arrow-Function" class="headerlink" title="5. 箭頭函式 (Arrow Function)"></a>5. <strong>箭頭函式 (Arrow Function)</strong></h2><p>箭頭函式中的 <code>this</code> <strong>不會</strong> 指向它自己的執行環境，而是繼承自外層函式的作用域：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">arrowFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">arrowFunc</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// &quot;Charlie&quot; (this 繼承自 obj)</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-setTimeout-和-setInterval"><a href="#6-setTimeout-和-setInterval" class="headerlink" title="6. setTimeout 和 setInterval"></a>6. <strong>setTimeout 和 setInterval</strong></h2><p>在 <code>setTimeout</code> 或 <code>setInterval</code> 內，一般函式的 <code>this</code> 預設指向 <code>window</code> (瀏覽器) 或 <code>global</code> (Node.js)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// undefined，因為 this 指向 window/global</span></span><br></pre></td></tr></table></figure>
<p>解法：改用箭頭函式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// &quot;David&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-事件處理器-Event-Handler"><a href="#7-事件處理器-Event-Handler" class="headerlink" title="7. 事件處理器 (Event Handler)"></a>7. <strong>事件處理器 (Event Handler)</strong></h2><p>在事件處理函式中，<code>this</code> 指向觸發事件的元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 指向 &lt;button&gt; 元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果改用箭頭函式，<code>this</code> 會指向外部作用域：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 指向 window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-call、apply-和-bind"><a href="#8-call、apply-和-bind" class="headerlink" title="8. call、apply 和 bind"></a>8. <strong>call、apply 和 bind</strong></h2><p>可以使用 <code>call()</code>、<code>apply()</code> 和 <code>bind()</code> 來改變 <code>this</code> 指向：</p>
<h3 id="call"><a href="#call" class="headerlink" title="call()"></a><strong>call()</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Eve&quot;</span> &#125;;</span><br><span class="line">greet.<span class="title function_">call</span>(person); <span class="comment">// &quot;Eve&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a><strong>apply()</strong></h3><p><code>apply()</code> 與 <code>call()</code> 類似，但參數是以陣列方式傳入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params">age, city</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old and lives in <span class="subst">$&#123;city&#125;</span>.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Frank&quot;</span> &#125;;</span><br><span class="line">introduce.<span class="title function_">apply</span>(person, [<span class="number">25</span>, <span class="string">&quot;Taipei&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a><strong>bind()</strong></h3><p><code>bind()</code> 會回傳一個新的函式，永久綁定 <code>this</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boundFunc = greet.<span class="title function_">bind</span>(person);</span><br><span class="line"><span class="title function_">boundFunc</span>(); <span class="comment">// &quot;Eve&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li><strong>全域環境</strong>：<code>this</code> 在瀏覽器中指向 <code>window</code>，在 Node.js 指向 <code>global</code></li>
<li><strong>普通函式</strong>：嚴格模式下 <code>this</code> 為 <code>undefined</code>，否則指向 <code>window</code></li>
<li><strong>物件方法</strong>：<code>this</code> 指向該物件</li>
<li><strong>建構函式</strong>：<code>this</code> 指向新建立的物件</li>
<li><strong>箭頭函式</strong>：<code>this</code> 繼承外部作用域</li>
<li><strong>事件處理器</strong>：普通函式 <code>this</code> 指向事件元素，箭頭函式 <code>this</code> 指向外部作用域</li>
<li><strong><code>call</code>、<code>apply</code>、<code>bind</code></strong> 可顯式設定 <code>this</code></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript var 閉包（Closure）入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-var-closure/</url>
    <content><![CDATA[<h4 id="什麼是閉包（Closure）？"><a href="#什麼是閉包（Closure）？" class="headerlink" title="什麼是閉包（Closure）？"></a><strong>什麼是閉包（Closure）？</strong></h4><p>閉包是 JavaScript 中的一個重要概念，指的是<strong>函式在創建時，能夠記住並存取其外部作用域的變數，即使該作用域已經執行完畢</strong>。這種特性使得 JavaScript 的函式可以擁有「記憶」的能力，允許函式保持對外部變數的存取權。</p>
<p>閉包的概念建立在 JavaScript 的<strong>詞法作用域（Lexical Scope）</strong>之上，也就是函式可以存取其被定義時所在的作用域中的變數，而不是函式執行時的作用域。</p>
<hr>
<h2 id="1-基本範例"><a href="#1-基本範例" class="headerlink" title="1. 基本範例"></a><strong>1. 基本範例</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> outerVariable = <span class="string">&quot;我是外部變數&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> innerFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closureExample = <span class="title function_">outerFunction</span>(); </span><br><span class="line"><span class="title function_">closureExample</span>(); <span class="comment">// 輸出: &quot;我是外部變數&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h3><ol>
<li><code>outerFunction</code> 內部宣告了一個變數 <code>outerVariable</code>，並定義了一個 <code>innerFunction</code>。</li>
<li><code>innerFunction</code> 存取 <code>outerVariable</code>，並被 <code>outerFunction</code> 返回。</li>
<li>當 <code>closureExample</code> 執行時，即使 <code>outerFunction</code> 早已執行完畢，<code>innerFunction</code> 仍然能存取 <code>outerVariable</code>，這就是閉包的作用。</li>
</ol>
<hr>
<h2 id="2-var-變數與閉包的問題"><a href="#2-var-變數與閉包的問題" class="headerlink" title="2. var 變數與閉包的問題"></a><strong>2. <code>var</code> 變數與閉包的問題</strong></h2><p>JavaScript 在 ES6 之前使用 <code>var</code> 來宣告變數，但 <code>var</code> 具有<strong>函式作用域（Function Scope）</strong>，這可能會導致閉包相關的陷阱。</p>
<h3 id="問題：for-迴圈與-var"><a href="#問題：for-迴圈與-var" class="headerlink" title="問題：for 迴圈與 var"></a><strong>問題：<code>for</code> 迴圈與 <code>var</code></strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">varClosureExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> functions = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        functions.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> functions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closures = <span class="title function_">varClosureExample</span>();</span><br><span class="line">closures[<span class="number">0</span>](); <span class="comment">// 輸出: 3</span></span><br><span class="line">closures[<span class="number">1</span>](); <span class="comment">// 輸出: 3</span></span><br><span class="line">closures[<span class="number">2</span>](); <span class="comment">// 輸出: 3</span></span><br></pre></td></tr></table></figure>

<h3 id="為什麼會這樣？"><a href="#為什麼會這樣？" class="headerlink" title="為什麼會這樣？"></a><strong>為什麼會這樣？</strong></h3><ol>
<li><code>var</code> 是<strong>函式作用域</strong>，它在整個 <code>varClosureExample</code> 內部是共享的。</li>
<li>當 <code>closures[0]()</code>、<code>closures[1]()</code> 和 <code>closures[2]()</code> 執行時，它們都參考同一個 <code>i</code>，但 <code>i</code> 已經變成 <code>3</code>（因為 <code>for</code> 迴圈已經執行完畢）。</li>
<li>所有函式都會輸出 <code>3</code>，而不是 <code>0, 1, 2</code>。</li>
</ol>
<hr>
<h2 id="3-如何修正-var-的問題"><a href="#3-如何修正-var-的問題" class="headerlink" title="3. 如何修正 var 的問題"></a><strong>3. 如何修正 <code>var</code> 的問題</strong></h2><h3 id="解決方案-1：使用-let（區塊作用域）"><a href="#解決方案-1：使用-let（區塊作用域）" class="headerlink" title="解決方案 1：使用 let（區塊作用域）"></a><strong>解決方案 1：使用 <code>let</code>（區塊作用域）</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letClosureExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> functions = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        functions.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> functions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closures = <span class="title function_">letClosureExample</span>();</span><br><span class="line">closures[<span class="number">0</span>](); <span class="comment">// 輸出: 0</span></span><br><span class="line">closures[<span class="number">1</span>](); <span class="comment">// 輸出: 1</span></span><br><span class="line">closures[<span class="number">2</span>](); <span class="comment">// 輸出: 2</span></span><br></pre></td></tr></table></figure>
<p><strong>為什麼 <code>let</code> 有效？</strong></p>
<ul>
<li><code>let</code> 具有<strong>區塊作用域（Block Scope）</strong>，每次迴圈執行時，<code>i</code> 都是一個新的變數，因此閉包綁定的 <code>i</code> 值不會變化。</li>
</ul>
<h3 id="解決方案-2：使用-IIFE（立即執行函式）"><a href="#解決方案-2：使用-IIFE（立即執行函式）" class="headerlink" title="解決方案 2：使用 IIFE（立即執行函式）"></a><strong>解決方案 2：使用 IIFE（立即執行函式）</strong></h3><p>如果只能使用 <code>var</code>，可以使用 <strong>IIFE（Immediately Invoked Function Expression）</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">varClosureFixedExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> functions = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">            functions.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> functions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closures = <span class="title function_">varClosureFixedExample</span>();</span><br><span class="line">closures[<span class="number">0</span>](); <span class="comment">// 輸出: 0</span></span><br><span class="line">closures[<span class="number">1</span>](); <span class="comment">// 輸出: 1</span></span><br><span class="line">closures[<span class="number">2</span>](); <span class="comment">// 輸出: 2</span></span><br></pre></td></tr></table></figure>

<h3 id="為什麼-IIFE-有效？"><a href="#為什麼-IIFE-有效？" class="headerlink" title="為什麼 IIFE 有效？"></a><strong>為什麼 IIFE 有效？</strong></h3><ul>
<li>IIFE 會立即執行，並建立一個新的作用域，確保每次迭代時 <code>i</code> 都是獨立的。</li>
</ul>
<hr>
<h2 id="4-閉包的實際應用"><a href="#4-閉包的實際應用" class="headerlink" title="4. 閉包的實際應用"></a><strong>4. 閉包的實際應用</strong></h2><h3 id="1-模擬私有變數"><a href="#1-模擬私有變數" class="headerlink" title="(1) 模擬私有變數"></a><strong>(1) 模擬私有變數</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">// 外部變數</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`計數器值: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`計數器值: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line">counter.<span class="title function_">increment</span>(); <span class="comment">// 計數器值: 1</span></span><br><span class="line">counter.<span class="title function_">increment</span>(); <span class="comment">// 計數器值: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">getCount</span>()); <span class="comment">// 2</span></span><br><span class="line">counter.<span class="title function_">decrement</span>(); <span class="comment">// 計數器值: 1</span></span><br></pre></td></tr></table></figure>

<p><strong>解析</strong></p>
<ul>
<li><code>count</code> 是 <code>createCounter</code> 內部變數，外部無法直接存取，只能透過 <code>increment</code> 和 <code>decrement</code> 方法修改，形成了<strong>私有變數的概念</strong>。</li>
</ul>
<hr>
<h3 id="2-函式工廠（Function-Factory）"><a href="#2-函式工廠（Function-Factory）" class="headerlink" title="(2) 函式工廠（Function Factory）"></a><strong>(2) 函式工廠（Function Factory）</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMultiplier</span>(<span class="params">multiplier</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">number</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> number * multiplier;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> double = <span class="title function_">createMultiplier</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> triple = <span class="title function_">createMultiplier</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(<span class="number">5</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">triple</span>(<span class="number">5</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p><strong>解析</strong></p>
<ul>
<li><code>double</code> 變數是一個閉包，記住了 <code>multiplier</code> 為 <code>2</code>。</li>
<li><code>triple</code> 變數是一個閉包，記住了 <code>multiplier</code> 為 <code>3</code>。</li>
<li>這種模式可以用來建立彈性的函式生成器。</li>
</ul>
<hr>
<h3 id="3-延遲執行與事件處理"><a href="#3-延遲執行與事件處理" class="headerlink" title="(3) 延遲執行與事件處理"></a><strong>(3) 延遲執行與事件處理</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delayedMessage</span>(<span class="params">message, delay</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">delayedMessage</span>(<span class="string">&quot;Hello, JavaScript!&quot;</span>, <span class="number">2000</span>); <span class="comment">// 2 秒後輸出 &quot;Hello, JavaScript!&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>解析</strong></p>
<ul>
<li><code>setTimeout</code> 內部的函式形成閉包，記住 <code>message</code> 變數，即使 <code>delayedMessage</code> 已經執行完畢。</li>
</ul>
<hr>
<h2 id="5-總結"><a href="#5-總結" class="headerlink" title="5. 總結"></a><strong>5. 總結</strong></h2><h3 id="閉包的核心概念"><a href="#閉包的核心概念" class="headerlink" title="閉包的核心概念"></a><strong>閉包的核心概念</strong></h3><ul>
<li><strong>函式可以存取其外部函式的變數，即使外部函式已經執行完畢。</strong></li>
<li><strong><code>var</code> 變數的作用域為函式作用域，可能導致閉包內變數的值不如預期。</strong></li>
<li><strong>使用 <code>let</code> 或 IIFE 可以避免 <code>var</code> 造成的閉包問題。</strong></li>
</ul>
<h3 id="閉包的應用"><a href="#閉包的應用" class="headerlink" title="閉包的應用"></a><strong>閉包的應用</strong></h3><ol>
<li><strong>私有變數</strong>（避免全域變數污染）</li>
<li><strong>函式工廠</strong>（建立可重複使用的函式）</li>
<li><strong>事件處理與回調函式</strong></li>
<li><strong>延遲執行與計時器</strong></li>
</ol>
<p>閉包是 JavaScript 的核心概念之一，它允許函式記住外部變數，即使作用域已經離開。var 宣告的變數可能會導致作用域問題，例如 for 迴圈內的閉包錯誤，而 let 或 IIFE 可以解決這個問題。</p>
<p>掌握閉包後，可以更進一步學習 JavaScript 的函式式程式設計（Functional Programming），提升程式的模組化與可讀性。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>async/await</tag>
        <tag>Closure</tag>
        <tag>閉包</tag>
        <tag>var</tag>
      </tags>
  </entry>
  <entry>
    <title>Jest 使用 ES Module 入門教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-jest-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 JavaScript 開發中，<strong>ES Modules (ESM)</strong> 已成為標準。從 Node.js 12 開始，ESM 已獲得原生支援，而前端開發（如 React、Vue、Svelte 等框架）早已全面採用 ES Module。<br>然而，當我們使用 Jest 來撰寫與執行測試時，若要直接使用 ES Module，會遇到一些設定上的挑戰。本篇筆記將說明如何在專案中讓 Jest 正確執行 ES Module 程式碼，並透過實例展示操作流程。</p>
<hr>
<h3 id="1-Jest-是否支援-ES-Module？"><a href="#1-Jest-是否支援-ES-Module？" class="headerlink" title="1. Jest 是否支援 ES Module？"></a>1. Jest 是否支援 ES Module？</h3><p>Jest 自 <strong>v27</strong> 版本開始實驗性支援 ES Module，到了 <strong>v28 以後更加穩定</strong>。但因為 Node.js 與 CommonJS、ESM 的處理邏輯不同，仍需要額外設定。</p>
<p>若你使用 ES Module（例如 <code>.mjs</code> 檔案、<code>type: module</code>），或是前端專案用 ES6 <code>import</code> &#x2F; <code>export</code>，就必須進行相應的 Jest 設定。</p>
<hr>
<h3 id="2-初始化專案與安裝-Jest"><a href="#2-初始化專案與安裝-Jest" class="headerlink" title="2. 初始化專案與安裝 Jest"></a>2. 初始化專案與安裝 Jest</h3><p>首先，我們建立一個 Node.js 專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> jest-esm-demo</span><br><span class="line"><span class="built_in">cd</span> jest-esm-demo</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>接著安裝 Jest：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure>

<p><strong>重點！</strong> 在 <code>package.json</code> 中加入 <code>type: &quot;module&quot;</code>，讓整個專案採用 ES Module：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest-esm-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^29.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-撰寫-ES-Module-程式碼"><a href="#3-撰寫-ES-Module-程式碼" class="headerlink" title="3. 撰寫 ES Module 程式碼"></a>3. 撰寫 ES Module 程式碼</h3><p>假設我們有一個簡單的 <strong>加法模組</strong> <code>sum.mjs</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著建立測試檔案 <code>sum.test.mjs</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.test.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;./sum.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這時候直接執行 <code>npm test</code> 會報錯：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure>

<p>因為 <strong>Jest 預設使用 CommonJS</strong>，不認得 ES Module，需要額外設定。</p>
<hr>
<h3 id="4-設定-Jest-支援-ES-Module"><a href="#4-設定-Jest-支援-ES-Module" class="headerlink" title="4. 設定 Jest 支援 ES Module"></a>4. 設定 Jest 支援 ES Module</h3><h4 id="方案一：使用-jest-config-js-並指定-transform"><a href="#方案一：使用-jest-config-js-並指定-transform" class="headerlink" title="方案一：使用 jest.config.js 並指定 transform"></a>方案一：使用 <code>jest.config.js</code> 並指定 <code>transform</code></h4><p>首先，安裝 <strong>Babel</strong> 或 <strong><code>jest-esm-transformer</code></strong> 之類的工具。如果希望簡單一點，可以直接使用 Jest 的內建 ESM 模式（推薦）。</p>
<p>建立 <code>jest.config.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jest.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">transform</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">extensionsToTreatAsEsm</span>: [<span class="string">&#x27;.mjs&#x27;</span>],</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>重點設定解釋：</strong></p>
<ul>
<li><code>transform: &#123;&#125;</code> 表示不使用 Babel 或其他轉譯器</li>
<li><code>extensionsToTreatAsEsm</code> 告訴 Jest 哪些副檔名視為 ESM</li>
<li><code>testEnvironment: &#39;node&#39;</code> 使用 Node 環境（非 jsdom）</li>
</ul>
<p>執行 <code>npm test</code>，這時候仍會報錯：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jest encountered an unexpected token</span><br></pre></td></tr></table></figure>

<p>因為 Jest 內建 transform 無法處理 ES Module 語法（即便 Node.js 支援，但 Jest 內部解析流程不同）。</p>
<hr>
<h3 id="5-方案二：使用-babel-jest-轉譯-ESM"><a href="#5-方案二：使用-babel-jest-轉譯-ESM" class="headerlink" title="5. 方案二：使用 babel-jest 轉譯 ESM"></a>5. 方案二：使用 <code>babel-jest</code> 轉譯 ESM</h3><p>安裝 Babel 及相關套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/preset-env babel-jest</span><br></pre></td></tr></table></figure>

<p>建立 <code>.babelrc</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>更新 <code>jest.config.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.m?js$&#x27;</span>: <span class="string">&#x27;babel-jest&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extensionsToTreatAsEsm</span>: [<span class="string">&#x27;.mjs&#x27;</span>],</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣 Jest 會用 <strong>babel-jest</strong> 處理 <code>.js</code>、<code>.mjs</code> 檔案，並當作 ESM 解析。</p>
<p>此時執行 <code>npm test</code>，測試就會通過：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PASS  ./sum.test.mjs</span><br><span class="line">✓ adds 1 + 2 to equal 3 (5 ms)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-測試更複雜情境"><a href="#6-測試更複雜情境" class="headerlink" title="6. 測試更複雜情境"></a>6. 測試更複雜情境</h3><p>假設我們有一個 <strong>fetch 模組</strong>，使用 async function：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fetchData.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;peanut butter&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>測試檔：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fetchData.test.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">&#x27;./fetchData.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;returns peanut butter&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">  <span class="title function_">expect</span>(data).<span class="title function_">toBe</span>(<span class="string">&#x27;peanut butter&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>一樣執行 <code>npm test</code>，因為已經設定好 Babel 與 ESM，非同步測試也能正常運作。</p>
<hr>
<h3 id="7-使用-import-meta-url-注意事項"><a href="#7-使用-import-meta-url-注意事項" class="headerlink" title="7. 使用 import.meta.url 注意事項"></a>7. 使用 <code>import.meta.url</code> 注意事項</h3><p>如果你的程式中有用 <code>import.meta.url</code>（例如讀取檔案、動態載入），要注意 <strong>Jest 執行時 context 與 Node.js 直跑不同</strong>。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fileUtil.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">&#x27;node:fs/promises&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; dirname, join &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = <span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readConfig</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = <span class="title function_">join</span>(__dirname, <span class="string">&#x27;config.json&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> content = <span class="keyword">await</span> <span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>測試時要確保 <code>import.meta.url</code> 能被正確解析（可能需要 <code>jest-environment-node</code>，或 Mock 檔案路徑）。</p>
<hr>
<h3 id="8-常見錯誤與解法"><a href="#8-常見錯誤與解法" class="headerlink" title="8. 常見錯誤與解法"></a>8. 常見錯誤與解法</h3><p><strong>問題：<code>SyntaxError: Cannot use import statement outside a module</code></strong></p>
<ul>
<li>確認 <code>jest.config.js</code> 中有 <code>extensionsToTreatAsEsm</code></li>
<li>測試檔、副程式檔是否副檔名為 <code>.mjs</code></li>
</ul>
<p><strong>問題：<code>Unexpected token export</code></strong></p>
<ul>
<li>確認有設定 <code>transform</code> 使用 <code>babel-jest</code></li>
<li>確認 <code>.babelrc</code> 正確啟用 <code>@babel/preset-env</code></li>
</ul>
<p><strong>問題：ESM 測試檔找不到 module</strong></p>
<ul>
<li>確認 <code>package.json</code> 有 <code>type: module</code></li>
<li>相對路徑記得補 <code>.mjs</code> 副檔名</li>
</ul>
<hr>
<h3 id="9-實用-Jest-CLI-指令"><a href="#9-實用-Jest-CLI-指令" class="headerlink" title="9. 實用 Jest CLI 指令"></a>9. 實用 Jest CLI 指令</h3><ul>
<li>執行單一測試檔：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx jest sum.test.mjs</span><br></pre></td></tr></table></figure>

<ul>
<li>只跑某個測試：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test.<span class="title function_">only</span>(<span class="string">&#x27;專跑這個測試&#x27;</span>, <span class="function">() =&gt;</span> &#123; ... &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>顯示覆蓋率：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx jest --coverage</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Jest 預設是為 <strong>CommonJS</strong> 設計，但隨著 <strong>ES Module</strong> 在 Node.js 與前端日漸普及，支援 ESM 變得越來越重要。</p>
<p>透過本文介紹，我們可以知道：</p>
<ol>
<li><code>type: module</code> 啟用 ESM</li>
<li>Jest 需要設定 <code>transform</code> 及 <code>extensionsToTreatAsEsm</code></li>
<li>使用 <code>babel-jest</code> 來處理 ESM</li>
<li>注意 <code>import.meta.url</code>、路徑、非同步等 ESM 細節</li>
</ol>
<p>雖然設定比 CJS 稍微複雜，但一旦設定好後，整個測試流程一樣流暢，也能為未來更符合現代標準的專案奠定基礎。</p>
<p>建議未來若有使用 TypeScript、React、Vue 等，也可以結合對應的 transformer 與設定，讓 Jest 完全支援你的開發。</p>
]]></content>
      <tags>
        <tag>Jest</tag>
        <tag>ES Module</tag>
      </tags>
  </entry>
  <entry>
    <title>Jest AAA 測試原則入門教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-jest-unit-test-aaa-intro-tutorial/</url>
    <content><![CDATA[<h3 id="範例測試：saveMoney-方法"><a href="#範例測試：saveMoney-方法" class="headerlink" title="範例測試：saveMoney 方法"></a><strong>範例測試：<code>saveMoney</code> 方法</strong></h3><p><code>atm.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ATM</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">balance</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">balance</span> = balance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">saveMoney</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Amount must be positive&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">balance</span> += amount;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">balance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">withdrawMoney</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Amount must be positive&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (amount &gt; <span class="variable language_">this</span>.<span class="property">balance</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Insufficient balance&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">balance</span> -= amount;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">balance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getBalance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">balance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">balance</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setBalance</span>(<span class="params">balance</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Balance cannot be negative&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">balance</span> = balance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="variable constant_">ATM</span>;</span><br></pre></td></tr></table></figure>

<p><code>atm.test.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">ATM</span> <span class="keyword">from</span> <span class="string">&#x27;../atm.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;saveMoney adds money to balance&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Arrange: 建立一個 ATM 實例，初始餘額 0</span></span><br><span class="line">  <span class="keyword">const</span> atm = <span class="keyword">new</span> <span class="title function_">ATM</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Act: 存入 1000</span></span><br><span class="line">  atm.<span class="title function_">saveMoney</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assert: 餘額應該變成 1000</span></span><br><span class="line">  <span class="title function_">expect</span>(atm.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>逐步對應：</strong></p>
<table>
<thead>
<tr>
<th>步驟</th>
<th>內容</th>
</tr>
</thead>
<tbody><tr>
<td>Arrange</td>
<td>建立 <code>ATM</code> 物件並給初始值</td>
</tr>
<tr>
<td>Act</td>
<td>呼叫 <code>saveMoney(1000)</code></td>
</tr>
<tr>
<td>Assert</td>
<td>驗證 <code>atm.balance</code> 是否等於 <code>1000</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="另一個範例：檢查錯誤拋出"><a href="#另一個範例：檢查錯誤拋出" class="headerlink" title="另一個範例：檢查錯誤拋出"></a><strong>另一個範例：檢查錯誤拋出</strong></h3><p>如果要測試當金額是負數時會丟錯誤：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;saveMoney throws error when amount &lt;= 0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Arrange</span></span><br><span class="line">  <span class="keyword">const</span> atm = <span class="keyword">new</span> <span class="title function_">ATM</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Act &amp; Assert</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="function">() =&gt;</span> atm.<span class="title function_">saveMoney</span>(<span class="number">0</span>)).<span class="title function_">toThrow</span>(<span class="string">&#x27;Amount must be positive&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這裡因為 <strong><code>act</code> 跟 <code>assert</code> 綁在一起</strong>，所以在 <code>expect</code> 裡包了一個 function，來驗證是否拋出錯誤。</p>
<hr>
<h2 id="完整測試檔（用-AAA-標註）"><a href="#完整測試檔（用-AAA-標註）" class="headerlink" title="完整測試檔（用 AAA 標註）"></a><strong>完整測試檔（用 AAA 標註）</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">ATM</span> <span class="keyword">from</span> <span class="string">&#x27;../atm.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;saveMoney adds money to balance&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Arrange</span></span><br><span class="line">  <span class="keyword">const</span> atm = <span class="keyword">new</span> <span class="title function_">ATM</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Act</span></span><br><span class="line">  atm.<span class="title function_">saveMoney</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assert</span></span><br><span class="line">  <span class="title function_">expect</span>(atm.<span class="property">balance</span>).<span class="title function_">toBe</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;saveMoney throws error when amount &lt;= 0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Arrange</span></span><br><span class="line">  <span class="keyword">const</span> atm = <span class="keyword">new</span> <span class="title function_">ATM</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Act &amp; Assert</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="function">() =&gt;</span> atm.<span class="title function_">saveMoney</span>(<span class="number">0</span>)).<span class="title function_">toThrow</span>(<span class="string">&#x27;Amount must be positive&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Jest</tag>
        <tag>ES Module</tag>
      </tags>
  </entry>
  <entry>
    <title>JSX 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/13/learning-notes-jsx-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-JSX-是什麼？"><a href="#1-JSX-是什麼？" class="headerlink" title="1. JSX 是什麼？"></a>1. JSX 是什麼？</h2><p>JSX（JavaScript XML）是一種語法擴展，主要用於 React 函式庫中，它允許在 JavaScript 代碼中撰寫類似 HTML 的語法，使 UI 組件的編寫更加直觀。JSX 並非原生 JavaScript，需要透過 Babel 轉譯成標準 JavaScript 代碼。</p>
<h2 id="2-為什麼使用-JSX？"><a href="#2-為什麼使用-JSX？" class="headerlink" title="2. 為什麼使用 JSX？"></a>2. 為什麼使用 JSX？</h2><p>JSX 提供了一種更加可讀、直觀的方式來描述 UI 結構，相比於傳統的 JavaScript DOM 操作，它更簡潔易懂。此外，JSX 具備以下優勢：</p>
<ul>
<li><strong>可讀性高</strong>：類似 HTML 的語法使 UI 組件結構清晰。</li>
<li><strong>與 JavaScript 無縫結合</strong>：可在 JSX 中嵌入 JavaScript 表達式。</li>
<li><strong>更安全</strong>：React 會自動處理 XSS（跨站腳本攻擊），確保數據安全。</li>
<li><strong>高效渲染</strong>：React 使用虛擬 DOM 最小化真實 DOM 更新，提高性能。</li>
</ul>
<h2 id="3-基本語法"><a href="#3-基本語法" class="headerlink" title="3. 基本語法"></a>3. 基本語法</h2><h3 id="3-1-基本範例"><a href="#3-1-基本範例" class="headerlink" title="3.1 基本範例"></a>3.1 基本範例</h3><p>JSX 允許我們在 JavaScript 代碼中使用類似 HTML 的語法來描述 UI：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, JSX!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="3-2-JSX-中的-JavaScript-表達式"><a href="#3-2-JSX-中的-JavaScript-表達式" class="headerlink" title="3.2 JSX 中的 JavaScript 表達式"></a>3.2 JSX 中的 JavaScript 表達式</h3><p>JSX 允許在 <code>&#123;&#125;</code> 中插入 JavaScript 表達式，例如變數、函式調用等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-JSX-屬性"><a href="#3-3-JSX-屬性" class="headerlink" title="3.3 JSX 屬性"></a>3.3 JSX 屬性</h3><p>JSX 屬性與 HTML 類似，但有些屬性名稱需使用 camelCase，例如 <code>className</code> 取代 <code>class</code>，<code>htmlFor</code> 取代 <code>for</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入文字&quot;</span> <span class="attr">className</span>=<span class="string">&quot;input-box&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-JSX-內聯樣式"><a href="#3-4-JSX-內聯樣式" class="headerlink" title="3.4 JSX 內聯樣式"></a>3.4 JSX 內聯樣式</h3><p>內聯樣式需使用 JavaScript 對象，且屬性名稱為 camelCase。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123; <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>這是一段藍色文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-JSX-中的條件與循環"><a href="#4-JSX-中的條件與循環" class="headerlink" title="4. JSX 中的條件與循環"></a>4. JSX 中的條件與循環</h2><h3 id="4-1-條件渲染（if…else）"><a href="#4-1-條件渲染（if…else）" class="headerlink" title="4.1 條件渲染（if…else）"></a>4.1 條件渲染（if…else）</h3><p>JSX 本身不支援 <code>if...else</code>，需使用三元運算子或變數。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoggedIn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> element = isLoggedIn ? <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎回來！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>請登入<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-使用-amp-amp-運算符"><a href="#4-2-使用-amp-amp-運算符" class="headerlink" title="4.2 使用 &amp;&amp; 運算符"></a>4.2 使用 &amp;&amp; 運算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> messages = [<span class="string">&#x27;新訊息1&#x27;</span>, <span class="string">&#x27;新訊息2&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;messages.length &gt; 0 &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>你有 &#123;messages.length&#125; 則未讀訊息。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-迴圈渲染（map）"><a href="#4-3-迴圈渲染（map）" class="headerlink" title="4.3 迴圈渲染（map）"></a>4.3 迴圈渲染（map）</h3><p>JSX 可透過 <code>map</code> 方法來動態渲染列表。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Cherry&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;list.map((item, index) =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="5-JSX-與-React-組件"><a href="#5-JSX-與-React-組件" class="headerlink" title="5. JSX 與 React 組件"></a>5. JSX 與 React 組件</h2><p>JSX 可與 React 組件結合使用，提升 UI 開發的模組化程度。</p>
<h3 id="5-1-函式型組件"><a href="#5-1-函式型組件" class="headerlink" title="5.1 函式型組件"></a>5.1 函式型組件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123;props.name&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;小明&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="5-2-類別型組件"><a href="#5-2-類別型組件" class="headerlink" title="5.2 類別型組件"></a>5.2 類別型組件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123;this.props.name&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;小明&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><p>JSX 是 React 開發的重要語法，它能夠讓 UI 描述更加直觀，並與 JavaScript 無縫整合。透過學習 JSX，我們可以更高效地撰寫可重用的 React 組件，提高開發效率。</p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 使用好處入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-jwt-pros-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>JWT（JSON Web Token）</strong> 的好處在於它是輕量、跨平台、無狀態的驗證與授權機制，特別適合用於前後端分離、微服務架構與 API 驗證。以下是它的主要優點：</p>
<h2 id="一、JWT-的-7-大好處"><a href="#一、JWT-的-7-大好處" class="headerlink" title="一、JWT 的 7 大好處"></a>一、JWT 的 7 大好處</h2><h3 id="1-無狀態（Stateless）驗證"><a href="#1-無狀態（Stateless）驗證" class="headerlink" title="1. 無狀態（Stateless）驗證"></a>1. <strong>無狀態（Stateless）驗證</strong></h3><ul>
<li>JWT 本身就包含用戶資訊與簽名，<strong>不需要在伺服器端儲存 session</strong>。</li>
<li>適合微服務或 Serverless 架構，因為伺服器不用記住誰是誰。</li>
</ul>
<h3 id="2-跨平台、跨語言支援"><a href="#2-跨平台、跨語言支援" class="headerlink" title="2. 跨平台、跨語言支援"></a>2. <strong>跨平台、跨語言支援</strong></h3><ul>
<li>JWT 是一種標準格式（RFC 7519），可用於各種語言與框架（Node.js、Python、Go、Java、PHP、.NET 等）。</li>
<li>非常適合前後端分離的架構，或多平台應用（Web + App）。</li>
</ul>
<h3 id="3-傳遞資訊方便"><a href="#3-傳遞資訊方便" class="headerlink" title="3. 傳遞資訊方便"></a>3. <strong>傳遞資訊方便</strong></h3><ul>
<li>可以在 payload 中攜帶使用者角色、權限、使用者 ID 等資料，前後端都可解碼取得。</li>
<li>節省額外查詢資料庫的頻率（如登入後不再查資料庫即可知道使用者身份）。</li>
</ul>
<h3 id="4-易於擴展與整合-OAuth"><a href="#4-易於擴展與整合-OAuth" class="headerlink" title="4. 易於擴展與整合 OAuth"></a>4. <strong>易於擴展與整合 OAuth</strong></h3><ul>
<li>JWT 是 OAuth 2.0 中 Access Token 的常見格式。</li>
<li>整合第三方登入（如 Google、Facebook、GitHub）時很常使用 JWT 作為驗證令牌。</li>
</ul>
<h3 id="5-高安全性（搭配正確實作）"><a href="#5-高安全性（搭配正確實作）" class="headerlink" title="5. 高安全性（搭配正確實作）"></a>5. <strong>高安全性（搭配正確實作）</strong></h3><ul>
<li>Token 是簽名過的，<strong>無法被竄改</strong>（除非持有密鑰）。</li>
<li>可設定有效期限（<code>exp</code>），也支援附加自訂欄位。</li>
</ul>
<h3 id="6-前端儲存與攜帶方便"><a href="#6-前端儲存與攜帶方便" class="headerlink" title="6. 前端儲存與攜帶方便"></a>6. <strong>前端儲存與攜帶方便</strong></h3><ul>
<li><p>JWT 是字串格式，可透過：</p>
<ul>
<li><code>Authorization</code> header：<code>Bearer &lt;token&gt;</code></li>
<li>Cookie（推薦設為 HttpOnly + Secure）</li>
<li>localStorage（需防範 XSS）</li>
</ul>
</li>
</ul>
<h3 id="7-支援單一登入（SSO）"><a href="#7-支援單一登入（SSO）" class="headerlink" title="7. 支援單一登入（SSO）"></a>7. <strong>支援單一登入（SSO）</strong></h3><ul>
<li>多個子系統共用同一套 JWT 驗證邏輯，實現單一登入（Single Sign-On）。</li>
<li>用於企業內部系統、微服務架構特別合適。</li>
</ul>
<hr>
<h2 id="二、實際應用情境"><a href="#二、實際應用情境" class="headerlink" title="二、實際應用情境"></a>二、實際應用情境</h2><table>
<thead>
<tr>
<th>應用場景</th>
<th>優勢</th>
</tr>
</thead>
<tbody><tr>
<td>API 驗證</td>
<td>無狀態、易於整合</td>
</tr>
<tr>
<td>單頁應用（SPA）</td>
<td>可存取使用者資訊而不額外請求</td>
</tr>
<tr>
<td>手機 App 登入</td>
<td>移動端儲存與驗證方便</td>
</tr>
<tr>
<td>微服務架構</td>
<td>每個服務只需驗證簽章，無需共用 session</td>
</tr>
<tr>
<td>OAuth 第三方登入</td>
<td>可當作 Access Token 與 ID Token</td>
</tr>
</tbody></table>
<hr>
<h2 id="三、與-Session-的比較"><a href="#三、與-Session-的比較" class="headerlink" title="三、與 Session 的比較"></a>三、與 Session 的比較</h2><table>
<thead>
<tr>
<th>項目</th>
<th>JWT</th>
<th>Session</th>
</tr>
</thead>
<tbody><tr>
<td>資料儲存位置</td>
<td>前端（Token 傳遞）</td>
<td>後端（記憶體&#x2F;資料庫）</td>
</tr>
<tr>
<td>可擴充性</td>
<td>高（無需共享記憶體）</td>
<td>需維護集中式 Session 儲存</td>
</tr>
<tr>
<td>實作難度</td>
<td>中（需處理 Token 過期、黑名單等）</td>
<td>簡單（有框架支援）</td>
</tr>
<tr>
<td>安全性</td>
<td>好（但需避免 XSS 與 Token 洩露）</td>
<td>好（但可能遭 CSRF 攻擊）</td>
</tr>
</tbody></table>
<hr>
<h2 id="四、常見誤解釐清"><a href="#四、常見誤解釐清" class="headerlink" title="四、常見誤解釐清"></a>四、常見誤解釐清</h2><table>
<thead>
<tr>
<th>常見誤解</th>
<th>釐清</th>
</tr>
</thead>
<tbody><tr>
<td>JWT 是加密的</td>
<td>錯，<strong>預設只是簽名（不可竄改），不是加密（不可閱讀）</strong></td>
</tr>
<tr>
<td>JWT 安全無敵</td>
<td>錯，若密鑰外洩，任何人都能簽 Token。需配合 HTTPS 傳輸與妥善保護密鑰</td>
</tr>
<tr>
<td>JWT 不需要過期時間</td>
<td>錯，若未設 <code>exp</code>，Token 可永久有效，極度危險</td>
</tr>
</tbody></table>
<hr>
<h2 id="五、總結"><a href="#五、總結" class="headerlink" title="五、總結"></a>五、總結</h2><p>JWT 的優勢在於簡潔、無狀態、可擴展，特別適合 API 驗證與前後端分離架構。然而，要發揮 JWT 的最大效益並保障安全，開發者需了解其限制，搭配正確實作（如過期、黑名單、HTTPS、Refresh Token 管理等）。</p>
]]></content>
      <tags>
        <tag>JWT</tag>
        <tag>Refresh Token</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 入門教學筆記 | 學習筆記</title>
    <url>/2023/12/20/learning-notes-jwt-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代 Web 應用中，使用者認證與授權機制是系統安全的重要基礎。傳統上，我們可能使用 Session 與 Cookie 搭配伺服器端儲存進行身份驗證；但在前後端分離、多平台（Web、Mobile、API Gateway）應用日益普及的情況下，更輕量、跨平台、無狀態的驗證方案逐漸成為主流。</p>
<p>JWT（JSON Web Token）正是這樣一種流行的解法。它是一種根據 JSON 格式加密後產生的 Token，可用來安全地在用戶與伺服器間傳遞資訊。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p>JWT 是一種開放標準（RFC 7519），用於在雙方之間以 JSON 格式安全傳遞資訊。</p>
</li>
<li><p>結構由三部分組成：<code>Header</code>.<code>Payload</code>.<code>Signature</code>。</p>
</li>
<li><p>主要用途：</p>
<ul>
<li><strong>身份認證（Authentication）</strong></li>
<li><strong>授權（Authorization）</strong></li>
</ul>
</li>
<li><p>特點：</p>
<ul>
<li>可跨語言與平台使用</li>
<li>支援無狀態驗證（不需伺服器端儲存 session）</li>
<li>可設定過期時間與自訂 Payload 欄位</li>
</ul>
</li>
<li><p>常見應用場景：API Token 驗證、行動裝置登入狀態維持、OAuth 搭配使用</p>
</li>
<li><p>JWT 須透過 HTTPS 傳遞以避免中間人攻擊（MITM）</p>
</li>
<li><p>不適合儲存敏感資訊（如密碼、信用卡號）</p>
</li>
</ul>
<hr>
<h2 id="JWT-結構說明"><a href="#JWT-結構說明" class="headerlink" title="JWT 結構說明"></a>JWT 結構說明</h2><p>一個 JWT 字串長得像這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</span><br><span class="line">eyJ1c2VySWQiOiIxMjM0IiwibmFtZSI6IktEIiwiZXhwIjoxNzAwMDAwMDAwfQ.</span><br><span class="line">sKPXrY3AvKb0aBQKgYF3mn7ZWh9yGpyF2X2NFie5TIU</span><br></pre></td></tr></table></figure>

<p>它由三個部分組成，透過 <code>.</code> 分隔：</p>
<ol>
<li><strong>Header</strong>：定義演算法（如 <code>HS256</code>）與類型（<code>JWT</code>）。</li>
<li><strong>Payload</strong>：承載實際資料（如使用者 ID、帳號、過期時間）。</li>
<li><strong>Signature</strong>：用密鑰加密前兩部分，用於驗證是否被竄改。</li>
</ol>
<hr>
<h2 id="實作範例（Node-js-ESM）"><a href="#實作範例（Node-js-ESM）" class="headerlink" title="實作範例（Node.js + ESM）"></a>實作範例（Node.js + ESM）</h2><h3 id="安裝必要套件"><a href="#安裝必要套件" class="headerlink" title="安裝必要套件"></a>安裝必要套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express jsonwebtoken dotenv</span><br></pre></td></tr></table></figure>

<h3 id="專案架構"><a href="#專案架構" class="headerlink" title="專案架構"></a>專案架構</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">├── index.js</span><br><span class="line">├── routes/</span><br><span class="line">│   └── auth.js</span><br><span class="line">├── .env</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="env-檔（儲存密鑰）"><a href="#env-檔（儲存密鑰）" class="headerlink" title=".env 檔（儲存密鑰）"></a><code>.env</code> 檔（儲存密鑰）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JWT_SECRET=mysecretkey123</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="routes-auth-js"><a href="#routes-auth-js" class="headerlink" title="routes/auth.js"></a><code>routes/auth.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&#x27;dotenv&#x27;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模擬使用者登入</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模擬帳密驗證（實際應從 DB 查詢）</span></span><br><span class="line">  <span class="keyword">if</span> (username === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; password === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> payload = &#123;</span><br><span class="line">      <span class="attr">userId</span>: <span class="string">&#x27;abc123&#x27;</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 簽發 Token，過期時間為 1 小時</span></span><br><span class="line">    <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(payload, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>, &#123;</span><br><span class="line">      <span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; token &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;帳號或密碼錯誤&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 受保護資源</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/profile&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> authHeader = req.<span class="property">headers</span>.<span class="property">authorization</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!authHeader || !authHeader.<span class="title function_">startsWith</span>(<span class="string">&#x27;Bearer &#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;請提供 Token&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = authHeader.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>);</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;驗證成功&#x27;</span>, <span class="attr">user</span>: decoded &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Token 無效或過期&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a><code>index.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> authRouter <span class="keyword">from</span> <span class="string">&#x27;./routes/auth.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, authRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="測試流程"><a href="#測試流程" class="headerlink" title="測試流程"></a>測試流程</h2><ol>
<li>發送 <code>POST /api/login</code> 並附上正確帳密（如 <code>admin</code> &#x2F; <code>123456</code>），取得 JWT。</li>
<li>將該 JWT 作為 <code>Authorization: Bearer &lt;token&gt;</code> 放入 Header 中，請求 <code>GET /api/profile</code>。</li>
<li>若驗證成功，API 會回傳對應使用者資訊；若失敗，則回傳錯誤訊息。</li>
</ol>
<hr>
<h2 id="常見安全注意事項"><a href="#常見安全注意事項" class="headerlink" title="常見安全注意事項"></a>常見安全注意事項</h2><ul>
<li><strong>使用 HTTPS</strong>：JWT 應透過 HTTPS 傳輸，避免中間人攻擊。</li>
<li><strong>設定適當過期時間</strong>：避免長期有效的 Token 被盜用。</li>
<li><strong>避免儲存敏感資訊於 Payload</strong>：Payload 是可被解碼的（雖然不可修改），不應含有密碼、信用卡資訊等。</li>
<li><strong>支援 Token 失效機制（如 Token 黑名單）</strong>：JWT 是無狀態的，若要強制登出或封鎖，需額外設計邏輯。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>JWT 是實作登入與驗證的重要工具，具有無狀態、跨平台、可擴充的特性，特別適合 API 驗證場景。本文透過簡單的 Node.js + Express 實作，展示如何產生與驗證 JWT，並說明常見應用與安全注意事項。</p>
<p>不論你是單頁應用 SPA 開發者，還是撰寫 RESTful API 的後端工程師，掌握 JWT 都將大幅提升你的系統安全與擴充能力。</p>
]]></content>
      <tags>
        <tag>JWT</tag>
        <tag>Refresh Token</tag>
      </tags>
  </entry>
  <entry>
    <title>React 前端整合 JWT（含 Refresh Token）入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-jwt-react-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當你要將 <strong>JWT 驗證整合至 React 前端</strong>，並搭配 <strong>Refresh Token</strong> 或整合 <strong>OAuth（如 Google 登入）流程</strong>，你需要考慮前端的存儲方式、token 的更新機制，以及第三方登入的流程銜接。</p>
<p>以下將分成三個部分講解：</p>
<hr>
<h1 id="一、React-前端整合-JWT（含-Refresh-Token）"><a href="#一、React-前端整合-JWT（含-Refresh-Token）" class="headerlink" title="一、React 前端整合 JWT（含 Refresh Token）"></a>一、React 前端整合 JWT（含 Refresh Token）</h1><h2 id="流程總覽："><a href="#流程總覽：" class="headerlink" title="流程總覽："></a>流程總覽：</h2><ol>
<li><p>使用者輸入帳密登入，發送 <code>/login</code> 請求。</p>
</li>
<li><p>伺服器簽發兩種 token：</p>
<ul>
<li><strong>Access Token</strong>（短效，有效期如 15 分鐘）</li>
<li><strong>Refresh Token</strong>（長效，有效期如 7 天）</li>
</ul>
</li>
<li><p>前端儲存 Access Token（如在記憶體），Refresh Token 建議儲存在 <strong>HttpOnly Cookie</strong>。</p>
</li>
<li><p>當 Access Token 過期時，自動用 Refresh Token 換取新 Access Token。</p>
</li>
<li><p>使用者主動登出時，Refresh Token 一併清除。</p>
</li>
</ol>
<hr>
<h2 id="伺服器回傳範例（登入成功）："><a href="#伺服器回傳範例（登入成功）：" class="headerlink" title="伺服器回傳範例（登入成功）："></a>伺服器回傳範例（登入成功）：</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;accessToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expiresIn&quot;</span><span class="punctuation">:</span> <span class="number">900</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>並透過 <code>Set-Cookie</code> 傳送 HttpOnly 的 Refresh Token：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>refreshToken=xxxxx; HttpOnly; Path=/; Max-Age=604800;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="React-實作要點"><a href="#React-實作要點" class="headerlink" title="React 實作要點"></a>React 實作要點</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span><br><span class="line">    <span class="string">&#x27;/api/login&#x27;</span>,</span><br><span class="line">    &#123; username, password &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">withCredentials</span>: <span class="literal">true</span>, <span class="comment">// 允許 cookie 傳遞</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;accessToken&#x27;</span>, res.<span class="property">data</span>.<span class="property">accessToken</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">api.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">api.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> res,</span><br><span class="line">  <span class="keyword">async</span> (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 嘗試使用 Refresh Token 換 Access Token</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/refresh&#x27;</span>, &#123;&#125;, &#123; <span class="attr">withCredentials</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;accessToken&#x27;</span>, res.<span class="property">data</span>.<span class="property">accessToken</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重試原本請求</span></span><br><span class="line">        err.<span class="property">config</span>.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;res.data.accessToken&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">axios</span>(err.<span class="property">config</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// refresh 失敗，跳轉登入頁</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/login&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, &#123;&#125;, &#123; <span class="attr">withCredentials</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;accessToken&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><ul>
<li>Refresh Token 儲存在瀏覽器的 <code>HttpOnly Cookie</code>，無法被 JavaScript 存取，提升安全性。</li>
<li>Access Token 儲存在記憶體或 localStorage（但 localStorage 易受 XSS 攻擊）。</li>
<li>若要完全防止 CSRF，Refresh Token cookie 需搭配 SameSite 設定與 CSRF token。</li>
</ul>
<hr>
<h1 id="二、OAuth-2-0-登入（以-Google-為例）"><a href="#二、OAuth-2-0-登入（以-Google-為例）" class="headerlink" title="二、OAuth 2.0 登入（以 Google 為例）"></a>二、OAuth 2.0 登入（以 Google 為例）</h1><h2 id="流程總覽"><a href="#流程總覽" class="headerlink" title="流程總覽"></a>流程總覽</h2><ol>
<li>前端點擊「使用 Google 登入」。</li>
<li>透過 Google OAuth 流程取得授權碼（或 id_token）。</li>
<li>前端將該 token 傳送到後端 <code>/auth/google</code>。</li>
<li>後端驗證 Google id_token，並簽發 JWT 給前端。</li>
</ol>
<hr>
<h2 id="React-前端整合（Google-登入）"><a href="#React-前端整合（Google-登入）" class="headerlink" title="React 前端整合（Google 登入）"></a>React 前端整合（Google 登入）</h2><p>使用 <a href="https://www.npmjs.com/package/@react-oauth/google"><code>@react-oauth/google</code></a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @react-oauth/google</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GoogleOAuthProvider</span>, <span class="title class_">GoogleLogin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-oauth/google&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">GoogleOAuthProvider</span> <span class="attr">clientId</span>=<span class="string">&quot;你的 Google Client ID&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GoogleLogin</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSuccess</span>=<span class="string">&#123;(credentialResponse)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          // 將 id_token 傳送給後端</span></span><br><span class="line"><span class="language-xml">          fetch(&#x27;/api/auth/google&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">            method: &#x27;POST&#x27;,</span></span><br><span class="line"><span class="language-xml">            headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;,</span></span><br><span class="line"><span class="language-xml">            credentials: &#x27;include&#x27;,</span></span><br><span class="line"><span class="language-xml">            body: JSON.stringify(&#123; token: credentialResponse.credential &#125;),</span></span><br><span class="line"><span class="language-xml">          &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        onError=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(&#x27;登入失敗&#x27;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">GoogleOAuthProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="後端處理（Node-js-google-auth-library）"><a href="#後端處理（Node-js-google-auth-library）" class="headerlink" title="後端處理（Node.js + google-auth-library）"></a>後端處理（Node.js + <code>google-auth-library</code>）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OAuth2Client</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;google-auth-library&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">OAuth2Client</span>(<span class="variable constant_">GOOGLE_CLIENT_ID</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/auth/google&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; token &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ticket = <span class="keyword">await</span> client.<span class="title function_">verifyIdToken</span>(&#123;</span><br><span class="line">    <span class="attr">idToken</span>: token,</span><br><span class="line">    <span class="attr">audience</span>: <span class="variable constant_">GOOGLE_CLIENT_ID</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> payload = ticket.<span class="title function_">getPayload</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> jwtToken = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">userId</span>: payload.<span class="property">sub</span>, <span class="attr">name</span>: payload.<span class="property">name</span> &#125;, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>, &#123;</span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="string">&#x27;15m&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> refreshToken = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">userId</span>: payload.<span class="property">sub</span> &#125;, process.<span class="property">env</span>.<span class="property">JWT_REFRESH_SECRET</span>, &#123;</span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="string">&#x27;7d&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  res</span><br><span class="line">    .<span class="title function_">cookie</span>(<span class="string">&#x27;refreshToken&#x27;</span>, refreshToken, &#123;</span><br><span class="line">      <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">maxAge</span>: <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">json</span>(&#123; <span class="attr">accessToken</span>: jwtToken &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、小結"><a href="#三、小結" class="headerlink" title="三、小結"></a>三、小結</h1><table>
<thead>
<tr>
<th>功能</th>
<th>JWT + Refresh</th>
<th>OAuth 2.0</th>
</tr>
</thead>
<tbody><tr>
<td>是否需要帳密登入</td>
<td>是</td>
<td>否，透過第三方登入</td>
</tr>
<tr>
<td>Token 儲存</td>
<td>Access Token: localStorage &#x2F; memory<br>Refresh Token: HttpOnly Cookie</td>
<td>同上</td>
</tr>
<tr>
<td>適合對象</td>
<td>自建會員系統</td>
<td>使用 Google &#x2F; Facebook &#x2F; LINE 等快速登入</td>
</tr>
<tr>
<td>安全性</td>
<td>良好，需搭配 HTTPS</td>
<td>高，由 Google 等大廠管理</td>
</tr>
<tr>
<td>實作難度</td>
<td>中等，需處理 Token 刷新邏輯</td>
<td>中高，需處理外部驗證流程</td>
</tr>
</tbody></table>
<hr>
<h1 id="延伸建議"><a href="#延伸建議" class="headerlink" title="延伸建議"></a>延伸建議</h1><ul>
<li>若你想使用前後端共用的 JWT 驗證邏輯，建議抽出 middleware 並集中處理。</li>
<li>可搭配 <code>jsonwebtoken</code>、<code>axios-auth-refresh</code> 等工具。</li>
<li>若前後端完全分離，建議使用跨網域 Cookie 搭配 <code>SameSite=None; Secure</code>。</li>
</ul>
]]></content>
      <tags>
        <tag>JWT</tag>
        <tag>Refresh Token</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 的實作安全策略與 Refresh Token 安全做法入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-jwt-security-refresh-token-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="一、JWT-基本安全策略"><a href="#一、JWT-基本安全策略" class="headerlink" title="一、JWT 基本安全策略"></a>一、JWT 基本安全策略</h2><h3 id="1-使用強密鑰（Secret）或非對稱加密"><a href="#1-使用強密鑰（Secret）或非對稱加密" class="headerlink" title="1. 使用強密鑰（Secret）或非對稱加密"></a>1. <strong>使用強密鑰（Secret）或非對稱加密</strong></h3><ul>
<li>對稱加密：使用 <code>HS256</code> 時，<code>secret</code> 應具備高強度（建議 256-bit 以上）。</li>
<li>非對稱加密：使用 <code>RS256</code> 時，私鑰與公鑰分離，便於服務間驗證。</li>
</ul>
<h3 id="2-設定有效期限（exp）"><a href="#2-設定有效期限（exp）" class="headerlink" title="2. 設定有效期限（exp）"></a>2. <strong>設定有效期限（exp）</strong></h3><ul>
<li><code>Access Token</code> 建議設為 <strong>短效（10~30 分鐘）</strong>。</li>
<li>避免永久有效的 Token，防止被盜用後長期濫用。</li>
</ul>
<h3 id="3-限制-Token-權限與資訊"><a href="#3-限制-Token-權限與資訊" class="headerlink" title="3. 限制 Token 權限與資訊"></a>3. <strong>限制 Token 權限與資訊</strong></h3><ul>
<li>Token 中只放必要資訊（例如：<code>userId</code>、<code>role</code>）。</li>
<li><strong>不要放敏感資料</strong>（如密碼、信用卡、住址等）。</li>
</ul>
<h3 id="4-透過-HTTPS-傳遞-JWT"><a href="#4-透過-HTTPS-傳遞-JWT" class="headerlink" title="4. 透過 HTTPS 傳遞 JWT"></a>4. <strong>透過 HTTPS 傳遞 JWT</strong></h3><ul>
<li>絕對 <strong>禁止在 HTTP 傳輸 JWT</strong>，避免中間人攻擊（MITM）。</li>
<li>所有 API 傳遞 token（包括 Refresh Token）都必須走 HTTPS。</li>
</ul>
<h3 id="5-防範-XSS"><a href="#5-防範-XSS" class="headerlink" title="5. 防範 XSS"></a>5. <strong>防範 XSS</strong></h3><ul>
<li>若將 <code>accessToken</code> 存放於 <code>localStorage</code>，需格外注意防止前端被注入腳本。</li>
<li>建議使用 <code>HttpOnly</code> cookie 儲存 Refresh Token（無法被 JavaScript 存取）。</li>
</ul>
<hr>
<h2 id="二、為什麼要使用-Refresh-Token？"><a href="#二、為什麼要使用-Refresh-Token？" class="headerlink" title="二、為什麼要使用 Refresh Token？"></a>二、為什麼要使用 Refresh Token？</h2><p><strong>Access Token 有效期短</strong>，提高安全性，但使用者不希望頻繁重新登入，這時就用 <strong>Refresh Token</strong> 來「悄悄地」幫用戶更新 Access Token。</p>
<hr>
<h2 id="三、JWT-Refresh-Token-實作架構"><a href="#三、JWT-Refresh-Token-實作架構" class="headerlink" title="三、JWT + Refresh Token 實作架構"></a>三、JWT + Refresh Token 實作架構</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">  +-------------+                      +----------------+</span><br><span class="line">  |   前端客戶端 |                      |    後端伺服器    |</span><br><span class="line">  +-------------+                      +----------------+</span><br><span class="line">       |                                       |</span><br><span class="line">       |--------&gt; /login (帳密登入) ---------&gt;|</span><br><span class="line">       |                                       |</span><br><span class="line">       |&lt;----- accessToken + refreshToken -----|</span><br><span class="line">       |                                       |</span><br><span class="line">       | 使用 accessToken 存取受保護資源          |</span><br><span class="line">       |--------&gt; /api/profile -------------&gt;|</span><br><span class="line">       |                                       |</span><br><span class="line">accessToken 過期 ↓                             |</span><br><span class="line">       |--------&gt; /refresh (更新 token) ------&gt;|</span><br><span class="line">       |&lt;------- 新的 accessToken -------------|</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、最佳實作策略詳解"><a href="#四、最佳實作策略詳解" class="headerlink" title="四、最佳實作策略詳解"></a>四、最佳實作策略詳解</h2><h3 id="1-accessToken-存放位置"><a href="#1-accessToken-存放位置" class="headerlink" title="1. accessToken 存放位置"></a>1. <strong>accessToken 存放位置</strong></h3><ul>
<li>可存在記憶體（例如 Redux、React Context）或 <code>localStorage</code></li>
<li>優點：操作方便</li>
<li>缺點：暴露於 XSS 攻擊風險</li>
</ul>
<h3 id="2-refreshToken-存放位置"><a href="#2-refreshToken-存放位置" class="headerlink" title="2. refreshToken 存放位置"></a>2. <strong>refreshToken 存放位置</strong></h3><ul>
<li>建議儲存在 <strong>HttpOnly、Secure 的 Cookie</strong> 中：</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>refreshToken=xxxxx; HttpOnly; Secure; SameSite=Strict; Path=/refresh</span><br></pre></td></tr></table></figure>

<ul>
<li>前端 JavaScript 無法讀取，降低風險</li>
<li>伺服器可以從 cookie 中自動取出 refreshToken</li>
</ul>
<hr>
<h3 id="3-建立-x2F-refresh-API（專責刷新-token）"><a href="#3-建立-x2F-refresh-API（專責刷新-token）" class="headerlink" title="3. 建立 &#x2F;refresh API（專責刷新 token）"></a>3. <strong>建立 &#x2F;refresh API（專責刷新 token）</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST /refresh</span></span><br><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/refresh&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> refreshToken = req.<span class="property">cookies</span>.<span class="property">refreshToken</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!refreshToken) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;無 refresh token&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(refreshToken, process.<span class="property">env</span>.<span class="property">JWT_REFRESH_SECRET</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newAccessToken = jwt.<span class="title function_">sign</span>(</span><br><span class="line">      &#123; <span class="attr">userId</span>: decoded.<span class="property">userId</span>, <span class="attr">username</span>: decoded.<span class="property">username</span> &#125;,</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>,</span><br><span class="line">      &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;15m&#x27;</span> &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">accessToken</span>: newAccessToken &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Refresh token 無效或過期&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-可選：Refresh-Token-儲存機制（實現強制登出與黑名單）"><a href="#4-可選：Refresh-Token-儲存機制（實現強制登出與黑名單）" class="headerlink" title="4. 可選：Refresh Token 儲存機制（實現強制登出與黑名單）"></a>4. <strong>可選：Refresh Token 儲存機制（實現強制登出與黑名單）</strong></h3><ul>
<li><p><strong>資料庫方案</strong>（建議）：</p>
<ul>
<li>每次登入時產生唯一的 <code>refreshToken</code> 並儲存於 DB</li>
<li>使用時驗證是否仍存在</li>
<li>登出或異常行為時移除對應的 refreshToken</li>
</ul>
</li>
<li><p><strong>Redis 快取黑名單方案</strong>（進階）：</p>
<ul>
<li>遇到帳號盜用或封鎖時，將 token 加入黑名單清單，後續驗證可即時攔截</li>
</ul>
</li>
</ul>
<hr>
<h3 id="5-登出處理（安全地移除-token）"><a href="#5-登出處理（安全地移除-token）" class="headerlink" title="5. 登出處理（安全地移除 token）"></a>5. <strong>登出處理（安全地移除 token）</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">clearCookie</span>(<span class="string">&#x27;refreshToken&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/refresh&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;已成功登出&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、常見攻擊防護建議"><a href="#五、常見攻擊防護建議" class="headerlink" title="五、常見攻擊防護建議"></a>五、常見攻擊防護建議</h2><table>
<thead>
<tr>
<th>威脅類型</th>
<th>防護方法</th>
</tr>
</thead>
<tbody><tr>
<td>XSS</td>
<td>不使用 localStorage 儲存 refresh token，輸出內容時做 XSS 過濾</td>
</tr>
<tr>
<td>CSRF</td>
<td>使用 SameSite&#x3D;Strict 的 cookie，或搭配 CSRF Token</td>
</tr>
<tr>
<td>Token 竄改</td>
<td>使用強加密簽章（如 HS256&#x2F;RS256）並驗證</td>
</tr>
<tr>
<td>重放攻擊</td>
<td>設定合理 <code>exp</code> 過期時間並結合裝置驗證（如 IP &#x2F; UA）</td>
</tr>
<tr>
<td>Token 外洩</td>
<td>refreshToken 實作多設備登入管理與黑名單機制</td>
</tr>
</tbody></table>
<hr>
<h2 id="六、小結"><a href="#六、小結" class="headerlink" title="六、小結"></a>六、小結</h2><table>
<thead>
<tr>
<th>元素</th>
<th>實作策略</th>
<th>優點</th>
</tr>
</thead>
<tbody><tr>
<td>Access Token</td>
<td>存放在記憶體或 localStorage</td>
<td>快速存取，搭配短效時安全性高</td>
</tr>
<tr>
<td>Refresh Token</td>
<td>存放於 HttpOnly Cookie</td>
<td>避免 JS 存取，提高防護能力</td>
</tr>
<tr>
<td>&#x2F;refresh API</td>
<td>驗證 refreshToken 並產生新 accessToken</td>
<td>提升使用者體驗與系統可用性</td>
</tr>
<tr>
<td>黑名單策略</td>
<td>儲存 refreshToken 資訊於資料庫</td>
<td>支援強制登出與封鎖帳號</td>
</tr>
</tbody></table>
<hr>
<h2 id="七、額外建議"><a href="#七、額外建議" class="headerlink" title="七、額外建議"></a>七、額外建議</h2><ul>
<li>單一使用者只能同時登入 N 台裝置，可依照 refreshToken 綁定設備資訊。</li>
<li>將 JWT 實作與中介層（middleware）封裝好，避免開發重複邏輯。</li>
<li>若你使用的是框架如 Next.js、NestJS、Spring Boot，也有內建 JWT 與 Refresh 模組可以善用。</li>
</ul>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://www.prisma.io/docs">官方文件</a></li>
</ol>
]]></content>
      <tags>
        <tag>JWT</tag>
        <tag>Refresh Token</tag>
      </tags>
  </entry>
  <entry>
    <title>LangGraph 入門教學筆記：打造多步驟 AI 流程的圖形化解決方案 | 學習筆記</title>
    <url>/2024/12/23/learning-notes-lang-graph-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隨著生成式 AI 的應用越來越廣泛，從客服機器人、智慧問答系統到複雜的自動化工作流程，開發者面臨的不再只是單次的文字生成，而是需要處理<strong>多步驟的對話邏輯與決策流程</strong>。</p>
<p>傳統上，這類應用通常透過繁瑣的 if-else 邏輯、狀態機或多層函式巢狀處理，程式碼不易閱讀與維護。為此，<strong>LangGraph</strong> 應運而生。它是一個開源的 Python 函式庫，讓開發者可以用「流程圖」的方式清晰地定義每一步的處理邏輯，進而打造更穩定且模組化的 AI Workflow。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>LangGraph 是什麼？</strong></p>
<ul>
<li>由 LangChain 團隊開發的 AI Workflow 工具，透過流程圖（Graph）定義多步驟的推理過程。</li>
<li>每一個節點（Node）代表一個處理步驟，從 LLM 回覆、條件判斷到工具呼叫等皆可定義成節點。</li>
</ul>
</li>
<li><p><strong>核心特色</strong></p>
<ul>
<li>使用有向圖（DAG）表示流程，每個節點都有明確的輸入與輸出狀態。</li>
<li>支援條件分支、迴圈、自訂狀態、記憶上下文。</li>
<li>可與 LangChain、OpenAI、Anthropic 等服務整合。</li>
<li>適合用於構建 Agent、Chatbot、多階段處理流程。</li>
</ul>
</li>
<li><p><strong>應用情境</strong></p>
<ul>
<li>客製化對話代理人（如智能客服）</li>
<li>多階段資訊處理（如：檢索、分類、摘要）</li>
<li>工具選擇與執行流程（如：根據輸入選擇工具）</li>
<li>擴展型 LLM 應用（如：RAG、Tool Use）</li>
</ul>
</li>
<li><p><strong>重要元件說明</strong></p>
<ul>
<li><code>StateGraph</code>：定義整體流程圖。</li>
<li><code>Node</code>：每個節點代表一個具邏輯意義的步驟。</li>
<li><code>State</code>：儲存目前上下文狀態，可自訂欄位。</li>
<li><code>Conditional Edge</code>：根據邏輯結果決定下一個節點。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例：打造一個-FAQ-對話機器人"><a href="#實際範例：打造一個-FAQ-對話機器人" class="headerlink" title="實際範例：打造一個 FAQ 對話機器人"></a>實際範例：打造一個 FAQ 對話機器人</h2><p>本範例將建立一個簡單的對話流程：</p>
<ol>
<li>使用者輸入問題。</li>
<li>呼叫 OpenAI GPT 模型回覆。</li>
<li>若輸入為 “bye”，流程結束；否則持續對話。</li>
</ol>
<hr>
<h3 id="1-安裝套件"><a href="#1-安裝套件" class="headerlink" title="1. 安裝套件"></a>1. 安裝套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install langgraph langchain openai</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-定義狀態與回應節點"><a href="#2-定義狀態與回應節點" class="headerlink" title="2. 定義狀態與回應節點"></a>2. 定義狀態與回應節點</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, END</span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自訂狀態格式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConversationState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: <span class="built_in">list</span>[<span class="built_in">str</span>]</span><br><span class="line">    last_user_input: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 LLM</span></span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;gpt-4&quot;</span>, temperature=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 處理回應的節點</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_response</span>(<span class="params">state: ConversationState</span>):</span><br><span class="line">    user_input = state[<span class="string">&quot;last_user_input&quot;</span>]</span><br><span class="line">    state[<span class="string">&quot;messages&quot;</span>].append(<span class="string">f&quot;User: <span class="subst">&#123;user_input&#125;</span>&quot;</span>)</span><br><span class="line">    response = llm.predict(<span class="string">f&quot;請回答以下問題：<span class="subst">&#123;user_input&#125;</span>&quot;</span>)</span><br><span class="line">    state[<span class="string">&quot;messages&quot;</span>].append(<span class="string">f&quot;AI: <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-定義流程結束條件與流程圖"><a href="#3-定義流程結束條件與流程圖" class="headerlink" title="3. 定義流程結束條件與流程圖"></a>3. 定義流程結束條件與流程圖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判斷是否要結束對話</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: ConversationState</span>):</span><br><span class="line">    <span class="keyword">if</span> state[<span class="string">&quot;last_user_input&quot;</span>].lower().strip() == <span class="string">&quot;bye&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;generate&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立流程圖</span></span><br><span class="line">builder = StateGraph(ConversationState)</span><br><span class="line">builder.add_node(<span class="string">&quot;generate&quot;</span>, generate_response)</span><br><span class="line">builder.set_entry_point(<span class="string">&quot;generate&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;generate&quot;</span>, should_continue)</span><br><span class="line"></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-執行對話流程"><a href="#4-執行對話流程" class="headerlink" title="4. 執行對話流程"></a>4. 執行對話流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始狀態</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="string">&quot;messages&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;last_user_input&quot;</span>: <span class="string">&quot;你好，這是什麼系統？&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行第一輪</span></span><br><span class="line">state = graph.invoke(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模擬第二輪</span></span><br><span class="line">state[<span class="string">&quot;last_user_input&quot;</span>] = <span class="string">&quot;LangGraph 是什麼？&quot;</span></span><br><span class="line">state = graph.invoke(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模擬結束對話</span></span><br><span class="line">state[<span class="string">&quot;last_user_input&quot;</span>] = <span class="string">&quot;bye&quot;</span></span><br><span class="line">state = graph.invoke(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出對話記錄</span></span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> state[<span class="string">&quot;messages&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="範例輸出結果"><a href="#範例輸出結果" class="headerlink" title="範例輸出結果"></a>範例輸出結果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User: 你好，這是什麼系統？</span><br><span class="line">AI: 這是一個由 LangGraph 架構的對話系統。</span><br><span class="line">User: LangGraph 是什麼？</span><br><span class="line">AI: LangGraph 是一個讓開發者用流程圖方式設計 AI 應用的工具。</span><br><span class="line">User: bye</span><br><span class="line">AI: 感謝使用，祝您有美好的一天。</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結與延伸"><a href="#總結與延伸" class="headerlink" title="總結與延伸"></a>總結與延伸</h2><p>LangGraph 為 LLM 應用程式帶來一個明確的結構化框架，讓我們能夠模組化管理多步驟流程、狀態記憶與條件判斷。相較於傳統方式，它更適合用來構建複雜、可維護的對話式 AI 應用。</p>
<h3 id="延伸應用可以包括："><a href="#延伸應用可以包括：" class="headerlink" title="延伸應用可以包括："></a>延伸應用可以包括：</h3><ul>
<li>整合 LangChain 工具（如：向量資料庫、搜尋引擎）</li>
<li>建構具有分支與回饋機制的智能 Agent</li>
<li>開發能根據上下文自我修正的 RAG 系統</li>
<li>將整個 LangGraph 部署為 Web API 或背景工作流程</li>
</ul>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://ywctech.net/ml-ai/langchain-langgraph-agent-part1/">LangGraph: LangChain Agent 的殺手鐧 (入門)</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>html</tag>
        <tag>LangGraph</tag>
      </tags>
  </entry>
  <entry>
    <title>LESS 入門教學筆記 | 學習筆記</title>
    <url>/2023/05/31/learning-notes-less-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>LESS</code>（Leaner Style Sheets）是一種 CSS 預處理器，它在 CSS 的基礎上加入了變數、嵌套、混合（Mixins）、函式等功能，使樣式表的管理更加靈活且易於維護。LESS 文件最終會被編譯成標準的 CSS，並可在瀏覽器或 Node.js 環境中使用。</p>
<hr>
<h2 id="1-安裝與使用"><a href="#1-安裝與使用" class="headerlink" title="1. 安裝與使用"></a>1. 安裝與使用</h2><p>LESS 可以透過以下幾種方式使用：  </p>
<h3 id="1-1-透過-LESS-js-在瀏覽器中運行"><a href="#1-1-透過-LESS-js-在瀏覽器中運行" class="headerlink" title="1.1 透過 LESS.js 在瀏覽器中運行"></a>1.1 透過 LESS.js 在瀏覽器中運行</h3><p>這種方式適合開發環境，但不建議在正式環境中使用，因為它會在瀏覽器端進行編譯，影響效能。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LESS 測試<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.less&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/less.js/4.1.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello LESS!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-透過-Node-js-編譯-LESS"><a href="#1-2-透過-Node-js-編譯-LESS" class="headerlink" title="1.2 透過 Node.js 編譯 LESS"></a>1.2 透過 Node.js 編譯 LESS</h3><p>如果你希望在開發環境中預先編譯 LESS，則可以使用 npm 安裝 LESS：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure>

<p>然後使用以下指令將 <code>.less</code> 文件編譯為 <code>.css</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lessc styles.less styles.css</span><br></pre></td></tr></table></figure>

<p>這樣就能夠將 LESS 轉換為 CSS，並直接在 HTML 中引用 <code>styles.css</code>。</p>
<hr>
<h2 id="2-LESS-的基本語法"><a href="#2-LESS-的基本語法" class="headerlink" title="2. LESS 的基本語法"></a>2. LESS 的基本語法</h2><h3 id="2-1-變數（Variables）"><a href="#2-1-變數（Variables）" class="headerlink" title="2.1 變數（Variables）"></a>2.1 變數（Variables）</h3><p>LESS 允許使用變數來儲存顏色、字型大小、間距等值，方便統一管理樣式。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@primary-color:</span> <span class="number">#3498db</span>;</span><br><span class="line"><span class="variable">@font-size:</span> <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-嵌套（Nesting）"><a href="#2-2-嵌套（Nesting）" class="headerlink" title="2.2 嵌套（Nesting）"></a>2.2 嵌套（Nesting）</h3><p>LESS 允許使用嵌套的方式來撰寫 CSS，這樣可以清楚地表示層級關係。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">text-decoration</span>: none;</span><br><span class="line">                <span class="attribute">color</span>: white;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-混合（Mixins）"><a href="#2-3-混合（Mixins）" class="headerlink" title="2.3 混合（Mixins）"></a>2.3 混合（Mixins）</h3><p>混合（Mixin）類似於函式，可以定義一組樣式，並在多個地方重複使用。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="selector-class">.border-radius</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-運算（Operations）"><a href="#2-4-運算（Operations）" class="headerlink" title="2.4 運算（Operations）"></a>2.4 運算（Operations）</h3><p>LESS 支援數學運算，可以用來計算尺寸、顏色等。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base-size:</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@base-size</span> * <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@base-size</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">@base-size</span> + <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-繼承（Extend）"><a href="#2-5-繼承（Extend）" class="headerlink" title="2.5 繼承（Extend）"></a>2.5 繼承（Extend）</h3><p>LESS 提供 <code>extend</code> 功能，允許一個選擇器繼承另一個選擇器的樣式。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.message);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#dff0d8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span>,</span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#dff0d8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-進階功能"><a href="#3-進階功能" class="headerlink" title="3. 進階功能"></a>3. 進階功能</h2><h3 id="3-1-運用函式（Functions）"><a href="#3-1-運用函式（Functions）" class="headerlink" title="3.1 運用函式（Functions）"></a>3.1 運用函式（Functions）</h3><p>LESS 提供許多內建函式，例如 <code>lighten()</code>、<code>darken()</code>、<code>fadeout()</code> 等來調整顏色透明度、亮度等。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@main-color:</span> <span class="number">#3498db</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@main-color</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">darken</span>(<span class="variable">@main-color</span>, <span class="number">10%</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">lighten</span>(<span class="variable">@main-color</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#217dbb</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5dade2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-迴圈（Loops）"><a href="#3-2-迴圈（Loops）" class="headerlink" title="3.2 迴圈（Loops）"></a>3.2 迴圈（Loops）</h3><p>LESS 允許使用 <code>each()</code> 來迭代陣列，或使用 <code>for</code> 來執行迴圈。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@colors:</span> red, green, blue;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.each</span>(<span class="variable">@colors</span>, &#123;</span><br><span class="line">    <span class="selector-class">.box-</span><span class="variable">@&#123;value&#125;</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="variable">@value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-green</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-blue</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-延遲運算（Lazy-Evaluation）"><a href="#3-3-延遲運算（Lazy-Evaluation）" class="headerlink" title="3.3 延遲運算（Lazy Evaluation）"></a>3.3 延遲運算（Lazy Evaluation）</h3><p>LESS 變數的值在運算時才會解析，因此可以動態變更變數內容。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@theme-color:</span> <span class="variable">@primary-color</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@theme-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣如果稍後更改 <code>@primary-color</code>，<code>@theme-color</code> 也會自動更新。</p>
<hr>
<h2 id="4-結論"><a href="#4-結論" class="headerlink" title="4. 結論"></a>4. 結論</h2><p>LESS 透過變數、嵌套、混合、運算等功能，大大提升了 CSS 的可維護性與開發效率。建議開發者透過 Node.js 進行 LESS 編譯，避免在瀏覽器端執行影響效能。透過 LESS，樣式表變得更具結構化，讓前端開發更為靈活高效。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
        <tag>SCSS</tag>
        <tag>LESS</tag>
      </tags>
  </entry>
  <entry>
    <title>網站效能診斷入門教學：Lighthouse、Chrome DevTools 與 WebPageTest 實戰指南 | 學習筆記</title>
    <url>/2024/03/20/learning-notes-lighthouse-chrome-devtools-web-page-test-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>現今網站的使用者體驗與載入速度息息相關，無論是 SEO 排名、使用者留存率或轉換率，都受到頁面效能影響。為了協助開發者精準找出網站瓶頸，Google 與其他組織提供了多種強大的診斷工具，其中最常用且具代表性的就是 Lighthouse、Chrome DevTools 與 WebPageTest。</p>
<p>本篇教學筆記將介紹這三種工具的基礎使用方法與診斷技巧，幫助我們從初學者也能迅速上手，實際分析與優化網站效能。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><h3 id="一、Lighthouse：全方位效能檢測工具"><a href="#一、Lighthouse：全方位效能檢測工具" class="headerlink" title="一、Lighthouse：全方位效能檢測工具"></a>一、Lighthouse：全方位效能檢測工具</h3><ul>
<li>Google 提供的開源工具，可分析網站效能、可存取性、SEO、最佳實踐等面向</li>
<li>可直接從 Chrome DevTools 或使用 CLI、CI 工具啟用</li>
<li>評分以 0 ～ 100 呈現，並提供具體優化建議</li>
</ul>
<h3 id="二、Chrome-DevTools：開發者內建利器"><a href="#二、Chrome-DevTools：開發者內建利器" class="headerlink" title="二、Chrome DevTools：開發者內建利器"></a>二、Chrome DevTools：開發者內建利器</h3><ul>
<li>即時查看資源載入時間、執行效能、DOM 結構變動與網頁回應</li>
<li>適合追蹤 JavaScript 執行瓶頸、CSS 回流與重繪等細節</li>
<li>提供 Coverage 與 Performance 分析工具，可定位未使用程式碼與長任務</li>
</ul>
<h3 id="三、WebPageTest：真實環境模擬工具"><a href="#三、WebPageTest：真實環境模擬工具" class="headerlink" title="三、WebPageTest：真實環境模擬工具"></a>三、WebPageTest：真實環境模擬工具</h3><ul>
<li>可選擇不同地區、裝置與網路條件進行測試，模擬真實用戶情境</li>
<li>顯示詳細瀏覽器載入瀑布圖與視覺呈現速度</li>
<li>適合做跨國網站或行動裝置載入效能的驗證</li>
</ul>
<hr>
<h2 id="實際範例操作"><a href="#實際範例操作" class="headerlink" title="實際範例操作"></a>實際範例操作</h2><p>以下以一個虛擬電商網站首頁為例，展示如何使用三種工具進行效能診斷：</p>
<hr>
<h3 id="一、使用-Lighthouse-快速評估整體效能"><a href="#一、使用-Lighthouse-快速評估整體效能" class="headerlink" title="一、使用 Lighthouse 快速評估整體效能"></a>一、使用 Lighthouse 快速評估整體效能</h3><ol>
<li>首先，開啟 Chrome，瀏覽欲診斷的頁面</li>
<li>按下 <code>F12</code> 或右鍵「檢查」開啟開發者工具</li>
<li>點選上方分頁中的「Lighthouse」</li>
<li>選擇測試裝置類型（建議選 Mobile）與檢測類型（建議全選）</li>
<li>點擊「Generate report」開始分析</li>
</ol>
<h4 id="分析結果："><a href="#分析結果：" class="headerlink" title="分析結果："></a>分析結果：</h4><ul>
<li><p><strong>Performance</strong> 得分僅有 45，顯示首次繪製（FCP）與最大內容繪製（LCP）時間過長</p>
</li>
<li><p>建議項目包含：</p>
<ul>
<li>移除未使用 JavaScript（節省 800KB）</li>
<li>延遲載入非關鍵第三方資源</li>
<li>圖片未壓縮且未啟用 lazy loading</li>
</ul>
</li>
</ul>
<hr>
<h3 id="二、使用-Chrome-DevTools-找出瓶頸細節"><a href="#二、使用-Chrome-DevTools-找出瓶頸細節" class="headerlink" title="二、使用 Chrome DevTools 找出瓶頸細節"></a>二、使用 Chrome DevTools 找出瓶頸細節</h3><h4 id="使用-Network-分頁觀察資源載入："><a href="#使用-Network-分頁觀察資源載入：" class="headerlink" title="使用 Network 分頁觀察資源載入："></a>使用 Network 分頁觀察資源載入：</h4><ol>
<li><p>開啟「Network」分頁並刷新頁面</p>
</li>
<li><p>可看到：</p>
<ul>
<li>主頁面共載入 150 多個資源</li>
<li>初始 JavaScript bundle 超過 2MB</li>
<li>字體與圖片資源沒有使用快取（Status 200）</li>
</ul>
</li>
</ol>
<h4 id="使用-Performance-分頁錄製頁面加載過程："><a href="#使用-Performance-分頁錄製頁面加載過程：" class="headerlink" title="使用 Performance 分頁錄製頁面加載過程："></a>使用 Performance 分頁錄製頁面加載過程：</h4><ol>
<li><p>點選「Performance」分頁，按下「Record」</p>
</li>
<li><p>刷新頁面並等待數秒，按下「Stop」</p>
</li>
<li><p>分析結果顯示：</p>
<ul>
<li>主執行緒中有多個長任務（超過 50ms）</li>
<li>某第三方追蹤腳本佔用主執行緒 600ms</li>
<li>大量 DOM 節點修改導致 Layout Shift（CLS 分數高）</li>
</ul>
</li>
</ol>
<h4 id="使用-Coverage-分頁掃描未使用程式碼："><a href="#使用-Coverage-分頁掃描未使用程式碼：" class="headerlink" title="使用 Coverage 分頁掃描未使用程式碼："></a>使用 Coverage 分頁掃描未使用程式碼：</h4><ol>
<li><p>使用 <code>Ctrl+Shift+P</code> 開啟命令列</p>
</li>
<li><p>輸入「Coverage」並啟用功能</p>
</li>
<li><p>點選「Reload &amp; Start Capturing Coverage」</p>
</li>
<li><p>結果顯示：</p>
<ul>
<li>主要 CSS 檔案使用率僅 18%</li>
<li>JavaScript 檔案使用率 35% 左右</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、使用-WebPageTest-模擬不同環境下的體驗"><a href="#三、使用-WebPageTest-模擬不同環境下的體驗" class="headerlink" title="三、使用 WebPageTest 模擬不同環境下的體驗"></a>三、使用 WebPageTest 模擬不同環境下的體驗</h3><ol>
<li>進入 <a href="https://www.webpagetest.org/">https://www.webpagetest.org</a></li>
<li>輸入目標網站網址，選擇測試地點（如東京）與設備（如 Android + 3G 網路）</li>
<li>點擊「Start Test」</li>
</ol>
<h4 id="分析結果：-1"><a href="#分析結果：-1" class="headerlink" title="分析結果："></a>分析結果：</h4><ul>
<li><strong>First Byte Time</strong> 達 1.2 秒，伺服器回應偏慢</li>
<li><strong>Speed Index</strong> 高達 6500，顯示可視畫面建立時間過長</li>
<li>瀑布圖顯示首頁載入依賴超過 50 個 JS 檔案，部分為同步載入</li>
</ul>
<hr>
<h2 id="總結與行動建議"><a href="#總結與行動建議" class="headerlink" title="總結與行動建議"></a>總結與行動建議</h2><p>網站效能優化並非一次性的修補，而是需要透過持續監控與工具診斷的長期工程。Lighthouse 提供了入門評估的方向，Chrome DevTools 協助你深入定位細節，WebPageTest 則讓你檢視在真實用戶情境中的行為。</p>
<p>建議每次上線新功能或導入第三方資源後，皆定期進行這三種工具的檢測，確保網站在不同網路、不同裝置下都有良好的使用者體驗。</p>
]]></content>
      <tags>
        <tag>Lighthouse</tag>
        <tag>Chrome DevTools</tag>
        <tag>WebPageTest</tag>
        <tag>網站效能</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Lighthouse 介紹與入門教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-lighthouse-intro-tutorial/</url>
    <content><![CDATA[<h3 id="一、什麼是-Lighthouse？"><a href="#一、什麼是-Lighthouse？" class="headerlink" title="一、什麼是 Lighthouse？"></a>一、什麼是 Lighthouse？</h3><p><strong>Google Lighthouse</strong> 是 Google 開發的開源自動化工具，主要用來評估網頁的品質，包含 <strong>效能 (Performance)、無障礙 (Accessibility)、最佳化 (Best Practices)、SEO、漸進式網頁應用 (PWA)</strong> 等五大面向。透過 Lighthouse，開發者可以快速找到網站問題與優化建議，幫助網站在使用者體驗與搜尋引擎上表現更好。</p>
<p>Lighthouse 可以透過以下方式執行：</p>
<ul>
<li><strong>Chrome DevTools</strong>（瀏覽器內建）</li>
<li><strong>Node.js CLI</strong>（命令列工具）</li>
<li><strong>Lighthouse CI</strong>（持續整合工具）</li>
<li><strong>Web 版</strong>（<a href="https://pagespeed.web.dev/%EF%BC%89">https://pagespeed.web.dev/）</a></li>
</ul>
<p>本教學以 <strong>Chrome DevTools</strong> 為主，搭配 <strong>命令列工具</strong>輔助說明。</p>
<hr>
<h3 id="二、如何在-Chrome-使用-Lighthouse"><a href="#二、如何在-Chrome-使用-Lighthouse" class="headerlink" title="二、如何在 Chrome 使用 Lighthouse"></a>二、如何在 Chrome 使用 Lighthouse</h3><h4 id="1-開啟-Chrome-DevTools"><a href="#1-開啟-Chrome-DevTools" class="headerlink" title="1. 開啟 Chrome DevTools"></a>1. 開啟 Chrome DevTools</h4><ul>
<li>使用 Chrome 瀏覽器打開我們想分析的網站</li>
<li>按下 <code>F12</code> 或 <code>Ctrl+Shift+I</code> (Mac: <code>Cmd+Option+I</code>) 開啟 DevTools</li>
<li>點選 <strong>「Lighthouse」</strong> 分頁（如果沒有看到，點選 <code>&gt;&gt;</code> 更多選項即可）</li>
</ul>
<h4 id="2-設定-Lighthouse-報告"><a href="#2-設定-Lighthouse-報告" class="headerlink" title="2. 設定 Lighthouse 報告"></a>2. 設定 Lighthouse 報告</h4><p>在 Lighthouse 分頁中，可以看到幾個選項：</p>
<ul>
<li><strong>Categories</strong>：選擇要測試的項目（預設全選）</li>
<li><strong>Device</strong>：選擇模擬裝置（Mobile 或 Desktop）</li>
</ul>
<p>一般來說，建議從 <strong>Mobile</strong> 開始測試，因為 Google 搜尋主要使用行動端指標作為排名依據。</p>
<h4 id="3-開始產生報告"><a href="#3-開始產生報告" class="headerlink" title="3. 開始產生報告"></a>3. 開始產生報告</h4><p>設定好後，點擊 <strong>「Analyze page load」</strong>（或「Generate report」），Lighthouse 會開始分析。分析過程會自動重新載入頁面並執行模擬測試，過程大約 30 秒至 1 分鐘。</p>
<p>完成後，會生成一份報告，包含分數、每個項目的問題說明與建議。</p>
<hr>
<h3 id="三、報告解讀與優化建議"><a href="#三、報告解讀與優化建議" class="headerlink" title="三、報告解讀與優化建議"></a>三、報告解讀與優化建議</h3><p>以下為報告中幾個重要指標：</p>
<ol>
<li><p><strong>Performance（效能）</strong></p>
<ul>
<li>**First Contentful Paint (FCP)**：第一次內容繪製時間</li>
<li>**Largest Contentful Paint (LCP)**：主要內容繪製完成時間</li>
<li>**Time to Interactive (TTI)**：頁面可互動時間</li>
<li>**Cumulative Layout Shift (CLS)**：累積版面位移</li>
</ul>
</li>
</ol>
<p><strong>優化方向範例</strong>：</p>
<ul>
<li>壓縮圖片（使用 WebP）</li>
<li>延遲非必要 JavaScript 載入（lazy loading）</li>
<li>使用 CSS&#x2F;JS minify 工具</li>
<li>啟用瀏覽器快取 (cache)</li>
</ul>
<ol start="2">
<li><p><strong>Accessibility（無障礙）</strong></p>
<ul>
<li>圖片是否有 <code>alt</code> 屬性</li>
<li>表單元素是否有 <code>label</code></li>
<li>按鈕是否有可辨識的名稱</li>
</ul>
</li>
</ol>
<p><strong>優化方向範例</strong>：</p>
<ul>
<li>確保所有互動元件有適當的 ARIA 標籤</li>
<li>保持足夠的色彩對比</li>
</ul>
<ol start="3">
<li><p><strong>Best Practices（最佳化）</strong></p>
<ul>
<li>是否使用 HTTPS</li>
<li>是否避免過時的 API</li>
<li>檢查瀏覽器安全設定</li>
</ul>
</li>
<li><p><strong>SEO</strong></p>
<ul>
<li>是否有 <code>meta</code> 描述</li>
<li>是否設定 <code>&lt;title&gt;</code></li>
<li>是否有 robots.txt</li>
<li>頁面是否可被索引</li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、實際範例：分析一個網頁"><a href="#四、實際範例：分析一個網頁" class="headerlink" title="四、實際範例：分析一個網頁"></a>四、實際範例：分析一個網頁</h3><p>假設我們要分析 **<a href="https://example.com**，操作步驟如下：">https://example.com**，操作步驟如下：</a></p>
<h4 id="使用-Chrome-DevTools："><a href="#使用-Chrome-DevTools：" class="headerlink" title="使用 Chrome DevTools："></a>使用 Chrome DevTools：</h4><ol>
<li>用 Chrome 瀏覽 <a href="https://example.com/">https://example.com</a></li>
<li>開啟 DevTools → Lighthouse 分頁</li>
<li>選擇 <strong>Mobile</strong> + 全部 Categories</li>
<li>點擊 <strong>Analyze page load</strong></li>
</ol>
<p>執行後，我們會看到一份報告，例如：</p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Score</th>
</tr>
</thead>
<tbody><tr>
<td>Performance</td>
<td>68</td>
</tr>
<tr>
<td>Accessibility</td>
<td>92</td>
</tr>
<tr>
<td>Best Practices</td>
<td>85</td>
</tr>
<tr>
<td>SEO</td>
<td>90</td>
</tr>
</tbody></table>
<p>針對效能分數 68，Lighthouse 會提出具體建議，例如：</p>
<ul>
<li>“Serve images in next-gen formats” → 建議將 JPG&#x2F;PNG 圖片轉換為 WebP</li>
<li>“Eliminate render-blocking resources” → 建議將 CSS&#x2F;JS 非同步或延遲載入</li>
</ul>
<p>此時，我們可以採取以下修正：</p>
<ul>
<li>使用 <strong>ImageMagick</strong> 或 <strong>Squoosh</strong> 等工具壓縮並轉換圖片</li>
<li>加上 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 標籤預先載入必要資源</li>
<li>將 <code>script</code> 標籤加上 <code>defer</code> 屬性</li>
</ul>
<hr>
<h3 id="五、使用命令列執行-Lighthouse"><a href="#五、使用命令列執行-Lighthouse" class="headerlink" title="五、使用命令列執行 Lighthouse"></a>五、使用命令列執行 Lighthouse</h3><p>如果需要自動化測試或整合到 CI&#x2F;CD，可以用 Node.js 安裝 Lighthouse：</p>
<h4 id="1-安裝"><a href="#1-安裝" class="headerlink" title="1. 安裝"></a>1. 安裝</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g lighthouse</span><br></pre></td></tr></table></figure>

<h4 id="2-執行"><a href="#2-執行" class="headerlink" title="2. 執行"></a>2. 執行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lighthouse https://example.com --view</span><br></pre></td></tr></table></figure>

<p>執行後會產生一個 HTML 報告並自動打開。</p>
<p>可以用額外參數調整輸出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lighthouse https://example.com --output json --output html --output-path ./report.html --preset desktop</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="六、實務應用與建議"><a href="#六、實務應用與建議" class="headerlink" title="六、實務應用與建議"></a>六、實務應用與建議</h3><ul>
<li><strong>開發階段就導入</strong>：開發過程中就應該多次使用 Lighthouse，而不是到上線前才檢查。</li>
<li><strong>設定目標分數</strong>：通常建議 Mobile 效能達到 80 分以上。</li>
<li><strong>結合 CI&#x2F;CD</strong>：用 Lighthouse CI 在部署時自動檢查網站品質，確保每次更新不會退步。</li>
</ul>
<p>如果是大型專案，也可以與 <strong>WebPageTest、PageSpeed Insights</strong> 搭配，取得更廣泛的性能數據。</p>
<hr>
<h3 id="七、總結"><a href="#七、總結" class="headerlink" title="七、總結"></a>七、總結</h3><p>Google Lighthouse 是一個功能強大的網站品質檢測工具，不僅能協助提升效能，還能兼顧 SEO、無障礙與最佳實務。無論是初學者或資深前端工程師，都建議將 Lighthouse 納入開發流程中，定期檢查與優化，為網站帶來更好的使用者體驗與搜尋排名。</p>
<p>透過本篇教學，相信我們已能夠：</p>
<ol>
<li>知道如何使用 Chrome DevTools 產生報告</li>
<li>理解報告中指標與優化方式</li>
<li>用命令列執行 Lighthouse 以自動化分析</li>
</ol>
<p>後續可以根據團隊需求，進一步探索 Lighthouse CI、API 或與其他性能工具整合的進階應用。</p>
]]></content>
      <tags>
        <tag>Jest</tag>
        <tag>ES Module</tag>
      </tags>
  </entry>
  <entry>
    <title>LINE Pay API 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/16/learning-notes-line-pay-api-intro-tutorial/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在電子商務與線上交易日益普及的今天，提供穩定又方便的金流服務已成為網站與應用程式不可或缺的一環。LINE Pay 是由 LINE Corporation 推出的行動支付平台，除了在線上與實體店面支援消費者付款外，也提供開發者 API 介面來整合第三方商務服務，使開發者可以在網站或應用程式中無縫串接付款功能。</p>
<p>本篇教學筆記將帶你了解 LINE Pay API 的基本觀念、運作流程，以及如何透過簡單的實作實現付款功能，協助你更快進入金流整合領域。</p>
<hr>
<h2 id="二、重點摘要"><a href="#二、重點摘要" class="headerlink" title="二、重點摘要"></a>二、重點摘要</h2><ul>
<li><p>LINE Pay 是 LINE 提供的電子支付平台，可整合至網站或 App。</p>
</li>
<li><p>LINE Pay API 採用 RESTful 設計，以 HTTPS POST&#x2F;GET 傳遞 JSON 格式。</p>
</li>
<li><p>API 主要分為以下幾個步驟：</p>
<ul>
<li><code>Request</code>：建立付款請求</li>
<li><code>Redirect</code>：用戶跳轉至 LINE Pay 完成付款</li>
<li><code>Confirm</code>：付款成功後確認交易</li>
</ul>
</li>
<li><p>使用前需在 <a href="https://pay.line.me/tw/developers">LINE Pay 商戶後台</a> 申請帳戶與 Channel。</p>
</li>
<li><p>API 使用需要 Channel ID、Channel Secret Key，以及測試或正式的 LINE Pay API Endpoint。</p>
</li>
<li><p>所有請求需附加簽章（Signature Header）以進行授權與安全驗證。</p>
</li>
<li><p>支援多種付款方式（LINE Pay 錢包、信用卡、優惠券等）。</p>
</li>
</ul>
<hr>
<h2 id="三、整體交易流程圖"><a href="#三、整體交易流程圖" class="headerlink" title="三、整體交易流程圖"></a>三、整體交易流程圖</h2><ol>
<li>使用者在你的網站點擊「立即付款」</li>
<li>後端呼叫 <code>request</code> API 建立交易</li>
<li>將使用者導向 LINE Pay 的付款畫面</li>
<li>用戶完成付款後，LINE 會導回你設定的 redirect URL</li>
<li>你後端呼叫 <code>confirm</code> API 完成交易驗證</li>
</ol>
<hr>
<h2 id="四、準備工作"><a href="#四、準備工作" class="headerlink" title="四、準備工作"></a>四、準備工作</h2><ol>
<li><strong>註冊商戶帳號</strong>：至 <a href="https://pay.line.me/tw/developers">LINE Pay Developer Center</a> 申請開發者帳號與商戶帳戶。</li>
<li><strong>建立 Channel</strong>：建立 LINE Pay Channel 取得 <code>Channel ID</code> 與 <code>Channel Secret Key</code>。</li>
<li><strong>設定 Redirect URL</strong>：設置付款成功&#x2F;失敗的回傳網址。</li>
<li><strong>測試環境</strong>：LINE Pay 提供 Sandbox 環境（沙盒），可模擬交易流程。</li>
</ol>
<hr>
<h2 id="五、實際範例（使用-Python-Flask-示範）"><a href="#五、實際範例（使用-Python-Flask-示範）" class="headerlink" title="五、實際範例（使用 Python Flask 示範）"></a>五、實際範例（使用 Python Flask 示範）</h2><h3 id="1-建立付款請求：-create-payment"><a href="#1-建立付款請求：-create-payment" class="headerlink" title="1. 建立付款請求：/create_payment"></a>1. 建立付款請求：<code>/create_payment</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, json, time, hashlib, hmac</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">CHANNEL_ID = <span class="string">&#x27;你的Channel ID&#x27;</span></span><br><span class="line">CHANNEL_SECRET = <span class="string">&#x27;你的Secret Key&#x27;</span></span><br><span class="line">LINE_PAY_ENDPOINT = <span class="string">&#x27;https://sandbox-api-pay.line.me&#x27;</span></span><br><span class="line">CONFIRM_URL = <span class="string">&#x27;https://你的網站.com/confirm_payment&#x27;</span></span><br><span class="line">RETURN_HOST = <span class="string">&#x27;https://你的網站.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_signature</span>(<span class="params">uri, body, nonce, secret</span>):</span><br><span class="line">    message = secret.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    raw = <span class="string">f&quot;<span class="subst">&#123;secret&#125;</span><span class="subst">&#123;uri&#125;</span><span class="subst">&#123;json.dumps(body, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))&#125;</span><span class="subst">&#123;nonce&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> hmac.new(message, raw.encode(<span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha256).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create_payment&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_payment</span>():</span><br><span class="line">    uri = <span class="string">&#x27;/v3/payments/request&#x27;</span></span><br><span class="line">    url = <span class="string">f&quot;<span class="subst">&#123;LINE_PAY_ENDPOINT&#125;</span><span class="subst">&#123;uri&#125;</span>&quot;</span></span><br><span class="line">    nonce = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-LINE-ChannelId&#x27;</span>: CHANNEL_ID,</span><br><span class="line">        <span class="string">&#x27;X-LINE-Authorization-Nonce&#x27;</span>: nonce,</span><br><span class="line">        <span class="string">&#x27;X-LINE-Authorization&#x27;</span>: generate_signature(uri, &#123;</span><br><span class="line">            <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;TWD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;orderId&quot;</span>: <span class="string">&quot;ORDER123456&quot;</span>,</span><br><span class="line">            <span class="string">&quot;packages&quot;</span>: [&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;商品&quot;</span>,</span><br><span class="line">                <span class="string">&quot;products&quot;</span>: [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;測試商品&quot;</span>, <span class="string">&quot;quantity&quot;</span>: <span class="number">1</span>, <span class="string">&quot;price&quot;</span>: <span class="number">100</span>&#125;]</span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="string">&quot;redirectUrls&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;confirmUrl&quot;</span>: CONFIRM_URL,</span><br><span class="line">                <span class="string">&quot;cancelUrl&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;RETURN_HOST&#125;</span>/cancel&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, nonce, CHANNEL_SECRET)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;TWD&quot;</span>,</span><br><span class="line">        <span class="string">&quot;orderId&quot;</span>: <span class="string">&quot;ORDER123456&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;商品&quot;</span>,</span><br><span class="line">            <span class="string">&quot;products&quot;</span>: [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;測試商品&quot;</span>, <span class="string">&quot;quantity&quot;</span>: <span class="number">1</span>, <span class="string">&quot;price&quot;</span>: <span class="number">100</span>&#125;]</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">&quot;redirectUrls&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;confirmUrl&quot;</span>: CONFIRM_URL,</span><br><span class="line">            <span class="string">&quot;cancelUrl&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;RETURN_HOST&#125;</span>/cancel&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(url, headers=headers, json=body)</span><br><span class="line">    res_data = res.json()</span><br><span class="line">    payment_url = res_data[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;paymentUrl&#x27;</span>][<span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> redirect(payment_url)</span><br></pre></td></tr></table></figure>

<h3 id="2-完成付款後確認交易：-confirm-payment"><a href="#2-完成付款後確認交易：-confirm-payment" class="headerlink" title="2. 完成付款後確認交易：/confirm_payment"></a>2. 完成付款後確認交易：<code>/confirm_payment</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/confirm_payment&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">confirm_payment</span>():</span><br><span class="line">    transaction_id = request.args.get(<span class="string">&#x27;transactionId&#x27;</span>)</span><br><span class="line">    uri = <span class="string">f&quot;/v3/payments/<span class="subst">&#123;transaction_id&#125;</span>/confirm&quot;</span></span><br><span class="line">    url = <span class="string">f&quot;<span class="subst">&#123;LINE_PAY_ENDPOINT&#125;</span><span class="subst">&#123;uri&#125;</span>&quot;</span></span><br><span class="line">    nonce = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;TWD&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-LINE-ChannelId&#x27;</span>: CHANNEL_ID,</span><br><span class="line">        <span class="string">&#x27;X-LINE-Authorization-Nonce&#x27;</span>: nonce,</span><br><span class="line">        <span class="string">&#x27;X-LINE-Authorization&#x27;</span>: generate_signature(uri, body, nonce, CHANNEL_SECRET)</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url, headers=headers, json=body)</span><br><span class="line">    <span class="keyword">return</span> res.json()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、注意事項"><a href="#六、注意事項" class="headerlink" title="六、注意事項"></a>六、注意事項</h2><ul>
<li>所有請求必須使用 HTTPS。</li>
<li>金額與幣別需與建立交易時一致，否則確認交易會失敗。</li>
<li>建議使用 UUID 或時間戳記作為 <code>orderId</code> 以避免重複。</li>
<li>正式環境與 Sandbox 的 API Endpoint 不同，測試時請使用 sandbox 網址。</li>
</ul>
<hr>
<h2 id="七、總結"><a href="#七、總結" class="headerlink" title="七、總結"></a>七、總結</h2><p>LINE Pay API 提供了強大的付款整合能力，對於電商網站、小型應用或自有服務都有極大的幫助。透過良好的 API 設計與嚴謹的安全驗證，開發者可以快速、安全地建置付款機制。建議開發者先熟悉 sandbox 測試流程，再導入正式環境，以確保交易安全與穩定性。</p>
<p>若你有更多需求，例如分期付款、自動收款、退款等，也可進一步參考官方完整文件：<a href="https://pay.line.me/tw/developers/apis/onlineApis">LINE Pay API 技術文件</a></p>
]]></content>
      <tags>
        <tag>Line Pay API</tag>
        <tag>第三方支付</tag>
        <tag>payment</tag>
      </tags>
  </entry>
  <entry>
    <title>Lodash 介紹與入門教學筆記 | 學習筆記</title>
    <url>/2024/07/01/learning-notes-lodash-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 JavaScript 的開發中，資料處理與函式操作經常需要處理陣列、物件、字串的轉換、搜尋與過濾等需求。儘管 ES6+ 提供了不少內建函式（如 <code>map</code>、<code>filter</code>、<code>reduce</code> 等），但仍有許多情境需要進階或更簡潔的處理方式。</p>
<p>這時候，<strong>Lodash</strong> 就是一個非常實用的工具庫。它是一個提供大量實用函式的 JavaScript 函式庫，能幫助開發者更方便地進行資料操作、提升開發效率與可讀性。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>Lodash 是什麼：</strong></p>
<ul>
<li>一個現代 JavaScript 實用工具庫，專注於資料處理、陣列與物件操作。</li>
<li>模組化設計，可依照需求引入特定函式，減少最終 bundle 大小。</li>
</ul>
</li>
<li><p><strong>使用方式：</strong></p>
<ul>
<li><p>安裝方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install lodash</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入方式（使用 ES6 模組）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>常用函式分類：</strong></p>
<ul>
<li>陣列操作：<code>chunk</code>、<code>compact</code>、<code>difference</code>、<code>uniq</code>、<code>flatten</code> 等</li>
<li>物件操作：<code>get</code>、<code>set</code>、<code>merge</code>、<code>pick</code>、<code>omit</code></li>
<li>函式處理：<code>debounce</code>、<code>throttle</code>、<code>once</code></li>
<li>數學與邏輯判斷：<code>isEmpty</code>、<code>isEqual</code>、<code>clamp</code></li>
<li>字串操作：<code>camelCase</code>、<code>kebabCase</code>、<code>startCase</code></li>
</ul>
</li>
<li><p><strong>優點：</strong></p>
<ul>
<li>API 設計一致，學習曲線平緩</li>
<li>可與原生 JS 無縫搭配</li>
<li>處理巢狀資料與深層結構特別方便</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>以下透過幾個實際範例來展示 Lodash 的常見使用情境與語法。</p>
<h3 id="1-陣列切分：-chunk"><a href="#1-陣列切分：-chunk" class="headerlink" title="1. 陣列切分：_.chunk"></a>1. 陣列切分：<code>_.chunk</code></h3><p>將一個陣列依照固定大小切成多個子陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">chunk</span>(arr, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 輸出：[[1, 2], [3, 4], [5, 6]]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-去除-falsy-值：-compact"><a href="#2-去除-falsy-值：-compact" class="headerlink" title="2. 去除 falsy 值：_.compact"></a>2. 去除 falsy 值：<code>_.compact</code></h3><p>移除陣列中的 <code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code> 和 <code>NaN</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">compact</span>(arr);</span><br><span class="line"><span class="comment">// 輸出：[1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-陣列差集：-difference"><a href="#3-陣列差集：-difference" class="headerlink" title="3. 陣列差集：_.difference"></a>3. 陣列差集：<code>_.difference</code></h3><p>找出第一個陣列中，不存在於其他陣列的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">difference</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 輸出：[1, 4]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-去除重複值：-uniq"><a href="#4-去除重複值：-uniq" class="headerlink" title="4. 去除重複值：_.uniq"></a>4. 去除重複值：<code>_.uniq</code></h3><p>回傳一個不含重複值的新陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">uniq</span>([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 輸出：[2, 1]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-平坦化陣列：-flatten"><a href="#5-平坦化陣列：-flatten" class="headerlink" title="5. 平坦化陣列：_.flatten"></a>5. 平坦化陣列：<code>_.flatten</code></h3><p>將多維陣列的一層扁平化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">flatten</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]]]]);</span><br><span class="line"><span class="comment">// 輸出：[1, 2, [3, [4]]]</span></span><br></pre></td></tr></table></figure>

<p>若要完全扁平化，可使用 <code>flattenDeep</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">flattenDeep</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]]]]);</span><br><span class="line"><span class="comment">// 輸出：[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-取得物件巢狀值：-get"><a href="#6-取得物件巢狀值：-get" class="headerlink" title="6. 取得物件巢狀值：_.get"></a>6. 取得物件巢狀值：<code>_.get</code></h3><p>避免使用多層 <code>obj &amp;&amp; obj.prop</code> 判斷。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">42</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">get</span>(obj, <span class="string">&#x27;a.b.c&#x27;</span>);</span><br><span class="line"><span class="comment">// 輸出：42</span></span><br></pre></td></tr></table></figure>

<p>可設定預設值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">get</span>(obj, <span class="string">&#x27;a.b.d&#x27;</span>, <span class="string">&#x27;not found&#x27;</span>);</span><br><span class="line"><span class="comment">// 輸出：&#x27;not found&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-防抖動（Debounce）：-debounce"><a href="#7-防抖動（Debounce）：-debounce" class="headerlink" title="7. 防抖動（Debounce）：_.debounce"></a>7. 防抖動（Debounce）：<code>_.debounce</code></h3><p>常用於輸入框搜尋防抖，例如搜尋建議：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> search = _.<span class="title function_">debounce</span>(<span class="function">(<span class="params">query</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;搜尋中：&#x27;</span>, query);</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_">search</span>(<span class="string">&#x27;ab&#x27;</span>);</span><br><span class="line"><span class="title function_">search</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">// 只會觸發這次</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="8-函式執行一次：-once"><a href="#8-函式執行一次：-once" class="headerlink" title="8. 函式執行一次：_.once"></a>8. 函式執行一次：<code>_.once</code></h3><p>保證某個函式只執行一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> init = _.<span class="title function_">once</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;只會執行一次的初始化&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"><span class="comment">// 輸出：只會執行一次的初始化</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Lodash 是一個穩定、完整、社群活躍的 JavaScript 工具函式庫，適合用於各種日常資料處理場景。尤其當面對資料轉換、巢狀結構處理、函式優化（如 debounce&#x2F;throttle）等問題時，Lodash 提供了直觀且一致的解法。</p>
<p>若在專案中引入 Lodash 時，建議採用模組化方式僅引入需要的函式，或使用 <a href="https://www.npmjs.com/package/lodash-es">lodash-es（es module 版本）</a> 搭配 Tree Shaking，以減少最終輸出大小。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES Module</tag>
        <tag>Lodash</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端（Micro-Frontend）介紹與入門教學筆記 | 學習筆記</title>
    <url>/2024/12/31/learning-notes-micro-frontend-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隨著前端應用日益複雜、團隊規模擴大，「前端單體應用」（Monolithic Frontend）逐漸面臨維護困難、部署不靈活、開發效率低落等問題。微前端（Micro-Frontend）是一種將大型前端應用拆解為數個獨立子應用的架構設計理念，靈感來自後端的微服務（Microservices）架構。每個子應用可以由不同的團隊獨立開發、部署、維護，並共同組成一個整體的產品。</p>
<p>微前端不是某個框架，而是一種架構模式。它的目標是促進前端大型專案的模組化、團隊分工清晰、技術選型彈性，進而提升整體開發與交付效率。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>定義</strong>：微前端是一種將前端應用拆解為多個獨立子應用的架構設計模式。</p>
</li>
<li><p><strong>目的</strong>：</p>
<ul>
<li>支援大型團隊並行開發</li>
<li>提高部署彈性（單一子應用可獨立上線）</li>
<li>增加技術選擇自由度（不同子應用可使用不同框架）</li>
</ul>
</li>
<li><p><strong>核心概念</strong>：</p>
<ul>
<li>子應用獨立開發、測試與部署</li>
<li>主應用統一載入與整合子應用</li>
<li>子應用可共享部分資源（如登入狀態、UI 元件）</li>
</ul>
</li>
<li><p><strong>常見實作方式</strong>：</p>
<ul>
<li>iframe（早期簡單做法，但 UX 不佳）</li>
<li>Web Component（標準化但整合與溝通略複雜）</li>
<li>JavaScript 插入與渲染（如 single-spa、Module Federation）</li>
</ul>
</li>
<li><p><strong>適用時機</strong>：</p>
<ul>
<li>專案規模大、開發團隊超過 2 組以上</li>
<li>需要支援異步部署與灰階上線</li>
<li>跨框架共存需求（如同時有 React 與 Vue）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="微前端實作方式簡介"><a href="#微前端實作方式簡介" class="headerlink" title="微前端實作方式簡介"></a>微前端實作方式簡介</h2><h3 id="1-iframe（不推薦）"><a href="#1-iframe（不推薦）" class="headerlink" title="1. iframe（不推薦）"></a>1. iframe（不推薦）</h3><p>將子應用放入 <code>iframe</code> 中載入，雖然簡單，但隔離性太強（無法共用狀態、樣式），SEO 和體驗差，不推薦用於現代 Web 專案。</p>
<h3 id="2-Web-Components（中立）"><a href="#2-Web-Components（中立）" class="headerlink" title="2. Web Components（中立）"></a>2. Web Components（中立）</h3><p>透過瀏覽器原生的 Custom Elements 技術（如 <code>my-app-widget</code>），讓子應用變成一個可重用的 HTML 元件，框架中立，但整合難度高。</p>
<h3 id="3-JavaScript-插入與路由分流（主流）"><a href="#3-JavaScript-插入與路由分流（主流）" class="headerlink" title="3. JavaScript 插入與路由分流（主流）"></a>3. JavaScript 插入與路由分流（主流）</h3><p>由主應用動態載入子應用（HTML、JS、CSS），並透過路由或 DOM 控制子應用顯示。可使用像是：</p>
<ul>
<li><a href="https://single-spa.js.org/">single-spa</a></li>
<li><a href="https://webpack.js.org/concepts/module-federation/">Module Federation</a></li>
<li><a href="https://qiankun.umijs.org/">qiankun</a></li>
</ul>
<p>其中 <code>qiankun</code> 是阿里開源的基於 <code>single-spa</code> 的微前端框架，中文文件齊全且上手容易。</p>
<hr>
<h2 id="實際範例：使用-qiankun-快速建立微前端架構"><a href="#實際範例：使用-qiankun-快速建立微前端架構" class="headerlink" title="實際範例：使用 qiankun 快速建立微前端架構"></a>實際範例：使用 qiankun 快速建立微前端架構</h2><h3 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h3><p>目標：建立一個主應用（main-app），載入兩個子應用（react-app、vue-app）</p>
<h3 id="1-安裝-qiankun（主應用）"><a href="#1-安裝-qiankun（主應用）" class="headerlink" title="1. 安裝 qiankun（主應用）"></a>1. 安裝 qiankun（主應用）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install qiankun</span><br></pre></td></tr></table></figure>

<h3 id="2-主應用主體程式碼（main-app-x2F-src-x2F-main-ts）"><a href="#2-主應用主體程式碼（main-app-x2F-src-x2F-main-ts）" class="headerlink" title="2. 主應用主體程式碼（main-app&#x2F;src&#x2F;main.ts）"></a>2. 主應用主體程式碼（main-app&#x2F;src&#x2F;main.ts）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;react-app&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:3001&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#subapp-container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/react&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;vue-app&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:3002&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#subapp-container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/vue&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>

<h3 id="3-主應用-HTML-模板"><a href="#3-主應用-HTML-模板" class="headerlink" title="3. 主應用 HTML 模板"></a>3. 主應用 HTML 模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;subapp-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-子應用需支援-qiankun-的生命週期函式（以-React-為例）"><a href="#4-子應用需支援-qiankun-的生命週期函式（以-React-為例）" class="headerlink" title="4. 子應用需支援 qiankun 的生命週期函式（以 React 為例）"></a>4. 子應用需支援 qiankun 的生命週期函式（以 React 為例）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;React app bootstraped&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-子應用-Webpack-設定（publicPath）"><a href="#5-子應用-Webpack-設定（publicPath）" class="headerlink" title="5. 子應用 Webpack 設定（publicPath）"></a>5. 子應用 Webpack 設定（publicPath）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;http://localhost:3001/&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="微前端的挑戰與注意事項"><a href="#微前端的挑戰與注意事項" class="headerlink" title="微前端的挑戰與注意事項"></a>微前端的挑戰與注意事項</h2><ul>
<li><strong>樣式隔離</strong>：CSS 必須避免衝突，可搭配 CSS Modules、Scoped CSS。</li>
<li><strong>狀態共享</strong>：登入資訊、使用者資料等需透過 global event 或共享 storage 處理。</li>
<li><strong>路由協調</strong>：子應用與主應用須協調 route 設計，避免相互干擾。</li>
<li><strong>部署整合</strong>：CI&#x2F;CD pipeline 需考慮子應用與主應用的獨立部署與測試。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>微前端是一種極具彈性的架構設計理念，適合中大型團隊協作、複雜前端系統的模組化開發。不過它也帶來額外的技術成本與整合挑戰。在決定導入微前端前，應評估專案規模、開發團隊結構與維運資源是否適合。</p>
<p>實作上，建議可從單一框架開始（如 React + qiankun），逐步拆分模組與部署機制，再逐步進化為多框架混合的微前端架構，避免過早複雜化系統。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>npm</tag>
        <tag>微前端</tag>
        <tag>Micro-Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/16/learning-notes-mongodb-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代應用程式開發中，資料儲存已不再侷限於傳統的關聯式資料庫（如 MySQL、PostgreSQL）。特別是在處理非結構化資料、需要高延展性或頻繁 schema 變動的應用場景中，<strong>NoSQL 資料庫</strong>逐漸成為主流選擇。</p>
<p>其中，<strong>MongoDB</strong> 是最受歡迎的 NoSQL 資料庫之一。它採用<code>文件型（Document-Oriented）</code>結構，使用 JSON 類型格式（實際為 BSON）儲存資料，讓開發者能更靈活地設計資料模型與操作資料。MongoDB 強調可擴展性、彈性資料結構與高效查詢能力，廣泛應用於 Web 開發、物聯網、大數據處理等領域。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>MongoDB 是什麼？</strong></p>
<ul>
<li>開源的 NoSQL 文件資料庫，使用 BSON 格式儲存資料。</li>
<li>資料以「資料庫 → 集合（Collection）→ 文件（Document）」的層級組織。</li>
<li>每個文件（Document）類似於 JSON 結構，支援巢狀資料與陣列。</li>
</ul>
</li>
<li><p><strong>主要特性</strong></p>
<ul>
<li>文件型資料儲存（更彈性且接近開發者熟悉的物件結構）</li>
<li>無需預先定義 Schema，可動態變更欄位</li>
<li>垂直與水平延展能力佳</li>
<li>提供複寫與分片支援（Replica Set、Sharding）</li>
<li>強大的查詢語言，支援索引、聚合、全文搜尋</li>
</ul>
</li>
<li><p><strong>應用場景</strong></p>
<ul>
<li>RESTful API 後端儲存（如 Node.js + Express 專案）</li>
<li>快速原型設計與資料模型測試</li>
<li>高並發讀寫需求（例如留言板、商品評論系統）</li>
<li>資料格式變動頻繁的場景（如 IoT 裝置紀錄）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="安裝與啟動"><a href="#安裝與啟動" class="headerlink" title="安裝與啟動"></a>安裝與啟動</h2><h3 id="1-安裝-MongoDB（本機）"><a href="#1-安裝-MongoDB（本機）" class="headerlink" title="1. 安裝 MongoDB（本機）"></a>1. 安裝 MongoDB（本機）</h3><p><strong>Mac 使用者（使用 Homebrew）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br><span class="line">brew install mongodb-community@7.0</span><br><span class="line">brew services start mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure>

<p><strong>Windows &#x2F; Linux：</strong><br>可前往 <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a> 下載對應版本。</p>
<h3 id="2-啟動-MongoDB"><a href="#2-啟動-MongoDB" class="headerlink" title="2. 啟動 MongoDB"></a>2. 啟動 MongoDB</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure>

<p>啟動成功後，預設會在 <code>mongodb://localhost:27017</code> 提供本地服務。</p>
<h3 id="3-開啟-Mongo-Shell（或使用-MongoDB-Compass-GUI）"><a href="#3-開啟-Mongo-Shell（或使用-MongoDB-Compass-GUI）" class="headerlink" title="3. 開啟 Mongo Shell（或使用 MongoDB Compass GUI）"></a>3. 開啟 Mongo Shell（或使用 MongoDB Compass GUI）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongosh</span><br></pre></td></tr></table></figure>

<p>進入後會看到互動式 shell 環境，開始操作你的資料庫。</p>
<hr>
<h2 id="MongoDB-基本操作（Shell-範例）"><a href="#MongoDB-基本操作（Shell-範例）" class="headerlink" title="MongoDB 基本操作（Shell 範例）"></a>MongoDB 基本操作（Shell 範例）</h2><h3 id="1-建立-x2F-切換資料庫"><a href="#1-建立-x2F-切換資料庫" class="headerlink" title="1. 建立 &#x2F; 切換資料庫"></a>1. 建立 &#x2F; 切換資料庫</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use blog</span><br></pre></td></tr></table></figure>

<h3 id="2-建立集合（Collection）與新增文件（Document）"><a href="#2-建立集合（Collection）與新增文件（Document）" class="headerlink" title="2. 建立集合（Collection）與新增文件（Document）"></a>2. 建立集合（Collection）與新增文件（Document）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">posts</span>.<span class="title function_">insertOne</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;MongoDB 入門教學&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;KD&#x27;</span>,</span><br><span class="line">  <span class="attr">tags</span>: [<span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;nosql&#x27;</span>, <span class="string">&#x27;mongodb&#x27;</span>],</span><br><span class="line">  <span class="attr">published</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">created_at</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>插入文件時自動建立集合與資料庫。</p>
</blockquote>
<h3 id="3-查詢文件"><a href="#3-查詢文件" class="headerlink" title="3. 查詢文件"></a>3. 查詢文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">posts</span>.<span class="title function_">find</span>();</span><br><span class="line">db.<span class="property">posts</span>.<span class="title function_">find</span>(&#123; <span class="attr">author</span>: <span class="string">&#x27;KD&#x27;</span> &#125;);</span><br><span class="line">db.<span class="property">posts</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">published</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>支援條件、邏輯查詢、排序、分頁等功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">posts</span>.<span class="title function_">find</span>(&#123; <span class="attr">published</span>: <span class="literal">true</span> &#125;).<span class="title function_">sort</span>(&#123; <span class="attr">created_at</span>: -<span class="number">1</span> &#125;).<span class="title function_">limit</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-更新文件"><a href="#4-更新文件" class="headerlink" title="4. 更新文件"></a>4. 更新文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">posts</span>.<span class="title function_">updateOne</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;MongoDB 入門教學&#x27;</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="attr">published</span>: <span class="literal">false</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<p>支援 <code>$set</code>, <code>$inc</code>, <code>$push</code>, <code>$unset</code> 等更新操作符。</p>
<h3 id="5-刪除文件"><a href="#5-刪除文件" class="headerlink" title="5. 刪除文件"></a>5. 刪除文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">posts</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;MongoDB 入門教學&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用-Mongoose-操作（Node-js-範例）"><a href="#使用-Mongoose-操作（Node-js-範例）" class="headerlink" title="使用 Mongoose 操作（Node.js 範例）"></a>使用 Mongoose 操作（Node.js 範例）</h2><p>在 Node.js 專案中，常使用 <code>mongoose</code> 封裝操作 MongoDB。</p>
<h3 id="1-安裝套件"><a href="#1-安裝套件" class="headerlink" title="1. 安裝套件"></a>1. 安裝套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>

<h3 id="2-建立連線與定義模型"><a href="#2-建立連線與定義模型" class="headerlink" title="2. 建立連線與定義模型"></a>2. 建立連線與定義模型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/blog&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">tags</span>: [<span class="title class_">String</span>],</span><br><span class="line">  <span class="attr">published</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">created_at</span>: &#123; <span class="attr">type</span>: <span class="title class_">Date</span>, <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>, postSchema);</span><br></pre></td></tr></table></figure>

<h3 id="3-實際使用範例"><a href="#3-實際使用範例" class="headerlink" title="3. 實際使用範例"></a>3. 實際使用範例</h3><p><strong>新增資料：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newPost = <span class="keyword">new</span> <span class="title class_">Post</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;用 Node.js 操作 MongoDB&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;KD&#x27;</span>,</span><br><span class="line">  <span class="attr">tags</span>: [<span class="string">&#x27;nodejs&#x27;</span>, <span class="string">&#x27;mongodb&#x27;</span>],</span><br><span class="line">  <span class="attr">published</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> newPost.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure>

<p><strong>查詢資料：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="title class_">Post</span>.<span class="title function_">find</span>(&#123; <span class="attr">published</span>: <span class="literal">true</span> &#125;).<span class="title function_">limit</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p><strong>更新資料：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title class_">Post</span>.<span class="title function_">updateOne</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;用 Node.js 操作 MongoDB&#x27;</span> &#125;, &#123; <span class="attr">published</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>刪除資料：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title class_">Post</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;用 Node.js 操作 MongoDB&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="聚合（Aggregation）入門"><a href="#聚合（Aggregation）入門" class="headerlink" title="聚合（Aggregation）入門"></a>聚合（Aggregation）入門</h2><p>MongoDB 提供強大的 Aggregation Pipeline 功能，可進行統計、分組、轉換。</p>
<p><strong>範例：統計作者貼文數量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">posts</span>.<span class="title function_">aggregate</span>([&#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&#x27;$author&#x27;</span>, <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125; &#125; &#125;, &#123; <span class="attr">$sort</span>: &#123; <span class="attr">count</span>: -<span class="number">1</span> &#125; &#125;]);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>MongoDB 以其彈性、易用與高延展性，成為許多現代應用的首選資料庫，特別是在快速開發、微服務架構或大數據處理場景中表現優異。透過簡單的 JSON 結構與強大的查詢能力，即使不熟 SQL 的開發者也能快速上手，打造穩定且具擴展性的資料儲存系統。</p>
<p>初學者可先從基本的增刪查改練習起，逐步熟悉資料結構與聚合操作，再延伸到使用 Mongoose 開發 REST API，或搭配 GraphQL、Next.js 等前後端整合工具，深入打造現代 Web 應用。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>模組</tag>
        <tag>nodejs</tag>
        <tag>mongoose</tag>
        <tag>MongoDB</tag>
        <tag>Express.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Monorepo 入門教學筆記：使用 npm Workspaces 管理多專案 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-monorepo-intro-tutorial/</url>
    <content><![CDATA[<h2 id="一、什麼是-Monorepo？"><a href="#一、什麼是-Monorepo？" class="headerlink" title="一、什麼是 Monorepo？"></a>一、什麼是 Monorepo？</h2><p><strong>Monorepo（Monolithic Repository）</strong> 是一種將多個相互關聯的專案（如前端、後端、共用函式庫等）統一放在同一個 Git 倉庫中進行版本管理的架構策略。這種做法可提升跨專案開發效率、共用程式碼的一致性，並簡化 CI&#x2F;CD 流程。</p>
<p>相較於 <strong>Multi-repo</strong>（每個專案獨立倉庫），Monorepo 具有以下幾項優勢：</p>
<h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ul>
<li><strong>統一依賴管理</strong>：使用者可於 root 層集中管理所有套件與版本。</li>
<li><strong>共用程式碼方便</strong>：子專案間可以引用彼此模組，而不需額外發佈。</li>
<li><strong>版本一致性高</strong>：統一管理 Node.js 與 TypeScript 設定，避免各專案設定不一致。</li>
<li><strong>原子性變更</strong>：可一次提交多個模組的改動，有利於大型重構與追蹤問題。</li>
</ul>
<h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul>
<li><strong>權限與管理更複雜</strong>：團隊需要良好的規範以避免耦合過深。</li>
<li><strong>初期學習門檻略高</strong>：需要理解 workspace 機制與設定方式。</li>
<li><strong>大型 repo 操作效能問題</strong>：隨專案規模增長，Git 操作與工具效能需特別注意。</li>
</ul>
<hr>
<h2 id="二、何謂-npm-Workspaces？"><a href="#二、何謂-npm-Workspaces？" class="headerlink" title="二、何謂 npm Workspaces？"></a>二、何謂 npm Workspaces？</h2><p>從 <strong>npm 7</strong> 開始，Node.js 官方就原生支援 Workspaces。它允許開發者在單一專案下，透過一個 <code>package.json</code> 管理多個子專案（workspace packages）。這讓 npm 也能像 Yarn 或 pnpm 一樣支援 monorepo。</p>
<p>特點：</p>
<ul>
<li>原生支援，不需額外工具</li>
<li>使用方式簡單直觀</li>
<li>適合小型與中型 monorepo 專案</li>
</ul>
<hr>
<h2 id="三、建立-Monorepo-專案實例（使用-npm-workspaces）"><a href="#三、建立-Monorepo-專案實例（使用-npm-workspaces）" class="headerlink" title="三、建立 Monorepo 專案實例（使用 npm workspaces）"></a>三、建立 Monorepo 專案實例（使用 npm workspaces）</h2><h3 id="1-初始化根目錄"><a href="#1-初始化根目錄" class="headerlink" title="1. 初始化根目錄"></a>1. 初始化根目錄</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-monorepo</span><br><span class="line"><span class="built_in">cd</span> my-monorepo</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>修改根目錄下的 <code>package.json</code> 加入 workspaces 設定：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-monorepo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workspaces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這表示所有子專案會放在 <code>packages/</code> 目錄中，支援通配符 <code>*</code>。</p>
<hr>
<h3 id="2-建立三個子專案"><a href="#2-建立三個子專案" class="headerlink" title="2. 建立三個子專案"></a>2. 建立三個子專案</h3><ul>
<li><code>packages/utils</code>：共用函式庫</li>
<li><code>packages/backend</code>：Node.js API</li>
<li><code>packages/frontend</code>：前端應用（可用 React&#x2F;Vite）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p packages/utils</span><br><span class="line"><span class="built_in">mkdir</span> -p packages/backend</span><br><span class="line"><span class="built_in">mkdir</span> -p packages/frontend</span><br></pre></td></tr></table></figure>

<p>初始化子專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages/utils</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../backend</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../frontend</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-撰寫共用模組（utils）"><a href="#3-撰寫共用模組（utils）" class="headerlink" title="3. 撰寫共用模組（utils）"></a>3. 撰寫共用模組（utils）</h3><p><code>packages/utils/index.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; greet &#125;;</span><br></pre></td></tr></table></figure>

<p><code>packages/utils/package.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@my/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-使用共用模組於-backend"><a href="#4-使用共用模組於-backend" class="headerlink" title="4. 使用共用模組於 backend"></a>4. 使用共用模組於 backend</h3><p><code>packages/backend/index.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; greet &#125; = <span class="built_in">require</span>(<span class="string">&quot;@my/utils&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Backend&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><code>packages/backend/package.json</code> 加入依賴：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@my/backend&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@my/utils&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>當你在 monorepo 根目錄執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>npm 會自動建立 workspace 之間的 symbolic link，將 <code>@my/utils</code> 套件安裝給 <code>@my/backend</code>，無需手動 <code>npm publish</code>。</p>
<p>執行 backend：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node packages/backend/index.js</span><br></pre></td></tr></table></figure>

<p>輸出結果為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Backend</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-多專案腳本管理"><a href="#5-多專案腳本管理" class="headerlink" title="5. 多專案腳本管理"></a>5. 多專案腳本管理</h3><p>在 root 的 <code>package.json</code> 中可設定統一指令：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start:backend&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --workspace @my/backend start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start:frontend&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --workspace @my/frontend start&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>若在 <code>@my/backend</code> 的 <code>package.json</code> 中定義了：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>則可於根目錄執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start:backend</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、進階使用技巧"><a href="#四、進階使用技巧" class="headerlink" title="四、進階使用技巧"></a>四、進階使用技巧</h2><h3 id="1-同時執行所有-workspace-指令"><a href="#1-同時執行所有-workspace-指令" class="headerlink" title="1. 同時執行所有 workspace 指令"></a>1. 同時執行所有 workspace 指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build --workspaces</span><br></pre></td></tr></table></figure>

<p>這會同時執行所有子專案中名為 <code>build</code> 的 script。</p>
<h3 id="2-安裝依賴給特定子專案"><a href="#2-安裝依賴給特定子專案" class="headerlink" title="2. 安裝依賴給特定子專案"></a>2. 安裝依賴給特定子專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install lodash --workspace @my/backend</span><br></pre></td></tr></table></figure>

<p>等同於進到 <code>packages/backend</code> 下執行 <code>npm install lodash</code>。</p>
<h3 id="3-使用-TypeScript-建構共用型別"><a href="#3-使用-TypeScript-建構共用型別" class="headerlink" title="3. 使用 TypeScript 建構共用型別"></a>3. 使用 TypeScript 建構共用型別</h3><p>若你使用 TypeScript，可將 <code>packages/utils</code> 改為 <code>index.ts</code> 並加上 <code>types</code> 欄位：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@my/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.d.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>建議搭配 <code>tsc -b</code> 支援 project references，以改善大型專案建置效能。</p>
<hr>
<h2 id="五、適合使用-Monorepo-的情境"><a href="#五、適合使用-Monorepo-的情境" class="headerlink" title="五、適合使用 Monorepo 的情境"></a>五、適合使用 Monorepo 的情境</h2><ul>
<li>前後端一體化開發（Fullstack）</li>
<li>套件開發與組合應用（如微前端架構）</li>
<li>共用型別與邏輯模組（utility &#x2F; types &#x2F; domain model）</li>
<li>多人協作、模組劃分清晰的大型產品</li>
</ul>
<hr>
<h2 id="六、總結"><a href="#六、總結" class="headerlink" title="六、總結"></a>六、總結</h2><p>Monorepo 是一種有效提升多專案整合效率的開發模式。透過 npm Workspaces，你可以不用額外安裝任何工具，即可快速建立一個結構清晰的 monorepo。這種架構不僅適合大型產品團隊，也非常適合個人或小型團隊開發多模組系統時採用。</p>
<p>建議開發者從簡單的 monorepo 起步，並根據團隊需求逐步導入版本控制策略、模組邊界規範與自動化部署流程，以發揮 Monorepo 架構的最大價值。</p>
<hr>
<p>若你有意將這份架構應用到 React、Next.js、NestJS、TypeScript、Lerna 等進階框架或部署情境，歡迎告訴我，我可以提供進一步的範例與最佳實踐建議。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>npm</tag>
        <tag>Monorepo</tag>
      </tags>
  </entry>
  <entry>
    <title>n8n 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/20/learning-notes-n8n-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代軟體開發與數位工作流程中，「自動化」已成為提升效率的關鍵。無論是處理 API 整合、資料同步、通知發送，或是各種無需人工介入的重複性工作，選擇一套靈活的工作流程自動化工具是必要的。</p>
<p><strong>n8n（pronounced “n-eight-n”）</strong> 是一個強大的開源自動化工具，具備類似 Zapier 的拖拉式流程設計介面，但更強調<strong>可自建、開源、自主掌控資料與程式彈性</strong>。它支援超過 400 個內建整合（如 Slack、Google Sheets、Notion、MySQL、HTTP API 等），同時允許用戶透過 JavaScript 編寫邏輯節點，打造彈性極高的自動化流程。</p>
<p>相較於其他自動化工具，n8n 的最大優勢在於：「你可以在本機或伺服器上自行部署，資料完全由你掌控。」這點對於重視隱私或希望建立企業內部自動化平台的團隊尤其重要。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>n8n 是什麼？</strong></p>
<ul>
<li>一個開源、自託管、可視化的工作流程自動化工具。</li>
<li>名稱源自 “Node + Node &#x3D; Workflow”，以節點（Node）為單位建構流程。</li>
</ul>
</li>
<li><p><strong>主要特色</strong></p>
<ul>
<li>開源、自託管、資料不外流。</li>
<li>拖放式流程設計器，門檻低但彈性高。</li>
<li>可撰寫 JavaScript 處理邏輯。</li>
<li>支援 webhook、排程、event-based 工作流程。</li>
<li>擁有超過 400 個現成整合節點（Google、Slack、GitHub、HTTP Request 等）。</li>
</ul>
</li>
<li><p><strong>使用場景</strong></p>
<ul>
<li>第三方 API 整合與自動同步。</li>
<li>資料轉換與清洗（ETL）。</li>
<li>表單提交後自動寄信／填寫 Google Sheets。</li>
<li>發布內容到社群平台。</li>
<li>團隊協作通知（如 Jira、Slack 整合）。</li>
<li>自動監控 RSS、新留言、社群評論等。</li>
</ul>
</li>
<li><p><strong>部署方式</strong></p>
<ul>
<li>支援 Docker、本地安裝、雲端託管（n8n.cloud）、Render、Railway 等平台。</li>
<li>可選擇免費版本或企業進階授權。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="安裝與啟用方式"><a href="#安裝與啟用方式" class="headerlink" title="安裝與啟用方式"></a>安裝與啟用方式</h2><h3 id="1-使用-Docker-部署（推薦）"><a href="#1-使用-Docker-部署（推薦）" class="headerlink" title="1. 使用 Docker 部署（推薦）"></a>1. 使用 Docker 部署（推薦）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> \</span><br><span class="line">  -p 5678:5678 \</span><br><span class="line">  -v ~/.n8n:/home/node/.n8n \</span><br><span class="line">  n8nio/n8n</span><br></pre></td></tr></table></figure>

<p>開啟瀏覽器進入 <a href="http://localhost:5678/">http://localhost:5678</a> 即可開始使用。</p>
<h3 id="2-使用-npm-安裝"><a href="#2-使用-npm-安裝" class="headerlink" title="2. 使用 npm 安裝"></a>2. 使用 npm 安裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install n8n -g</span><br><span class="line">n8n</span><br></pre></td></tr></table></figure>

<p>同樣可透過 <a href="http://localhost:5678/">http://localhost:5678</a> 開啟界面。</p>
<hr>
<h2 id="使用介面簡介"><a href="#使用介面簡介" class="headerlink" title="使用介面簡介"></a>使用介面簡介</h2><p>n8n 的主界面由以下幾個部分組成：</p>
<ul>
<li><strong>Canvas（畫布）</strong>：可拖拉節點設計流程。</li>
<li><strong>左側工具列</strong>：內建各種整合節點分類（Webhook、HTTP Request、Email 等）。</li>
<li><strong>節點屬性面板</strong>：選取節點後可編輯其參數設定。</li>
<li><strong>執行與測試工具</strong>：可以逐步執行流程、查看輸入與輸出資料。</li>
</ul>
<hr>
<h2 id="實際應用範例"><a href="#實際應用範例" class="headerlink" title="實際應用範例"></a>實際應用範例</h2><h3 id="範例一：接收-Webhook-並寄送-Slack-通知"><a href="#範例一：接收-Webhook-並寄送-Slack-通知" class="headerlink" title="範例一：接收 Webhook 並寄送 Slack 通知"></a>範例一：接收 Webhook 並寄送 Slack 通知</h3><p><strong>目標流程</strong>：當收到 Webhook（如表單送出），自動發送一則 Slack 通知。</p>
<ol>
<li><p>新增節點 <code>Webhook</code>：</p>
<ul>
<li>設定 HTTP 方法為 <code>POST</code></li>
<li>指定路徑為 <code>/contact</code></li>
</ul>
</li>
<li><p>新增節點 <code>Slack</code>：</p>
<ul>
<li>動作選擇 <code>Send Message</code></li>
<li>填入 Slack OAuth 認證與頻道資訊</li>
<li>訊息可使用 <code>&#123;&#123;$json["name"]&#125;&#125;</code> 這類變數取得 webhook 傳入資料</li>
</ul>
</li>
<li><p>將 <code>Webhook</code> → <code>Slack</code> 連接起來。</p>
</li>
<li><p>啟用工作流程，對 <code>/webhook/contact</code> 發送 POST 請求，即會收到通知。</p>
</li>
</ol>
<hr>
<h3 id="範例二：每天早上-9-點將-MySQL-資料匯出至-Google-Sheets"><a href="#範例二：每天早上-9-點將-MySQL-資料匯出至-Google-Sheets" class="headerlink" title="範例二：每天早上 9 點將 MySQL 資料匯出至 Google Sheets"></a>範例二：每天早上 9 點將 MySQL 資料匯出至 Google Sheets</h3><ol>
<li><p>使用 <code>Cron</code> 節點設定時間為每天早上 9 點。</p>
</li>
<li><p>使用 <code>MySQL</code> 節點撈出指定資料表的內容。</p>
</li>
<li><p>使用 <code>Google Sheets</code> 節點將資料新增至指定試算表。</p>
</li>
<li><p>可加上一個 <code>Function</code> 節點清洗或轉換資料格式。</p>
</li>
</ol>
<p>這樣可輕鬆建立每日自動報表流程，無需撰寫一行 shell script 或排程任務。</p>
<hr>
<h3 id="範例三：API-整合流程（串接-ChatGPT-回覆留言）"><a href="#範例三：API-整合流程（串接-ChatGPT-回覆留言）" class="headerlink" title="範例三：API 整合流程（串接 ChatGPT 回覆留言）"></a>範例三：API 整合流程（串接 ChatGPT 回覆留言）</h3><ol>
<li><p>使用 <code>Webhook</code> 節點接收前端留言內容。</p>
</li>
<li><p>使用 <code>OpenAI</code> 節點（或 HTTP Request + 自行送出 API 請求）傳送留言給 ChatGPT 並取得回覆。</p>
</li>
<li><p>使用 <code>Send Email</code> 或 <code>Telegram</code> 節點自動回覆用戶。</p>
</li>
</ol>
<p>n8n 支援 JSON 處理與條件邏輯節點，讓你可根據留言內容分類處理或轉送不同部門。</p>
<hr>
<h2 id="實用建議"><a href="#實用建議" class="headerlink" title="實用建議"></a>實用建議</h2><ul>
<li>建議搭配 <strong>版本控制（匯出 workflow JSON）</strong>，便於多人協作與備份。</li>
<li>若要部署至生產環境，建議設定密碼驗證與 HTTPS 保護。</li>
<li>可以將變數或 API key 設定為「環境變數」集中管理，提升安全性與可維護性。</li>
<li>利用 <code>Function</code> 與 <code>Set</code> 節點進行複雜邏輯處理與欄位映射。</li>
<li>若有即時性需求，可使用 webhook + queue-based 設計方式，避免封鎖主流程。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>n8n 是一款功能強大且靈活的開源工作流程自動化工具，不僅適合開發者，也適合營運、行銷、客服等跨部門自動化需求。透過拖拉節點的方式，任何人都可以建立自動化流程，取代繁瑣重複的手動操作。</p>
<p>與 Zapier、Make 等 SaaS 工具不同，n8n 提供了極高的可控性與可擴充性。無論是 API 整合、資料清洗、事件觸發，還是每日任務排程，n8n 都能成為你構建智慧工作流程的得力助手。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://adbest.com.tw/blog/what-is-n8n/">n8n 新手中文教學：6 步安裝、7 步驟部署第一支工作流！費用？</a></li>
</ol>
]]></content>
      <tags>
        <tag>VS Code</tag>
        <tag>n8n</tag>
        <tag>工作流程自動化工具</tag>
      </tags>
  </entry>
  <entry>
    <title>NextAuth.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/21/learning-notes-nextauth-js-intro-tutorial/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>隨著 Web 開發從傳統伺服器渲染演變為前後端分離架構，處理「使用者認證」變得更為複雜。許多開發者不再單純依賴 session + cookie 的方式，而是轉向 token-based 的 JWT 或 OAuth 解決方案。</p>
<p>如果你正在使用 <strong>Next.js</strong>，那麼 <strong>NextAuth.js</strong> 是一套高度整合、彈性高且極為方便的認證函式庫。它支援多種認證方式（如 OAuth、Email、Credentials、LDAP、JWT 等），可與 Next.js 無縫整合，適合快速導入登入機制。</p>
<hr>
<h2 id="二、重點摘要"><a href="#二、重點摘要" class="headerlink" title="二、重點摘要"></a>二、重點摘要</h2><ul>
<li><p>開源且專為 <strong>Next.js</strong> 設計的認證函式庫</p>
</li>
<li><p>支援：</p>
<ul>
<li>OAuth 第三方登入（Google、GitHub、Facebook、LINE 等）</li>
<li>Email 登入（magic link）</li>
<li>自定義帳密登入（Credentials provider）</li>
<li>JWT 無狀態驗證</li>
</ul>
</li>
<li><p>自動處理：</p>
<ul>
<li>session 建立與維護</li>
<li>cookies 管理</li>
<li>CSRF 保護</li>
</ul>
</li>
<li><p>可與資料庫整合（支援 Prisma、TypeORM、MongoDB 等）</p>
</li>
<li><p>可自定義：</p>
<ul>
<li>登入畫面</li>
<li>回傳的使用者資料</li>
<li>授權邏輯與回傳 token 欄位</li>
</ul>
</li>
<li><p>適用場景：企業內部登入、SaaS 後台、會員管理系統、整合第三方帳戶等</p>
</li>
</ul>
<hr>
<h2 id="三、建立-NextAuth-基本專案"><a href="#三、建立-NextAuth-基本專案" class="headerlink" title="三、建立 NextAuth 基本專案"></a>三、建立 NextAuth 基本專案</h2><h3 id="1-建立-Next-js-專案"><a href="#1-建立-Next-js-專案" class="headerlink" title="1. 建立 Next.js 專案"></a>1. 建立 Next.js 專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-next-app@latest nextauth-demo</span><br><span class="line"><span class="built_in">cd</span> nextauth-demo</span><br><span class="line">npm install next-auth</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-建立-API-Route"><a href="#2-建立-API-Route" class="headerlink" title="2. 建立 API Route"></a>2. 建立 API Route</h3><p>在 <code>pages/api/auth/[...nextauth].js</code> 中新增設定：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/api/auth/[...nextauth].js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NextAuth</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GitHubProvider</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth/providers/github&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NextAuth</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title class_">GitHubProvider</span>(&#123;</span><br><span class="line">      <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">GITHUB_CLIENT_ID</span>,</span><br><span class="line">      <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GITHUB_CLIENT_SECRET</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">callbacks</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">session</span>(<span class="params">&#123; session, token &#125;</span>) &#123;</span><br><span class="line">      session.<span class="property">user</span>.<span class="property">id</span> = token.<span class="property">sub</span>;</span><br><span class="line">      <span class="keyword">return</span> session;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-設定環境變數"><a href="#3-設定環境變數" class="headerlink" title="3. 設定環境變數"></a>3. 設定環境變數</h3><p>在 <code>.env.local</code> 中新增：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GITHUB_CLIENT_ID=你的 GitHub OAuth ID</span><br><span class="line">GITHUB_CLIENT_SECRET=你的 GitHub OAuth Secret</span><br><span class="line">NEXTAUTH_SECRET=隨機生成的 secret（可用 openssl rand -base64 32）</span><br></pre></td></tr></table></figure>

<p>若使用 JWT，可加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEXTAUTH_JWT_SECRET=任意密鑰</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-在前端使用登入與登出功能"><a href="#4-在前端使用登入與登出功能" class="headerlink" title="4. 在前端使用登入與登出功能"></a>4. 在前端使用登入與登出功能</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSession, signIn, signOut &#125; <span class="keyword">from</span> <span class="string">&#x27;next-auth/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: session &#125; = <span class="title function_">useSession</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (session) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>歡迎，&#123;session.user.name&#125;，你已登入<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> signOut()&#125;&gt;登出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>尚未登入<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> signIn(&#x27;github&#x27;)&#125;&gt;使用 GitHub 登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-在-app-js-包裝-SessionProvider"><a href="#5-在-app-js-包裝-SessionProvider" class="headerlink" title="5. 在 _app.js 包裝 SessionProvider"></a>5. 在 <code>_app.js</code> 包裝 <code>SessionProvider</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/_app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next-auth/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">&#123; Component, pageProps &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SessionProvider</span> <span class="attr">session</span>=<span class="string">&#123;pageProps.session&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">SessionProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、自訂登入方式（Credentials）"><a href="#四、自訂登入方式（Credentials）" class="headerlink" title="四、自訂登入方式（Credentials）"></a>四、自訂登入方式（Credentials）</h2><p>除了 OAuth，也可以自訂帳號密碼登入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [...nextauth].js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CredentialsProvider</span> <span class="keyword">from</span> <span class="string">&quot;next-auth/providers/credentials&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">providers</span>: [</span><br><span class="line">  <span class="title class_">CredentialsProvider</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Credentials&quot;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: &#123; <span class="attr">label</span>: <span class="string">&quot;帳號&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span><br><span class="line">      <span class="attr">password</span>: &#123; <span class="attr">label</span>: <span class="string">&quot;密碼&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;password&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">authorize</span>(<span class="params">credentials</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">verifyUser</span>(credentials.<span class="property">username</span>, credentials.<span class="property">password</span>);</span><br><span class="line">      <span class="keyword">if</span> (user) <span class="keyword">return</span> user;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>authorize</code> 函式需自行驗證帳密，並回傳 <code>user</code> 物件，如 <code>&#123; id, name, email &#125;</code></p>
</blockquote>
<hr>
<h2 id="五、整合-JWT-模式（無狀態認證）"><a href="#五、整合-JWT-模式（無狀態認證）" class="headerlink" title="五、整合 JWT 模式（無狀態認證）"></a>五、整合 JWT 模式（無狀態認證）</h2><p>啟用 JWT 模式，只需設定：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">session</span>: &#123;</span><br><span class="line">  <span class="attr">strategy</span>: <span class="string">&quot;jwt&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">jwt</span>: &#123;</span><br><span class="line">  <span class="attr">secret</span>: process.<span class="property">env</span>.<span class="property">NEXTAUTH_SECRET</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>這樣每次登入都會發出加密的 JWT，並由前端自動存於 cookie。你可以透過 <code>getToken()</code> 從 API 端存取 token 中的自訂欄位。</p>
<hr>
<h2 id="六、取得-Server-端-Session"><a href="#六、取得-Server-端-Session" class="headerlink" title="六、取得 Server 端 Session"></a>六、取得 Server 端 Session</h2><p>如果你需要在 API route 或 SSR 頁面取得使用者登入資訊，可使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getServerSession &#125; <span class="keyword">from</span> <span class="string">&#x27;next-auth/next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; authOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth/[...nextauth]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> session = <span class="keyword">await</span> <span class="title function_">getServerSession</span>(context.<span class="property">req</span>, context.<span class="property">res</span>, authOptions);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      session,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、總結與延伸"><a href="#七、總結與延伸" class="headerlink" title="七、總結與延伸"></a>七、總結與延伸</h2><table>
<thead>
<tr>
<th>功能</th>
<th>NextAuth 表現</th>
</tr>
</thead>
<tbody><tr>
<td>快速整合第三方登入</td>
<td>非常方便，僅需 provider 設定</td>
</tr>
<tr>
<td>安全性</td>
<td>預設 CSRF 保護、HttpOnly cookie</td>
</tr>
<tr>
<td>自訂性</td>
<td>高度可調整 callback、UI、資料庫整合</td>
</tr>
<tr>
<td>無狀態支援</td>
<td>支援 JWT、Access Token</td>
</tr>
<tr>
<td>SSR&#x2F;SPA 支援</td>
<td>完整整合 getServerSideProps、Client Hook</td>
</tr>
</tbody></table>
<hr>
<h2 id="延伸功能建議"><a href="#延伸功能建議" class="headerlink" title="延伸功能建議"></a>延伸功能建議</h2><ul>
<li>整合 Prisma 儲存使用者資料與 session（可自動生成 schema）</li>
<li>自訂登入 UI 與跳轉路徑</li>
<li>客製化 JWT payload 內容（如 role, id, user_type）</li>
<li>使用 <code>getToken()</code> 或 <code>useSession()</code> 搭配權限控制</li>
<li>多平台登入支援（Web、Mobile API）</li>
</ul>
]]></content>
      <tags>
        <tag>NextAuth.js</tag>
        <tag>Next.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/08/learning-notes-node-js-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-Node-js-簡介"><a href="#1-Node-js-簡介" class="headerlink" title="1. Node.js 簡介"></a>1. Node.js 簡介</h1><p>Node.js 是一個基於 Chrome V8 JavaScript 引擎的運行環境，可讓開發者使用 JavaScript 來撰寫後端程式。它適合用於構建高效能、非同步的網路應用。</p>
<h3 id="1-1-為何選擇-Node-js？"><a href="#1-1-為何選擇-Node-js？" class="headerlink" title="1.1 為何選擇 Node.js？"></a>1.1 為何選擇 Node.js？</h3><ul>
<li><strong>非同步 &amp; 事件驅動</strong>：適合 I&#x2F;O 密集型應用，如 Web 伺服器。</li>
<li><strong>單一語言開發</strong>：可用 JavaScript 同時開發前端與後端。</li>
<li><strong>強大的生態系統</strong>：擁有豐富的 NPM（Node Package Manager）套件。</li>
<li><strong>高效能</strong>：基於 V8 引擎，運行速度快。</li>
</ul>
<h1 id="2-安裝與環境設定"><a href="#2-安裝與環境設定" class="headerlink" title="2. 安裝與環境設定"></a>2. 安裝與環境設定</h1><h3 id="2-1-安裝-Node-js"><a href="#2-1-安裝-Node-js" class="headerlink" title="2.1 安裝 Node.js"></a>2.1 安裝 Node.js</h3><p>從 <a href="https://nodejs.org/">Node.js 官方網站</a> 下載並安裝 LTS 版本。</p>
<h3 id="2-2-檢查安裝是否成功"><a href="#2-2-檢查安裝是否成功" class="headerlink" title="2.2 檢查安裝是否成功"></a>2.2 檢查安裝是否成功</h3><p>安裝完成後，在終端機輸入以下指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>應該會顯示 Node.js 和 npm（Node 套件管理工具）的版本號。</p>
<h1 id="3-基本應用程式"><a href="#3-基本應用程式" class="headerlink" title="3. 基本應用程式"></a>3. 基本應用程式</h1><h3 id="3-1-建立第一個-Node-js-應用"><a href="#3-1-建立第一個-Node-js-應用" class="headerlink" title="3.1 建立第一個 Node.js 應用"></a>3.1 建立第一個 Node.js 應用</h3><p>新建一個 <code>app.js</code> 檔案，並輸入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, Node.js!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>然後在終端機執行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>應該會輸出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Node.js!</span><br></pre></td></tr></table></figure>

<h3 id="3-2-建立簡單的-HTTP-伺服器"><a href="#3-2-建立簡單的-HTTP-伺服器" class="headerlink" title="3.2 建立簡單的 HTTP 伺服器"></a>3.2 建立簡單的 HTTP 伺服器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>執行後，開啟瀏覽器並訪問 <code>http://localhost:3000</code>，應該會看到 <code>Hello, World!</code>。</p>
<h1 id="4-Node-js-模組"><a href="#4-Node-js-模組" class="headerlink" title="4. Node.js 模組"></a>4. Node.js 模組</h1><h3 id="4-1-內建模組"><a href="#4-1-內建模組" class="headerlink" title="4.1 內建模組"></a>4.1 內建模組</h3><p>Node.js 提供許多內建模組，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 檔案系統</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">// 路徑處理</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>); <span class="comment">// 作業系統資訊</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-NPM-套件管理"><a href="#4-2-NPM-套件管理" class="headerlink" title="4.2 NPM 套件管理"></a>4.2 NPM 套件管理</h3><p>安裝 Express 框架：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<h1 id="5-Express-入門"><a href="#5-Express-入門" class="headerlink" title="5. Express 入門"></a>5. Express 入門</h1><h3 id="5-1-建立簡單的-Express-伺服器"><a href="#5-1-建立簡單的-Express-伺服器" class="headerlink" title="5.1 建立簡單的 Express 伺服器"></a>5.1 建立簡單的 Express 伺服器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello, Express!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="6-讀取與寫入檔案"><a href="#6-讀取與寫入檔案" class="headerlink" title="6. 讀取與寫入檔案"></a>6. 讀取與寫入檔案</h1><h3 id="6-1-讀取檔案"><a href="#6-1-讀取檔案" class="headerlink" title="6.1 讀取檔案"></a>6.1 讀取檔案</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-2-寫入檔案"><a href="#6-2-寫入檔案" class="headerlink" title="6.2 寫入檔案"></a>6.2 寫入檔案</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;Hello, Node.js!&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File has been saved!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="7-連接-MongoDB-資料庫"><a href="#7-連接-MongoDB-資料庫" class="headerlink" title="7. 連接 MongoDB 資料庫"></a>7. 連接 MongoDB 資料庫</h1><h3 id="7-1-安裝-MongoDB-驅動"><a href="#7-1-安裝-MongoDB-驅動" class="headerlink" title="7.1 安裝 MongoDB 驅動"></a>7.1 安裝 MongoDB 驅動</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>

<h3 id="7-2-連接-MongoDB"><a href="#7-2-連接-MongoDB" class="headerlink" title="7.2 連接 MongoDB"></a>7.2 連接 MongoDB</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/testDB&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MongoDB&#x27;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h1 id="8-部署-Node-js-應用"><a href="#8-部署-Node-js-應用" class="headerlink" title="8. 部署 Node.js 應用"></a>8. 部署 Node.js 應用</h1><h3 id="8-1-使用-PM2-管理應用"><a href="#8-1-使用-PM2-管理應用" class="headerlink" title="8.1 使用 PM2 管理應用"></a>8.1 使用 PM2 管理應用</h3><p>安裝 PM2：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
<p>啟動應用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure>

<h3 id="8-2-使用-Docker-部署"><a href="#8-2-使用-Docker-部署" class="headerlink" title="8.2 使用 Docker 部署"></a>8.2 使用 Docker 部署</h3><p>建立 <code>Dockerfile</code>：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;app.js&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<h1 id="9-結論"><a href="#9-結論" class="headerlink" title="9. 結論"></a>9. 結論</h1><p>透過這篇入門筆記，初學者可以快速掌握 Node.js 的基礎概念與實作技巧，包含 HTTP 伺服器、檔案操作、資料庫連接等。建議進一步學習異步程式設計、RESTful API、WebSocket 以及雲端部署技術，以提升開發能力。</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>Node</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js Express.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/16/learning-notes-nodejs-expressjs-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-簡介"><a href="#1-簡介" class="headerlink" title="1. 簡介"></a>1. 簡介</h2><p>Express.js 是一個基於 Node.js 的 Web 應用框架，提供簡潔且靈活的 API，適用於建立伺服器端應用程式。它可以用來開發 RESTful API、Web 應用或後端服務。</p>
<h3 id="為什麼選擇-Express-js？"><a href="#為什麼選擇-Express-js？" class="headerlink" title="為什麼選擇 Express.js？"></a>為什麼選擇 Express.js？</h3><ul>
<li>輕量且易於學習</li>
<li>擴展性高</li>
<li>內建強大的中介軟體（Middleware）系統</li>
<li>支援各種範本引擎（例如：EJS, Pug）</li>
</ul>
<h2 id="2-安裝與專案初始化"><a href="#2-安裝與專案初始化" class="headerlink" title="2. 安裝與專案初始化"></a>2. 安裝與專案初始化</h2><h3 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h3><p>在開始使用 Express.js 之前，請先安裝 <a href="https://nodejs.org/">Node.js</a>。</p>
<h3 id="初始化專案"><a href="#初始化專案" class="headerlink" title="初始化專案"></a>初始化專案</h3><p>建立一個新的專案資料夾，然後執行以下指令來初始化 Node.js 專案：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> express-app</span><br><span class="line"><span class="built_in">cd</span> express-app</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h3 id="安裝-Express-js"><a href="#安裝-Express-js" class="headerlink" title="安裝 Express.js"></a>安裝 Express.js</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<h2 id="3-建立第一個-Express-伺服器"><a href="#3-建立第一個-Express-伺服器" class="headerlink" title="3. 建立第一個 Express 伺服器"></a>3. 建立第一個 Express 伺服器</h2><p>建立 <code>server.js</code> 檔案，並加入以下程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello, Express!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="啟動伺服器"><a href="#啟動伺服器" class="headerlink" title="啟動伺服器"></a>啟動伺服器</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>
<p>然後在瀏覽器打開 <code>http://localhost:3000/</code>，應該可以看到 **Hello, Express!**。</p>
<h2 id="4-中介軟體（Middleware）"><a href="#4-中介軟體（Middleware）" class="headerlink" title="4. 中介軟體（Middleware）"></a>4. 中介軟體（Middleware）</h2><p>Express 提供 <strong>Middleware</strong>，可用來處理請求與回應，例如：解析請求體、驗證請求等。</p>
<h3 id="使用-express-json-解析-JSON"><a href="#使用-express-json-解析-JSON" class="headerlink" title="使用 express.json() 解析 JSON"></a>使用 <code>express.json()</code> 解析 JSON</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure>

<h3 id="建立自訂中介軟體"><a href="#建立自訂中介軟體" class="headerlink" title="建立自訂中介軟體"></a>建立自訂中介軟體</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-路由（Routing）"><a href="#5-路由（Routing）" class="headerlink" title="5. 路由（Routing）"></a>5. 路由（Routing）</h2><p>Express 允許定義不同的 HTTP 方法對應不同的路由。</p>
<h3 id="GET-路由"><a href="#GET-路由" class="headerlink" title="GET 路由"></a>GET 路由</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>([&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="POST-路由"><a href="#POST-路由" class="headerlink" title="POST 路由"></a>POST 路由</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/users&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newUser = req.<span class="property">body</span>;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newUser);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="參數化路由"><a href="#參數化路由" class="headerlink" title="參數化路由"></a>參數化路由</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/users/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">id</span>: userId, <span class="attr">name</span>: <span class="string">`User <span class="subst">$&#123;userId&#125;</span>`</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="6-靜態檔案服務"><a href="#6-靜態檔案服務" class="headerlink" title="6. 靜態檔案服務"></a>6. 靜態檔案服務</h2><p>Express 可用來提供靜態檔案，例如 HTML、CSS、JavaScript。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>然後在 <code>public/index.html</code> 中放入 HTML，即可直接透過 <code>http://localhost:3000/index.html</code> 存取。</p>
<h2 id="7-錯誤處理"><a href="#7-錯誤處理" class="headerlink" title="7. 錯誤處理"></a>7. 錯誤處理</h2><p>Express 提供錯誤處理中介軟體，可用來處理應用中的錯誤。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Something went wrong!&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="8-整合-MongoDB"><a href="#8-整合-MongoDB" class="headerlink" title="8. 整合 MongoDB"></a>8. 整合 MongoDB</h2><p>可以使用 <code>mongoose</code> 來與 MongoDB 互動。</p>
<h3 id="安裝-mongoose"><a href="#安裝-mongoose" class="headerlink" title="安裝 mongoose"></a>安裝 <code>mongoose</code></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>

<h3 id="連接-MongoDB"><a href="#連接-MongoDB" class="headerlink" title="連接 MongoDB"></a>連接 MongoDB</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/mydatabase&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MongoDB&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;MongoDB connection error:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="9-部署-Express-應用"><a href="#9-部署-Express-應用" class="headerlink" title="9. 部署 Express 應用"></a>9. 部署 Express 應用</h2><p>可以使用 <strong>PM2</strong> 來管理 Express 伺服器。</p>
<h3 id="安裝-PM2"><a href="#安裝-PM2" class="headerlink" title="安裝 PM2"></a>安裝 PM2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>

<h3 id="啟動應用"><a href="#啟動應用" class="headerlink" title="啟動應用"></a>啟動應用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 start server.js --name express-app</span><br></pre></td></tr></table></figure>

<h2 id="10-總結"><a href="#10-總結" class="headerlink" title="10. 總結"></a>10. 總結</h2><p>透過這篇筆記，你已經學會：</p>
<ol>
<li>安裝與初始化 Express.js</li>
<li>建立基本 Web 伺服器</li>
<li>使用中介軟體與路由</li>
<li>提供靜態檔案</li>
<li>錯誤處理</li>
<li>整合 MongoDB</li>
<li>部署 Express 應用</li>
</ol>
<p>這些概念是 Express.js 開發的基礎，熟練後可以進一步學習 JWT 認證、WebSocket、GraphQL 等進階技術！</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>模組</tag>
        <tag>nodejs</tag>
        <tag>mongoose</tag>
        <tag>MongoDB</tag>
        <tag>Express.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/01/learning-notes-nuxtjs-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是-Nuxt-js？"><a href="#一、什麼是-Nuxt-js？" class="headerlink" title="一、什麼是 Nuxt.js？"></a>一、什麼是 Nuxt.js？</h1><p><code>Nuxt.js</code> 是一個基於 <code>Vue.js</code> 的漸進式框架，專為構建伺服器端渲染（<code>SSR</code>）和靜態站點生成（<code>SSG</code>）應用程式而設計。它提供開發者一個強大的開發體驗，並簡化 Vue.js 應用的架構與設定，適合 SEO 優化、效能最佳化以及提升開發效率。  </p>
<p>Nuxt.js 的核心特性包括：  </p>
<ol>
<li><strong>伺服器端渲染（SSR）</strong>：增強 SEO 並提升初始載入速度。  </li>
<li><strong>靜態站點生成（SSG）</strong>：透過預先生成 HTML 提供更快的載入時間。  </li>
<li><strong>自動路由</strong>：基於 <code>pages</code> 目錄的檔案自動建立對應的路由，無需額外配置 Vue Router。  </li>
<li><strong>模組系統</strong>：支援大量 Nuxt 模組（如 TailwindCSS、PWA、Auth 等）來快速擴展功能。  </li>
<li><strong>組態簡單</strong>：預設優化 Vue.js 應用的結構與設定，減少繁瑣的配置工作。  </li>
<li><strong>組件自動載入</strong>：Nuxt 可自動載入 <code>components</code> 目錄內的 Vue 組件，減少 <code>import</code> 的需求。</li>
</ol>
<hr>
<h1 id="二、安裝與初始化-Nuxt-js"><a href="#二、安裝與初始化-Nuxt-js" class="headerlink" title="二、安裝與初始化 Nuxt.js"></a>二、安裝與初始化 Nuxt.js</h1><h3 id="1-使用-Nuxt-CLI-安裝（推薦方式）"><a href="#1-使用-Nuxt-CLI-安裝（推薦方式）" class="headerlink" title="1. 使用 Nuxt CLI 安裝（推薦方式）"></a>1. 使用 Nuxt CLI 安裝（推薦方式）</h3><p>Nuxt 提供官方 CLI 工具 <code>nuxi</code> 來建立新專案。  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx nuxi init my-nuxt-app</span><br><span class="line"><span class="built_in">cd</span> my-nuxt-app</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>上述指令會自動建立一個 <code>my-nuxt-app</code> 專案，並下載 Nuxt 相關相依套件。  </p>
<h3 id="2-使用-create-nuxt-app-安裝（舊版方式）"><a href="#2-使用-create-nuxt-app-安裝（舊版方式）" class="headerlink" title="2. 使用 create-nuxt-app 安裝（舊版方式）"></a>2. 使用 <code>create-nuxt-app</code> 安裝（舊版方式）</h3><p>如果要使用較舊的安裝方式，也可以透過 <code>create-nuxt-app</code> 指令來建立專案：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app my-nuxt-app</span><br></pre></td></tr></table></figure>

<p>此方法會提供互動式選單，讓開發者選擇 UI 框架（TailwindCSS、Bootstrap）、插件（Axios、PWA）以及 Nuxt 模式（SSR 或 SSG）。  </p>
<h3 id="3-啟動開發伺服器"><a href="#3-啟動開發伺服器" class="headerlink" title="3. 啟動開發伺服器"></a>3. 啟動開發伺服器</h3><p>安裝完成後，可以執行以下指令來啟動開發環境：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>預設會啟動本機伺服器 <code>http://localhost:3000</code>，可在瀏覽器中打開檢視。  </p>
<hr>
<h1 id="三、專案結構"><a href="#三、專案結構" class="headerlink" title="三、專案結構"></a>三、專案結構</h1><p>Nuxt.js 採用約定式（Convention over Configuration）架構，專案目錄結構如下：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my-nuxt-app/</span><br><span class="line">│── assets/        <span class="comment"># 未編譯的靜態資源，如 CSS、圖片</span></span><br><span class="line">│── components/    <span class="comment"># Vue 組件（自動載入）</span></span><br><span class="line">│── layouts/       <span class="comment"># 頁面佈局</span></span><br><span class="line">│── pages/         <span class="comment"># 自動建立的路由頁面</span></span><br><span class="line">│── plugins/       <span class="comment"># Nuxt 插件，如 Vue 插件或第三方庫</span></span><br><span class="line">│── public/        <span class="comment"># 靜態資源，可直接透過 URL 存取</span></span><br><span class="line">│── server/        <span class="comment"># 伺服器端 API（Nuxt 3）</span></span><br><span class="line">│── store/         <span class="comment"># Vuex 狀態管理（Nuxt 2，Nuxt 3 改用 `pinia`）</span></span><br><span class="line">│── nuxt.config.ts <span class="comment"># Nuxt 設定檔</span></span><br><span class="line">│── package.json   <span class="comment"># npm 套件設定</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、路由與頁面"><a href="#四、路由與頁面" class="headerlink" title="四、路由與頁面"></a>四、路由與頁面</h1><h3 id="1-自動建立路由"><a href="#1-自動建立路由" class="headerlink" title="1. 自動建立路由"></a>1. 自動建立路由</h3><p>Nuxt.js 會根據 <code>pages/</code> 目錄內的 Vue 檔案自動產生對應的路由。例如，在 <code>pages/index.vue</code> 建立首頁：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;歡迎來到 Nuxt.js&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>若在 <code>pages/about.vue</code> 建立新的 Vue 檔案，則 <code>http://localhost:3000/about</code> 會自動對應到該頁面。  </p>
<h3 id="2-動態路由"><a href="#2-動態路由" class="headerlink" title="2. 動態路由"></a>2. 動態路由</h3><p>可以使用 <code>_</code> 命名的方式建立動態路由。例如，在 <code>pages/blog/_id.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;文章 ID: &#123;&#123; route.params.id &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const route = useRoute();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>訪問 <code>http://localhost:3000/blog/123</code>，頁面將顯示 <code>文章 ID: 123</code>。  </p>
<hr>
<h1 id="五、Nuxt-組件與佈局"><a href="#五、Nuxt-組件與佈局" class="headerlink" title="五、Nuxt 組件與佈局"></a>五、Nuxt 組件與佈局</h1><h3 id="1-自動載入組件"><a href="#1-自動載入組件" class="headerlink" title="1. 自動載入組件"></a>1. 自動載入組件</h3><p>在 <code>components/</code> 內的 Vue 檔案會自動載入，例如建立 <code>components/Navbar.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav class=&quot;bg-blue-500 p-4 text-white&quot;&gt;</span><br><span class="line">    &lt;h1&gt;網站導覽列&lt;/h1&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>然後在 <code>pages/index.vue</code> 內直接使用 <code>&lt;Navbar /&gt;</code>，無需 <code>import</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">    &lt;h1&gt;首頁內容&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-佈局（Layouts）"><a href="#2-佈局（Layouts）" class="headerlink" title="2. 佈局（Layouts）"></a>2. 佈局（Layouts）</h3><p>佈局是共享的頁面結構，可在 <code>layouts/default.vue</code> 內定義：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>所有 <code>pages/</code> 內的頁面會自動套用 <code>default.vue</code> 佈局。  </p>
<hr>
<h1 id="六、Nuxt-伺服器端-API（Nuxt-3）"><a href="#六、Nuxt-伺服器端-API（Nuxt-3）" class="headerlink" title="六、Nuxt 伺服器端 API（Nuxt 3）"></a>六、Nuxt 伺服器端 API（Nuxt 3）</h1><p>Nuxt 3 內建簡單的 API 伺服器，可在 <code>server/api/hello.ts</code> 新增 API：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&quot;Hello from Nuxt API&quot;</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這樣就可以透過 <code>http://localhost:3000/api/hello</code> 訪問該 API。  </p>
<hr>
<h1 id="七、Nuxt-資料獲取"><a href="#七、Nuxt-資料獲取" class="headerlink" title="七、Nuxt 資料獲取"></a>七、Nuxt 資料獲取</h1><h3 id="1-useFetch-獲取-API-資料"><a href="#1-useFetch-獲取-API-資料" class="headerlink" title="1. useFetch() 獲取 API 資料"></a>1. <code>useFetch()</code> 獲取 API 資料</h3><p>Nuxt 3 提供 <code>useFetch</code> 來處理 API 讀取，例如：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; data.message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const &#123; data &#125; = useFetch(&#x27;/api/hello&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>這會自動調用 <code>server/api/hello.ts</code> 並顯示回應內容。  </p>
<hr>
<h1 id="八、部署-Nuxt-應用"><a href="#八、部署-Nuxt-應用" class="headerlink" title="八、部署 Nuxt 應用"></a>八、部署 Nuxt 應用</h1><h3 id="1-生成靜態站點"><a href="#1-生成靜態站點" class="headerlink" title="1. 生成靜態站點"></a>1. 生成靜態站點</h3><p>若要將 Nuxt 部署為靜態網站，可執行：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run generate</span><br></pre></td></tr></table></figure>

<p>這會在 <code>dist/</code> 目錄內產生靜態 HTML 檔案，可直接部署到 Netlify 或 Vercel。  </p>
<h3 id="2-部署至-Vercel"><a href="#2-部署至-Vercel" class="headerlink" title="2. 部署至 Vercel"></a>2. 部署至 Vercel</h3><p>使用 Vercel CLI 部署：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g vercel</span><br><span class="line">vercel</span><br></pre></td></tr></table></figure>

<p>即可快速部署 Nuxt 應用。  </p>
<hr>
<h1 id="九、結語"><a href="#九、結語" class="headerlink" title="九、結語"></a>九、結語</h1><p>Nuxt.js 提供強大的功能來簡化 Vue.js 開發，透過自動路由、組件自動載入、伺服器 API 以及資料獲取等功能，大幅提升開發效率。對於需要 SEO 優化或靜態站點的專案而言，Nuxt 是一個非常適合的選擇。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>Nuxt</tag>
        <tag>Nuxt.js</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>滾動視差（Parallax Scrolling）網頁設計入門教學筆記 | 學習筆記</title>
    <url>/2024/12/03/learning-notes-parallax-scrolling-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是滾動視差？"><a href="#一、什麼是滾動視差？" class="headerlink" title="一、什麼是滾動視差？"></a>一、什麼是滾動視差？</h1><p>滾動視差（<code>Parallax Scrolling</code>）是一種前端網頁設計技術，透過不同層的背景與內容以不同的速度滾動，營造出立體感與動態視覺效果。這種技術常見於品牌網站、產品介紹頁面或作品展示頁面，能有效提升使用者的沉浸感與互動體驗。  </p>
<h3 id="滾動視差的視覺效果"><a href="#滾動視差的視覺效果" class="headerlink" title="滾動視差的視覺效果"></a>滾動視差的視覺效果</h3><ol>
<li><strong>背景與內容滾動速率不同</strong>：背景滾動速度較慢，前景滾動速度較快，模擬景深效果。  </li>
<li><strong>多層次視覺變化</strong>：不同層的元素可以有獨立的滾動行為，增加動態感。  </li>
<li><strong>創造故事性</strong>：透過滾動觸發不同場景，讓使用者體驗連貫的視覺敘事。</li>
</ol>
<hr>
<h1 id="二、滾動視差的基本實作"><a href="#二、滾動視差的基本實作" class="headerlink" title="二、滾動視差的基本實作"></a>二、滾動視差的基本實作</h1><h3 id="1-使用純-CSS-來製作滾動視差"><a href="#1-使用純-CSS-來製作滾動視差" class="headerlink" title="1. 使用純 CSS 來製作滾動視差"></a>1. 使用純 CSS 來製作滾動視差</h3><p>CSS 提供了 <code>background-attachment: fixed;</code> 屬性，可以讓背景圖像保持固定位置，而前景內容繼續滾動，營造簡單的滾動視差效果。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>滾動視差示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parallax</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;parallax-background.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parallax&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>滾動視差示例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的滾動視差網頁，背景固定不動，前景內容滾動。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parallax&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種方式雖然簡單，但無法實現更複雜的視差動畫效果。如果想要更進階的效果，通常需要搭配 JavaScript 或 CSS 變形（Transform）。</p>
<hr>
<h3 id="2-使用-CSS-transform-來實現滾動視差"><a href="#2-使用-CSS-transform-來實現滾動視差" class="headerlink" title="2. 使用 CSS transform 來實現滾動視差"></a>2. 使用 CSS <code>transform</code> 來實現滾動視差</h3><p>透過 <code>transform: translateZ()</code> 搭配 <code>perspective()</code>，可以製造出更立體的視差效果。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parallax-container</span> &#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parallax-layer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">1px</span>) <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這種方式可以讓不同層的元素有不同的滾動速率，達到更細緻的視覺效果。</p>
<hr>
<h1 id="三、使用-JavaScript-製作更靈活的滾動視差"><a href="#三、使用-JavaScript-製作更靈活的滾動視差" class="headerlink" title="三、使用 JavaScript 製作更靈活的滾動視差"></a>三、使用 JavaScript 製作更靈活的滾動視差</h1><p>雖然純 CSS 可以實現基本視差效果，但若要控制不同層級的滾動速度，或者添加額外動畫效果，就需要 JavaScript。  </p>
<h3 id="1-簡單的-JavaScript-滾動視差"><a href="#1-簡單的-JavaScript-滾動視差" class="headerlink" title="1. 簡單的 JavaScript 滾動視差"></a>1. 簡單的 JavaScript 滾動視差</h3><p>使用 <code>window.scrollY</code> 來控制元素的 <code>transform</code> 屬性，使其隨滾動變化。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 滾動視差<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parallax</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;parallax-background.jpg&#x27;</span>) center/cover no-repeat;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parallax&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>滾動視差效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> scrollPosition = <span class="variable language_">window</span>.<span class="property">scrollY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.parallax&#x27;</span>).<span class="property">style</span>.<span class="property">backgroundPositionY</span> = scrollPosition * <span class="number">0.5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這個範例中，我們透過 JavaScript 讓背景圖片根據滾動位置改變 <code>backgroundPositionY</code>，從而達成視差效果。</p>
<hr>
<h3 id="2-使用第三方函式庫（如-ScrollMagic）"><a href="#2-使用第三方函式庫（如-ScrollMagic）" class="headerlink" title="2. 使用第三方函式庫（如 ScrollMagic）"></a>2. 使用第三方函式庫（如 ScrollMagic）</h3><p>如果想要更進階的視差效果，可以使用 <code>ScrollMagic</code> 這類 JavaScript 函式庫，來更精確地控制滾動動畫。  </p>
<p>首先安裝 ScrollMagic：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install scrollmagic</span><br></pre></td></tr></table></figure>

<p>然後在 JavaScript 中設定滾動觸發點：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> controller = <span class="keyword">new</span> <span class="title class_">ScrollMagic</span>.<span class="title class_">Controller</span>();</span><br><span class="line"><span class="keyword">let</span> scene = <span class="keyword">new</span> <span class="title class_">ScrollMagic</span>.<span class="title class_">Scene</span>(&#123;</span><br><span class="line">    <span class="attr">triggerElement</span>: <span class="string">&#x27;.parallax&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">triggerHook</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">setTween</span>(<span class="string">&#x27;.parallax&#x27;</span>, &#123; <span class="attr">y</span>: <span class="string">&#x27;50%&#x27;</span>, <span class="attr">ease</span>: <span class="title class_">Linear</span>.<span class="property">easeNone</span> &#125;)</span><br><span class="line">.<span class="title function_">addTo</span>(controller);</span><br></pre></td></tr></table></figure>

<p>這樣可以讓 <code>.parallax</code> 元素在滾動時逐漸移動，達成視差效果。</p>
<hr>
<h1 id="四、滾動視差的應用場景"><a href="#四、滾動視差的應用場景" class="headerlink" title="四、滾動視差的應用場景"></a>四、滾動視差的應用場景</h1><p>滾動視差可以應用於許多不同類型的網站，例如：  </p>
<ol>
<li><strong>品牌網站</strong>：用來展示產品特性與公司理念，提高視覺吸引力。  </li>
<li><strong>作品集網站</strong>：適合攝影師、設計師，讓內容更具層次感。  </li>
<li><strong>故事敘述頁面</strong>：用來製作互動式故事，讓用戶在滾動中探索內容。  </li>
<li><strong>促銷與行銷頁面</strong>：讓特定區塊在滾動時突出，吸引目光。</li>
</ol>
<hr>
<h1 id="五、滾動視差的優勢與缺點"><a href="#五、滾動視差的優勢與缺點" class="headerlink" title="五、滾動視差的優勢與缺點"></a>五、滾動視差的優勢與缺點</h1><h3 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h3><ul>
<li>增強視覺吸引力，使網站更具互動性。  </li>
<li>可提升品牌形象，讓內容更具故事性。  </li>
<li>創造更流暢的使用者體驗，增加網站的停留時間。</li>
</ul>
<h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul>
<li>過多視差效果可能會影響效能，導致頁面滾動不流暢。  </li>
<li>可能對行動裝置不友善，需要額外的優化。  </li>
<li>過度使用可能會影響可讀性，降低使用者體驗。</li>
</ul>
<hr>
<h1 id="六、結論"><a href="#六、結論" class="headerlink" title="六、結論"></a>六、結論</h1><p>滾動視差是一種有效提升網站視覺吸引力的技術，適用於品牌展示、作品集與故事敘述類型的網站。透過 CSS 的 <code>background-attachment</code>，JavaScript 的 <code>scrollY</code>，或是使用函式庫如 <code>ScrollMagic</code>，都能實現不同程度的視差效果。  </p>
<p>然而，使用時需注意效能與可讀性，確保不會影響使用者體驗。在實作時，建議先從簡單的 CSS 視差效果開始，逐步引入 JavaScript 或函式庫，根據需求選擇最佳實作方式。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>金流使用 Hash 原因入門教學筆記 | 學習筆記</title>
    <url>/2024/12/18/learning-notes-payment-hash-intro-tutorial%20copy/</url>
    <content><![CDATA[<p>在金流（第三方支付或自建金流）系統中使用 <strong>Hash（雜湊）</strong> 的原因，主要是為了<strong>安全性</strong>與<strong>防止資料被竄改</strong>。以下是更詳細的解釋：</p>
<hr>
<h2 id="一、為什麼金流需要-Hash？"><a href="#一、為什麼金流需要-Hash？" class="headerlink" title="一、為什麼金流需要 Hash？"></a>一、為什麼金流需要 Hash？</h2><p>金流交易涉及敏感資料（如金額、訂單編號、使用者資訊、驗證參數等），若這些資料在傳輸過程中被竄改，將造成：</p>
<ul>
<li>金額錯誤（被調整為更小金額）</li>
<li>偽造付款成功通知</li>
<li>使用者資料外洩</li>
<li>金流詐騙行為</li>
</ul>
<p>因此，<strong>金流平台與商家之間需要一種方式來驗證資料完整性與來源</strong>，這就是使用 Hash 的目的。</p>
<hr>
<h2 id="二、Hash-的功能與好處"><a href="#二、Hash-的功能與好處" class="headerlink" title="二、Hash 的功能與好處"></a>二、Hash 的功能與好處</h2><h3 id="1-防止資料被竄改"><a href="#1-防止資料被竄改" class="headerlink" title="1. 防止資料被竄改"></a>1. 防止資料被竄改</h3><p>將參數與商家的金鑰（如 <code>HashKey</code>, <code>HashIV</code>, <code>Secret</code>) 一起進行加密產生 Hash，當接收到資料時重新運算比對 Hash 是否一致，可判斷資料是否遭到中間人修改。</p>
<h3 id="2-驗證資料來源（防偽）"><a href="#2-驗證資料來源（防偽）" class="headerlink" title="2. 驗證資料來源（防偽）"></a>2. 驗證資料來源（防偽）</h3><p>因為 Hash 中包含商家密鑰，只有商家與金流平台知道，第三方無法偽造相同的 Hash 值。</p>
<h3 id="3-簽章比對（防止偽造）"><a href="#3-簽章比對（防止偽造）" class="headerlink" title="3. 簽章比對（防止偽造）"></a>3. 簽章比對（防止偽造）</h3><p>如同電子簽章，確保伺服器回傳的付款成功訊息未被偽造。</p>
<hr>
<h2 id="三、常見應用場景"><a href="#三、常見應用場景" class="headerlink" title="三、常見應用場景"></a>三、常見應用場景</h2><ol>
<li><p><strong>交易請求（Payment Request）</strong></p>
<ul>
<li>商家送出訂單資訊與 Hash 到金流平台。</li>
<li>金流平台驗證 Hash 是否正確。</li>
</ul>
</li>
<li><p><strong>金流回傳通知（Callback）</strong></p>
<ul>
<li>金流平台回傳付款成功訊息與 Hash。</li>
<li>商家伺服器驗證 Hash 是否正確，確保通知未被偽造。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="四、常見演算法"><a href="#四、常見演算法" class="headerlink" title="四、常見演算法"></a>四、常見演算法</h2><p>常用於金流驗證的 Hash 演算法包括：</p>
<ul>
<li><strong>SHA-256</strong>（常見於 Line Pay、藍新金流）</li>
<li><strong>SHA-1 &#x2F; MD5</strong>（部分舊系統使用，不建議，因為已知有碰撞風險）</li>
</ul>
<hr>
<h2 id="五、範例（以-SHA-256-為例）"><a href="#五、範例（以-SHA-256-為例）" class="headerlink" title="五、範例（以 SHA-256 為例）"></a>五、範例（以 SHA-256 為例）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_hash</span>(<span class="params">params, hash_key, hash_iv</span>):</span><br><span class="line">    <span class="comment"># 1. 排序參數</span></span><br><span class="line">    sorted_params = <span class="built_in">sorted</span>(params.items())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 組合參數字串</span></span><br><span class="line">    query = urllib.parse.urlencode(sorted_params)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 加入 HashKey 和 HashIV</span></span><br><span class="line">    raw = <span class="string">f&quot;HashKey=<span class="subst">&#123;hash_key&#125;</span>&amp;<span class="subst">&#123;query&#125;</span>&amp;HashIV=<span class="subst">&#123;hash_iv&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. URL encode 並轉為小寫</span></span><br><span class="line">    encoded = urllib.parse.quote_plus(raw).lower()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. SHA-256 雜湊後轉大寫</span></span><br><span class="line">    hash_value = hashlib.sha256(encoded.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest().upper()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hash_value</span><br></pre></td></tr></table></figure>

<h2 id="六、重點摘要"><a href="#六、重點摘要" class="headerlink" title="六、重點摘要"></a>六、重點摘要</h2><ul>
<li><p><strong>什麼是 Hash？</strong></p>
<ul>
<li>一種不可逆的單向編碼函數。</li>
<li>輸入內容不論長短，輸出皆為固定長度的字串（雜湊值）。</li>
</ul>
</li>
<li><p><strong>Hash 的特性</strong></p>
<ul>
<li>不可逆性（無法由輸出推回輸入）。</li>
<li>輸入微幅變動會產生截然不同的結果。</li>
<li>相同輸入會產生相同輸出（穩定性）。</li>
</ul>
</li>
<li><p><strong>金流為何需要 Hash？</strong></p>
<ol>
<li><strong>資料驗證</strong>：確保交易資料在傳送過程未遭竄改。</li>
<li><strong>身份驗證</strong>：用來確認請求是否來自可信來源（如商家端或金流平台）。</li>
<li><strong>防止偽造</strong>：Hash 搭配密鑰可防止惡意第三方偽造交易請求。</li>
<li><strong>簽章與紀錄</strong>：用於產生交易紀錄摘要，利於日後比對查核。</li>
</ol>
</li>
<li><p><strong>常見應用場景</strong></p>
<ul>
<li>第三方金流（如：藍新、綠界、Line Pay）API 請求驗證。</li>
<li>商店端對回傳交易結果進行驗證（例如 callback 處理）。</li>
<li>加密交易參數避免資料外洩。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>以下以台灣常見的金流服務商 <strong>綠界科技（ECPay）</strong> 為例，說明 Hash 如何在金流流程中使用。</p>
<h3 id="📌-模擬付款請求流程中的-Hash-機制"><a href="#📌-模擬付款請求流程中的-Hash-機制" class="headerlink" title="📌 模擬付款請求流程中的 Hash 機制"></a>📌 模擬付款請求流程中的 Hash 機制</h3><p>假設我們要透過金流平台建立一筆訂單，商家需呼叫綠界的 API 送出交易請求，為確保資料未被竄改，綠界要求每筆請求需附帶經 Hash 加密的驗證碼（CheckMacValue）。</p>
<h3 id="1-建立交易資料"><a href="#1-建立交易資料" class="headerlink" title="1. 建立交易資料"></a>1. 建立交易資料</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MerchantID=2000132</span><br><span class="line">MerchantTradeNo=KD123456789</span><br><span class="line">MerchantTradeDate=2025/06/12 15:00:00</span><br><span class="line">PaymentType=aio</span><br><span class="line">TotalAmount=1000</span><br><span class="line">TradeDesc=測試交易</span><br><span class="line">ItemName=測試商品1件</span><br><span class="line">ReturnURL=https://www.kdchang.me/callback</span><br><span class="line">ChoosePayment=ALL</span><br></pre></td></tr></table></figure>

<h3 id="2-組合字串（需加上-HashKey-與-HashIV）"><a href="#2-組合字串（需加上-HashKey-與-HashIV）" class="headerlink" title="2. 組合字串（需加上 HashKey 與 HashIV）"></a>2. 組合字串（需加上 HashKey 與 HashIV）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashKey=5294y06JbISpM5x9</span><br><span class="line">HashIV=v77hoKGq4kWxNNIS</span><br><span class="line"></span><br><span class="line">組合前格式如下（依照參數 ASCII 排序）：</span><br><span class="line">HashKey=5294y06JbISpM5x9&amp;ChoosePayment=ALL&amp;ItemName=測試商品1件&amp;MerchantID=2000132&amp;MerchantTradeDate=2025/06/12 15:00:00&amp;MerchantTradeNo=KD123456789&amp;PaymentType=aio&amp;ReturnURL=https://www.kdchang.me/callback&amp;TotalAmount=1000&amp;TradeDesc=測試交易&amp;HashIV=v77hoKGq4kWxNNIS</span><br></pre></td></tr></table></figure>

<h3 id="3-進行-URL-Encode-與轉成小寫，再做-Hash（通常使用-SHA256）"><a href="#3-進行-URL-Encode-與轉成小寫，再做-Hash（通常使用-SHA256）" class="headerlink" title="3. 進行 URL Encode 與轉成小寫，再做 Hash（通常使用 SHA256）"></a>3. 進行 URL Encode 與轉成小寫，再做 Hash（通常使用 SHA256）</h3><p>經過 SHA256 計算後會得到一段長度為 64 字元的十六進位字串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckMacValue=5F8BCE79E9D2748F443D751B34EC5085EDB8C52265521FC42D6F807F208F47D2</span><br></pre></td></tr></table></figure>

<p>此值將作為驗證碼隨交易資料一併傳送至金流平台。</p>
<h3 id="4-綠界端驗證流程"><a href="#4-綠界端驗證流程" class="headerlink" title="4. 綠界端驗證流程"></a>4. 綠界端驗證流程</h3><p>綠界收到資料後，會根據相同的規則計算一次 Hash 值並與商家提供的 CheckMacValue 比對，若一致，才表示資料未遭竄改，交易請求才會被接受。</p>
<hr>
<h3 id="延伸說明：為什麼不用密碼明文？"><a href="#延伸說明：為什麼不用密碼明文？" class="headerlink" title="延伸說明：為什麼不用密碼明文？"></a>延伸說明：為什麼不用密碼明文？</h3><p>有些人可能會問：「為何不直接傳送密碼或 token 來驗證身分？」原因在於：</p>
<ul>
<li>密碼若明文傳輸容易被攔截。</li>
<li>即使是 HTTPS 傳輸，也無法防止伺服器端遭駭後資料外洩。</li>
<li>Hash 機制能將敏感資訊加密為單向摘要，即使外洩也難以還原原始資料。</li>
</ul>
<p>若搭配 <strong>時間戳記</strong>、<strong>一次性 token</strong> 或 <strong>HMAC</strong>（含密鑰的 Hash），可大幅提升安全性。</p>
<h2 id="七、總結"><a href="#七、總結" class="headerlink" title="七、總結"></a>七、總結</h2><p>金流使用 Hash 的核心目的是「<strong>確保資料未被篡改並驗證來源合法性</strong>」。它就像資料的「指紋」，能保證交易資訊的完整性與安全性。若缺乏這種驗證機制，金流系統就容易遭受攻擊或詐騙，對商家與消費者都造成風險。</p>
<p>因此，不論是在串接金流 API、處理回傳通知或比對訂單資訊時，<strong>妥善處理 Hash 的生成與比對，是金流串接不可忽略的重要環節。</strong></p>
]]></content>
      <tags>
        <tag>Line Pay API</tag>
        <tag>第三方支付</tag>
        <tag>payment</tag>
        <tag>Hash</tag>
        <tag>金流</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinia Setup Store 與 Option Store 比較介紹入門教學筆記</title>
    <url>/2024/12/16/learning-notes-pinia-setup-store-option-store-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Pinia 是 Vue 3 推薦的狀態管理工具，作為 Vuex 的繼任者，Pinia 以簡潔且直觀的 API 設計，為 Vue 生態系帶來更輕量且易於維護的解決方案。Pinia 提供兩種撰寫 store 的方式：Option Store 與 Setup Store。兩者皆支援響應式狀態管理，但在語法結構與彈性上有所不同。理解這兩種寫法的差異，對於新手以及想提升開發效率的工程師來說相當重要。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><strong>Option Store 是物件式語法</strong>，結構清晰，適合剛接觸 Pinia 或 Vuex 過渡的開發者。</li>
<li><strong>Setup Store 採用 Composition API 語法</strong>，彈性更大，易於搭配 Vue 3 的其它 API 使用。</li>
<li>Option Store 通常使用 <code>state</code>、<code>getters</code>、<code>actions</code> 三大屬性分隔管理狀態、計算屬性與方法。</li>
<li>Setup Store 透過 <code>ref</code>、<code>reactive</code> 直接定義響應式狀態，並以函式回傳公開 API，結構更自由。</li>
<li>Setup Store 更方便與 <code>computed</code>、<code>watch</code>、<code>async/await</code> 等 Composition API 功能整合。</li>
<li>Option Store 語法更接近 Vuex，學習門檻較低，但在複雜邏輯時不易拆分。</li>
<li>Setup Store 支援多 store 之間更靈活的組合與重用。</li>
</ul>
<hr>
<h2 id="1-Option-Store-範例"><a href="#1-Option-Store-範例" class="headerlink" title="1. Option Store 範例"></a>1. Option Store 範例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/counterOption.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementBy</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> += amount;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="特點說明"><a href="#特點說明" class="headerlink" title="特點說明"></a>特點說明</h3><ul>
<li><code>state</code> 是一個函式，回傳物件，定義響應式資料。</li>
<li><code>getters</code> 為基於 state 的計算屬性，類似 Vue 的 computed。</li>
<li><code>actions</code> 用於定義操作狀態的方法，且可包含異步邏輯。</li>
<li>語法簡單，概念清晰，適合快速上手。</li>
</ul>
<hr>
<h2 id="2-Setup-Store-範例"><a href="#2-Setup-Store-範例" class="headerlink" title="2. Setup Store 範例"></a>2. Setup Store 範例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/counterSetup.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">incrementBy</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    count.<span class="property">value</span> += amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment,</span><br><span class="line">    incrementBy,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="特點說明-1"><a href="#特點說明-1" class="headerlink" title="特點說明"></a>特點說明</h3><ul>
<li>直接使用 Vue Composition API 的 <code>ref</code> 和 <code>computed</code>。</li>
<li>可自由使用所有 Vue Composition API 來封裝邏輯。</li>
<li>方法與狀態同時定義在函式作用域內，結構更模組化。</li>
<li>支援更複雜狀態邏輯與副作用控制。</li>
</ul>
<hr>
<h2 id="3-比較分析"><a href="#3-比較分析" class="headerlink" title="3. 比較分析"></a>3. 比較分析</h2><table>
<thead>
<tr>
<th>項目</th>
<th>Option Store</th>
<th>Setup Store</th>
</tr>
</thead>
<tbody><tr>
<td><strong>語法風格</strong></td>
<td>物件式，類似 Vuex</td>
<td>函式式，基於 Composition API</td>
</tr>
<tr>
<td><strong>學習曲線</strong></td>
<td>容易入門，結構清楚</td>
<td>需要熟悉 Vue 3 Composition API</td>
</tr>
<tr>
<td><strong>狀態管理</strong></td>
<td>透過 <code>state</code> 函式返回物件</td>
<td>使用 <code>ref</code> 或 <code>reactive</code> 定義狀態</td>
</tr>
<tr>
<td><strong>計算屬性</strong></td>
<td>透過 <code>getters</code> 定義</td>
<td>使用 <code>computed</code> 定義</td>
</tr>
<tr>
<td><strong>方法定義</strong></td>
<td>放在 <code>actions</code> 中</td>
<td>直接函式內定義，結構更自由</td>
</tr>
<tr>
<td><strong>邏輯拆分</strong></td>
<td>較不靈活，所有邏輯集中</td>
<td>可拆分成多個函式模組，彈性更高</td>
</tr>
<tr>
<td><strong>異步處理</strong></td>
<td>支援，寫法較直觀</td>
<td>支援，且更方便搭配 <code>async/await</code></td>
</tr>
<tr>
<td><strong>重用性</strong></td>
<td>較弱</td>
<td>易於組合與重用，搭配 Composition API 更佳</td>
</tr>
<tr>
<td><strong>持久化插件支持</strong></td>
<td>兩者皆支持</td>
<td>兩者皆支持</td>
</tr>
<tr>
<td><strong>與 Vue 3 整合</strong></td>
<td>一般</td>
<td>深度整合，充分發揮 Vue 3 特性</td>
</tr>
</tbody></table>
<hr>
<h2 id="4-什麼時候用哪種？"><a href="#4-什麼時候用哪種？" class="headerlink" title="4. 什麼時候用哪種？"></a>4. 什麼時候用哪種？</h2><ul>
<li>**初學者或 Vuex 使用者：**建議先使用 Option Store，語法熟悉、過渡平滑。</li>
<li>**專案中需大量組合邏輯、重用邏輯時：**Setup Store 更適合，也更符合 Vue 3 生態。</li>
<li>**大型專案或團隊合作：**Setup Store 可拆分細節更清楚，便於維護與測試。</li>
<li>**希望在 Store 中使用複雜副作用（例如 watch、watchEffect）：**必須使用 Setup Store。</li>
</ul>
<hr>
<h2 id="5-總結與建議"><a href="#5-總結與建議" class="headerlink" title="5. 總結與建議"></a>5. 總結與建議</h2><p>Pinia 的 Option Store 與 Setup Store 各有優劣，根據團隊熟悉度、專案規模與需求選擇合適的寫法。掌握兩者能幫助你靈活應對不同開發場景。</p>
<hr>
<h2 id="補充：如何在專案中使用"><a href="#補充：如何在專案中使用" class="headerlink" title="補充：如何在專案中使用"></a>補充：如何在專案中使用</h2><ol>
<li>安裝 Pinia：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>main.js</code> 初始化：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>直接在組件中使用 store：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/counterSetup&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter.<span class="title function_">increment</span>();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Double: &#123;&#123; counter.doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>後端</tag>
        <tag>軟體工程</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>PostCSS 入門教學筆記 | 學習筆記</title>
    <url>/2024/09/16/learning-notes-postcss-intro-tutorial/</url>
    <content><![CDATA[<h2 id="一、什麼是-PostCSS？"><a href="#一、什麼是-PostCSS？" class="headerlink" title="一、什麼是 PostCSS？"></a>一、什麼是 PostCSS？</h2><p>PostCSS 是一個 <strong>CSS 的轉換工具（CSS Transformer）</strong>，本身不是 CSS 預處理器（如 Sass）或框架（如 Tailwind CSS），但它可以透過「外掛（plugin）」的方式強化你的 CSS 工作流程。</p>
<p>簡單來說，PostCSS 是一個平台，讓你可以用 JavaScript 編寫規則，自動處理 CSS，像是：</p>
<ul>
<li>自動加上瀏覽器前綴（autoprefixer）</li>
<li>支援未來 CSS 語法（例如 Nesting）</li>
<li>壓縮 CSS、移除重複樣式</li>
<li>搭配 Tailwind CSS 進行原子化設計</li>
</ul>
<hr>
<h2 id="二、PostCSS-的運作原理"><a href="#二、PostCSS-的運作原理" class="headerlink" title="二、PostCSS 的運作原理"></a>二、PostCSS 的運作原理</h2><p>PostCSS 的流程如下：</p>
<ol>
<li>將原始 CSS 解析為 AST（抽象語法樹）</li>
<li>透過插件對 AST 進行操作</li>
<li>將修改後的 AST 轉回 CSS 輸出</li>
</ol>
<p>你可以選擇使用官方插件、社群插件，甚至自己寫 plugin。</p>
<hr>
<h2 id="三、如何安裝與設定-PostCSS"><a href="#三、如何安裝與設定-PostCSS" class="headerlink" title="三、如何安裝與設定 PostCSS"></a>三、如何安裝與設定 PostCSS</h2><h3 id="安裝（使用-npm）"><a href="#安裝（使用-npm）" class="headerlink" title="安裝（使用 npm）"></a>安裝（使用 npm）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D postcss postcss-cli autoprefixer</span><br></pre></td></tr></table></figure>

<h3 id="建立-PostCSS-設定檔-postcss-config-js"><a href="#建立-PostCSS-設定檔-postcss-config-js" class="headerlink" title="建立 PostCSS 設定檔 postcss.config.js"></a>建立 PostCSS 設定檔 <code>postcss.config.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣 PostCSS 就會讀取這個設定檔，並在處理 CSS 時自動加入瀏覽器前綴。</p>
<hr>
<h2 id="四、基本使用流程"><a href="#四、基本使用流程" class="headerlink" title="四、基本使用流程"></a>四、基本使用流程</h2><p>假設你有一個檔案 <code>src/style.css</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/style.css */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-color</span>: <span class="number">#4f46e5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="執行-PostCSS-處理："><a href="#執行-PostCSS-處理：" class="headerlink" title="執行 PostCSS 處理："></a>執行 PostCSS 處理：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx postcss src/style.css -o dist/style.css</span><br></pre></td></tr></table></figure>

<p>這會根據你的 <code>postcss.config.js</code> 處理並輸出到 <code>dist/style.css</code>。</p>
<h3 id="輸出結果可能為："><a href="#輸出結果可能為：" class="headerlink" title="輸出結果可能為："></a>輸出結果可能為：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-color</span>: <span class="number">#4f46e5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">     -moz-user-select: none;</span><br><span class="line">      -ms-user-select: none;</span><br><span class="line">          user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這就是 <code>autoprefixer</code> 自動補完各種瀏覽器相容性的結果。</p>
<hr>
<h2 id="五、常用插件介紹與範例"><a href="#五、常用插件介紹與範例" class="headerlink" title="五、常用插件介紹與範例"></a>五、常用插件介紹與範例</h2><h3 id="1-autoprefixer（最常見）"><a href="#1-autoprefixer（最常見）" class="headerlink" title="1. autoprefixer（最常見）"></a>1. <code>autoprefixer</code>（最常見）</h3><p>自動加上 CSS 瀏覽器前綴</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D autoprefixer</span><br></pre></td></tr></table></figure>

<p>可搭配 <code>.browserslistrc</code> 或 <code>package.json</code> 設定支援目標：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&gt; 1%</span><br><span class="line">last 2 versions</span><br><span class="line">not dead</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-postcss-preset-env"><a href="#2-postcss-preset-env" class="headerlink" title="2. postcss-preset-env"></a>2. <code>postcss-preset-env</code></h3><p>支援未來 CSS 語法，例如 Nesting、變數、邏輯函數等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D postcss-preset-env</span><br></pre></td></tr></table></figure>

<p>更新設定檔：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)(&#123;</span><br><span class="line">      <span class="attr">stage</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然後你就可以寫類似這樣的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>經過 PostCSS 處理後會被轉成瀏覽器可讀的標準語法。</p>
<hr>
<h3 id="3-cssnano（壓縮-CSS）"><a href="#3-cssnano（壓縮-CSS）" class="headerlink" title="3. cssnano（壓縮 CSS）"></a>3. <code>cssnano</code>（壓縮 CSS）</h3><p>這個插件會讓 CSS 變得更小，適合生產環境使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D cssnano</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>)(&#123;</span><br><span class="line">      <span class="attr">preset</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、PostCSS-與-Tailwind-CSS-的關係"><a href="#六、PostCSS-與-Tailwind-CSS-的關係" class="headerlink" title="六、PostCSS 與 Tailwind CSS 的關係"></a>六、PostCSS 與 Tailwind CSS 的關係</h2><p>Tailwind CSS 是建立在 PostCSS 基礎上的一個插件。因此在安裝 Tailwind 時你會看到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure>

<p>這個指令會產生 <code>postcss.config.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">tailwindcss</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Tailwind 本身就是一個 PostCSS 插件，會將你在 HTML 或 JSX 中寫的 class 轉換成實際的 CSS。</p>
<hr>
<h2 id="七、PostCSS-與其他工具整合"><a href="#七、PostCSS-與其他工具整合" class="headerlink" title="七、PostCSS 與其他工具整合"></a>七、PostCSS 與其他工具整合</h2><h3 id="搭配-Vite"><a href="#搭配-Vite" class="headerlink" title="搭配 Vite"></a>搭配 Vite</h3><p>Vite 專案中只要有 <code>postcss.config.js</code> 檔案，會自動載入設定，不需額外安裝。</p>
<h3 id="搭配-Webpack"><a href="#搭配-Webpack" class="headerlink" title="搭配 Webpack"></a>搭配 Webpack</h3><p>在 <code>webpack.config.js</code> 加入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="八、自訂-PostCSS-插件（進階）"><a href="#八、自訂-PostCSS-插件（進階）" class="headerlink" title="八、自訂 PostCSS 插件（進階）"></a>八、自訂 PostCSS 插件（進階）</h2><p>你也可以自己撰寫插件來操作 CSS AST：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">postcssPlugin</span>: <span class="string">&#x27;my-plugin&#x27;</span>,</span><br><span class="line">    <span class="title class_">Declaration</span>(decl) &#123;</span><br><span class="line">      <span class="keyword">if</span> (decl.<span class="property">prop</span> === <span class="string">&#x27;color&#x27;</span> &amp;&amp; decl.<span class="property">value</span> === <span class="string">&#x27;red&#x27;</span>) &#123;</span><br><span class="line">        decl.<span class="property">value</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">postcss</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>這個簡單的插件會把 <code>color: red</code> 自動換成 <code>color: blue</code>。</p>
<hr>
<h2 id="九、總結"><a href="#九、總結" class="headerlink" title="九、總結"></a>九、總結</h2><p>PostCSS 雖然不像 Sass 有自己的語法，也不像 Tailwind 有明確的設計架構，但它是現代前端 CSS 處理流程中不可或缺的工具，擁有高度彈性與強大生態系。</p>
<p>我們可以根據需求只加幾個插件，也可以像 Tailwind 那樣完全建構在它上面。尤其當你的專案需要支援多瀏覽器、使用最新 CSS 語法、進行建置壓縮時，PostCSS 是最佳解法之一。</p>
<p>如果你正在使用 Vite、Next.js、或是 Tailwind CSS，幾乎都已內建 PostCSS 支援。了解它的運作方式能幫你更精準地控制前端樣式處理流程。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>css</tag>
        <tag>PostCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Prisma ORM 入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-prisma-orm-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代 Web 應用中，資料庫與後端邏輯的整合至關重要，而 ORM（Object Relational Mapping）工具正好扮演了簡化資料操作、提升開發效率的角色。Prisma 是一個現代化的 TypeScript ORM，具有直觀的語法、自動型別生成、遷移管理與強大的查詢功能，深受開發者喜愛。</p>
<p>本教學將帶你從安裝 Prisma、設定 schema、執行 migration、撰寫查詢等一步步建立對 Prisma 的基本理解。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>Prisma 是一套現代化的 Node.js ORM 工具，支援 PostgreSQL、MySQL、SQLite、SQL Server、MongoDB。</li>
<li>使用 Prisma Schema 語言定義資料模型，並自動生成型別與查詢方法。</li>
<li>透過 CLI 工具可快速進行資料庫遷移與型別同步。</li>
<li>與 TypeScript 深度整合，享有 IDE 型別提示與靜態檢查。</li>
<li>Prisma Client 是用來查詢資料庫的自動產生型別安全工具。</li>
<li>支援 transaction、raw SQL、relation 查詢等進階功能。</li>
</ul>
<hr>
<h2 id="快速安裝與初始化"><a href="#快速安裝與初始化" class="headerlink" title="快速安裝與初始化"></a>快速安裝與初始化</h2><h3 id="1-初始化專案"><a href="#1-初始化專案" class="headerlink" title="1. 初始化專案"></a>1. 初始化專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-prisma-app &amp;&amp; <span class="built_in">cd</span> my-prisma-app</span><br><span class="line">npm init -y</span><br><span class="line">npm install prisma --save-dev</span><br><span class="line">npx prisma init</span><br></pre></td></tr></table></figure>

<p>上述指令會建立以下結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── prisma/</span><br><span class="line">│   └── schema.prisma   // 資料模型定義</span><br><span class="line">└── .env                // 資料庫連線字串</span><br></pre></td></tr></table></figure>

<h3 id="2-設定資料庫"><a href="#2-設定資料庫" class="headerlink" title="2. 設定資料庫"></a>2. 設定資料庫</h3><p>以 PostgreSQL 為例，在 <code>.env</code> 中加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATABASE_URL=&quot;postgresql://user:password@localhost:5432/mydb&quot;</span><br></pre></td></tr></table></figure>

<p>然後修改 <code>prisma/schema.prisma</code> 檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generator client &#123;</span><br><span class="line">  provider = &quot;prisma-client-js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = &quot;postgresql&quot;</span><br><span class="line">  url      = env(&quot;DATABASE_URL&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="定義資料模型"><a href="#定義資料模型" class="headerlink" title="定義資料模型"></a>定義資料模型</h2><p>以下是一個簡單的 <code>User</code> 與 <code>Post</code> 的關聯模型範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model User &#123;</span><br><span class="line">  id       Int     @id @default(autoincrement())</span><br><span class="line">  email    String  @unique</span><br><span class="line">  name     String?</span><br><span class="line">  posts    Post[]</span><br><span class="line">  createdAt DateTime @default(now())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model Post &#123;</span><br><span class="line">  id        Int     @id @default(autoincrement())</span><br><span class="line">  title     String</span><br><span class="line">  content   String?</span><br><span class="line">  published Boolean @default(false)</span><br><span class="line">  author    User    @relation(fields: [authorId], references: [id])</span><br><span class="line">  authorId  Int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="建立資料庫與生成-Prisma-Client"><a href="#建立資料庫與生成-Prisma-Client" class="headerlink" title="建立資料庫與生成 Prisma Client"></a>建立資料庫與生成 Prisma Client</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx prisma migrate dev --name init</span><br></pre></td></tr></table></figure>

<p>這會：</p>
<ul>
<li>根據 schema 建立 migration SQL</li>
<li>自動套用到資料庫</li>
<li>產生型別安全的 Prisma Client</li>
</ul>
<hr>
<h2 id="使用-Prisma-Client-查詢資料"><a href="#使用-Prisma-Client-查詢資料" class="headerlink" title="使用 Prisma Client 查詢資料"></a>使用 Prisma Client 查詢資料</h2><h3 id="安裝並匯入-Prisma-Client"><a href="#安裝並匯入-Prisma-Client" class="headerlink" title="安裝並匯入 Prisma Client"></a>安裝並匯入 Prisma Client</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @prisma/client</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@prisma/client&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> prisma = <span class="keyword">new</span> <span class="title class_">PrismaClient</span>();</span><br></pre></td></tr></table></figure>

<h3 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> prisma.<span class="property">user</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;alice@example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">posts</span>: &#123;</span><br><span class="line">      <span class="attr">create</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;This is my first post.&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br></pre></td></tr></table></figure>

<h3 id="查詢資料"><a href="#查詢資料" class="headerlink" title="查詢資料"></a>查詢資料</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allUsers = <span class="keyword">await</span> prisma.<span class="property">user</span>.<span class="title function_">findMany</span>(&#123;</span><br><span class="line">  <span class="attr">include</span>: &#123;</span><br><span class="line">    <span class="attr">posts</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(allUsers, &#123; <span class="attr">depth</span>: <span class="literal">null</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="更新資料"><a href="#更新資料" class="headerlink" title="更新資料"></a>更新資料</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> prisma.<span class="property">post</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">published</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> prisma.<span class="property">post</span>.<span class="title function_">delete</span>(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="進階功能介紹"><a href="#進階功能介紹" class="headerlink" title="進階功能介紹"></a>進階功能介紹</h2><ul>
<li><strong>Relation 查詢</strong>：支援巢狀查詢與 lazy loading。</li>
<li><strong>Transaction</strong>：支援多筆操作的交易一致性。</li>
<li><strong>Raw SQL</strong>：如需彈性操作，可透過 <code>prisma.$queryRaw</code> 撰寫 SQL。</li>
<li><strong>Prisma Studio</strong>：可視化資料庫管理 UI，透過 <code>npx prisma studio</code> 啟動。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Prisma 是一套設計現代化、對開發者友善的 ORM 工具，特別適合搭配 TypeScript 開發的應用。它不僅簡化了資料庫操作流程，還提升了開發與除錯效率。無論你是從 Sequelize、TypeORM 轉移而來，或是初次使用 ORM，都能快速上手 Prisma 並有效管理你的資料層邏輯。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://www.prisma.io/docs">官方文件</a></li>
</ol>
]]></content>
      <tags>
        <tag>Prisma</tag>
        <tag>Prisma ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Progressive Web App（PWA）入門教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-pwa-intro-tutorial/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在行動裝置普及的今天，使用者越來越期待 Web 應用程式能提供與原生 App 相近的使用體驗。然而，傳統 Web 應用程式在離線支援、效能與通知推送等方面仍有所不足。為了彌補這些缺點，<strong>Progressive Web App（PWA）</strong> 應運而生。</p>
<p>PWA 結合了 Web 技術與原生 App 的優勢，使網站具備離線可用、快速載入、可安裝、推播通知等功能，進而提升使用者體驗與互動黏著度。對開發者而言，PWA 是一種較低成本就能達到跨平台效果的解法。本文將帶你快速認識 PWA 的核心概念與實作方式，適合初學者或 Web 開發者作為入門參考。</p>
<hr>
<h2 id="二、重點摘要"><a href="#二、重點摘要" class="headerlink" title="二、重點摘要"></a>二、重點摘要</h2><ul>
<li><p><strong>PWA 定義</strong>：一種利用現代 Web API 提供類似原生 App 體驗的 Web 應用程式。</p>
</li>
<li><p><strong>三大核心技術</strong>：</p>
<ul>
<li><strong>HTTPS</strong>：保護傳輸安全並啟用 Service Worker。</li>
<li><strong>Web App Manifest</strong>：描述應用程式的基本資訊，例如名稱、圖示、顯示模式等。</li>
<li><strong>Service Worker</strong>：一種可攔截網路請求並實現快取、離線功能的背景腳本。</li>
</ul>
</li>
<li><p><strong>PWA 特性</strong>：</p>
<ul>
<li>可安裝（Installable）</li>
<li>離線可用（Offline capable）</li>
<li>背景推播（Push Notification）</li>
<li>響應式設計（Responsive）</li>
<li>快速載入（Fast loading）</li>
</ul>
</li>
<li><p><strong>使用情境</strong>：</p>
<ul>
<li>新創或中小企業開發跨平台 App</li>
<li>強化使用者體驗的內容網站或工具型網站</li>
<li>電商網站提升轉換率與留存</li>
</ul>
</li>
</ul>
<hr>
<h2 id="三、實際範例：打造一個簡單的-PWA"><a href="#三、實際範例：打造一個簡單的-PWA" class="headerlink" title="三、實際範例：打造一個簡單的 PWA"></a>三、實際範例：打造一個簡單的 PWA</h2><p>我們將從零開始建立一個基本的 PWA 網站，具備可安裝與離線快取功能。</p>
<h3 id="1-建立專案目錄與基本檔案"><a href="#1-建立專案目錄與基本檔案" class="headerlink" title="1. 建立專案目錄與基本檔案"></a>1. 建立專案目錄與基本檔案</h3><p>建立一個資料夾，內含下列檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwa-demo/</span><br><span class="line">├── index.html</span><br><span class="line">├── app.js</span><br><span class="line">├── service-worker.js</span><br><span class="line">├── manifest.json</span><br></pre></td></tr></table></figure>

<h3 id="2-撰寫-index-html"><a href="#2-撰寫-index-html" class="headerlink" title="2. 撰寫 index.html"></a>2. 撰寫 <code>index.html</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>PWA Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;manifest.json&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, PWA!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-撰寫-manifest-json"><a href="#3-撰寫-manifest-json" class="headerlink" title="3. 撰寫 manifest.json"></a>3. 撰寫 <code>manifest.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PWA Demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PWADemo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffffff&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon-192.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon-512.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512x512&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>請準備對應的 <code>icon-192.png</code> 與 <code>icon-512.png</code> 圖示檔案放入根目錄。</p>
<h3 id="4-撰寫-app-js-並註冊-Service-Worker"><a href="#4-撰寫-app-js-並註冊-Service-Worker" class="headerlink" title="4. 撰寫 app.js 並註冊 Service Worker"></a>4. 撰寫 <code>app.js</code> 並註冊 Service Worker</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.<span class="property">serviceWorker</span></span><br><span class="line">      .<span class="title function_">register</span>(<span class="string">&#x27;service-worker.js&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">reg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Service Worker 註冊成功:&#x27;</span>, reg.<span class="property">scope</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Service Worker 註冊失敗:&#x27;</span>, err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-撰寫-service-worker-js"><a href="#5-撰寫-service-worker-js" class="headerlink" title="5. 撰寫 service-worker.js"></a>5. 撰寫 <code>service-worker.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CACHE_NAME</span> = <span class="string">&#x27;pwa-demo-cache-v1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> urlsToCache = [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/index.html&#x27;</span>, <span class="string">&#x27;/app.js&#x27;</span>, <span class="string">&#x27;/icon-192.png&#x27;</span>, <span class="string">&#x27;/icon-512.png&#x27;</span>];</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&#x27;install&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">waitUntil</span>(caches.<span class="title function_">open</span>(<span class="variable constant_">CACHE_NAME</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">cache</span>) =&gt;</span> cache.<span class="title function_">addAll</span>(urlsToCache)));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(</span><br><span class="line">    caches.<span class="title function_">match</span>(event.<span class="property">request</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response || <span class="title function_">fetch</span>(event.<span class="property">request</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-本地測試與部署"><a href="#6-本地測試與部署" class="headerlink" title="6. 本地測試與部署"></a>6. 本地測試與部署</h3><p>PWA 需在 HTTPS 或 localhost 環境下運行，因此建議使用以下方式測試：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx serve</span><br></pre></td></tr></table></figure>

<p>或是使用 VS Code 的 Live Server 插件。</p>
<hr>
<h2 id="四、補充建議與工具"><a href="#四、補充建議與工具" class="headerlink" title="四、補充建議與工具"></a>四、補充建議與工具</h2><ul>
<li><strong>Lighthouse</strong>：使用 Chrome DevTools 的 Lighthouse 工具分析網站是否符合 PWA 標準。</li>
<li><strong>Workbox</strong>：Google 提供的套件，簡化 Service Worker 撰寫與管理。</li>
<li><strong>Vite &#x2F; Next.js</strong>：這些框架和建造工具支援套件快速啟用 PWA，例如 Vite Plugin PWA。</li>
</ul>
<hr>
<h2 id="五、總結"><a href="#五、總結" class="headerlink" title="五、總結"></a>五、總結</h2><p>Progressive Web App 是 Web 應用向原生體驗邁進的重要里程碑。透過簡單的設計與實作，我們可以為網站加入離線能力、安裝功能與更佳的效能表現。PWA 不僅提升使用者體驗，也為開發者帶來更高的轉換率與技術可能性。若你正考慮提升網站互動性與可達性，不妨從簡單的 PWA 嘗試開始，逐步拓展應用場景與技術深度。</p>
]]></content>
      <tags>
        <tag>ES Module</tag>
        <tag>PWA</tag>
        <tag>Progressive Web App</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Decorator 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/13/learning-notes-python-decorator-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Python 的日常開發中，<code>decorator（裝飾器）</code> 是一個非常強大的語法工具，常用於<strong>增強函式功能</strong>，例如：記錄日誌、驗證權限、計時、快取等。在許多框架（如 Flask、Django）或第三方函式庫中，也可以經常看到裝飾器的身影。</p>
<p>然而對初學者來說，decorator 的語法可能一開始比較難以理解，尤其涉及到函式是「第一類物件（first-class object）」、「閉包（closure）」的概念。本篇筆記將循序漸進帶你理解 decorator 的本質與應用方式。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><strong>Python 函式是第一類物件</strong>：可以作為參數傳遞、作為回傳值、賦值給變數。</li>
<li><strong>閉包（Closure）</strong>：內部函式可以存取外部函式的變數，函式結束後變數仍可存活。</li>
<li><strong>Decorator 是一種語法糖</strong>，本質是「接收一個函式，回傳一個新的函式」的高階函式。</li>
<li><strong>使用 <code>@</code> 語法糖可以簡潔地套用裝飾器</strong>。</li>
<li><strong>裝飾器可用於邏輯共用、權限驗證、效能監控、快取等實務情境</strong>。</li>
<li><strong><code>functools.wraps</code> 可保持被裝飾函式的名稱與 docstring 資訊</strong>。</li>
</ul>
<hr>
<h2 id="一、基礎概念與語法"><a href="#一、基礎概念與語法" class="headerlink" title="一、基礎概念與語法"></a>一、基礎概念與語法</h2><h3 id="1-函式是物件"><a href="#1-函式是物件" class="headerlink" title="1. 函式是物件"></a>1. 函式是物件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">say_hello = greet</span><br><span class="line"><span class="built_in">print</span>(say_hello(<span class="string">&quot;Alice&quot;</span>))  <span class="comment"># Hello, Alice</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函式可以被賦值給變數、作為參數傳遞，也能作為回傳值。</p>
</blockquote>
<hr>
<h3 id="2-函式作為參數的例子"><a href="#2-函式作為參數的例子" class="headerlink" title="2. 函式作為參數的例子"></a>2. 函式作為參數的例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_twice</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        func()</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hi!&quot;</span>)</span><br><span class="line"></span><br><span class="line">do_twice(say_hi)()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>這就是簡單的裝飾器雛形，<code>do_twice</code> 接收一個函式，回傳一個新的函式。</p>
</blockquote>
<hr>
<h2 id="二、實作一個簡單-decorator"><a href="#二、實作一個簡單-decorator" class="headerlink" title="二、實作一個簡單 decorator"></a>二、實作一個簡單 decorator</h2><h3 id="1-不帶參數的-decorator"><a href="#1-不帶參數的-decorator" class="headerlink" title="1. 不帶參數的 decorator"></a>1. 不帶參數的 decorator</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;執行前&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;執行後&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure>

<h4 id="輸出："><a href="#輸出：" class="headerlink" title="輸出："></a>輸出：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">執行前</span><br><span class="line">Hello!</span><br><span class="line">執行後</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>@my_decorator</code> 這行等同於 <code>say_hello = my_decorator(say_hello)</code>。裝飾器會接手原本的函式，包裝成新的邏輯後回傳。</p>
</blockquote>
<hr>
<h3 id="2-處理有參數的函式"><a href="#2-處理有參數的函式" class="headerlink" title="2. 處理有參數的函式"></a>2. 處理有參數的函式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;執行前&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;執行後&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;KD&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 <code>*args, **kwargs</code> 可以支援任何參數的函式。</p>
</blockquote>
<hr>
<h3 id="3-保留原函式資訊：使用-functools-wraps"><a href="#3-保留原函式資訊：使用-functools-wraps" class="headerlink" title="3. 保留原函式資訊：使用 functools.wraps"></a>3. 保留原函式資訊：使用 <code>functools.wraps</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;執行前&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加總兩數&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add.__name__)  <span class="comment"># add</span></span><br><span class="line"><span class="built_in">print</span>(add.__doc__)   <span class="comment"># 加總兩數</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>沒有 <code>functools.wraps</code>，函式的名稱會變成 <code>wrapper</code>，容易影響除錯與文件產生。</p>
</blockquote>
<hr>
<h2 id="三、實用範例：計時-decorator"><a href="#三、實用範例：計時-decorator" class="headerlink" title="三、實用範例：計時 decorator"></a>三、實用範例：計時 decorator</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;func.__name__&#125;</span> 執行時間：<span class="subst">&#123;end - start:<span class="number">.4</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slow_function</span>():</span><br><span class="line">    time.sleep(<span class="number">1.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;完成耗時操作&quot;</span>)</span><br><span class="line"></span><br><span class="line">slow_function()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、進階：帶參數的-decorator"><a href="#四、進階：帶參數的-decorator" class="headerlink" title="四、進階：帶參數的 decorator"></a>四、進階：帶參數的 decorator</h2><p>有時我們希望 decorator 接收參數，例如指定權限等，這時候會需要再多一層函式包裝：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">times</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">                func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>repeat(3)</code> 會先執行，回傳 <code>decorator(func)</code>，再包裝原函式。</p>
</blockquote>
<hr>
<h2 id="五、常見應用場景"><a href="#五、常見應用場景" class="headerlink" title="五、常見應用場景"></a>五、常見應用場景</h2><ul>
<li><strong>日誌紀錄（logging）</strong></li>
<li><strong>權限驗證（authorization）</strong></li>
<li><strong>執行時間分析（performance monitoring）</strong></li>
<li><strong>快取（caching）</strong></li>
<li><strong>API 路由（如 Flask 的 @app.route）</strong></li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Python 的 decorator 是一個非常實用的語法技巧，一旦理解其本質為「函式的包裝器」，就可以在實務開發中靈活應用。它讓我們可以<strong>以簡潔的方式注入共用邏輯</strong>，大大提升程式的可讀性與可維護性。</p>
<p>我們在練習 decorator 時，建議搭配日常開發情境，如記錄日誌、印出函式執行時間，從實作中加深理解。當你越熟悉它，便越能體會其在 Python 世界中的威力。</p>
]]></content>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>Decorator</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django CRUD（不使用 ModelForm）入門教學筆記 | 學習筆記</title>
    <url>/2024/08/31/learning-notes-python-django-crud-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Django 中，<code>ModelForm</code> 提供了一個快速建立表單與驗證的工具，但在某些情境下，我們可能希望自己掌控表單結構與驗證流程。這篇筆記將示範如何不依賴 <code>ModelForm</code>，手動實作一套 CRUD 系統，幫助你更深入理解 Django 表單處理的基本原理。</p>
<p>我們將製作一個簡單的「書籍管理系統」，支援新增（Create）、讀取（Read）、更新（Update）與刪除（Delete）書籍資訊。</p>
<h2 id="1-建立-Django-專案與應用"><a href="#1-建立-Django-專案與應用" class="headerlink" title="1. 建立 Django 專案與應用"></a>1. 建立 Django 專案與應用</h2><p>首先，安裝 Django 並建立新的專案與應用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line">django-admin startproject myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">python manage.py startapp books</span><br></pre></td></tr></table></figure>

<p>註冊 <code>books</code> 應用於 <code>myproject/settings.py</code> 的 <code>INSTALLED_APPS</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="2-定義模型（Model）"><a href="#2-定義模型（Model）" class="headerlink" title="2. 定義模型（Model）"></a>2. 定義模型（Model）</h2><p>在 <code>books/models.py</code> 中定義一個簡單的書籍模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    author = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    published_date = models.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure>

<p>遷移資料庫：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h2 id="3-撰寫-Views（不使用-ModelForm）"><a href="#3-撰寫-Views（不使用-ModelForm）" class="headerlink" title="3. 撰寫 Views（不使用 ModelForm）"></a>3. 撰寫 Views（不使用 ModelForm）</h2><p>在 <code>books/views.py</code> 中撰寫手動處理的 CRUD 功能。</p>
<h3 id="新增書籍（Create）"><a href="#新增書籍（Create）" class="headerlink" title="新增書籍（Create）"></a>新增書籍（Create）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> django.utils.dateparse <span class="keyword">import</span> parse_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_book</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        author = request.POST.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        published_date_str = request.POST.get(<span class="string">&#x27;published_date&#x27;</span>)</span><br><span class="line">        published_date = parse_date(published_date_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> title <span class="keyword">and</span> author <span class="keyword">and</span> published_date:</span><br><span class="line">            Book.objects.create(title=title, author=author, published_date=published_date)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&quot;所有欄位皆為必填&quot;</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;books/book_form.html&#x27;</span>, &#123;<span class="string">&#x27;error&#x27;</span>: error&#125;)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;books/book_form.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="讀取書籍（Read）"><a href="#讀取書籍（Read）" class="headerlink" title="讀取書籍（Read）"></a>讀取書籍（Read）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">book_list</span>(<span class="params">request</span>):</span><br><span class="line">    books = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;books/book_list.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="更新書籍（Update）"><a href="#更新書籍（Update）" class="headerlink" title="更新書籍（Update）"></a>更新書籍（Update）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_book</span>(<span class="params">request, pk</span>):</span><br><span class="line">    book = get_object_or_404(Book, pk=pk)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        author = request.POST.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        published_date_str = request.POST.get(<span class="string">&#x27;published_date&#x27;</span>)</span><br><span class="line">        published_date = parse_date(published_date_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> title <span class="keyword">and</span> author <span class="keyword">and</span> published_date:</span><br><span class="line">            book.title = title</span><br><span class="line">            book.author = author</span><br><span class="line">            book.published_date = published_date</span><br><span class="line">            book.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&quot;所有欄位皆為必填&quot;</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;books/book_form.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>: book, <span class="string">&#x27;error&#x27;</span>: error&#125;)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;books/book_form.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>: book&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="刪除書籍（Delete）"><a href="#刪除書籍（Delete）" class="headerlink" title="刪除書籍（Delete）"></a>刪除書籍（Delete）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete_book</span>(<span class="params">request, pk</span>):</span><br><span class="line">    book = get_object_or_404(Book, pk=pk)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        book.delete()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;book_list&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;books/book_confirm_delete.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>: book&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-設定-URL-路由"><a href="#4-設定-URL-路由" class="headerlink" title="4. 設定 URL 路由"></a>4. 設定 URL 路由</h2><p>在 <code>books/urls.py</code> 中設定對應的路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.book_list, name=<span class="string">&#x27;book_list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create_book, name=<span class="string">&#x27;create_book&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;update/&lt;int:pk&gt;/&#x27;</span>, views.update_book, name=<span class="string">&#x27;update_book&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;delete/&lt;int:pk&gt;/&#x27;</span>, views.delete_book, name=<span class="string">&#x27;delete_book&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>並在 <code>myproject/urls.py</code> 引入 <code>books</code> 路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="5-建立模板（Templates）"><a href="#5-建立模板（Templates）" class="headerlink" title="5. 建立模板（Templates）"></a>5. 建立模板（Templates）</h2><p>手動撰寫簡單的 HTML 表單與顯示畫面。</p>
<h3 id="book-list-html"><a href="#book-list-html" class="headerlink" title="book_list.html"></a><code>book_list.html</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>書籍列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;create_book&#x27; %&#125;&quot;</span>&gt;</span>新增書籍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123; book.title &#125;&#125; - &#123;&#123; book.author &#125;&#125; - &#123;&#123; book.published_date &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;update_book&#x27; book.id %&#125;&quot;</span>&gt;</span>編輯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;delete_book&#x27; book.id %&#125;&quot;</span>&gt;</span>刪除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="book-form-html"><a href="#book-form-html" class="headerlink" title="book_form.html"></a><code>book_form.html</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;% if book %&#125;編輯書籍&#123;% else %&#125;新增書籍&#123;% endif %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if error %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        標題：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; book.title|default_if_none:&#x27;&#x27; &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; book.author|default_if_none:&#x27;&#x27; &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        出版日期（格式 yyyy-mm-dd）：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;published_date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; book.published_date|default_if_none:&#x27;&#x27; &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>儲存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book_list&#x27; %&#125;&quot;</span>&gt;</span>返回列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="book-confirm-delete-html"><a href="#book-confirm-delete-html" class="headerlink" title="book_confirm_delete.html"></a><code>book_confirm_delete.html</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>刪除書籍<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>確定要刪除 &quot;&#123;&#123; book.title &#125;&#125;&quot; 嗎？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>確定刪除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book_list&#x27; %&#125;&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-啟動伺服器測試"><a href="#6-啟動伺服器測試" class="headerlink" title="6. 啟動伺服器測試"></a>6. 啟動伺服器測試</h2><p>啟動 Django 開發伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>在瀏覽器開啟 <code>http://127.0.0.1:8000/books/</code>，你將可以新增、查詢、編輯和刪除書籍。</p>
<hr>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>這篇教學示範了在 <strong>不使用 <code>ModelForm</code></strong> 的情況下，手動撰寫表單處理與資料驗證，完整實作了 Django 的 CRUD 功能。</p>
<p>這種方式的優點在於靈活度高，你可以完全控制表單的結構、驗證邏輯與錯誤處理，非常適合需要客製化表單行為或前後端分離的專案。不過，相較於使用 <code>ModelForm</code>，開發成本略高，也容易產生重複程式碼，因此適時選擇工具是重要的工程判斷。</p>
<p>進一步的優化方向包括：</p>
<ul>
<li>加入更完整的資料驗證</li>
<li>增加欄位格式錯誤提示</li>
<li>使用 JavaScript 增強表單互動</li>
<li>將表單資料與邏輯封裝成 Class-Based Views（CBV）</li>
</ul>
<p>透過本篇範例，希望你對 Django 低階處理表單與 CRUD 流程有更深入的理解。</p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>web</tag>
        <tag>python</tag>
        <tag>ModelForm）</tag>
      </tags>
  </entry>
  <entry>
    <title>Django「一對一」、「一對多」、「多對多」關聯入門教學筆記 | 學習筆記</title>
    <url>/2024/12/01/learning-notes-python-django-db-mapping-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>當你在學 Django 或資料庫設計時，常會遇到「一對一」、「一對多」、「多對多」這三種關聯（Relationship）。這些是資料庫中表與表之間的關係，下面用簡單的例子幫你搞懂它們的差異：</p>
<hr>
<h2 id="一對一（One-to-One）"><a href="#一對一（One-to-One）" class="headerlink" title="一對一（One-to-One）"></a>一對一（One-to-One）</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>一個資料只對應另一個資料，彼此之間是唯一配對的關係。</p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>每個人都有一張身份證 → 一個人對應一張身份證，一張身份證只對應一個人。</p>
<h3 id="Django-實作："><a href="#Django-實作：" class="headerlink" title="Django 實作："></a>Django 實作：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard</span>(models.Model):</span><br><span class="line">    number = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    owner = models.OneToOneField(Person, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="一對多（One-to-Many）"><a href="#一對多（One-to-Many）" class="headerlink" title="一對多（One-to-Many）"></a>一對多（One-to-Many）</h2><h3 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h3><p>一筆資料可以對應到多筆資料，但每一筆資料只能對應回唯一一筆上層資料。</p>
<h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><p>一個作者可以寫很多本書 → 一個作者對應多本書，但一本書只會有一個作者。</p>
<h3 id="Django-實作：-1"><a href="#Django-實作：-1" class="headerlink" title="Django 實作："></a>Django 實作：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="多對多（Many-to-Many）"><a href="#多對多（Many-to-Many）" class="headerlink" title="多對多（Many-to-Many）"></a>多對多（Many-to-Many）</h2><h3 id="概念：-2"><a href="#概念：-2" class="headerlink" title="概念："></a>概念：</h3><p>一筆資料可以對應到多筆資料，而對方也可以對應回來多筆資料。</p>
<h3 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h3><p>學生選修多門課程，一門課也有很多學生 → 學生對多門課，課程對多位學生。</p>
<h3 id="Django-實作：-2"><a href="#Django-實作：-2" class="headerlink" title="Django 實作："></a>Django 實作：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    courses = models.ManyToManyField(<span class="string">&#x27;Course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>（也可以在 <code>Course</code> 裡加 <code>students = models.ManyToManyField(Student)</code>，結果會一樣）</p>
<hr>
<h2 id="小整理比較表："><a href="#小整理比較表：" class="headerlink" title="小整理比較表："></a>小整理比較表：</h2><table>
<thead>
<tr>
<th>類型</th>
<th>關係形式</th>
<th>範例</th>
<th>Django 欄位</th>
</tr>
</thead>
<tbody><tr>
<td>一對一</td>
<td>A ➝ B 且 B ➝ A</td>
<td>人 → 身份證</td>
<td><code>OneToOneField</code></td>
</tr>
<tr>
<td>一對多</td>
<td>A ➝ 多個 B</td>
<td>作者 → 書</td>
<td><code>ForeignKey</code></td>
</tr>
<tr>
<td>多對多</td>
<td>A ⇄ 多個 B，互相多對多</td>
<td>學生 ⇄ 課程</td>
<td><code>ManyToManyField</code></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>一對一</tag>
        <tag>一對多</tag>
        <tag>多對多</tag>
      </tags>
  </entry>
  <entry>
    <title>FastAPI 入門教學筆記：打造現代 Python Web API 的入門教學筆記 | 學習筆記</title>
    <url>/2024/08/31/learning-notes-python-fastapi-intro-tutorial/</url>
    <content><![CDATA[<h2 id="什麼是-FastAPI？"><a href="#什麼是-FastAPI？" class="headerlink" title="什麼是 FastAPI？"></a>什麼是 FastAPI？</h2><p>FastAPI 是一個現代、快速（高效能）、基於 Python 3.7+ 類型提示的 Web 框架，用於建構 API。其核心優勢包含：</p>
<ul>
<li><strong>自動生成文件</strong>：內建 OpenAPI 與 Swagger UI 支援</li>
<li><strong>高效能</strong>：基於 Starlette 和 Pydantic，效能可媲美 Node.js 與 Go</li>
<li><strong>開發快速</strong>：強大的 IDE 支援與自動補全功能</li>
<li><strong>自動驗證與序列化</strong>：透過 Pydantic 型別自動完成</li>
</ul>
<p>FastAPI 適合快速構建 RESTful API，尤其在開發微服務、機器學習模型部署、或任何 API 後端都非常合適。</p>
<hr>
<h2 id="快速開始：環境準備與安裝"><a href="#快速開始：環境準備與安裝" class="headerlink" title="快速開始：環境準備與安裝"></a>快速開始：環境準備與安裝</h2><p>建議使用虛擬環境管理專案依賴。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv .venv</span><br><span class="line"><span class="built_in">source</span> .venv/bin/activate  <span class="comment"># Windows: .venv\Scripts\activate</span></span><br><span class="line">pip install fastapi uvicorn</span><br></pre></td></tr></table></figure>

<ul>
<li><code>fastapi</code>：核心框架</li>
<li><code>uvicorn</code>：ASGI Server，用來啟動應用程式</li>
</ul>
<hr>
<h2 id="第一個-FastAPI-程式：Hello-API"><a href="#第一個-FastAPI-程式：Hello-API" class="headerlink" title="第一個 FastAPI 程式：Hello API"></a>第一個 FastAPI 程式：Hello API</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, FastAPI!&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>啟動應用程式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--reload</code>：啟用熱重載，開發時會自動重新載入程式</li>
</ul>
<p>訪問 <code>http://127.0.0.1:8000/</code>，你會看到：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, FastAPI!&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="自動生成的互動式-API-文件"><a href="#自動生成的互動式-API-文件" class="headerlink" title="自動生成的互動式 API 文件"></a>自動生成的互動式 API 文件</h2><p>FastAPI 自動提供兩個 API 文件頁面：</p>
<ul>
<li>Swagger UI：<code>http://127.0.0.1:8000/docs</code></li>
<li>Redoc：<code>http://127.0.0.1:8000/redoc</code></li>
</ul>
<p>這些文件會根據程式中的路由與型別提示自動生成，方便前後端協作與測試。</p>
<hr>
<h2 id="使用路由參數與查詢參數"><a href="#使用路由參數與查詢參數" class="headerlink" title="使用路由參數與查詢參數"></a>使用路由參數與查詢參數</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<p>範例請求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /items/42?q=fastapi</span><br></pre></td></tr></table></figure>

<p>回應結果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item_id&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;q&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fastapi&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>item_id</code> 是路由參數，會自動轉換為 int</li>
<li><code>q</code> 是查詢參數，預設為 None</li>
</ul>
<hr>
<h2 id="接收與驗證請求資料：使用-Pydantic-模型"><a href="#接收與驗證請求資料：使用-Pydantic-模型" class="headerlink" title="接收與驗證請求資料：使用 Pydantic 模型"></a>接收與驗證請求資料：使用 Pydantic 模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    in_stock: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item created&quot;</span>, <span class="string">&quot;item&quot;</span>: item&#125;</span><br></pre></td></tr></table></figure>

<p>發送 POST 請求：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /items/</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Laptop&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A powerful device&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1299.99</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;in_stock&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>回應：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Item created&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Laptop&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A powerful device&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1299.99</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;in_stock&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Pydantic 會自動進行資料驗證與轉換</li>
<li>FastAPI 可根據模型自動生成 API 文件</li>
</ul>
<hr>
<h2 id="表單與檔案上傳支援"><a href="#表單與檔案上傳支援" class="headerlink" title="表單與檔案上傳支援"></a>表單與檔案上傳支援</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Form, UploadFile, File</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/submit/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_form</span>(<span class="params">username: <span class="built_in">str</span> = Form(<span class="params">...</span>), file: UploadFile = File(<span class="params">...</span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;filename&quot;</span>: file.filename,</span><br><span class="line">        <span class="string">&quot;content_type&quot;</span>: file.content_type</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>這對於處理使用者上傳檔案與表單資料非常方便。</p>
<hr>
<h2 id="回傳自定義-HTTP-狀態碼與錯誤處理"><a href="#回傳自定義-HTTP-狀態碼與錯誤處理" class="headerlink" title="回傳自定義 HTTP 狀態碼與錯誤處理"></a>回傳自定義 HTTP 狀態碼與錯誤處理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> HTTPException</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_user</span>(<span class="params">user_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> user_id != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;User not found&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: user_id, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>這會回傳：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;User not found&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>並帶有 HTTP 404 錯誤。</p>
<hr>
<h2 id="小結與下一步學習方向"><a href="#小結與下一步學習方向" class="headerlink" title="小結與下一步學習方向"></a>小結與下一步學習方向</h2><p>FastAPI 提供了一種現代化且優雅的方式來構建 API：</p>
<ul>
<li>強大的型別檢查與 IDE 支援</li>
<li>直覺的程式結構與文件生成</li>
<li>高效能適合用於生產環境</li>
</ul>
<h3 id="建議學習方向："><a href="#建議學習方向：" class="headerlink" title="建議學習方向："></a>建議學習方向：</h3><ol>
<li>路由分割與模組化管理</li>
<li>使用依賴注入（Depends）</li>
<li>整合資料庫（如 SQLAlchemy）</li>
<li>JWT 身份驗證與 OAuth2</li>
<li>測試與部署（例如 Docker、Gunicorn）</li>
</ol>
<hr>
<p>如果你是從 Flask 或 Django REST Framework 轉過來，會發現 FastAPI 提供了相當先進的開發體驗與高效能，是非常值得學習與投入的框架。</p>
<h3 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h3><ol>
<li><a href="https://fastapi.tiangolo.com/">fastapi API</a></li>
</ol>
]]></content>
      <tags>
        <tag>FastAPI</tag>
        <tag>web</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 指定使用 OpenSSL 介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/08/31/learning-notes-python-openssl-setup-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果 <code>python -c &quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;</code> 顯示的是 <code>LibreSSL 2.8.3</code>，這表示 Python 並沒有使用 Homebrew 安裝的 OpenSSL，而是使用了系統預設的 LibreSSL。這通常發生在 Python 編譯時，沒有正確地連結到 Homebrew 的 OpenSSL 庫。</p>
<p>為了解決這個問題，請按照以下步驟操作：</p>
<h3 id="步驟-1：重新安裝-Python-並指定使用-OpenSSL"><a href="#步驟-1：重新安裝-Python-並指定使用-OpenSSL" class="headerlink" title="步驟 1：重新安裝 Python 並指定使用 OpenSSL"></a>步驟 1：重新安裝 Python 並指定使用 OpenSSL</h3><p>首先，我們需要確保 Python 使用 Homebrew 安裝的 OpenSSL，而不是系統預設的 LibreSSL。</p>
<ol>
<li><p><strong>卸載現有的 Python 版本（如果是從系統預設安裝的）</strong>：</p>
<p>使用 <code>pyenv</code> 安裝 Python 會讓你更方便地管理不同版本的 Python，因此我們建議使用 <code>pyenv</code>。</p>
</li>
<li><p><strong>安裝 Homebrew OpenSSL 和 pyenv（如果尚未安裝）</strong>：</p>
<p>安裝 Homebrew（如果尚未安裝）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>安裝 pyenv：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>

<p>安裝 Homebrew 的 OpenSSL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl@3</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置 pyenv 使用 Homebrew OpenSSL</strong>：</p>
<p>在 <code>.zshrc</code> 或 <code>.bash_profile</code> 中添加以下配置來設置編譯環境變數，確保 Python 使用 Homebrew 安裝的 OpenSSL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L/opt/homebrew/opt/openssl@3/lib -L/opt/homebrew/opt/readline/lib -L/opt/homebrew/opt/zlib/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I/opt/homebrew/opt/openssl@3/include -I/opt/homebrew/opt/readline/include -I/opt/homebrew/opt/zlib/include&quot;</span></span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">&quot;/opt/homebrew/opt/openssl@3/lib/pkgconfig&quot;</span></span><br></pre></td></tr></table></figure>

<p>然後運行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc  <span class="comment"># 或者 source ~/.bash_profile</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="步驟-2：重新安裝-Python-版本"><a href="#步驟-2：重新安裝-Python-版本" class="headerlink" title="步驟 2：重新安裝 Python 版本"></a>步驟 2：重新安裝 Python 版本</h3><p>現在，你可以使用 <code>pyenv</code> 來安裝 Python，並確保它與 Homebrew 的 OpenSSL 兼容。</p>
<ol>
<li><p>安裝 Python 版本（例如，Python 3.9.18）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.9.18</span><br></pre></td></tr></table></figure>
</li>
<li><p>設置全域 Python 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.9.18</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 Python 是否正確安裝並使用 OpenSSL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果這時顯示的是 <code>OpenSSL 1.1.1</code> 或者更高版本，則說明你已經成功解決了這個問題，並且 Python 現在是使用 Homebrew 安裝的 OpenSSL。</p>
<h3 id="步驟-3：創建虛擬環境"><a href="#步驟-3：創建虛擬環境" class="headerlink" title="步驟 3：創建虛擬環境"></a>步驟 3：創建虛擬環境</h3><p>如果你使用 <code>pyenv</code> 安裝的 Python，並且已經確認它使用了 OpenSSL，那麼可以重新創建虛擬環境：</p>
<ol>
<li><p>創建虛擬環境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv .venv</span><br></pre></td></tr></table></figure>
</li>
<li><p>激活虛擬環境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .venv/bin/activate</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次檢查 OpenSSL 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import ssl; print(ssl.OPENSSL_VERSION)&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="步驟-4：安裝其他依賴"><a href="#步驟-4：安裝其他依賴" class="headerlink" title="步驟 4：安裝其他依賴"></a>步驟 4：安裝其他依賴</h3><p>在虛擬環境中，我們可以安裝任何其他的套件，並且確保它們與正確的 OpenSSL 版本兼容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install &lt;package-name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title>React Compound Component 模式介紹與入門教學 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-react-compound-component-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在開發大型或複雜的 UI 元件時，傳統的 props 傳遞方式很容易導致元件層層嵌套、可讀性差與維護困難。Compound Component（複合元件）是一種設計模式，能提升 React 元件的可組合性與彈性。它讓父元件扮演「邏輯控制中心」的角色，子元件則能共享上下文資訊，專注於呈現。這種模式常見於設計系統或第三方 UI 套件（例如：<code>&lt;Tabs&gt;</code>、<code>&lt;Accordion&gt;</code>、<code>&lt;Dropdown&gt;</code> 等），能夠建立更清晰、有彈性的 API。</p>
<hr>
<h3 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h3><ul>
<li><p><strong>定義</strong>：Compound Component 是一組彼此配合使用的 React 元件，透過共享上下文管理狀態與邏輯。</p>
</li>
<li><p><strong>優點</strong>：</p>
<ul>
<li>增強元件 API 的彈性與可擴充性。</li>
<li>父元件集中邏輯，子元件只負責 UI。</li>
<li>避免 props drilling，提升可維護性。</li>
</ul>
</li>
<li><p><strong>技術關鍵</strong>：</p>
<ul>
<li>使用 <code>React.createContext()</code> 建立 Context。</li>
<li>利用 <code>Children.map</code> 搭配 <code>cloneElement</code> 傳遞資料（進階用法）。</li>
<li>常結合 <code>static property</code> 方式導出子元件（如 <code>MyComponent.Header</code>）。</li>
</ul>
</li>
<li><p><strong>常見應用場景</strong>：</p>
<ul>
<li>Tabs 分頁元件</li>
<li>Accordion 折疊面板</li>
<li>Dropdown 下拉選單</li>
<li>Modal 對話框元件</li>
</ul>
</li>
</ul>
<hr>
<h3 id="實際範例：建立一個自訂的-lt-Toggle-gt-元件"><a href="#實際範例：建立一個自訂的-lt-Toggle-gt-元件" class="headerlink" title="實際範例：建立一個自訂的 &lt;Toggle&gt; 元件"></a>實際範例：建立一個自訂的 <code>&lt;Toggle&gt;</code> 元件</h3><p>此範例展示如何實作一個 Compound Component：<code>&lt;Toggle&gt;</code>, <code>&lt;Toggle.On&gt;</code>, <code>&lt;Toggle.Off&gt;</code>, <code>&lt;Toggle.Button&gt;</code></p>
<h4 id="1-ToggleContext-js"><a href="#1-ToggleContext-js" class="headerlink" title="1. ToggleContext.js"></a>1. ToggleContext.js</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ToggleContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useToggleContext</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">useContext</span>(<span class="title class_">ToggleContext</span>);</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Toggle compound components must be used within &lt;Toggle /&gt;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToggleContext</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-Toggle-js"><a href="#2-Toggle-js" class="headerlink" title="2. Toggle.js"></a>2. Toggle.js</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToggleContext</span> <span class="keyword">from</span> <span class="string">&#x27;./ToggleContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Toggle</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [on, setOn] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; <span class="title function_">setOn</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> !prev);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ToggleContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">on</span>, <span class="attr">toggle</span> &#125;&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">ToggleContext.Provider</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Toggle</span>.<span class="property">On</span> = <span class="keyword">function</span> <span class="title function_">ToggleOn</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; on &#125; = <span class="title function_">useToggleContext</span>();</span><br><span class="line">  <span class="keyword">return</span> on ? children : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Toggle</span>.<span class="property">Off</span> = <span class="keyword">function</span> <span class="title function_">ToggleOff</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; on &#125; = <span class="title function_">useToggleContext</span>();</span><br><span class="line">  <span class="keyword">return</span> !on ? children : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Toggle</span>.<span class="property">Button</span> = <span class="keyword">function</span> <span class="title function_">ToggleButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; on, toggle &#125; = <span class="title function_">useToggleContext</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggle&#125;</span>&gt;</span>&#123;on ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-App-js（使用方式）"><a href="#3-App-js（使用方式）" class="headerlink" title="3. App.js（使用方式）"></a>3. App.js（使用方式）</h4><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toggle</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Toggle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Compound Component 範例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Toggle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toggle.On</span>&gt;</span>狀態為：開啟<span class="tag">&lt;/<span class="name">Toggle.On</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toggle.Off</span>&gt;</span>狀態為：關閉<span class="tag">&lt;/<span class="name">Toggle.Off</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toggle.Button</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Toggle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="延伸說明"><a href="#延伸說明" class="headerlink" title="延伸說明"></a>延伸說明</h3><ul>
<li><strong>Context 的角色</strong>：<code>ToggleContext</code> 扮演資訊橋梁，讓所有子元件能共用 <code>on</code> 狀態與 <code>toggle</code> 函式。</li>
<li><strong>錯誤處理</strong>：<code>useToggleContext</code> 中若未包在 <code>&lt;Toggle&gt;</code> 裡使用，會主動拋出錯誤，提醒開發者正確使用上下文。</li>
<li><strong>可擴充性</strong>：我們可以進一步加入 <code>&lt;Toggle.Icon&gt;</code>、<code>&lt;Toggle.Label&gt;</code> 等元件，複用相同邏輯，保持一致行為。</li>
<li><strong>比傳統 Props 傳遞更清晰</strong>：使用 <code>&lt;Toggle.On&gt;</code> 等方式比 <code>showOn=&#123;true&#125;</code> 更語意化且易於理解。</li>
</ul>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>Compound Component 是 React 開發中一個極具表達力與彈性的設計模式，尤其適用於 UI 元件庫的開發。透過 Context 的使用，我們能解耦邏輯與顯示元件，提升可讀性、可維護性與開發效率。雖然初期設計較為繁瑣，但一旦建立模式後，能帶來長遠效益，尤其在大型專案或多人協作的情境下更具價值。</p>
<hr>
<h3 id="延伸學習"><a href="#延伸學習" class="headerlink" title="延伸學習"></a>延伸學習</h3><ul>
<li><code>React.cloneElement()</code> 的進階應用（自動注入 props）</li>
<li><code>TypeScript</code> 搭配 Compound Component 的型別設計</li>
<li>使用 Zustand、Jotai 或 Redux 搭配 Compound Component</li>
</ul>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>Compound</tag>
        <tag>Compound Component</tag>
      </tags>
  </entry>
  <entry>
    <title>React Context API 入門教學 | 學習筆記</title>
    <url>/2024/12/21/learning-notes-react-context-api-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React Context API 是 React 提供的一種方式，讓我們能夠在組件樹中傳遞資料，而不需要一層層地使用 props。Context API 可以解決多層嵌套組件的傳遞問題，讓我們在深層組件中輕鬆訪問到全局狀態。本文將介紹如何使用 React Context API，並提供一個簡單的範例來展示其實際應用。</p>
<h3 id="什麼是-React-Context-API"><a href="#什麼是-React-Context-API" class="headerlink" title="什麼是 React Context API"></a>什麼是 React Context API</h3><p>React Context API 是 React 的一個內建功能，它可以讓我們在組件樹中共享資料，避免多層嵌套的 props 傳遞。Context 主要由三個部分組成：</p>
<ol>
<li>**React.createContext()**：創建一個 Context 物件。</li>
<li><strong>Provider</strong>：這是 Context API 中的一個組件，它用來包裹整個應用，並提供一個全局的資料源。</li>
<li><strong>Consumer</strong>：這是用來訪問 Context 資料的組件，它能夠獲取 Provider 中傳遞的資料。</li>
</ol>
<p>使用 Context 的目的，是為了避免將相同的資料層層傳遞到每個組件，這樣可以讓應用的資料流變得更加簡潔。</p>
<h3 id="使用-Context-API-的步驟"><a href="#使用-Context-API-的步驟" class="headerlink" title="使用 Context API 的步驟"></a>使用 Context API 的步驟</h3><h4 id="步驟-1-創建-Context"><a href="#步驟-1-創建-Context" class="headerlink" title="步驟 1: 創建 Context"></a>步驟 1: 創建 Context</h4><p>首先，我們需要使用 <code>React.createContext()</code> 來創建一個 Context 物件。這個物件會返回一個 <code>Provider</code> 和 <code>Consumer</code> 組件，讓我們在應用中使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>();</span><br></pre></td></tr></table></figure>

<h4 id="步驟-2-使用-Provider-來傳遞資料"><a href="#步驟-2-使用-Provider-來傳遞資料" class="headerlink" title="步驟 2: 使用 Provider 來傳遞資料"></a>步驟 2: 使用 Provider 來傳遞資料</h4><p>Context 的 <code>Provider</code> 是用來包裹應用的，它會接收一個 <code>value</code> 屬性，這個屬性就是要共享給整個組件樹的資料。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title class_">React</span>.<span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserProfile</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，我們將一個 <code>user</code> 物件傳遞給 <code>MyContext.Provider</code> 的 <code>value</code> 屬性，這樣整個組件樹中的所有子組件都能夠訪問到這個 <code>user</code> 資料。</p>
<h4 id="步驟-3-使用-Consumer-來接收資料"><a href="#步驟-3-使用-Consumer-來接收資料" class="headerlink" title="步驟 3: 使用 Consumer 來接收資料"></a>步驟 3: 使用 Consumer 來接收資料</h4><p>在需要使用資料的地方，我們可以使用 <code>MyContext.Consumer</code> 來獲取資料。<code>Consumer</code> 的 <code>children</code> 是一個函數，它會接收一個 <code>value</code> 參數，這個參數就是在 <code>Provider</code> 中傳遞的資料。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(user) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，<code>UserProfile</code> 組件通過 <code>Consumer</code> 來訪問 <code>MyContext</code> 中的 <code>user</code> 資料，並渲染顯示用戶的名字和年齡。</p>
<h4 id="步驟-4-使用-useContext-Hook-React-16-8-及以上"><a href="#步驟-4-使用-useContext-Hook-React-16-8-及以上" class="headerlink" title="步驟 4: 使用 useContext Hook (React 16.8 及以上)"></a>步驟 4: 使用 <code>useContext</code> Hook (React 16.8 及以上)</h4><p>React 16.8 引入了 <code>useContext</code> Hook，這樣我們可以更方便地在函數組件中使用 Context，而不需要使用 <code>Consumer</code>。這樣的寫法更加簡潔，並且避免了過多的嵌套。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用 <code>useContext</code> 可以直接從 Context 中獲取資料，而不需要使用 <code>Consumer</code>。這使得代碼更簡潔，並提高了可讀性。</p>
<h3 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h3><p>下面是一個完整的範例，展示了如何使用 React Context API 來管理應用中的全局狀態。這個範例將包括一個用戶資料的管理，並能夠在多個組件中共享這些資料。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">UserProfile</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">AgeUpdater</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;user.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AgeUpdater</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line">  <span class="keyword">const</span> setUser = <span class="title function_">useState</span>()[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setUser</span>(&#123; ...user, <span class="attr">age</span>: user.<span class="property">age</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;updateAge&#125;</span>&gt;</span>Increase Age<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="範例解析"><a href="#範例解析" class="headerlink" title="範例解析"></a>範例解析</h3><ol>
<li><strong>App 組件</strong>：在 <code>App</code> 組件中，我們使用 <code>useState</code> 定義了一個 <code>user</code> 資料，並通過 <code>MyContext.Provider</code> 將資料提供給下層組件。</li>
<li><strong>UserProfile 組件</strong>：<code>UserProfile</code> 使用 <code>useContext</code> 來讀取 <code>MyContext</code> 中的資料，並顯示用戶的名字和年齡。</li>
<li><strong>AgeUpdater 組件</strong>：這個組件同樣使用 <code>useContext</code> 來讀取和更新 <code>user</code> 資料。我們在這裡定義了一個按鈕，當按下時，會更新 <code>user</code> 的年齡。</li>
</ol>
<h3 id="Context-API-的優缺點"><a href="#Context-API-的優缺點" class="headerlink" title="Context API 的優缺點"></a>Context API 的優缺點</h3><h4 id="優點："><a href="#優點：" class="headerlink" title="優點："></a>優點：</h4><ol>
<li><strong>簡化資料傳遞</strong>：當我們需要在多層嵌套的組件中共享資料時，使用 Context 可以避免繁瑣的 props 傳遞。</li>
<li><strong>可擴展性</strong>：Context 非常適合用於應用中的全局狀態管理，像是用戶認證、語言設置、主題樣式等。</li>
</ol>
<h4 id="缺點："><a href="#缺點：" class="headerlink" title="缺點："></a>缺點：</h4><ol>
<li><strong>重新渲染問題</strong>：當 <code>Provider</code> 中的資料變更時，所有使用該 Context 的組件都會重新渲染。對於大型應用來說，這可能會影響性能。</li>
<li><strong>狀態過度共享</strong>：Context 主要用於共享全局資料，如果將太多不相關的資料放入同一個 Context，可能會使代碼變得難以維護。</li>
</ol>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>React Context API 是一個強大的工具，可以幫助我們管理應用中的全局狀態。在適當的情況下使用 Context 可以大大簡化代碼，避免深層嵌套的 props 傳遞。但也需要謹慎使用，避免過多不必要的資料共享，從而影響性能和可維護性。在開發中，我們可以根據具體需求來選擇是否使用 Context API，並搭配其他狀態管理工具（如 Redux 或 Zustand）來管理更複雜的應用狀態。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://muki.tw/react-context-api/">用 React Context API 實作跨組件傳值的功能</a></li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>React</tag>
        <tag>React.js</tag>
        <tag>ReactJS</tag>
        <tag>useContext</tag>
        <tag>Context API</tag>
      </tags>
  </entry>
  <entry>
    <title>React 效能優化入門教學筆記 | 學習筆記</title>
    <url>/2024/12/26/learning-notes-react-lazy-loading-code-splitting-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隨著前端應用日益龐大，單頁應用（SPA）在初次載入時常面臨 JavaScript 檔案過大、載入時間過久的問題，導致使用者等待時間過長、效能下降。為了解決這個問題，React 與現代建構工具（如 Webpack、Vite）提供了 Code Splitting（程式碼分割）與 Lazy Loading（延遲載入）兩種策略，協助開發者更有效地管理與優化應用程式的載入流程。</p>
<p>程式碼分割（Code Splitting）和惰性載入（Lazy Loading）都是用來優化網頁效能的方法，它們都旨在減少初始加載時間，但實現方式和目標略有不同。 程式碼分割是將程式碼分割成多個較小的塊，而惰性載入則是在需要時才加載這些塊。</p>
<h2 id="一、程式碼分割（Code-Splitting）"><a href="#一、程式碼分割（Code-Splitting）" class="headerlink" title="一、程式碼分割（Code Splitting）"></a>一、程式碼分割（Code Splitting）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>程式碼分割是將一個大型的 JavaScript 應用程式分割成多個較小的、獨立的塊，每個塊包含應用程式的一部分程式碼。 這些塊通常是根據路由、元件或功能來分割的。</p>
<h3 id="目標"><a href="#目標" class="headerlink" title="目標:"></a>目標:</h3><p>主要目標是減少應用程式的初始加載時間，通過只加載使用者當前需要的程式碼塊，而不是一次性加載所有程式碼。</p>
<h3 id="實現方式"><a href="#實現方式" class="headerlink" title="實現方式:"></a>實現方式:</h3><p>程式碼分割通常使用打包工具（如 Webpack、Rollup 等）和動態<code>import()</code>語法來實現。</p>
<h3 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機:"></a>使用時機:</h3><p>在編譯時（build time）就進行分割。</p>
<h2 id="二、惰性載入（Lazy-Loading）"><a href="#二、惰性載入（Lazy-Loading）" class="headerlink" title="二、惰性載入（Lazy Loading）"></a>二、惰性載入（Lazy Loading）</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念:"></a>概念:</h3><p>惰性載入是指在需要的時候才加載程式碼，而不是在應用程式初始化時就加載所有程式碼。</p>
<h3 id="目標-1"><a href="#目標-1" class="headerlink" title="目標:"></a>目標:</h3><p>減少應用程式的初始加載時間，特別是對於大型應用程式或元件。</p>
<h3 id="實現方式-1"><a href="#實現方式-1" class="headerlink" title="實現方式:"></a>實現方式:</h3><p>惰性載入通常使用 React.lazy 和<Suspense>元件來實現，也可以配合程式碼分割一起使用。</p>
<h3 id="使用時機-1"><a href="#使用時機-1" class="headerlink" title="使用時機:"></a>使用時機:</h3><p>在執行時（runtime）才加載，通常是當使用者訪問某個路由、觸發某個事件或需要顯示某個元件時。</p>
<h2 id="差異總結"><a href="#差異總結" class="headerlink" title="差異總結"></a>差異總結</h2><table>
<thead>
<tr>
<th>特性</th>
<th>程式碼分割(Code Splitting)</th>
<th>惰性載入(Lazy Loading)</th>
</tr>
</thead>
<tbody><tr>
<td>概念</td>
<td>將程式碼分割成多個塊</td>
<td>在需要時才加載程式碼</td>
</tr>
<tr>
<td>目標</td>
<td>減少初始加載時間，優化效能</td>
<td>減少初始加載時間，優化效能</td>
</tr>
<tr>
<td>實現方式</td>
<td>打包工具，dynamic import()</td>
<td>React.lazy, <Suspense>, dynamic import()</td>
</tr>
<tr>
<td>時機</td>
<td>編譯時</td>
<td>執行時</td>
</tr>
<tr>
<td>關聯性</td>
<td>程式碼分割是惰性載入的基礎，惰性載入可以利用程式碼分割的結果。</td>
<td>—</td>
</tr>
</tbody></table>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>Code Splitting（程式碼分割）</strong></p>
<ul>
<li>是一種將整個應用程式切割成多個檔案的技術</li>
<li>通常由 Webpack、Rollup 等建構工具自動處理</li>
<li>可應用於 route-based 分割、component-based 分割等情境</li>
<li>不代表一定是延遲載入，僅是結構上的切割</li>
</ul>
</li>
<li><p><strong>Lazy Loading（延遲載入）</strong></p>
<ul>
<li>是一種執行時載入程式碼的策略</li>
<li>常與 <code>import()</code> 搭配，直到實際使用時才載入</li>
<li>通常透過 <code>React.lazy</code>、<code>Suspense</code> 實現元件的懶載入</li>
<li>是 Code Splitting 的使用方式之一</li>
</ul>
</li>
<li><p><strong>兩者關係</strong></p>
<ul>
<li>Code Splitting 是靜態建構階段的優化策略</li>
<li>Lazy Loading 是執行階段的載入行為</li>
<li>Lazy Loading 必須建立在已做 Code Splitting 的前提上</li>
</ul>
</li>
<li><p><strong>效益</strong></p>
<ul>
<li>減少主程式 bundle 的大小</li>
<li>提升首次載入速度（First Contentful Paint）</li>
<li>延遲不必要的資源載入，節省頻寬與記憶體</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="範例一：傳統未分割的情況（單一-bundle）"><a href="#範例一：傳統未分割的情況（單一-bundle）" class="headerlink" title="範例一：傳統未分割的情況（單一 bundle）"></a>範例一：傳統未分割的情況（單一 bundle）</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomePage</span> <span class="keyword">from</span> <span class="string">&#x27;./HomePage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Dashboard</span> <span class="keyword">from</span> <span class="string">&#x27;./Dashboard&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HomePage</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Dashboard</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣寫會導致 HomePage 和 Dashboard 在應用一開始就被載入，無論使用者有沒有看到這些元件。</p>
<hr>
<h3 id="範例二：使用-React-lazy-實現-Lazy-Loading-與-Code-Splitting"><a href="#範例二：使用-React-lazy-實現-Lazy-Loading-與-Code-Splitting" class="headerlink" title="範例二：使用 React.lazy 實現 Lazy Loading 與 Code Splitting"></a>範例二：使用 React.lazy 實現 Lazy Loading 與 Code Splitting</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lazy Loading：只有在渲染時才動態 import</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HomePage</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./HomePage&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dashboard</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Dashboard&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>載入中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HomePage</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Dashboard</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 <code>React.lazy()</code> 搭配 <code>import()</code> 會讓 Webpack 將這些元件建立為獨立的 chunk。<br>真正渲染時（如使用者切換頁面），才會觸發載入行為，減少初始 bundle 體積。</p>
</blockquote>
<hr>
<h3 id="範例三：Route-based-Code-Splitting（React-Router）"><a href="#範例三：Route-based-Code-Splitting（React-Router）" class="headerlink" title="範例三：Route-based Code Splitting（React Router）"></a>範例三：Route-based Code Splitting（React Router）</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppRouter.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span>, lazy &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Home&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dashboard</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Dashboard&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">AppRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>頁面載入中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/dashboard&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Dashboard&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用路由為單位切割頁面元件，是最常見的 Code Splitting 實務做法。</p>
</blockquote>
<hr>
<h3 id="範例四：動態-import-實作非元件的延遲載入"><a href="#範例四：動態-import-實作非元件的延遲載入" class="headerlink" title="範例四：動態 import 實作非元件的延遲載入"></a>範例四：動態 import 實作非元件的延遲載入</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">heavyCalculation</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="comment">// 假設這段計算非常耗時</span></span><br><span class="line">  <span class="keyword">return</span> input ** <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./utils&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; heavyCalculation &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">heavyCalculation</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在某些不需要立即執行的邏輯或大型工具函式庫，也可以透過 <code>import()</code> 動態載入來延遲其成本。</p>
</blockquote>
<hr>
<h2 id="常見問題與補充"><a href="#常見問題與補充" class="headerlink" title="常見問題與補充"></a>常見問題與補充</h2><h3 id="Q1：Code-Splitting-是自動的嗎？"><a href="#Q1：Code-Splitting-是自動的嗎？" class="headerlink" title="Q1：Code Splitting 是自動的嗎？"></a>Q1：Code Splitting 是自動的嗎？</h3><ul>
<li>大部分情況下需要手動設計入口點（如 <code>React.lazy</code> 或 <code>import()</code>），Webpack 才會建立分離的 chunk。</li>
</ul>
<h3 id="Q2：只有使用-React-lazy-才能-Lazy-Load-嗎？"><a href="#Q2：只有使用-React-lazy-才能-Lazy-Load-嗎？" class="headerlink" title="Q2：只有使用 React.lazy 才能 Lazy Load 嗎？"></a>Q2：只有使用 <code>React.lazy</code> 才能 Lazy Load 嗎？</h3><ul>
<li>不一定，<code>import()</code> 是底層機制，也可配合其他框架（Vue、Svelte）或工具（React Loadable）使用。</li>
</ul>
<h3 id="Q3：懶載入的元件可以預載嗎？"><a href="#Q3：懶載入的元件可以預載嗎？" class="headerlink" title="Q3：懶載入的元件可以預載嗎？"></a>Q3：懶載入的元件可以預載嗎？</h3><ul>
<li>可以，透過 <code>import().then()</code> 觸發一次即可放進瀏覽器快取，達到「預熱」效果。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在前端應用越來越大型化的今天，掌握 Code Splitting 與 Lazy Loading 的差異與使用場景，已成為每位前端工程師的必備技能。Code Splitting 解決的是「結構上的模組分離」，Lazy Loading 則是「載入時機的延後」。兩者密不可分，但用法與思考層次不同。</p>
<p>實務上可先針對頁面級路由進行分割，再進一步優化元件級的載入、工具模組載入時機，逐步降低初始 bundle 體積，提升網站效能與使用者體驗。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://medium.com/starbugs/react-%E7%82%BA%E5%A4%AA%E9%BE%90%E5%A4%A7%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%81%9A-lazy-loading-%E5%92%8C-code-splitting-7384626a6e0d">React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting</a></li>
</ol>
]]></content>
      <tags>
        <tag>ES Module</tag>
        <tag>React</tag>
        <tag>Performance Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>React 與 Next.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-react-nextjs-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-React-簡介"><a href="#1-React-簡介" class="headerlink" title="1. React 簡介"></a>1. React 簡介</h2><p>React 是由 Facebook（現 Meta）開發的 JavaScript 前端函式庫，主要用於構建 UI 元件。它採用組件化開發方式，並透過 Virtual DOM 提升效能。</p>
<h2 id="2-Next-js-簡介"><a href="#2-Next-js-簡介" class="headerlink" title="2. Next.js 簡介"></a>2. Next.js 簡介</h2><p>Next.js 是一個基於 React 的框架，提供伺服器端渲染（SSR）、靜態網站生成（SSG）等功能，讓開發者能夠更輕鬆地開發 SEO 友好的應用程式。</p>
<h2 id="3-安裝-Next-js"><a href="#3-安裝-Next-js" class="headerlink" title="3. 安裝 Next.js"></a>3. 安裝 Next.js</h2><p>使用 <code>create-next-app</code> 初始化 Next.js 專案：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-next-app@latest my-next-app</span><br><span class="line"><span class="built_in">cd</span> my-next-app</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>這將會啟動開發伺服器，預設運行於 <code>http://localhost:3000</code>。</p>
<h2 id="4-Next-js-核心概念"><a href="#4-Next-js-核心概念" class="headerlink" title="4. Next.js 核心概念"></a>4. Next.js 核心概念</h2><h3 id="4-1-頁面（Pages）"><a href="#4-1-頁面（Pages）" class="headerlink" title="4.1 頁面（Pages）"></a>4.1 頁面（Pages）</h3><p>Next.js 使用 <code>pages/</code> 目錄來定義路由，每個 <code>.js</code> 或 <code>.tsx</code> 文件會自動成為一個頁面。</p>
<p>範例：<code>pages/index.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎來到 Next.js！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增 <code>pages/about.js</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>瀏覽 <code>/</code> 會載入 <code>index.js</code>，瀏覽 <code>/about</code> 會載入 <code>about.js</code>。</p>
<h3 id="4-2-Link-與導航"><a href="#4-2-Link-與導航" class="headerlink" title="4.2 Link 與導航"></a>4.2 Link 與導航</h3><p>使用 <code>next/link</code> 來建立導航連結：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&quot;next/link&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Navbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> | <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>關於<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-頁面中的-props"><a href="#4-3-頁面中的-props" class="headerlink" title="4.3 頁面中的 props"></a>4.3 頁面中的 props</h3><p>Next.js 支援 <code>getServerSideProps</code>（伺服器端渲染）和 <code>getStaticProps</code>（靜態生成）。</p>
<h4 id="伺服器端渲染（SSR）"><a href="#伺服器端渲染（SSR）" class="headerlink" title="伺服器端渲染（SSR）"></a>伺服器端渲染（SSR）</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(data, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="靜態生成（SSG）"><a href="#靜態生成（SSG）" class="headerlink" title="靜態生成（SSG）"></a>靜態生成（SSG）</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(data, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-API-路由（API-Routes）"><a href="#5-API-路由（API-Routes）" class="headerlink" title="5. API 路由（API Routes）"></a>5. API 路由（API Routes）</h2><p>在 <code>pages/api/</code> 目錄下建立 API 端點。</p>
<p>範例：<code>pages/api/hello.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Hello, API!&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>請求 <code>/api/hello</code> 會返回 JSON 資料。</p>
<h2 id="6-使用全域狀態管理（React-Context）"><a href="#6-使用全域狀態管理（React-Context）" class="headerlink" title="6. 使用全域狀態管理（React Context）"></a>6. 使用全域狀態管理（React Context）</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ThemeProvider</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">theme</span>, <span class="attr">setTheme</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>_app.js</code> 中使用 Provider：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../context/ThemeContext&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在元件中存取狀態：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&quot;../context/ThemeContext&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ThemeToggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; theme, setTheme &#125; = <span class="title function_">useTheme</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(theme === &quot;light&quot; ? &quot;dark&quot; : &quot;light&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      切換主題（目前：&#123;theme&#125;）</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-總結"><a href="#7-總結" class="headerlink" title="7. 總結"></a>7. 總結</h2><p>Next.js 提供了比 React 更豐富的功能，如內建路由、伺服器端渲染（SSR）和 API 路由，適合開發高效能與 SEO 友好的網站。熟悉這些核心概念後，你可以更輕鬆地構建現代化的前端應用程式。</p>
<h2 id="補充：可選搭配技術（實務常見）"><a href="#補充：可選搭配技術（實務常見）" class="headerlink" title="補充：可選搭配技術（實務常見）"></a>補充：可選搭配技術（實務常見）</h2><table>
<thead>
<tr>
<th>技術</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td>Tailwind CSS</td>
<td>快速開發 UI 樣式</td>
</tr>
<tr>
<td>Zustand&#x2F;Redux</td>
<td>全域狀態管理</td>
</tr>
<tr>
<td>NextAuth.js</td>
<td>登入驗證（支援 Google, GitHub 等）</td>
</tr>
<tr>
<td>Prisma</td>
<td>ORM 操作 MySQL&#x2F;PostgreSQL</td>
</tr>
<tr>
<td>React Query</td>
<td>前端資料抓取與快取</td>
</tr>
<tr>
<td>shadcn&#x2F;ui</td>
<td>組件庫（Tailwind 美型元件）</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
      </tags>
  </entry>
  <entry>
    <title>React 效能優化 SOP 檢核清單入門教學筆記 | 學習筆記</title>
    <url>/2024/12/24/learning-notes-react-performance-optimization-sop-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在大型單頁應用（SPA）與複雜互動式介面中，效能瓶頸常常來自不必要的重新渲染、大型 bundle 導致的載入緩慢，以及過度操作 DOM 所造成的卡頓。建立一份標準化的「效能優化檢核清單」（SOP，Standard Operating Procedure），能夠在開發流程中明確指出應檢查的重點、落實最佳實踐，並透過持續監控與回饋，進一步強化團隊的效能意識與程式品質。</p>
<p>本篇筆記將依照從「程式撰寫到部署」的不同階段，提出具體的檢核項目，並搭配最常見的 React 效能優化技術範例，協助你快速掌握如何在日常開發與 Code Review 中落實效能優化。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>一、避免不必要的重新渲染</strong></p>
<ul>
<li>使用 <code>React.memo</code> 包裹純函式元件</li>
<li>針對函式與物件 props，使用 <code>useCallback</code>、<code>useMemo</code> 進行記憶</li>
<li>避免 JSX inline 宣告函式或物件</li>
</ul>
</li>
<li><p><strong>二、State 管理與元件分離</strong></p>
<ul>
<li>下放 state 至影響範圍最小的元件</li>
<li>UI 狀態（開關、Modal 等）與業務資料分離</li>
<li>避免全域 context 過度包覆，導致大範圍 re-render</li>
</ul>
</li>
<li><p><strong>三、列表與大量資料渲染優化</strong></p>
<ul>
<li>確保 <code>key</code> 穩定（使用唯一 id，非 index）</li>
<li>採用虛擬滾動（<code>react-window</code>、<code>react-virtualized</code>）</li>
<li>分頁或懶加載機制</li>
</ul>
</li>
<li><p><strong>四、Code Splitting 與懶載入</strong></p>
<ul>
<li>使用 <code>React.lazy</code> + <code>Suspense</code> 分割大型元件</li>
<li>路由層級拆分，動態 <code>import()</code></li>
<li>圖片與第三方資源延遲加載</li>
</ul>
</li>
<li><p><strong>五、效能分析與監控工具</strong></p>
<ul>
<li>React DevTools Profiler：分析元件 render 次數與耗時</li>
<li>Lighthouse &#x2F; Web Vitals：追蹤 FCP、LCP、TTFB 等指標</li>
<li>Bundle 分析（Webpack Bundle Analyzer、Source Map Explorer）</li>
</ul>
</li>
<li><p><strong>六、CI／Code Review 效能檢查</strong></p>
<ul>
<li>將檢核清單納入 Pull Request 模板</li>
<li>自動化檢測 bundle size 變化</li>
<li>定期性能測試腳本（Cypress、Playwright + Lighthouse）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="範例一：避免不必要的重新渲染"><a href="#範例一：避免不必要的重新渲染" class="headerlink" title="範例一：避免不必要的重新渲染"></a>範例一：避免不必要的重新渲染</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChildComponent.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">&#123; data, onClick &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ChildComponent render&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>&#123;data.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">ChildComponent</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ParentComponent.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useCallback, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ParentComponent</span>(<span class="params">&#123; initialData &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useMemo 記憶 data 物件，避免因父組件重新 render 而改變 reference</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">text</span>: initialData,</span><br><span class="line">    &#125;),</span><br><span class="line">    [initialData]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useCallback 記憶函式，不會因為 count 變化而重新建立</span></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>點擊次數：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>檢核點</strong>：</p>
<ul>
<li>ChildComponent 是否用 <code>React.memo</code> 包裹？</li>
<li>data 物件是否用 <code>useMemo</code>？</li>
<li>onClick 是否用 <code>useCallback</code>？</li>
</ul>
</blockquote>
<hr>
<h3 id="範例二：列表虛擬化"><a href="#範例二：列表虛擬化" class="headerlink" title="範例二：列表虛擬化"></a>範例二：列表虛擬化</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ListView.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FixedSizeList</span> <span class="keyword">as</span> <span class="title class_">List</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-window&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Row</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; index, style &#125;</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>列表項目 #&#123;index&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ListView</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">List</span> <span class="attr">height</span>=<span class="string">&#123;400&#125;</span> <span class="attr">itemCount</span>=<span class="string">&#123;10000&#125;</span> <span class="attr">itemSize</span>=<span class="string">&#123;35&#125;</span> <span class="attr">width</span>=<span class="string">&#123;</span>&#x27;<span class="attr">100</span>%&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;Row&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>檢核點</strong>：</p>
<ul>
<li>是否針對長列表導入虛擬化？</li>
<li>itemSize 與 height 設定是否合理？</li>
</ul>
</blockquote>
<hr>
<h3 id="範例三：Code-Splitting-與懶載入"><a href="#範例三：Code-Splitting-與懶載入" class="headerlink" title="範例三：Code Splitting 與懶載入"></a>範例三：Code Splitting 與懶載入</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Home&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dashboard</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Dashboard&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">AppRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>載入中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/dashboard&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Dashboard&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>檢核點</strong>：</p>
<ul>
<li>是否有針對路由或大型元件進行懶載入？</li>
<li>fallback UI 是否友善？</li>
</ul>
</blockquote>
<hr>
<h3 id="範例四：效能分析"><a href="#範例四：效能分析" class="headerlink" title="範例四：效能分析"></a>範例四：效能分析</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Profiler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoList</span> <span class="keyword">from</span> <span class="string">&#x27;./TodoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onRenderCallback</span>(<span class="params">id, phase, actualDuration</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;id&#125;</span> <span class="subst">$&#123;phase&#125;</span> 耗時：<span class="subst">$&#123;actualDuration.toFixed(<span class="number">2</span>)&#125;</span>ms`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Profiler</span> <span class="attr">id</span>=<span class="string">&quot;TodoList&quot;</span> <span class="attr">onRender</span>=<span class="string">&#123;onRenderCallback&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TodoList</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Profiler</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>檢核點</strong>：</p>
<ul>
<li>是否使用 Profiler 區隔並記錄核心元件耗時？</li>
<li>是否定期檢視開發者工具數據？</li>
</ul>
</blockquote>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上檢核清單涵蓋了從程式撰寫、元件切分，到效能分析與持續監控的各個面向。建議將此清單整合至 Pull Request 模板中，並在團隊中推廣效能優化文化。持續在日常開發中落實這些檢查，能確保應用在功能增長的同時仍保持流暢的使用者體驗，並降低潛在的性能退化風險。若需將本文轉為 Markdown、PDF 或 Notion 模板，歡迎隨時提出。</p>
<h2 id="補充：React-效能優化-SOP-檢核清單"><a href="#補充：React-效能優化-SOP-檢核清單" class="headerlink" title="補充：React 效能優化 SOP 檢核清單"></a>補充：React 效能優化 SOP 檢核清單</h2><h3 id="一、避免不必要的重新渲染"><a href="#一、避免不必要的重新渲染" class="headerlink" title="一、避免不必要的重新渲染"></a>一、避免不必要的重新渲染</h3><ul>
<li><input disabled="" type="checkbox"> 是否使用 <code>React.memo</code> 包裹純函式元件？</li>
<li><input disabled="" type="checkbox"> 是否有使用 <code>useCallback</code> 記憶傳遞的函式 props？</li>
<li><input disabled="" type="checkbox"> 是否有使用 <code>useMemo</code> 記憶計算結果，避免重複計算？</li>
<li><input disabled="" type="checkbox"> 是否避免在 JSX 中直接宣告函式或物件（例如 inline style）？</li>
</ul>
<hr>
<h3 id="二、State-管理與元件分離"><a href="#二、State-管理與元件分離" class="headerlink" title="二、State 管理與元件分離"></a>二、State 管理與元件分離</h3><ul>
<li><input disabled="" type="checkbox"> 是否將狀態下放至最小影響範圍的元件中？</li>
<li><input disabled="" type="checkbox"> 是否避免使用不必要的 lifting state up？</li>
<li><input disabled="" type="checkbox"> 是否將 UI 狀態（如開關、hover 狀態）與全域狀態分離？</li>
</ul>
<hr>
<h3 id="三、Props-傳遞與結構優化"><a href="#三、Props-傳遞與結構優化" class="headerlink" title="三、Props 傳遞與結構優化"></a>三、Props 傳遞與結構優化</h3><ul>
<li><input disabled="" type="checkbox"> 是否控制 props 深層傳遞導致的層層 re-render？</li>
<li><input disabled="" type="checkbox"> 是否 props 結構穩定、可預期？（避免 object&#x2F;array 每次都變）</li>
</ul>
<hr>
<h3 id="四、渲染大量資料時的處理"><a href="#四、渲染大量資料時的處理" class="headerlink" title="四、渲染大量資料時的處理"></a>四、渲染大量資料時的處理</h3><ul>
<li><input disabled="" type="checkbox"> 是否針對長列表使用虛擬化工具（如 <code>react-window</code>, <code>react-virtualized</code>）？</li>
<li><input disabled="" type="checkbox"> 是否有合理使用 <code>key</code>（且為穩定值，例如 id 而非 index）？</li>
</ul>
<hr>
<h3 id="五、資源載入與-Code-Splitting"><a href="#五、資源載入與-Code-Splitting" class="headerlink" title="五、資源載入與 Code Splitting"></a>五、資源載入與 Code Splitting</h3><ul>
<li><input disabled="" type="checkbox"> 是否使用 <code>React.lazy</code> + <code>Suspense</code> 實現元件懶載入？</li>
<li><input disabled="" type="checkbox"> 是否進行 route-based code splitting（使用動態 import）？</li>
<li><input disabled="" type="checkbox"> 是否有壓縮圖片、延遲圖片載入（lazy loading）？</li>
</ul>
<hr>
<h3 id="六、效能監控與分析"><a href="#六、效能監控與分析" class="headerlink" title="六、效能監控與分析"></a>六、效能監控與分析</h3><ul>
<li><input disabled="" type="checkbox"> 是否使用 React DevTools Profiler 檢查 render 頻率與時間？</li>
<li><input disabled="" type="checkbox"> 是否分析過 Lighthouse &#x2F; Web Vitals 的效能指標？</li>
<li><input disabled="" type="checkbox"> 是否檢查 Bundle Size（Webpack 分析工具、SourceMap Explorer 等）？</li>
</ul>
<hr>
<h3 id="七、避免常見陷阱"><a href="#七、避免常見陷阱" class="headerlink" title="七、避免常見陷阱"></a>七、避免常見陷阱</h3><ul>
<li><input disabled="" type="checkbox"> 是否避免每次 render 都新建匿名函式？</li>
<li><input disabled="" type="checkbox"> 是否避免重複 render 同一資料來源？</li>
<li><input disabled="" type="checkbox"> 是否避免過度依賴 context 導致全頁重 render？</li>
</ul>
<hr>
<h3 id="八、開發階段優化習慣"><a href="#八、開發階段優化習慣" class="headerlink" title="八、開發階段優化習慣"></a>八、開發階段優化習慣</h3><ul>
<li><input disabled="" type="checkbox"> 是否將效能優化納入 Code Review 檢查點？</li>
<li><input disabled="" type="checkbox"> 是否每個大型新元件都確認是否會引起不必要渲染？</li>
<li><input disabled="" type="checkbox"> 是否測試過主流程在弱網或低效能設備上的表現？</li>
</ul>
]]></content>
      <tags>
        <tag>ES Module</tag>
        <tag>React</tag>
        <tag>Performance Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>React 效能優化入門教學筆記 | 學習筆記</title>
    <url>/2024/12/25/learning-notes-react-performance-optimization-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 作為現代前端開發的主流函式庫之一，強調 UI 的組件化與狀態驅動式渲染。然而，隨著應用規模擴大與資料變得動態頻繁，React 應用可能出現重新渲染過多、載入過慢或記憶體占用過高等問題，影響使用者體驗與開發效率。為此，瞭解與掌握 React 的效能優化技巧，成為中高階開發者的重要功課。</p>
<p>本篇筆記將介紹 React 效能優化的核心原則與常見實作方式，搭配簡單的程式碼範例說明實際操作，協助你建立清晰的優化思維與實作經驗。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>避免不必要的重新渲染</strong></p>
<ul>
<li>使用 <code>React.memo</code> 包裹純函式組件</li>
<li>適當使用 <code>useMemo</code> 與 <code>useCallback</code> 記憶運算結果或函式引用</li>
</ul>
</li>
<li><p><strong>Lazy loading（Code Splitting）</strong></p>
<ul>
<li>使用 <code>React.lazy</code> 與 <code>Suspense</code> 實現組件按需載入</li>
</ul>
</li>
<li><p><strong>列表渲染優化</strong></p>
<ul>
<li>提供穩定的 <code>key</code>，避免 diff 錯誤導致重繪</li>
<li>處理大量資料時可結合虛擬化工具（如 <code>react-window</code>）</li>
</ul>
</li>
<li><p><strong>狀態管理與邏輯分離</strong></p>
<ul>
<li>將全域狀態與 UI 狀態分離，減少重渲染範圍</li>
<li>減少 props 傳遞鏈，避免深層組件無謂更新</li>
</ul>
</li>
<li><p><strong>避免 inline 宣告與函式</strong></p>
<ul>
<li>每次 render 都會產生新函式或物件，導致子組件重新渲染</li>
</ul>
</li>
<li><p><strong>效能分析與工具</strong></p>
<ul>
<li>使用 React DevTools 的 Profiler 模組分析 render 開銷</li>
<li>善用 Chrome DevTools、Lighthouse 等協助調校效能</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="1-避免不必要的渲染：使用-React-memo"><a href="#1-避免不必要的渲染：使用-React-memo" class="headerlink" title="1. 避免不必要的渲染：使用 React.memo"></a>1. 避免不必要的渲染：使用 <code>React.memo</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TodoItem</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">TodoItem</span>(<span class="params">&#123; todo, onToggle &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Render:&#x27;</span>, todo.<span class="property">text</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;todo.completed&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> onToggle(todo.id)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;todo.text&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>若未使用 <code>React.memo</code>，即使 <code>todo</code> 資料未變，只要父層重新 render，<code>TodoItem</code> 就會跟著重新 render。使用 <code>React.memo</code> 可避免這種不必要的重新渲染。</p>
<hr>
<h3 id="2-函式記憶：使用-useCallback"><a href="#2-函式記憶：使用-useCallback" class="headerlink" title="2. 函式記憶：使用 useCallback"></a>2. 函式記憶：使用 <code>useCallback</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onToggle = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setTodos</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span></span><br><span class="line">    prev.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> (todo.<span class="property">id</span> === id ? &#123; ...todo, <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125; : todo))</span><br><span class="line">  );</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p>如果 <code>onToggle</code> 每次 render 都重新宣告，會導致 <code>React.memo</code> 判斷 props 改變，從而重新渲染子元件。使用 <code>useCallback</code> 可以保留函式參考的一致性。</p>
<hr>
<h3 id="3-虛擬滾動列表：使用-react-window"><a href="#3-虛擬滾動列表：使用-react-window" class="headerlink" title="3. 虛擬滾動列表：使用 react-window"></a>3. 虛擬滾動列表：使用 <code>react-window</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FixedSizeList</span> <span class="keyword">as</span> <span class="title class_">List</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-window&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Row</span> = (<span class="params">&#123; index, style &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>Row &#123;index&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyList</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">List</span> <span class="attr">height</span>=<span class="string">&#123;300&#125;</span> <span class="attr">itemCount</span>=<span class="string">&#123;1000&#125;</span> <span class="attr">itemSize</span>=<span class="string">&#123;35&#125;</span> <span class="attr">width</span>=<span class="string">&#123;300&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;Row&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>react-window</code> 提供虛擬滾動的能力，只 render 可視範圍內的項目，大幅減少 DOM 結點，提高大數據列表效能。</p>
<hr>
<h3 id="4-懶載入元件：使用-React-lazy"><a href="#4-懶載入元件：使用-React-lazy" class="headerlink" title="4. 懶載入元件：使用 React.lazy"></a>4. 懶載入元件：使用 <code>React.lazy</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Chart</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Chart&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading chart...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Chart</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>將大型組件分割成懶載入模組，可避免初次載入體積過大，提升頁面初始加載速度。</p>
<hr>
<h3 id="5-使用-Profiler-分析效能瓶頸"><a href="#5-使用-Profiler-分析效能瓶頸" class="headerlink" title="5. 使用 Profiler 分析效能瓶頸"></a>5. 使用 Profiler 分析效能瓶頸</h3><p>React DevTools 提供 Profiler 模組，可追蹤各元件 render 時間與次數，有助於識別過度渲染或效能低落的元件。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Profiler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Profiler</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">id</span>=<span class="string">&quot;TodoList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">onRender</span>=<span class="string">&#123;(id,</span> <span class="attr">phase</span>, <span class="attr">actualDuration</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">    console.log(`$&#123;id&#125; rendered in $&#123;actualDuration&#125;ms`);</span></span><br><span class="line"><span class="language-xml">  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Profiler</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>React 效能優化並非一蹴可幾，而是需隨著應用規模與需求不斷調整與改善的過程。透過理解 Virtual DOM 的運作原理、掌握各種 Hook 的特性，以及活用分析工具，我們可以更有策略地針對效能瓶頸逐步優化，打造流暢且可維護的使用者體驗。</p>
<p>建議從小型優化（如 <code>React.memo</code>、<code>useCallback</code>）著手，並逐步引入懶載入與虛擬化等進階技巧，讓 React 應用能夠隨著功能擴展持續保持高效能。</p>
<p>如果你對特定效能問題有興趣，例如圖片載入優化、CSR vs SSR 效能比較等，也可以再深入探討不同的進階主題。</p>
]]></content>
      <tags>
        <tag>ES Module</tag>
        <tag>React</tag>
        <tag>Performance Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>React Query 入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-react-query-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>隨著前端應用程式越來越複雜，資料的取得、快取、同步更新以及狀態管理成為重要挑戰。傳統使用 <code>useEffect</code> 搭配 <code>fetch</code> 或 <code>axios</code> 取得資料，會讓程式碼變得冗長且難以維護，特別是需要處理快取、錯誤重試、背景重新整理（refetch）等功能時。</p>
<p>React Query 是一個強大的資料同步庫，它抽象並管理伺服器狀態（server state），讓你能輕鬆完成資料抓取、快取、更新與錯誤處理。透過簡潔的 API 和自動化行為，讓前端開發者能專注於業務邏輯，而非繁瑣的資料管理。</p>
<p>本篇教學將介紹 React Query 的核心概念，並提供簡單的實作範例，讓你快速理解如何在 React 專案中有效率且方便地使用 React Query。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>React Query 是什麼？</strong><br>專注於伺服器狀態管理的資料同步庫，提供資料取得、快取、自動重試、背景更新、分頁等功能。</p>
</li>
<li><p><strong>伺服器狀態（Server State） vs 本地狀態（Local State）</strong><br>React Query 管理的是伺服器端資料，不同於用 React 的 <code>useState</code> 管理元件內部的本地狀態。</p>
</li>
<li><p><strong>核心 Hook：<code>useQuery</code></strong><br>用來抓取和快取資料，接收一個 key 和一個 fetcher 函式，會自動處理 loading、error、資料快取。</p>
</li>
<li><p><strong>資料快取與自動同步</strong><br>React Query 會自動快取請求結果，並依設定自動重新抓取，保持資料最新。</p>
</li>
<li><p><strong>背景重新整理（Refetching）</strong><br>可設定在視窗獲得焦點時自動刷新資料，確保資料同步。</p>
</li>
<li><p><strong>錯誤重試機制</strong><br>請求失敗時可自動重試，避免因網路波動導致資料錯誤。</p>
</li>
<li><p><strong><code>useMutation</code></strong><br>用於資料變更（新增、修改、刪除）操作，並支援變更後自動重新整理相關快取。</p>
</li>
<li><p><strong>全域 Query Client</strong><br>使用 <code>QueryClient</code> 管理所有查詢狀態，需用 <code>QueryClientProvider</code> 包裹應用程式。</p>
</li>
<li><p><strong>方便整合各種請求函式庫</strong><br>可搭配 <code>fetch</code>、<code>axios</code> 等任意資料請求方式。</p>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="1-安裝"><a href="#1-安裝" class="headerlink" title="1. 安裝"></a>1. 安裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @tanstack/react-query</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @tanstack/react-query</span><br></pre></td></tr></table></figure>

<h3 id="2-基本設定"><a href="#2-基本設定" class="headerlink" title="2. 基本設定"></a>2. 基本設定</h3><p>在 React 應用的根元件設定 <code>QueryClient</code> 與 <code>QueryClientProvider</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QueryClient</span>, <span class="title class_">QueryClientProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryClient = <span class="keyword">new</span> <span class="title class_">QueryClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QueryClientProvider</span> <span class="attr">client</span>=<span class="string">&#123;queryClient&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">YourComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QueryClientProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-useQuery-抓取資料"><a href="#3-使用-useQuery-抓取資料" class="headerlink" title="3. 使用 useQuery 抓取資料"></a>3. 使用 <code>useQuery</code> 抓取資料</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一個模擬的 fetch 函式，從 API 取得使用者清單</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用 useQuery，第一參數為 key，第二參數為 fetch 函式</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading, isError &#125; = <span class="title function_">useQuery</span>([<span class="string">&#x27;users&#x27;</span>], fetchUsers);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>載入中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isError) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>錯誤：&#123;error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map((user) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name&#125; (&#123;user.email&#125;)</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserList</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-useMutation-進行資料更新"><a href="#4-使用-useMutation-進行資料更新" class="headerlink" title="4. 使用 useMutation 進行資料更新"></a>4. 使用 <code>useMutation</code> 進行資料更新</h3><p>假設有一個新增使用者的 API，使用 <code>useMutation</code> 處理：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMutation, useQueryClient &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addUser</span>(<span class="params">newUser</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newUser),</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;新增失敗&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AddUserForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> queryClient = <span class="title function_">useQueryClient</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mutation = <span class="title function_">useMutation</span>(addUser, &#123;</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 新增成功後，重新整理 users 快取</span></span><br><span class="line">      queryClient.<span class="title function_">invalidateQueries</span>([<span class="string">&#x27;users&#x27;</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    mutation.<span class="title function_">mutate</span>(&#123; name &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; placeholder=&quot;使用者名稱&quot; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>新增使用者<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mutation.isLoading &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>新增中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;mutation.isError &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>錯誤：&#123;mutation.error.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;mutation.isSuccess &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>新增成功！<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AddUserForm</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>React Query 提供一套完整且簡潔的 API 來管理伺服器狀態，包含資料取得、快取、錯誤處理與背景更新。透過 <code>useQuery</code> 與 <code>useMutation</code>，你能輕鬆地處理資料的讀取與更新，讓 React 應用程式更穩定且易維護。</p>
<p>建議在開發中逐步導入 React Query，取代傳統的 <code>useEffect + fetch</code> 模式，尤其是對於複雜的資料流與同步需求，能大幅提升開發效率與使用者體驗。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="%5Bhttps://tanstack.com/query/latest">React Query 文件</a></li>
</ol>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>React Query</tag>
      </tags>
  </entry>
  <entry>
    <title>React Redux 介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/12/12/learning-notes-react-redux-intro-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-Redux？"><a href="#1-什麼是-Redux？" class="headerlink" title="1. 什麼是 Redux？"></a>1. 什麼是 Redux？</h4><p><code>Redux</code> 是 JavaScript 應用程式的狀態管理工具，最常與 React 搭配使用。它提供一個單一的全域狀態樹，使應用程式的狀態變更更可預測、可測試、可維護。Redux 遵循 <strong>單向數據流</strong> 和 <strong>不可變狀態</strong> 的概念，適合管理大型應用的複雜狀態。  </p>
<hr>
<h4 id="2-Redux-核心概念"><a href="#2-Redux-核心概念" class="headerlink" title="2. Redux 核心概念"></a>2. Redux 核心概念</h4><p>Redux 的運作基礎主要由三個部分組成：  </p>
<ol>
<li><strong>Store（存儲狀態的地方）</strong>  <ul>
<li>整個應用程式的狀態存儲在單一的 Store 中。</li>
</ul>
</li>
<li><strong>Action（動作）</strong>  <ul>
<li>Action 是一個 JavaScript 物件，描述了「發生了什麼事」。通常包含 <code>type</code> 屬性來表明事件類型，並可能包含 <code>payload</code> 傳遞額外數據。</li>
</ul>
</li>
<li><strong>Reducer（狀態變更邏輯）</strong>  <ul>
<li>Reducer 是一個純函式，接收當前狀態與 Action，根據 Action 類型來決定如何更新狀態。</li>
</ul>
</li>
</ol>
<hr>
<h4 id="3-安裝-Redux-和-React-Redux"><a href="#3-安裝-Redux-和-React-Redux" class="headerlink" title="3. 安裝 Redux 和 React-Redux"></a>3. 安裝 Redux 和 React-Redux</h4><p>在 React 專案中安裝 Redux 及 React-Redux：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>

<p>Redux Toolkit（RTK）是官方推薦的 Redux 工具包，它提供更簡潔、易用的 API 來簡化 Redux 使用。  </p>
<hr>
<h4 id="4-創建-Redux-Store"><a href="#4-創建-Redux-Store" class="headerlink" title="4. 創建 Redux Store"></a>4. 創建 Redux Store</h4><p>在 <code>store.js</code> 檔案中，使用 <code>configureStore</code> 創建 Store：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<p>在這裡，我們將 <code>counterReducer</code> 設定為 <code>counter</code> 這個 slice 的 reducer。</p>
<hr>
<h4 id="5-創建-Slice（Reducer-Action）"><a href="#5-創建-Slice（Reducer-Action）" class="headerlink" title="5. 創建 Slice（Reducer + Action）"></a>5. 創建 Slice（Reducer + Action）</h4><p>在 <code>counterSlice.js</code> 檔案中，使用 <code>createSlice</code> 定義 <code>counter</code> 相關的狀態與 reducer：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure>

<p>這裡的 <code>createSlice</code> 幫助我們：  </p>
<ul>
<li>定義狀態的初始值（<code>initialState</code>）  </li>
<li>自動生成 <code>reducer</code>  </li>
<li>自動產生對應的 Action</li>
</ul>
<hr>
<h4 id="6-設置-Store-提供給-React"><a href="#6-設置-Store-提供給-React" class="headerlink" title="6. 設置 Store 提供給 React"></a>6. 設置 Store 提供給 React</h4><p>在 <code>index.js</code> 檔案中使用 <code>Provider</code> 讓整個 React 應用可以存取 Redux Store：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>這樣 <code>App</code> 及其所有子元件都可以存取 Redux Store。</p>
<hr>
<h4 id="7-在-React-組件中使用-Redux"><a href="#7-在-React-組件中使用-Redux" class="headerlink" title="7. 在 React 組件中使用 Redux"></a>7. 在 React 組件中使用 Redux</h4><p>在 <code>Counter.js</code> 中使用 Redux Store 來讀取與修改 <code>counter</code> 的值：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement, incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Counter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>計數器：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;減少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(5))&#125;&gt;增加 5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure>

<p>在這個範例中：  </p>
<ul>
<li><code>useSelector(state =&gt; state.counter.value)</code> 取得 Store 內的 <code>counter</code> 值。  </li>
<li><code>useDispatch()</code> 取得 Redux 的 <code>dispatch</code> 函式，發送 Action 來更新狀態。  </li>
<li>點擊按鈕時，對應的 Action 會發送給 Reducer，修改狀態。</li>
</ul>
<hr>
<h4 id="8-使用-Redux-DevTools-進行除錯"><a href="#8-使用-Redux-DevTools-進行除錯" class="headerlink" title="8. 使用 Redux DevTools 進行除錯"></a>8. 使用 Redux DevTools 進行除錯</h4><p>Redux Toolkit 內建支援 Redux DevTools，可以在瀏覽器中查看 Redux 狀態變更的歷史紀錄，方便除錯。安裝 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a>，並開啟瀏覽器的 <code>Redux</code> 分頁來觀察 Action 和 State 變化。</p>
<hr>
<h4 id="9-總結"><a href="#9-總結" class="headerlink" title="9. 總結"></a>9. 總結</h4><p>Redux 提供了一個強大的狀態管理方式，適合中大型應用。在 Redux Toolkit 的幫助下，開發 Redux 應用變得更加直觀與簡潔。本篇介紹了 Redux 的基本概念，並透過實際範例展示如何在 React 中整合 Redux。如果你的應用狀態複雜，需要跨組件共享，Redux 會是很好的選擇。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://blog.typeart.cc/redux-vs-use-congtext-use-reducer-and-which-one/">redux vs useContext, useReducer，該怎麼選擇？</a></li>
<li><a href="https://leewarrick.com/blog/the-problem-with-context/">The Problem with React’s Context API</a></li>
<li><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/a-comparison-of-react-state-management-libraries-ba61db07332b">React 狀態管理套件比較與原理實現 feat. Redux, Zustand, Jotai, Recoil, MobX, Valtio</a></li>
<li><a href="https://www.cythilya.tw/2023/05/25/implement-redux-by-react-context-api-and-useReducer/">利用 React Context API + useReducer 實作 Redux</a></li>
</ol>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>Redux</tag>
        <tag>React Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>React useMemo 與 useCallback 差異介紹與入門教學 | 學習筆記</title>
    <url>/2024/12/20/learning-notes-react-use-callback-use-memo-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用 React hooks 進行開發時，<code>useMemo</code> 和 <code>useCallback</code> 是兩個常被提及的性能優化工具。它們都屬於 <strong>記憶化（memoization）</strong> 技術，用來避免不必要的重算與重渲染。然而，很多初學者在理解這兩者的用途與差異時常感到困惑。這篇文章將從概念出發，並搭配實際範例，幫助你掌握 <code>useMemo</code> 與 <code>useCallback</code> 的核心用途與實作方式。</p>
<hr>
<h2 id="一、共通點：記憶化"><a href="#一、共通點：記憶化" class="headerlink" title="一、共通點：記憶化"></a>一、共通點：記憶化</h2><p>React 在每次組件渲染時，預設會重新執行所有函式與表達式。當某些值（如計算結果、函式）在依賴未改變的情況下不需要重新產生，我們可以利用記憶化來優化效能。</p>
<p>這就是 <code>useMemo</code> 和 <code>useCallback</code> 的主要功能：<strong>根據依賴陣列（dependency array）決定是否重建值或函式</strong>。</p>
<hr>
<h2 id="二、差異概念總覽"><a href="#二、差異概念總覽" class="headerlink" title="二、差異概念總覽"></a>二、差異概念總覽</h2><table>
<thead>
<tr>
<th>Hook</th>
<th>主要用途</th>
<th>回傳內容</th>
<th>使用時機</th>
</tr>
</thead>
<tbody><tr>
<td><code>useMemo</code></td>
<td>記憶「計算結果」</td>
<td>任意值</td>
<td>計算過程昂貴，避免重複運算</td>
</tr>
<tr>
<td><code>useCallback</code></td>
<td>記憶「函式定義」</td>
<td>函式</td>
<td>傳遞函式給子元件，避免不必要的 re-render</td>
</tr>
</tbody></table>
<p>換句話說：</p>
<ul>
<li><code>useMemo(fn, deps)</code> ≈ <code>const value = memoized(fn)</code></li>
<li><code>useCallback(fn, deps)</code> ≈ <code>const callback = memoized(() =&gt; fn)</code></li>
</ul>
<hr>
<h2 id="三、useMemo-範例"><a href="#三、useMemo-範例" class="headerlink" title="三、useMemo 範例"></a>三、useMemo 範例</h2><p>假設我們有一個需要進行繁重計算的函式，例如統計某個資料集合中的數值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">slowFunction</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running slow function&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123;</span><br><span class="line">    result += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ExpensiveComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [input, setInput] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> computedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">slowFunction</span>(input);</span><br><span class="line">  &#125;, [input]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Expensive Calculation<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>計算結果：&#123;computedValue&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setInput(Number(e.target.value))&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(c =&gt; c + 1)&#125;&gt;重新渲染 (&#123;count&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個例子中，若不使用 <code>useMemo</code>，只要任何 state 改變（例如點擊按鈕改變 <code>count</code>），整個組件都會重新執行 <code>slowFunction</code>，導致效能問題。透過 <code>useMemo</code>，只有 <code>input</code> 改變時才會重新計算，其他情況會重複使用上次的計算結果。</p>
<hr>
<h2 id="四、useCallback-範例"><a href="#四、useCallback-範例" class="headerlink" title="四、useCallback 範例"></a>四、useCallback 範例</h2><p>有時候我們會將函式作為 props 傳遞給子元件。如果每次重新 render 都產生新的函式實例，會導致子元件誤以為 props 改變，而重新渲染。這時就可以用 <code>useCallback</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useCallback, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildButton</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; onClick &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ChildButton rendered&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>點我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ParentComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [other, setOther] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>useCallback Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildButton</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setOther(o =&gt; o + 1)&#125;&gt;改變其他狀態<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，<code>ChildButton</code> 是經過 <code>memo</code> 包裹的元件，只有在 <code>props.onClick</code> 改變時才會重新渲染。使用 <code>useCallback</code> 確保 <code>handleClick</code> 函式在 <code>[]</code>（無依賴）下只會創建一次，即使 <code>other</code> 改變，<code>ChildButton</code> 也不會重新渲染。</p>
<hr>
<h2 id="五、常見錯誤與注意事項"><a href="#五、常見錯誤與注意事項" class="headerlink" title="五、常見錯誤與注意事項"></a>五、常見錯誤與注意事項</h2><ol>
<li><p><strong>過度使用會反效果</strong><br><code>useMemo</code> 和 <code>useCallback</code> 本身也有記憶成本，不建議過度使用。只有在你確定函式或運算昂貴，或造成子元件重 render 才需要用。</p>
</li>
<li><p><strong>依賴陣列要正確</strong><br>記得將函式中引用的變數正確加入依賴陣列中，否則會造成記憶結果與預期不符。</p>
</li>
<li><p><strong>搭配 <code>React.memo</code> 效果更明顯</strong><br><code>useCallback</code> 通常與 <code>memo</code> 或 <code>PureComponent</code> 搭配，否則即使函式地址一樣，也無法避免重 render。</p>
</li>
</ol>
<hr>
<h2 id="六、總結"><a href="#六、總結" class="headerlink" title="六、總結"></a>六、總結</h2><p>當你在開發中遇到效能瓶頸或元件不必要地重複渲染時，才是使用 <code>useMemo</code> 與 <code>useCallback</code> 的好時機。舉例來說：</p>
<ul>
<li>在表格過濾、排序等涉及大量資料處理的畫面中，可以用 <code>useMemo</code> 優化計算。</li>
<li>在表單中將函式傳遞給 <code>input</code> 元件時，使用 <code>useCallback</code> 可避免整個表單重 render。</li>
</ul>
<p>記住一個原則：<strong>不要為了使用 hook 而使用，而是根據實際效能需求進行優化</strong>。如果你的應用很小或尚未遇到效能問題，先專注於撰寫可讀性高、邏輯清楚的程式碼，這才是最重要的。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://muki.tw/react-render-usecallback-react-memo/">如何優化 React 元件的渲染效能，並避免渲染陷阱</a></li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>React</tag>
        <tag>React.js</tag>
        <tag>ReactJS</tag>
        <tag>useMemo</tag>
        <tag>useCallback</tag>
      </tags>
  </entry>
  <entry>
    <title>瀏覽器渲染優化入門：掌握重繪、重排與合成的效能關鍵 | 學習筆記</title>
    <url>/2024/02/20/learning-notes-reflow-repaint-composite-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代前端開發中，良好的使用者體驗不僅來自功能與介面設計，更仰賴流暢的渲染效能。網頁在瀏覽器中的呈現涉及一連串複雜的渲染步驟，包含樣式計算、排版、繪製與合成。當我們操作 DOM、修改樣式或觸發動畫時，都可能影響這些渲染流程。如果不了解這些背後的機制，很容易造成畫面卡頓與效能瓶頸。</p>
<p>本篇筆記將介紹瀏覽器渲染的三大核心階段：<strong>重排（Reflow）</strong>、<strong>重繪（Repaint）</strong>與<strong>合成（Composite）</strong>，並透過實際範例說明如何避免過度重排與重繪，提升整體效能。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>渲染流程</strong>：瀏覽器的渲染過程包括 DOM 構建、樣式計算、布局（Reflow）、繪製（Repaint）與合成（Composite）。</p>
</li>
<li><p><strong>Reflow（重排）</strong>：</p>
<ul>
<li>代表重新計算元素的尺寸與位置。</li>
<li>會影響該元素及其子元素，成本高昂。</li>
</ul>
</li>
<li><p><strong>Repaint（重繪）</strong>：</p>
<ul>
<li>改變元素的外觀但不影響佈局（如背景色、文字顏色）。</li>
<li>相對比重排便宜，但仍需耗費資源。</li>
</ul>
</li>
<li><p><strong>Composite（合成）</strong>：</p>
<ul>
<li>將繪製後的圖層合成為畫面。</li>
<li>常與硬體加速 GPU 合作完成，成本最低。</li>
</ul>
</li>
<li><p><strong>優化原則</strong>：</p>
<ul>
<li>減少 DOM 操作與樣式更動次數。</li>
<li>使用 will-change、transform、opacity 等屬性觸發 GPU 合成。</li>
<li>避免觸發同步 reflow（如讀寫 offsetHeight 混用）。</li>
<li>使用 requestAnimationFrame 取代 setInterval 管理動畫。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="1-重排（Reflow）觸發範例"><a href="#1-重排（Reflow）觸發範例" class="headerlink" title="1. 重排（Reflow）觸發範例"></a>1. <strong>重排（Reflow）觸發範例</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background-color: blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;200px&#x27;</span>; <span class="comment">// 觸發 reflow：尺寸改變</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼會導致重新計算佈局，因為改變了 box 的寬度。若該元素還包含其他內嵌元素，也會一併重新計算，對效能影響較大。</p>
<h3 id="2-重繪（Repaint）觸發範例"><a href="#2-重繪（Repaint）觸發範例" class="headerlink" title="2. 重繪（Repaint）觸發範例"></a>2. <strong>重繪（Repaint）觸發範例</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>; <span class="comment">// 觸發 repaint：外觀改變但位置不變</span></span><br></pre></td></tr></table></figure>

<p>這只會重新繪製背景色，不涉及位置與尺寸的計算，因此比重排快一些，但仍需資源。</p>
<h3 id="3-合成層（Composite-Layer）優化範例"><a href="#3-合成層（Composite-Layer）優化範例" class="headerlink" title="3. 合成層（Composite Layer）優化範例"></a>3. <strong>合成層（Composite Layer）優化範例</strong></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">will-change</span>: transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateX(100px)&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>transform</code> 搭配 <code>will-change</code> 可以避免 reflow 與 repaint，直接由 GPU 處理合成層的位移，對效能非常有幫助，適合用於動畫或互動操作。</p>
<h3 id="4-錯誤的讀寫順序導致多次重排"><a href="#4-錯誤的讀寫順序導致多次重排" class="headerlink" title="4. 錯誤的讀寫順序導致多次重排"></a>4. <strong>錯誤的讀寫順序導致多次重排</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 壞寫法：不當的交錯讀寫</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;300px&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> height = box.<span class="property">offsetHeight</span>; <span class="comment">// 強制同步計算 reflow</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">height</span> = height + <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>這段程式碼會導致瀏覽器為了提供最新的 <code>offsetHeight</code>，先強制執行一次 reflow，然後再處理 <code>style.height</code> 的設定，又引發一次 reflow。解法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 好寫法：集中寫入，延後讀取</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;300px&#x27;</span>;</span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> height = box.<span class="property">offsetHeight</span>;</span><br><span class="line">  box.<span class="property">style</span>.<span class="property">height</span> = height + <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這樣可以將樣式修改與讀取解耦，避免過度同步重排。</p>
<hr>
<h2 id="常見優化建議"><a href="#常見優化建議" class="headerlink" title="常見優化建議"></a>常見優化建議</h2><ol>
<li><p><strong>避免頻繁操作 DOM</strong></p>
<ul>
<li>將多次操作集中處理，例如使用 <code>documentFragment</code> 或暫時隱藏元素再更新。</li>
</ul>
</li>
<li><p><strong>善用 CSS 動畫與硬體加速</strong></p>
<ul>
<li>使用 <code>transform</code> 與 <code>opacity</code> 搭配 <code>will-change</code> 避免重排。</li>
</ul>
</li>
<li><p><strong>使用 requestAnimationFrame 控制動畫節奏</strong></p>
<ul>
<li>與瀏覽器畫面更新同步，避免畫面撕裂與卡頓。</li>
</ul>
</li>
<li><p><strong>減少強制同步 reflow 操作</strong></p>
<ul>
<li>避免混用讀寫，例如同時使用 <code>offsetTop</code> 與 <code>style.left</code>。</li>
</ul>
</li>
<li><p><strong>審慎使用大型影響範圍的樣式變更</strong></p>
<ul>
<li>例如更動 <code>&lt;body&gt;</code> padding 可能導致整頁重排。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>掌握瀏覽器的渲染流程，是優化前端效能的基礎功。過度重排與重繪是畫面卡頓與耗電的主因，而合成則是成本最低的操作。了解並合理運用這三者，才能打造真正流暢、回應迅速的使用體驗。</p>
<p>作為開發者，我們應從 DOM 操作、CSS 寫法到動畫設計，全面考量渲染機制對效能的影響。透過實踐優化策略，讓產品在各種裝置上都能展現卓越表現。</p>
<p>若我們需要進一步探索，可研究 Chrome DevTools 的「Performance」面板，實際觀察每次重排與重繪的開銷，進一步精細調整效能瓶頸。</p>
]]></content>
      <tags>
        <tag>瀏覽器渲染</tag>
        <tag>Reflow</tag>
        <tag>Repaint</tag>
        <tag>Composite</tag>
      </tags>
  </entry>
  <entry>
    <title>正規表達式（Regex）入門教學筆記 | 學習筆記</title>
    <url>/2024/12/13/learning-notes-regex-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-正規表達式簡介"><a href="#1-正規表達式簡介" class="headerlink" title="1. 正規表達式簡介"></a>1. 正規表達式簡介</h2><p>正規表達式（Regular Expression，簡稱 <code>Regex</code>）是一種用於字串匹配與處理的強大工具。它廣泛應用於文字搜尋、資料驗證、文字替換等場景。正規表達式透過特殊的語法模式來描述字串結構，並可被多種程式語言支援，如 Python、JavaScript、Java、C# 等。</p>
<h2 id="2-基本語法與範例"><a href="#2-基本語法與範例" class="headerlink" title="2. 基本語法與範例"></a>2. 基本語法與範例</h2><h3 id="2-1-字面量匹配"><a href="#2-1-字面量匹配" class="headerlink" title="2.1 字面量匹配"></a>2.1 字面量匹配</h3><p>正規表達式最基本的形式是字面量匹配，意即直接搜尋特定字串。</p>
<p><strong>範例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>可匹配「hello」這個字串。</p>
<h3 id="2-2-字元類別（Character-Classes）"><a href="#2-2-字元類別（Character-Classes）" class="headerlink" title="2.2 字元類別（Character Classes）"></a>2.2 字元類別（Character Classes）</h3><p>字元類別用來匹配特定類型的字元。</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>說明</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>任意單一字元（不含換行）</td>
<td><code>h.t</code> 可匹配 <code>hat</code>, <code>hot</code>, <code>hit</code></td>
</tr>
<tr>
<td><code>[abc]</code></td>
<td>任意列出的字元</td>
<td><code>[aeiou]</code> 可匹配任一母音字母</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>不包含列出的字元</td>
<td><code>[^0-9]</code> 可匹配任何非數字字元</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>字母範圍</td>
<td><code>[a-zA-Z]</code> 可匹配所有英文字母</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>任意數字（等價於 <code>[0-9]</code>）</td>
<td><code>\d&#123;2&#125;</code> 可匹配 <code>23</code>, <code>89</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>任意字母、數字或底線（<code>[a-zA-Z0-9_]</code>）</td>
<td><code>\w+</code> 可匹配 <code>hello_123</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>空白字元（空格、Tab、換行）</td>
<td><code>\s+</code> 可匹配 <code>   </code></td>
</tr>
</tbody></table>
<h3 id="2-3-邊界匹配（Anchors）"><a href="#2-3-邊界匹配（Anchors）" class="headerlink" title="2.3 邊界匹配（Anchors）"></a>2.3 邊界匹配（Anchors）</h3><p>用來限制匹配的位置。</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>說明</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td><code>^</code></td>
<td>開頭</td>
<td><code>^Hello</code> 只能匹配 <code>Hello world</code>，但不匹配 <code>Say Hello</code></td>
</tr>
<tr>
<td><code>$</code></td>
<td>結尾</td>
<td><code>world$</code> 只能匹配 <code>Hello world</code>，但不匹配 <code>world today</code></td>
</tr>
<tr>
<td><code>\b</code></td>
<td>單字邊界</td>
<td><code>\bcat\b</code> 只匹配 <code>cat</code>，但不匹配 <code>catch</code></td>
</tr>
</tbody></table>
<h3 id="2-4-重複匹配（Quantifiers）"><a href="#2-4-重複匹配（Quantifiers）" class="headerlink" title="2.4 重複匹配（Quantifiers）"></a>2.4 重複匹配（Quantifiers）</h3><p>用來指定重複次數。</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>說明</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>0 次或更多</td>
<td><code>ba*</code> 可匹配 <code>b</code>, <code>ba</code>, <code>baa</code>, <code>baaa</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>1 次或更多</td>
<td><code>ba+</code> 可匹配 <code>ba</code>, <code>baa</code>, <code>baaa</code> 但不匹配 <code>b</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td>0 次或 1 次</td>
<td><code>colou?r</code> 可匹配 <code>color</code> 和 <code>colour</code></td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>恰好 n 次</td>
<td><code>a&#123;3&#125;</code> 只匹配 <code>aaa</code></td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>至少 n 次</td>
<td><code>a&#123;2,&#125;</code> 可匹配 <code>aa</code>, <code>aaa</code>, <code>aaaa</code></td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>n 到 m 次</td>
<td><code>a&#123;2,4&#125;</code> 可匹配 <code>aa</code>, <code>aaa</code>, <code>aaaa</code></td>
</tr>
</tbody></table>
<h3 id="2-5-分組與選擇（Groups-amp-Alternation）"><a href="#2-5-分組與選擇（Groups-amp-Alternation）" class="headerlink" title="2.5 分組與選擇（Groups &amp; Alternation）"></a>2.5 分組與選擇（Groups &amp; Alternation）</h3><p>使用括號來分組，使用 <code>|</code> 來表示選擇。</p>
<p><strong>範例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(grape|apple|banana)</span><br></pre></td></tr></table></figure>
<p>匹配 <code>grape</code>、<code>apple</code> 或 <code>banana</code>。</p>
<p><strong>範例（分組）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(a|b)c</span><br></pre></td></tr></table></figure>
<p>匹配 <code>ac</code> 或 <code>bc</code>。</p>
<h3 id="2-6-轉義字元（Escape-Characters）"><a href="#2-6-轉義字元（Escape-Characters）" class="headerlink" title="2.6 轉義字元（Escape Characters）"></a>2.6 轉義字元（Escape Characters）</h3><p>正規表達式中的特殊字元（如 <code>.</code>、<code>*</code>、<code>?</code>）需要用 <code>\</code> 進行轉義。</p>
<p><strong>範例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\.com</span><br></pre></td></tr></table></figure>
<p>匹配 <code>.com</code>（實際字面值）。</p>
<h2 id="3-正規表達式應用範例"><a href="#3-正規表達式應用範例" class="headerlink" title="3. 正規表達式應用範例"></a>3. 正規表達式應用範例</h2><h3 id="3-1-Email-驗證"><a href="#3-1-Email-驗證" class="headerlink" title="3.1 Email 驗證"></a>3.1 Email 驗證</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>test@example.com</code> ✅</li>
<li><code>hello@domain.co.uk</code> ✅</li>
<li><code>invalid@com</code> ❌</li>
</ul>
<h3 id="3-2-手機號碼驗證（台灣格式）"><a href="#3-2-手機號碼驗證（台灣格式）" class="headerlink" title="3.2 手機號碼驗證（台灣格式）"></a>3.2 手機號碼驗證（台灣格式）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^09[0-9]&#123;8&#125;$</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>0912345678</code> ✅</li>
<li><code>1234567890</code> ❌</li>
</ul>
<h3 id="3-3-找出所有網址"><a href="#3-3-找出所有網址" class="headerlink" title="3.3 找出所有網址"></a>3.3 找出所有網址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https?://[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;(/\S*)?</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>https://www.google.com</code> ✅</li>
<li><code>http://example.org/test</code> ✅</li>
<li><code>ftp://invalid.url</code> ❌</li>
</ul>
<h3 id="3-4-HTML-標籤匹配"><a href="#3-4-HTML-標籤匹配" class="headerlink" title="3.4 HTML 標籤匹配"></a>3.4 HTML 標籤匹配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*?)&lt;/\1&gt;|/&gt;)</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>&lt;div class=&quot;container&quot;&gt;Content&lt;/div&gt;</code> ✅</li>
<li><code>&lt;img src=&quot;image.jpg&quot; /&gt;</code> ✅</li>
</ul>
<h2 id="4-總結"><a href="#4-總結" class="headerlink" title="4. 總結"></a>4. 總結</h2><p>正規表達式是一種強大的工具，適用於文字處理與資料驗證。透過學習基本語法與實際應用，你可以更有效率地處理字串相關的問題。實務上建議透過線上工具（如 <a href="https://regex101.com/">Regex101</a> 等工具）來測試你的正規表達式，以加深理解。</p>
]]></content>
      <tags>
        <tag>Regular Expression</tag>
        <tag>正則式</tag>
        <tag>正規表達式</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Design 響應式設計入門教學筆記 | 學習筆記</title>
    <url>/2022/06/09/learning-notes-responsive-design-rwd/</url>
    <content><![CDATA[<h2 id="Responsive-Design-響應式設計入門教學筆記"><a href="#Responsive-Design-響應式設計入門教學筆記" class="headerlink" title="Responsive Design 響應式設計入門教學筆記"></a>Responsive Design 響應式設計入門教學筆記</h2><h3 id="一、什麼是響應式設計"><a href="#一、什麼是響應式設計" class="headerlink" title="一、什麼是響應式設計"></a>一、什麼是響應式設計</h3><p>響應式設計 (Responsive Design) 是一種網頁設計方法，使網頁能夠根據不同裝置的螢幕尺寸與解析度，自動調整版面配置，以提供最佳的使用體驗。</p>
<h3 id="二、響應式設計的重要概念"><a href="#二、響應式設計的重要概念" class="headerlink" title="二、響應式設計的重要概念"></a>二、響應式設計的重要概念</h3><h4 id="1-視圖-Viewport"><a href="#1-視圖-Viewport" class="headerlink" title="1. 視圖 (Viewport)"></a>1. 視圖 (Viewport)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼放在 <head> 標籤內，能讓網頁根據不同裝置寬度調整顯示比例，是響應式設計的基本設定。</p>
<h4 id="2-流動網格-Fluid-Grid"><a href="#2-流動網格-Fluid-Grid" class="headerlink" title="2. 流動網格 (Fluid Grid)"></a>2. 流動網格 (Fluid Grid)</h4><p>使用百分比 (%) 來設定元素的寬度，而非固定的像素 (px)，讓版面能隨螢幕大小調整。</p>
<h4 id="3-彈性圖片-Flexible-Images"><a href="#3-彈性圖片-Flexible-Images" class="headerlink" title="3. 彈性圖片 (Flexible Images)"></a>3. 彈性圖片 (Flexible Images)</h4><p>圖片大小以百分比或 max-width 設定，避免圖片超出容器範圍。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-媒體查詢-Media-Queries"><a href="#4-媒體查詢-Media-Queries" class="headerlink" title="4. 媒體查詢 (Media Queries)"></a>4. 媒體查詢 (Media Queries)</h4><p>根據裝置螢幕大小套用不同的 CSS 樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgrey;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、常見的斷點-Breakpoints"><a href="#三、常見的斷點-Breakpoints" class="headerlink" title="三、常見的斷點 (Breakpoints)"></a>三、常見的斷點 (Breakpoints)</h3><p>以下為常見的螢幕寬度斷點，用來針對不同裝置設定樣式：</p>
<table>
<thead>
<tr>
<th>裝置類型</th>
<th>斷點寬度</th>
</tr>
</thead>
<tbody><tr>
<td>手機</td>
<td>0 - 576px</td>
</tr>
<tr>
<td>平板</td>
<td>577px - 768px</td>
</tr>
<tr>
<td>小型桌面</td>
<td>769px - 992px</td>
</tr>
<tr>
<td>大型桌面</td>
<td>993px 以上</td>
</tr>
</tbody></table>
<h3 id="四、實作範例"><a href="#四、實作範例" class="headerlink" title="四、實作範例"></a>四、實作範例</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>響應式設計範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎來到響應式設計範例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的響應式網頁範例。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、其他工具"><a href="#五、其他工具" class="headerlink" title="五、其他工具"></a>五、其他工具</h3><ol>
<li>Bootstrap：內建響應式網格系統，方便快速開發響應式網頁。</li>
<li>Flexbox：簡化版面排列的工具，適合處理彈性佈局。</li>
<li>CSS Grid：強大的網格系統，用於建立複雜的版面。</li>
</ol>
<h3 id="六、結語"><a href="#六、結語" class="headerlink" title="六、結語"></a>六、結語</h3><p>響應式設計能提升使用者體驗，使網頁能適應不同裝置，有助於 SEO 表現，是現代網頁設計不可忽視的重要技能。</p>
]]></content>
      <tags>
        <tag>Responsive Design</tag>
        <tag>響應式設計</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby 語言介紹與入門教學筆記 | 學習筆記</title>
    <url>/2024/07/01/learning-notes-ruby-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Ruby</strong> 是一種純物件導向、動態型別且語法極為直覺易讀的程式語言，由日本程式設計師「<strong>松本行弘（Yukihiro Matsumoto）</strong>」於 1995 年開發推出。Ruby 的開發理念是讓程式設計變得「快樂」，它重視人類可讀性多於機器效率，因此語法貼近自然語言、少有繁複標點，受到許多開發者的喜愛。</p>
<p>Ruby 最廣為人知的應用即是 Web 框架 <strong>Ruby on Rails</strong>，但 Ruby 本身也可應用於腳本撰寫、自動化流程、系統工具與 API 開發。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>語言特色：</strong></p>
<ul>
<li><strong>純物件導向</strong>：數字、字串、布林值等皆為物件。</li>
<li><strong>語法簡潔</strong>：接近自然語言，易於閱讀與維護。</li>
<li><strong>動態語言</strong>：變數無需預先定義型別。</li>
<li><strong>彈性高</strong>：支援 metaprogramming、區塊、lambda。</li>
<li><strong>龐大標準函式庫</strong>與活躍社群（Gem 套件系統）。</li>
</ul>
</li>
<li><p><strong>應用領域：</strong></p>
<ul>
<li>Web 開發（搭配 Rails 或 Sinatra）</li>
<li>系統腳本與自動化任務</li>
<li>命令列工具（如 Jekyll、CocoaPods）</li>
<li>測試工具（RSpec、Cucumber）</li>
</ul>
</li>
<li><p><strong>安裝方式：</strong></p>
<ul>
<li>建議使用 <strong>rbenv</strong> 或 <strong>RVM</strong> 管理版本。</li>
<li>檢查版本：<code>ruby -v</code></li>
<li>執行程式碼：<code>ruby 檔名.rb</code> 或 <code>irb</code>（互動環境）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="語法入門實例"><a href="#語法入門實例" class="headerlink" title="語法入門實例"></a>語法入門實例</h2><p>以下是一些 Ruby 基本語法與應用的實際範例，幫助理解語言結構與特性。</p>
<hr>
<h3 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts <span class="string">&quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>puts</code> 印出字串到終端機。無需加分號，換行即表示語句結束。</p>
<hr>
<h3 id="2-變數與資料型別"><a href="#2-變數與資料型別" class="headerlink" title="2. 變數與資料型別"></a>2. 變數與資料型別</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line">pi = <span class="number">3.14</span></span><br><span class="line">is_admin = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Ruby 不需宣告型別，會根據賦值自動推斷。</p>
<hr>
<h3 id="3-字串操作"><a href="#3-字串操作" class="headerlink" title="3. 字串操作"></a>3. 字串操作</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">greeting = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">name = <span class="string">&quot;Bob&quot;</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;<span class="subst">#&#123;greeting&#125;</span>, <span class="subst">#&#123;name&#125;</span>!&quot;</span>  <span class="comment"># 字串插值</span></span><br><span class="line">puts greeting.upcase          <span class="comment"># =&gt; &quot;HELLO&quot;</span></span><br><span class="line">puts name.reverse             <span class="comment"># =&gt; &quot;boB&quot;</span></span><br></pre></td></tr></table></figure>

<p>Ruby 字串是物件，具有許多內建方法如 <code>.upcase</code>、<code>.reverse</code>。</p>
<hr>
<h3 id="4-陣列與雜湊（Hash）"><a href="#4-陣列與雜湊（Hash）" class="headerlink" title="4. 陣列與雜湊（Hash）"></a>4. 陣列與雜湊（Hash）</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr &lt;&lt; <span class="number">4</span>              <span class="comment"># 加入元素</span></span><br><span class="line">puts arr[<span class="number">2</span>]           <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line">person = &#123; <span class="symbol">name:</span> <span class="string">&quot;Tom&quot;</span>, <span class="symbol">age:</span> <span class="number">25</span> &#125;</span><br><span class="line">puts person[<span class="symbol">:name</span>]    <span class="comment"># =&gt; &quot;Tom&quot;</span></span><br></pre></td></tr></table></figure>

<p>陣列可任意擴充，雜湊（Hash）類似於 JavaScript 的物件或 Python 的字典。</p>
<hr>
<h3 id="5-控制流程"><a href="#5-控制流程" class="headerlink" title="5. 控制流程"></a>5. 控制流程</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">score = <span class="number">85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span></span><br><span class="line">  puts <span class="string">&quot;優等&quot;</span></span><br><span class="line"><span class="keyword">elsif</span> score &gt;= <span class="number">60</span></span><br><span class="line">  puts <span class="string">&quot;及格&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>條件式使用 <code>if</code>、<code>elsif</code>、<code>else</code>，並以 <code>end</code> 結尾。邏輯清楚、語法簡潔。</p>
<hr>
<h3 id="6-迴圈與區塊"><a href="#6-迴圈與區塊" class="headerlink" title="6. 迴圈與區塊"></a>6. 迴圈與區塊</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">5</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">  puts <span class="string">&quot;第 <span class="subst">#&#123;i&#125;</span> 次&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><code>(1..5)</code> 表示範圍，<code>.each</code> 是集合的遍歷方法，<code>do ... end</code> 是 Ruby 的區塊（block）。</p>
<hr>
<h3 id="7-方法定義"><a href="#7-方法定義" class="headerlink" title="7. 方法定義"></a>7. 方法定義</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>)</span><br><span class="line">  <span class="string">&quot;Hello, <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts greet(<span class="string">&quot;Ruby&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>方法以 <code>def</code> 開頭，<code>end</code> 結尾，回傳值可省略 <code>return</code>，預設回傳最後一行的值。</p>
<hr>
<h3 id="8-類別與物件導向"><a href="#8-類別與物件導向" class="headerlink" title="8. 類別與物件導向"></a>8. 類別與物件導向</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">  <span class="built_in">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name</span>)</span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">greet</span></span><br><span class="line">    <span class="string">&quot;Hi, I&#x27;m <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p = <span class="title class_">Person</span>.new(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">puts p.greet   <span class="comment"># =&gt; Hi, I&#x27;m Alice</span></span><br></pre></td></tr></table></figure>

<p>Ruby 是純物件導向語言，每個資料皆為物件。類別可包含建構子 <code>initialize</code> 與方法，使用 <code>@變數</code> 表示實例變數。</p>
<hr>
<h3 id="9-條件表達式簡寫"><a href="#9-條件表達式簡寫" class="headerlink" title="9. 條件表達式簡寫"></a>9. 條件表達式簡寫</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts <span class="string">&quot;你已成年&quot;</span> <span class="keyword">if</span> age &gt;= <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>Ruby 支援簡化語法，條件可以寫在語句之後，提高可讀性。</p>
<hr>
<h3 id="10-匿名函式與-Lambda"><a href="#10-匿名函式與-Lambda" class="headerlink" title="10. 匿名函式與 Lambda"></a>10. 匿名函式與 Lambda</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">double = -&gt;(x) &#123; x * <span class="number">2</span> &#125;</span><br><span class="line">puts double.call(<span class="number">5</span>)  <span class="comment"># =&gt; 10</span></span><br></pre></td></tr></table></figure>

<p>Lambda 是匿名函式，可用 <code>-&gt;</code> 或 <code>lambda</code> 定義，用 <code>.call</code> 呼叫。</p>
<hr>
<h2 id="Ruby-工具與社群資源"><a href="#Ruby-工具與社群資源" class="headerlink" title="Ruby 工具與社群資源"></a>Ruby 工具與社群資源</h2><ul>
<li><p><strong>Gem 套件系統</strong>：<code>gem install 套件名</code>，安裝第三方函式庫。</p>
</li>
<li><p><strong>irb</strong>：互動式 Ruby shell，適合練習語法。</p>
</li>
<li><p><strong>RDoc</strong>：內建文件系統。</p>
</li>
<li><p><strong>社群網站</strong>：</p>
<ul>
<li><a href="https://www.ruby-lang.org/">https://www.ruby-lang.org/</a>（官方網站）</li>
<li><a href="https://rubygems.org/">RubyGems.org</a>（套件管理中心）</li>
<li><a href="https://ruby-china.org/">Ruby China</a>（中文社群）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Ruby 是一門設計優雅、語法簡潔、表達力強的程式語言，特別適合用於快速開發、腳本處理與 Web 應用。其強大的物件導向特性與彈性語法，讓程式設計不僅實用，更具美感。</p>
<p>如果你是第一次接觸和學習程式語言，Ruby 是一個相當友善的選擇。如果你是經驗豐富的開發者，也能從 Ruby 中找到清晰表達與高層次抽象的樂趣。</p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Ruby</tag>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Roo Code 詳細介紹：AI VS Code 編輯器外掛入門教學筆記 | 學習筆記</title>
    <url>/2025/02/20/learning-notes-roo-code-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Roo Code（原名 Roo Cline）是一款嵌入於 Visual Studio Code 編輯器中的開源 AI 代理，能讀寫檔案、自動執行終端指令、操作瀏覽器，甚至整合多種 LLM 模型。無論是編寫程式、重構、除錯、架構設計，Roo Code 都能協助你提升開發效率，更像是一個智慧且自主的開發團隊成員。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ol>
<li><p><strong>核心功能與定位</strong></p>
<ul>
<li>像開發團隊的 AI 助手，能讀寫檔案、執行命令、自動操作終端與瀏覽器</li>
<li>支援自然語言溝通，整合 OpenAI、Gemini、Anthropic、Deepseek 等多種提供者</li>
</ul>
</li>
<li><p><strong>多模式運作（Modes）</strong></p>
<ul>
<li><strong>Code Mode</strong>：主要用於撰寫與 refactor 程式碼</li>
<li><strong>Architect Mode</strong>：聚焦系統設計與高階規劃</li>
<li><strong>Ask Mode</strong>：解答問題、技術查詢</li>
<li><strong>Debug Mode</strong>：專門診斷並修復錯誤</li>
</ul>
</li>
<li><p><strong>工具整合</strong></p>
<ul>
<li>可撰寫檔案、執行 CLI 指令、操控瀏覽器</li>
<li>支援外部工具擴充（MCP：Model Context Protocol），可接入資料庫、API、指令集</li>
</ul>
</li>
<li><p><strong>客製化能力強</strong></p>
<ul>
<li>自訂指令與 prompt</li>
<li>建立自訂模式，定義專屬角色（如測試工程師、設計師）</li>
</ul>
</li>
<li><p><strong>專案記憶與 Context 管理</strong></p>
<ul>
<li>支援 context condensing 和索引技術，避免長案子失去關聯性</li>
</ul>
</li>
</ol>
<hr>
<h2 id="安裝與初步設置"><a href="#安裝與初步設置" class="headerlink" title="安裝與初步設置"></a>安裝與初步設置</h2><h3 id="1-安裝-Roo-Code"><a href="#1-安裝-Roo-Code" class="headerlink" title="1. 安裝 Roo Code"></a>1. 安裝 Roo Code</h3><ul>
<li>打開 VS Code，前往 Extensions 搜尋「Roo Code」，點擊安裝</li>
</ul>
<h3 id="2-設定-AI-提供者"><a href="#2-設定-AI-提供者" class="headerlink" title="2. 設定 AI 提供者"></a>2. 設定 AI 提供者</h3><ul>
<li>支援 OpenAI-compliant API，例如 OpenAI 本身、OpenRouter、Anthropic、Gemini 等</li>
<li>透過裡面 Preferences 設定 API Key、Model ID、Mode 對應關係</li>
</ul>
<hr>
<h2 id="實作範例（實際使用流程）"><a href="#實作範例（實際使用流程）" class="headerlink" title="實作範例（實際使用流程）"></a>實作範例（實際使用流程）</h2><h3 id="範例-A：建立新檔案"><a href="#範例-A：建立新檔案" class="headerlink" title="範例 A：建立新檔案"></a>範例 A：建立新檔案</h3><ol>
<li>切換到 <strong>Code Mode</strong></li>
<li>輸入：「Create a basic HTML template for a portfolio website」</li>
<li>Roo Code 生成 HTML 檔案並顯示 diff</li>
<li>審核後確定寫入實際工作區</li>
</ol>
<p>→ 成功驗證：可透過開啟檔案確認生成內容</p>
<h3 id="範例-B：執行命令（CLI-x2F-Build-x2F-Test）"><a href="#範例-B：執行命令（CLI-x2F-Build-x2F-Test）" class="headerlink" title="範例 B：執行命令（CLI &#x2F; Build &#x2F; Test）"></a>範例 B：執行命令（CLI &#x2F; Build &#x2F; Test）</h3><ol>
<li>讓 Roo 進入程式模式</li>
<li>輸入：「Run npm install」</li>
<li>Roo 使用終端指令完成套件安裝，且結果顯示在你的終端</li>
</ol>
<p>→ 驗證指令正確執行</p>
<h3 id="範例-C：使用-Architect-Mode-規劃功能"><a href="#範例-C：使用-Architect-Mode-規劃功能" class="headerlink" title="範例 C：使用 Architect Mode 規劃功能"></a>範例 C：使用 Architect Mode 規劃功能</h3><ol>
<li>切換至 <strong>Architect Mode</strong></li>
<li>提出：「Help me plan data access layer for a todo application」</li>
<li>Roo 回應並建立記錄文件（如 <code>.md</code> 記錄實作計畫），建立指引</li>
</ol>
<p>→ 這種模式能生成結構化內容並建立 Context 記錄</p>
<hr>
<h2 id="深入技巧與最佳實踐"><a href="#深入技巧與最佳實踐" class="headerlink" title="深入技巧與最佳實踐"></a>深入技巧與最佳實踐</h2><ul>
<li><strong>啟用 Indexing &#x2F; Context Condensing</strong>：讓 Roo 在大型專案中維持上下文關聯性，有效處理長案不遺漏</li>
<li><strong>自訂模式（Custom Modes）</strong>：為不同角色（如 QA、設計師）建立專屬對話與指令集</li>
<li><strong>MCP 擴充</strong>：串接外部系統（如 AWS、Jira），擴展 Roo 能力</li>
<li><strong>權限控制</strong>：設定自動執行命令範圍、上下文層級，以符合安全標準</li>
<li><strong>模式搭配 LLM 模型</strong>：Schema 例：使用 Deepseek R1 做 code、Gigantic Gemini 做 architect、等</li>
</ul>
<hr>
<h2 id="操作範例：結合免費-LLM-模型"><a href="#操作範例：結合免費-LLM-模型" class="headerlink" title="操作範例：結合免費 LLM 模型"></a>操作範例：結合免費 LLM 模型</h2><p>假設你想要整合免費模型：</p>
<ol>
<li><p>透過 OpenRouter 啟用 DeepSeek R1、Gemini Flash 模型</p>
</li>
<li><p>將 model 分配到不同模式：如 Architect 模式使用 Gemini、Code 模式使用 DeepSeek</p>
</li>
<li><p>透過 Roo 對話測試指令：</p>
<ul>
<li>“Generate React component for ToDo item list.”</li>
<li>“Update backend schema to include due date.”</li>
</ul>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Roo Code 是一款功能強大且高度可客製的 AI 編程代理工具，適合想提升開發效率、探索 AI 開發流程的人使用。核心優勢包括：</p>
<ul>
<li>多種工作模式切換（<code>Code</code> &#x2F; <code>Architect</code> &#x2F; <code>Ask</code> &#x2F; <code>Debug</code>）</li>
<li>可控且安全的檔案與終端操作</li>
<li>擴充能力強，可透過 MCP、Context Condensing、自訂模式延伸功能</li>
<li>支援多種 LLM 提供者，具備彈性與擴充性</li>
</ul>
<p>由於功能豐富，建議一開始可以先安裝外掛並先從簡單任務使用起：生成範例檔案、執行終端指令，接著再進行構架規劃與系統整合。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://help.apiyi.com/roo-code-claude-api-integration-guide.html">Roo Code 接入 Claude API 完全指南：无惧官网限制而快速用上</a></li>
<li><a href="https://www.youtube.com/watch?v=c5pDWj-zLDQ">【Vibe Coding 神器】VS Code 超強 AI 插件 Roo Code 實作教學：Ask 模式分析專案、協調器模式開發全新專案、Debug 模式進行除錯！</a></li>
<li><a href="https://www.youtube.com/watch?v=Vb8Vgs5sZiA">Vibe Coding 真的這麼神？上集 來自開發團隊的真實導入經驗 聊聊實踐與成效｜#VibeCoding #AI #軟體開發 #開發團隊｜ JUGG 聊敏捷#22</a></li>
<li><a href="https://www.youtube.com/watch?v=eZWVzTd3mkU">Vibe Coding 真的這麼神？下集 來自開發團隊的真實導入對談｜導入的坑、文化與建議｜#VibeCoding #AI #軟體開發 #開發團隊 #AI 導入｜ JUGG 聊敏捷#23</a></li>
<li><a href="https://www.thingsaboutweb.dev/zh-TW/posts/the-70-percent-problem#%E8%87%AA%E4%B8%BB%E4%BD%86%E5%8F%97%E5%BC%95%E5%B0%8">70% 問題：關於 AI 輔助開發的真實樣貌</a></li>
</ol>
]]></content>
      <tags>
        <tag>編輯器</tag>
        <tag>Roo Code</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails 介紹與入門教學筆記 | 學習筆記</title>
    <url>/2024/07/01/learning-notes-ruby-on-rails-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Ruby on Rails（簡稱 Rails）</strong> 是一套以 <strong>Ruby 語言</strong> 為基礎所打造的全端開發框架，自 2004 年問世以來，因其「約定大於配置（Convention over Configuration）」與「不重複自己（Don’t Repeat Yourself, DRY）」的設計理念，成為 Web 開發世界中極具代表性的框架之一。</p>
<p>Rails 強調快速開發與清晰結構，幫助開發者迅速建構可維護的應用程式，適合用於新創產品、MVP 原型開發，以及後台管理系統等場景。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>核心概念：</strong></p>
<ul>
<li>基於 <strong>MVC 架構</strong>（Model-View-Controller）</li>
<li>使用 Ruby 作為程式語言，語法簡潔易讀</li>
<li>提供大量自動化工具，減少樣板程式碼</li>
</ul>
</li>
<li><p><strong>主要特色：</strong></p>
<ul>
<li><strong>Active Record</strong>：物件關聯對應（ORM）層，方便操作資料庫</li>
<li><strong>Action View</strong>：視圖模板系統，支援 HTML + ERB（嵌入式 Ruby）</li>
<li><strong>Action Controller</strong>：處理使用者請求、導引邏輯</li>
<li>內建資源路由、RESTful 設計、自動產生 CRUD 操作</li>
<li>支援開發環境分離（開發、測試、正式）</li>
</ul>
</li>
<li><p><strong>優點：</strong></p>
<ul>
<li>建立專案與開發速度快</li>
<li>有完整且穩定的生態系與套件系統（gem）</li>
<li>測試工具完善，支援 TDD&#x2F;BDD 開發流程</li>
<li>社群活躍，有大量教學資源</li>
</ul>
</li>
<li><p><strong>缺點：</strong></p>
<ul>
<li>在高並發、高效能要求場景可能需額外優化</li>
<li>有一定的學習曲線，尤其對 Ruby 不熟悉的開發者</li>
</ul>
</li>
</ul>
<hr>
<h2 id="建立第一個-Rails-專案"><a href="#建立第一個-Rails-專案" class="headerlink" title="建立第一個 Rails 專案"></a>建立第一個 Rails 專案</h2><h3 id="1-安裝-Rails"><a href="#1-安裝-Rails" class="headerlink" title="1. 安裝 Rails"></a>1. 安裝 Rails</h3><p>首先需安裝 Ruby 環境，建議搭配 <strong>rbenv</strong> 或 <strong>RVM</strong> 工具管理 Ruby 版本。安裝 Ruby 後，安裝 Rails：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install rails</span><br></pre></td></tr></table></figure>

<p>確認版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails -v</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-建立新專案"><a href="#2-建立新專案" class="headerlink" title="2. 建立新專案"></a>2. 建立新專案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails new blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>

<p><code>rails new</code> 指令會建立一個完整的 Rails 專案結構，包含資料夾、設定檔、樣板程式碼等。</p>
<hr>
<h3 id="3-建立資料表與模型"><a href="#3-建立資料表與模型" class="headerlink" title="3. 建立資料表與模型"></a>3. 建立資料表與模型</h3><p>Rails 提供 scaffold 產生器，可以一次建立 Model、Controller、View、路由與測試程式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails generate scaffold Post title:string body:text</span><br></pre></td></tr></table></figure>

<p>這個指令會建立 <code>posts</code> 資源的 MVC 元件，其中 <code>title</code> 是字串、<code>body</code> 是文字欄位。</p>
<p>接著執行資料庫遷移：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure>

<p>這會根據 <code>db/migrate</code> 產生的檔案，建立對應的資料表。</p>
<hr>
<h3 id="4-啟動伺服器並測試"><a href="#4-啟動伺服器並測試" class="headerlink" title="4. 啟動伺服器並測試"></a>4. 啟動伺服器並測試</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails server</span><br></pre></td></tr></table></figure>

<p>開啟瀏覽器進入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/posts</span><br></pre></td></tr></table></figure>

<p>你會看到一個基本的 CRUD 界面，可以建立、查看、修改與刪除文章。這是 Rails scaffold 的成果。</p>
<hr>
<h2 id="MVC-架構簡介"><a href="#MVC-架構簡介" class="headerlink" title="MVC 架構簡介"></a>MVC 架構簡介</h2><p>Rails 採用 MVC 模式組織應用程式：</p>
<ul>
<li><strong>Model（模型）</strong>：對應資料表與商業邏輯，使用 ActiveRecord</li>
<li><strong>View（視圖）</strong>：負責呈現 HTML 頁面，支援 ERB、HAML 等模板引擎</li>
<li><strong>Controller（控制器）</strong>：負責接收請求、操作模型、回傳視圖</li>
</ul>
<p>範例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/models/post.rb</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/controllers/posts_controller.rb</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostsController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">index</span></span><br><span class="line">    <span class="variable">@posts</span> = <span class="title class_">Post</span>.all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/views/posts/index.html.erb</span></span><br><span class="line">&lt;h1&gt;文章列表&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;% @posts.each do |post| %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&lt;%= post.title %&gt;&lt;/p</span>&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="路由與-RESTful-設計"><a href="#路由與-RESTful-設計" class="headerlink" title="路由與 RESTful 設計"></a>路由與 RESTful 設計</h2><p>Rails 使用 <code>config/routes.rb</code> 設定路由。若使用 <code>resources :posts</code>，Rails 會自動產生如下 RESTful 路由：</p>
<table>
<thead>
<tr>
<th>HTTP 動作</th>
<th>路徑</th>
<th>控制器動作</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;posts</td>
<td>index</td>
<td>查看所有文章</td>
</tr>
<tr>
<td>GET</td>
<td>&#x2F;posts&#x2F;:id</td>
<td>show</td>
<td>查看單一文章</td>
</tr>
<tr>
<td>GET</td>
<td>&#x2F;posts&#x2F;new</td>
<td>new</td>
<td>顯示新增頁面</td>
</tr>
<tr>
<td>POST</td>
<td>&#x2F;posts</td>
<td>create</td>
<td>建立文章</td>
</tr>
<tr>
<td>GET</td>
<td>&#x2F;posts&#x2F;:id&#x2F;edit</td>
<td>edit</td>
<td>顯示編輯頁面</td>
</tr>
<tr>
<td>PATCH</td>
<td>&#x2F;posts&#x2F;:id</td>
<td>update</td>
<td>更新文章</td>
</tr>
<tr>
<td>DELETE</td>
<td>&#x2F;posts&#x2F;:id</td>
<td>destroy</td>
<td>刪除文章</td>
</tr>
</tbody></table>
<hr>
<h2 id="常用開發指令與功能"><a href="#常用開發指令與功能" class="headerlink" title="常用開發指令與功能"></a>常用開發指令與功能</h2><ul>
<li>建立模型：<code>rails generate model Comment body:text</code></li>
<li>建立控制器：<code>rails generate controller Comments</code></li>
<li>執行測試：<code>rails test</code></li>
<li>啟動主控台：<code>rails console</code></li>
<li>進行資料遷移：<code>rails db:migrate</code></li>
</ul>
<hr>
<h2 id="實用工具與套件（Gem）"><a href="#實用工具與套件（Gem）" class="headerlink" title="實用工具與套件（Gem）"></a>實用工具與套件（Gem）</h2><p>Rails 依賴大量 gem 套件，以下是常見幾個：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>套件名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>認證登入</td>
<td>Devise</td>
<td>最常用的使用者認證套件</td>
</tr>
<tr>
<td>上傳檔案</td>
<td>CarrierWave</td>
<td>支援圖片與檔案上傳</td>
</tr>
<tr>
<td>表單處理</td>
<td>SimpleForm</td>
<td>增強表單設計</td>
</tr>
<tr>
<td>管理後台</td>
<td>ActiveAdmin</td>
<td>快速生成後台管理介面</td>
</tr>
<tr>
<td>部署工具</td>
<td>Capistrano</td>
<td>遠端部署自動化</td>
</tr>
</tbody></table>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Ruby on Rails 是一套穩定、完整、且易於上手的全端 Web 框架。它的「約定優於配置」設計理念，讓開發者可以專注在商業邏輯與產品功能，減少重複工作。</p>
<p>雖然使用人數成長趨緩，但在快速開發、MVP、管理後台系統等領域仍非常實用。如果你正在尋找一套能夠快速上線且易於維護的全端框架，Rails 仍是非常值得考慮的選擇（前提是對於 Ruby 不排斥）。</p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Ruby</tag>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>SASS 語法介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/06/30/learning-notes-sass-intro-tutorial/</url>
    <content><![CDATA[<h1 id="什麼是-SASS？"><a href="#什麼是-SASS？" class="headerlink" title="什麼是 SASS？"></a>什麼是 SASS？</h1><p><code>SASS</code>（Syntactically Awesome Style Sheets）是一種 CSS 預處理器，旨在提升 CSS 的功能性，讓開發者能夠以更加靈活和高效的方式編寫樣式表。它提供了許多比 CSS 更強大的功能，例如變數、巢狀規則、混合（mixins）、繼承等。SASS 語法有兩種主要形式：一種是較為常見的 SCSS（<code>Sassy CSS</code>），另一種則是 <code>SASS</code>，本文將主要介紹 SASS 語法。</p>
<p>與 SCSS 不同，SASS 語法採用的是縮排語法，即不使用大括號和分號，而是利用縮排來結構化程式碼。這種語法更簡潔，對於習慣 Python 等語言的開發者來說，學習曲線較為平滑。</p>
<h1 id="安裝與設置"><a href="#安裝與設置" class="headerlink" title="安裝與設置"></a>安裝與設置</h1><p>要開始使用 SASS，首先需要安裝 SASS 編譯器。最常見的安裝方式是透過 Node.js 的 npm（Node Package Manager）。請按照以下步驟進行安裝：</p>
<ol>
<li><p>確保已經安裝了 Node.js 和 npm。</p>
</li>
<li><p>打開終端機，並在專案資料夾中執行以下命令來安裝 SASS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g sass</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝完成後，可以通過命令行執行 SASS 編譯命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sass input.sass output.css</span><br></pre></td></tr></table></figure></li>
</ol>
<p>這樣，<code>input.sass</code> 就會被編譯為標準的 <code>output.css</code> 檔案。</p>
<h1 id="SASS-語法介紹"><a href="#SASS-語法介紹" class="headerlink" title="SASS 語法介紹"></a>SASS 語法介紹</h1><h3 id="1-變數（Variables）"><a href="#1-變數（Variables）" class="headerlink" title="1. 變數（Variables）"></a>1. 變數（Variables）</h3><p>SASS 的變數功能讓開發者可以將顏色、字體大小、間距等常用值儲存在變數中，這樣能夠提高樣式的可重用性，並讓程式碼更具維護性。在 SASS 中，變數以 <code>$</code> 符號開頭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$primary-color: #3498db</span><br><span class="line">$font-size: 16px</span><br><span class="line"></span><br><span class="line">body</span><br><span class="line">  font-size: $font-size</span><br><span class="line">  color: $primary-color</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，我們定義了 <code>$primary-color</code> 和 <code>$font-size</code> 兩個變數，並將其應用於 <code>body</code> 樣式中。這樣，只需要修改變數的值，即可全局更新相應的樣式。</p>
<h3 id="2-巢狀規則（Nesting）"><a href="#2-巢狀規則（Nesting）" class="headerlink" title="2. 巢狀規則（Nesting）"></a>2. 巢狀規則（Nesting）</h3><p>SASS 支援巢狀規則，這樣可以讓樣式更加結構化，並且簡化對於子元素樣式的編寫。SASS 使用縮排來表示層級關係，這一點與傳統的 CSS 需要寫出完整選擇器有所不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nav</span><br><span class="line">  background-color: #333</span><br><span class="line">  ul</span><br><span class="line">    list-style-type: none</span><br><span class="line">    padding: 0</span><br><span class="line">  li</span><br><span class="line">    display: inline-block</span><br><span class="line">  a</span><br><span class="line">    color: white</span><br><span class="line">    text-decoration: none</span><br></pre></td></tr></table></figure>

<p>這段程式碼會被編譯為：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣的寫法可以避免寫重複的選擇器，並且清晰地表現出元素之間的層級結構。</p>
<h3 id="3-混合（Mixins）"><a href="#3-混合（Mixins）" class="headerlink" title="3. 混合（Mixins）"></a>3. 混合（Mixins）</h3><p>混合是 SASS 中一個非常有用的功能，它可以將一段可重用的樣式封裝成一個混合，並且可以接受參數，實現樣式的動態應用。混合類似於函數，能夠在不同地方重複使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=mixin border-radius($radius)</span><br><span class="line">  -webkit-border-radius: $radius</span><br><span class="line">  -moz-border-radius: $radius</span><br><span class="line">  border-radius: $radius</span><br><span class="line"></span><br><span class="line">.box</span><br><span class="line">  @include border-radius(10px)</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，我們定義了一個名為 <code>border-radius</code> 的混合，接受一個 <code>$radius</code> 參數，用來設置元素的邊框圓角。然後，我們在 <code>.box</code> 中使用 <code>@include</code> 引入這個混合，並傳遞具體的參數。這樣，當需要改變邊框圓角的樣式時，只需要修改混合的參數，而不需要在多個地方重複編寫。</p>
<h3 id="4-繼承（Inheritance）"><a href="#4-繼承（Inheritance）" class="headerlink" title="4. 繼承（Inheritance）"></a>4. 繼承（Inheritance）</h3><p>SASS 提供了繼承功能，使得一個選擇器可以繼承另一個選擇器的樣式。這有助於減少樣式重複，並保持程式碼的整潔性。SASS 使用 <code>@extend</code> 指令來實現繼承。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%button-base</span><br><span class="line">  padding: 10px 15px</span><br><span class="line">  background-color: #3498db</span><br><span class="line">  color: white</span><br><span class="line">  border: none</span><br><span class="line">  border-radius: 5px</span><br><span class="line"></span><br><span class="line">.button-primary</span><br><span class="line">  @extend %button-base</span><br><span class="line">  background-color: #1abc9c</span><br><span class="line"></span><br><span class="line">.button-secondary</span><br><span class="line">  @extend %button-base</span><br><span class="line">  background-color: #f39c12</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，我們定義了一個 <code>%button-base</code> 共享樣式，然後讓 <code>.button-primary</code> 和 <code>.button-secondary</code> 繼承這些樣式，並根據需要進行自定義修改。使用繼承的方式可以減少代碼重複，提高樣式的可維護性。</p>
<h3 id="5-條件語句（Conditionals）"><a href="#5-條件語句（Conditionals）" class="headerlink" title="5. 條件語句（Conditionals）"></a>5. 條件語句（Conditionals）</h3><p>SASS 支援條件語句，這讓我們可以根據某些條件選擇性地應用不同的樣式。這樣可以使樣式表更具動態性，根據不同情境調整顯示效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$theme: light</span><br><span class="line"></span><br><span class="line">body</span><br><span class="line">  @if $theme == light</span><br><span class="line">    background-color: #fff</span><br><span class="line">    color: #333</span><br><span class="line">  @else</span><br><span class="line">    background-color: #333</span><br><span class="line">    color: #fff</span><br></pre></td></tr></table></figure>

<p>這段程式碼中，根據變數 <code>$theme</code> 的值，條件地設定 <code>body</code> 的背景顏色和文字顏色。如果 <code>$theme</code> 為 <code>light</code>，則使用淺色背景和深色文字；否則，使用深色背景和淺色文字。</p>
<h3 id="6-循環（Loops）"><a href="#6-循環（Loops）" class="headerlink" title="6. 循環（Loops）"></a>6. 循環（Loops）</h3><p>SASS 還支援循環語句，這在需要根據某些條件自動生成多個樣式時非常有用。SASS 的循環可以遍歷一個列表，並生成對應的樣式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$colors: red, green, blue</span><br><span class="line"></span><br><span class="line">@each $color in $colors</span><br><span class="line">  .#&#123;$color&#125;-box</span><br><span class="line">    background-color: $color</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，<code>@each</code> 循環將遍歷 <code>$colors</code> 列表，並為每個顏色生成一個相應的類別 <code>.red-box</code>、<code>.green-box</code> 和 <code>.blue-box</code>，並將其背景顏色設置為對應的顏色。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>SASS 的 SASS 語法是一種簡潔且強大的 CSS 編寫方式，通過簡單的縮排結構，讓開發者能夠更有效率地編寫和維護樣式。SASS 提供的變數、巢狀規則、混合、繼承等功能，能夠使樣式更加模組化、動態化，並大大減少冗餘代碼。學會 SASS 語法後，你可以更靈活地處理大型專案中的 CSS，提升工作效率。如果你還沒有開始使用 SASS，不妨從這些基礎語法開始，體驗它帶來的便利。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
        <tag>SCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS 介紹入門教學筆記 | 學習筆記</title>
    <url>/2023/07/01/learning-notes-scss-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、SASS-是什麼？"><a href="#一、SASS-是什麼？" class="headerlink" title="一、SASS 是什麼？"></a>一、SASS 是什麼？</h1><p>SASS（Syntactically Awesome Stylesheets）是一種 CSS 預處理器（CSS Preprocessor），它擴展了 CSS 的功能，使樣式表更具可讀性、模組化和可維護性。SASS 允許使用變數、巢狀（Nesting）、混入（Mixin）、繼承（Extend）等進階特性，讓開發者能更有效率地管理 CSS。  </p>
<p>SASS 有兩種語法：  </p>
<ol>
<li><strong>SCSS（Sassy CSS）</strong>：與傳統 CSS 語法相似，使用 <code>&#123;&#125;</code> 和 <code>;</code> 來區分樣式，擴展性強且相容 CSS。  </li>
<li><strong>SASS（縮排語法）</strong>：省略 <code>&#123;&#125;</code> 和 <code>;</code>，使用縮排來表示層級關係，簡潔但較不常用。</li>
</ol>
<p>目前，SCSS 語法較受歡迎，因此本文主要以 SCSS 為主進行介紹。  </p>
<hr>
<h1 id="二、SASS-的優勢"><a href="#二、SASS-的優勢" class="headerlink" title="二、SASS 的優勢"></a>二、SASS 的優勢</h1><p>使用 SASS 的主要優勢包括：  </p>
<ol>
<li><strong>可維護性</strong>：透過模組化的結構管理樣式，避免冗長且難以維護的 CSS。  </li>
<li><strong>變數（Variables）</strong>：可定義全站共用的變數，例如顏色、字體大小等，提高一致性。  </li>
<li><strong>巢狀結構（Nesting）</strong>：讓樣式更具層次感，避免重複選擇器。  </li>
<li><strong>混入（Mixin）</strong>：類似函式的概念，可重複使用樣式區塊，減少冗餘。  </li>
<li><strong>繼承（Extend）</strong>：透過 <code>@extend</code> 共享樣式，減少重複編寫的代碼。  </li>
<li><strong>函式（Functions）</strong>：內建函式如 <code>lighten()</code>、<code>darken()</code> 可動態調整顏色，提高設計靈活性。</li>
</ol>
<hr>
<h1 id="三、安裝與使用-SASS"><a href="#三、安裝與使用-SASS" class="headerlink" title="三、安裝與使用 SASS"></a>三、安裝與使用 SASS</h1><h3 id="1-透過-npm-安裝"><a href="#1-透過-npm-安裝" class="headerlink" title="1. 透過 npm 安裝"></a>1. 透過 npm 安裝</h3><p>如果使用 Node.js，可透過 npm 安裝 SASS：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g sass</span><br></pre></td></tr></table></figure>

<p>安裝後，可使用以下指令將 SCSS 轉譯為 CSS：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sass input.scss output.css</span><br></pre></td></tr></table></figure>

<p>可使用 <code>--watch</code> 讓 SASS 自動監聽檔案變化並即時編譯：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sass --watch input.scss:output.css</span><br></pre></td></tr></table></figure>

<h3 id="2-透過-CDN-使用"><a href="#2-透過-CDN-使用" class="headerlink" title="2. 透過 CDN 使用"></a>2. 透過 CDN 使用</h3><p>雖然 SASS 本身無法直接在瀏覽器運行，但可透過一些線上工具（如 CodePen）編寫 SCSS，並自動編譯成 CSS 進行預覽。  </p>
<hr>
<h1 id="四、SASS-基礎語法"><a href="#四、SASS-基礎語法" class="headerlink" title="四、SASS 基礎語法"></a>四、SASS 基礎語法</h1><h3 id="1-變數（Variables）"><a href="#1-變數（Variables）" class="headerlink" title="1. 變數（Variables）"></a>1. 變數（Variables）</h3><p>SASS 允許使用變數來存儲顏色、字體大小、間距等常數，使樣式更具一致性。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"><span class="variable">$font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-巢狀結構（Nesting）"><a href="#2-巢狀結構（Nesting）" class="headerlink" title="2. 巢狀結構（Nesting）"></a>2. 巢狀結構（Nesting）</h3><p>在 CSS 中，我們通常需要重複撰寫父選擇器，但在 SASS 中可直接巢狀編寫，提高可讀性。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: white;</span><br><span class="line">                <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段 SCSS 會編譯成以下 CSS：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-混入（Mixin）"><a href="#3-混入（Mixin）" class="headerlink" title="3. 混入（Mixin）"></a>3. 混入（Mixin）</h3><p>Mixin 可定義可重複使用的樣式區塊，並可接受參數，使樣式更加靈活。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> button-style(<span class="variable">$bg-color</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bg-color</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> button-style(<span class="number">#3498db</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-secondary</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> button-style(<span class="number">#2ecc71</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS 為：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-secondary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-繼承（Extend）"><a href="#4-繼承（Extend）" class="headerlink" title="4. 繼承（Extend）"></a>4. 繼承（Extend）</h3><p><code>@extend</code> 允許一個選擇器繼承另一個選擇器的樣式，避免重複撰寫代碼。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .message;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .message;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span>, <span class="selector-class">.success</span>, <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-運算與函式"><a href="#5-運算與函式" class="headerlink" title="5. 運算與函式"></a>5. 運算與函式</h3><p>SASS 允許在樣式中進行運算，使數值調整更加靈活。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$base-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$base-size</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$base-size</span> * <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，SASS 內建許多函式，例如 <code>darken()</code>、<code>lighten()</code> 可用來調整顏色：  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">darken</span>(<span class="variable">$primary-color</span>, <span class="number">10%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#217dbb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、SASS-進階技巧"><a href="#五、SASS-進階技巧" class="headerlink" title="五、SASS 進階技巧"></a>五、SASS 進階技巧</h1><h3 id="1-分割檔案"><a href="#1-分割檔案" class="headerlink" title="1. 分割檔案"></a>1. 分割檔案</h3><p>SASS 允許將樣式拆分成多個檔案，並透過 <code>@import</code> 或 <code>@use</code> 來管理，提升可維護性。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _variables.scss</span></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"><span class="variable">$font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;variables&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用-use"><a href="#2-使用-use" class="headerlink" title="2. 使用 @use"></a>2. 使用 <code>@use</code></h3><p><code>@use</code> 是 <code>@import</code> 的改進版，能避免變數命名衝突，推薦使用：  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;variables&#x27;</span> as v;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: v.<span class="variable">$primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: v.<span class="variable">$font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="六、結論"><a href="#六、結論" class="headerlink" title="六、結論"></a>六、結論</h1><p>SASS 是一種強大的 CSS 預處理器，它提供變數、巢狀、Mixin、繼承等功能，使樣式管理更加高效與模組化。透過 SASS，開發者可以撰寫更具結構性、可讀性和可維護性的 CSS。  </p>
<p>對於前端開發者來說，掌握 SASS 不僅能提升開發效率，還能讓專案的樣式管理更加清晰。在實際專案中，建議將樣式模組化，並善用變數與 Mixin，以確保程式碼的可重用性與一致性。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
        <tag>SCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>軟體工程專有名詞彙整學習筆記</title>
    <url>/2024/11/16/learning-notes-sofware-engineering-intro-tutorial/</url>
    <content><![CDATA[<h1 id="軟體工程專有名詞"><a href="#軟體工程專有名詞" class="headerlink" title="軟體工程專有名詞"></a>軟體工程專有名詞</h1><ol>
<li>Agile 敏捷開發</li>
<li>DbC 契約精神</li>
<li>SOLID 原則</li>
<li>TDD 測試驅動</li>
<li>KISS 原則</li>
<li>YAGNI (避免過度設計)</li>
<li>DRY (模組化、擅用設計模式)</li>
<li>迪米特法則(降低依賴和耦合)</li>
<li>依賴注入</li>
<li>關注點分離</li>
<li>無暇程式碼 clean code</li>
<li>設計模式</li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>後端</tag>
        <tag>軟體工程</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 入門語法教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-sql-intro-tutorial/</url>
    <content><![CDATA[<p>SQL 是操作關聯式資料庫使用的語法。以下介紹常用 SQL 入門語法：</p>
<h2 id="一、資料庫基本概念"><a href="#一、資料庫基本概念" class="headerlink" title="一、資料庫基本概念"></a>一、資料庫基本概念</h2><p>資料庫 (Database)：儲存資料的容器。<br>資料表 (Table)：儲存資料的表格，每列 (row) 為一筆紀錄，每欄 (column) 為一種資料屬性。</p>
<hr>
<h2 id="二、基本-SQL-語法"><a href="#二、基本-SQL-語法" class="headerlink" title="二、基本 SQL 語法"></a>二、基本 SQL 語法</h2><h4 id="1-建立資料庫"><a href="#1-建立資料庫" class="headerlink" title="1. 建立資料庫"></a>1. 建立資料庫</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE my_database;</span><br></pre></td></tr></table></figure>

<h4 id="2-使用資料庫"><a href="#2-使用資料庫" class="headerlink" title="2. 使用資料庫"></a>2. 使用資料庫</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE my_database;</span><br></pre></td></tr></table></figure>

<h4 id="3-建立資料表"><a href="#3-建立資料表" class="headerlink" title="3. 建立資料表"></a>3. 建立資料表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="4-查詢資料"><a href="#4-查詢資料" class="headerlink" title="4. 查詢資料"></a>4. 查詢資料</h4><p>查詢所有欄位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>
<p>選擇特定欄位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h4 id="5-插入資料"><a href="#5-插入資料" class="headerlink" title="5. 插入資料"></a>5. 插入資料</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure>

<h4 id="6-更新資料"><a href="#6-更新資料" class="headerlink" title="6. 更新資料"></a>6. 更新資料</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">26</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="7-刪除資料"><a href="#7-刪除資料" class="headerlink" title="7. 刪除資料"></a>7. 刪除資料</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、條件查詢"><a href="#三、條件查詢" class="headerlink" title="三、條件查詢"></a>三、條件查詢</h2><h4 id="1-WHERE-條件"><a href="#1-WHERE-條件" class="headerlink" title="1. WHERE 條件"></a>1. WHERE 條件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-AND、OR、NOT"><a href="#2-AND、OR、NOT" class="headerlink" title="2. AND、OR、NOT"></a>2. AND、OR、NOT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">OR</span> age <span class="operator">&lt;</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> <span class="keyword">NOT</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-LIKE-模糊查詢"><a href="#3-LIKE-模糊查詢" class="headerlink" title="3. LIKE 模糊查詢"></a>3. LIKE 模糊查詢</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;J%&#x27;</span>;  <span class="comment">-- 以J開頭</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%@gmail.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-ORDER-BY-排序"><a href="#4-ORDER-BY-排序" class="headerlink" title="4. ORDER BY 排序"></a>4. ORDER BY 排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;  <span class="comment">-- 遞增排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>; <span class="comment">-- 遞減排序</span></span><br></pre></td></tr></table></figure>

<h4 id="5-LIMIT-限制筆數"><a href="#5-LIMIT-限制筆數" class="headerlink" title="5. LIMIT 限制筆數"></a>5. LIMIT 限制筆數</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、聚合函數"><a href="#四、聚合函數" class="headerlink" title="四、聚合函數"></a>四、聚合函數</h2><h4 id="1-計算筆數"><a href="#1-計算筆數" class="headerlink" title="1. 計算筆數"></a>1. 計算筆數</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="2-最大-x2F-最小值"><a href="#2-最大-x2F-最小值" class="headerlink" title="2. 最大&#x2F;最小值"></a>2. 最大&#x2F;最小值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">FROM</span> users;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="3-平均-x2F-總和"><a href="#3-平均-x2F-總和" class="headerlink" title="3. 平均&#x2F;總和"></a>3. 平均&#x2F;總和</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">FROM</span> users;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(age) <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、分組查詢"><a href="#五、分組查詢" class="headerlink" title="五、分組查詢"></a>五、分組查詢</h2><h4 id="1-GROUP-BY"><a href="#1-GROUP-BY" class="headerlink" title="1. GROUP BY"></a>1. GROUP BY</h4><p><code>GROUP BY</code> 查詢欄位僅能包含 <code>GROUP BY</code> 和聚合函數</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users <span class="keyword">GROUP</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure>

<h4 id="2-HAVING-搭配-GROUP-BY-當作查詢條件"><a href="#2-HAVING-搭配-GROUP-BY-當作查詢條件" class="headerlink" title="2. HAVING 搭配 GROUP BY 當作查詢條件"></a>2. HAVING 搭配 GROUP BY 當作查詢條件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users <span class="keyword">GROUP</span> <span class="keyword">BY</span> age <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="六、資料表連接-JOIN"><a href="#六、資料表連接-JOIN" class="headerlink" title="六、資料表連接 (JOIN)"></a>六、資料表連接 (JOIN)</h2><h4 id="1-INNER-JOIN"><a href="#1-INNER-JOIN" class="headerlink" title="1. INNER JOIN"></a>1. INNER JOIN</h4><p>內連接，僅返回兩個資料表中「符合交集條件」的資料。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h4 id="2-LEFT-JOIN"><a href="#2-LEFT-JOIN" class="headerlink" title="2. LEFT JOIN"></a>2. LEFT JOIN</h4><p>左連接，返回左表 (users) 所有資料，即使右表 (orders) 無對應資料，也會顯示左表資料，右表無資料則會顯示 NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h4 id="3-RIGHT-JOIN"><a href="#3-RIGHT-JOIN" class="headerlink" title="3. RIGHT JOIN"></a>3. RIGHT JOIN</h4><p>右連接，返回右表 (orders) 所有資料，即使左表 (users) 無對應資料，也會顯示右表資料，左表無資料則會顯示 NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h4 id="4-FULL-JOIN-部分資料庫支援"><a href="#4-FULL-JOIN-部分資料庫支援" class="headerlink" title="4. FULL JOIN (部分資料庫支援)"></a>4. FULL JOIN (部分資料庫支援)</h4><p>全外連接，返回兩個表中所有資料，無對應資料則顯示 NULL。(MySQL 不支援 FULL JOIN，需使用 UNION 模擬)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h2 id="七、合併查詢-UNION"><a href="#七、合併查詢-UNION" class="headerlink" title="七、合併查詢 (UNION)"></a>七、合併查詢 (UNION)</h2><h4 id="1-UNION"><a href="#1-UNION" class="headerlink" title="1. UNION"></a>1. UNION</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>UNION 用於合併兩個或多個查詢的結果。<br>預設會去除重複資料。<br>欄位數量與型態須一致。</p>
<h4 id="2-UNION-ALL"><a href="#2-UNION-ALL" class="headerlink" title="2. UNION ALL"></a>2. UNION ALL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>與 UNION 類似，但不會去除重複資料。</p>
<hr>
<p>以上整理了 SQL 入門常見的基本語法，可以基本處理資料庫操作需求。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
        <tag>資料庫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 ESM 的 Swagger 入門教學（Node.js + Express） | 學習筆記</title>
    <url>/2023/12/21/learning-notes-swagger-api-doc-intro-tutorial%20copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代後端開發中，撰寫標準化的 API 文件是必要的工作。Swagger（OpenAPI）讓我們可以定義並分享 API 結構，也支援透過 UI 測試 API。本文將示範如何在 <strong>ESM 模組架構的 Node.js 專案中</strong> 整合 Swagger，實現互動式 API 文件。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>使用 <code>swagger-jsdoc</code> 定義 API 文件（支援 YAML 格式註解）。</li>
<li>使用 <code>swagger-ui-express</code> 提供互動式 Swagger UI 頁面。</li>
<li>採用 ES Module（<code>import</code> &#x2F; <code>export</code>）語法整合。</li>
<li>使用 JSDoc 註解方式撰寫 API 描述。</li>
<li>Swagger 文件會自動從註解中產生，不需手動維護 JSON&#x2F;YAML 文件。</li>
</ul>
<hr>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express swagger-jsdoc swagger-ui-express</span><br></pre></td></tr></table></figure>

<p>並在 <code>package.json</code> 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="專案結構"><a href="#專案結構" class="headerlink" title="專案結構"></a>專案結構</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">├── index.js</span><br><span class="line">├── swagger.js</span><br><span class="line">└── routes/</span><br><span class="line">    └── todos.js</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="1-建立-swagger-js"><a href="#1-建立-swagger-js" class="headerlink" title="1. 建立 swagger.js"></a>1. 建立 swagger.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// swagger.js</span></span><br><span class="line"><span class="keyword">import</span> swaggerJSDoc <span class="keyword">from</span> <span class="string">&#x27;swagger-jsdoc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">definition</span>: &#123;</span><br><span class="line">    <span class="attr">openapi</span>: <span class="string">&#x27;3.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Todo API&#x27;</span>,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&#x27;使用 Swagger + ESM 撰寫的 Todo API 文件&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">apis</span>: [<span class="string">&#x27;./routes/*.js&#x27;</span>], <span class="comment">// 註解來源路徑</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> swaggerSpec = <span class="title function_">swaggerJSDoc</span>(options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> swaggerSpec;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-建立-routes-x2F-todos-js"><a href="#2-建立-routes-x2F-todos-js" class="headerlink" title="2. 建立 routes&#x2F;todos.js"></a>2. 建立 routes&#x2F;todos.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/todos.js</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@openapi</span></span></span><br><span class="line"><span class="comment"> * /todos:</span></span><br><span class="line"><span class="comment"> *   get:</span></span><br><span class="line"><span class="comment"> *     summary: 取得所有代辦事項</span></span><br><span class="line"><span class="comment"> *     responses:</span></span><br><span class="line"><span class="comment"> *       200:</span></span><br><span class="line"><span class="comment"> *         description: 成功取得清單</span></span><br><span class="line"><span class="comment"> *         content:</span></span><br><span class="line"><span class="comment"> *           application/json:</span></span><br><span class="line"><span class="comment"> *             schema:</span></span><br><span class="line"><span class="comment"> *               type: array</span></span><br><span class="line"><span class="comment"> *               items:</span></span><br><span class="line"><span class="comment"> *                 $ref: &#x27;#/components/schemas/Todo&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@openapi</span></span></span><br><span class="line"><span class="comment"> * /todos:</span></span><br><span class="line"><span class="comment"> *   post:</span></span><br><span class="line"><span class="comment"> *     summary: 建立一筆代辦事項</span></span><br><span class="line"><span class="comment"> *     requestBody:</span></span><br><span class="line"><span class="comment"> *       required: true</span></span><br><span class="line"><span class="comment"> *       content:</span></span><br><span class="line"><span class="comment"> *         application/json:</span></span><br><span class="line"><span class="comment"> *           schema:</span></span><br><span class="line"><span class="comment"> *             $ref: &#x27;#/components/schemas/Todo&#x27;</span></span><br><span class="line"><span class="comment"> *     responses:</span></span><br><span class="line"><span class="comment"> *       201:</span></span><br><span class="line"><span class="comment"> *         description: 建立成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@openapi</span></span></span><br><span class="line"><span class="comment"> * components:</span></span><br><span class="line"><span class="comment"> *   schemas:</span></span><br><span class="line"><span class="comment"> *     Todo:</span></span><br><span class="line"><span class="comment"> *       type: object</span></span><br><span class="line"><span class="comment"> *       required:</span></span><br><span class="line"><span class="comment"> *         - id</span></span><br><span class="line"><span class="comment"> *         - task</span></span><br><span class="line"><span class="comment"> *       properties:</span></span><br><span class="line"><span class="comment"> *         id:</span></span><br><span class="line"><span class="comment"> *           type: integer</span></span><br><span class="line"><span class="comment"> *           example: 1</span></span><br><span class="line"><span class="comment"> *         task:</span></span><br><span class="line"><span class="comment"> *           type: string</span></span><br><span class="line"><span class="comment"> *           example: 學習 Swagger</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>([&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">task</span>: <span class="string">&#x27;學習 Swagger&#x27;</span> &#125;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/todos&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">task</span>: req.<span class="property">body</span>.<span class="property">task</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-建立-index-js（入口檔）"><a href="#3-建立-index-js（入口檔）" class="headerlink" title="3. 建立 index.js（入口檔）"></a>3. 建立 index.js（入口檔）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> swaggerUi <span class="keyword">from</span> <span class="string">&#x27;swagger-ui-express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> swaggerSpec <span class="keyword">from</span> <span class="string">&#x27;./swagger.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> todosRouter <span class="keyword">from</span> <span class="string">&#x27;./routes/todos.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>()); <span class="comment">// 處理 JSON 請求</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api/todos&#x27;</span>, todosRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供 Swagger UI 文件頁面</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api-docs&#x27;</span>, swaggerUi.<span class="property">serve</span>, swaggerUi.<span class="title function_">setup</span>(swaggerSpec));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running: http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Swagger Docs: http://localhost:<span class="subst">$&#123;PORT&#125;</span>/api-docs`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="測試與結果"><a href="#測試與結果" class="headerlink" title="測試與結果"></a>測試與結果</h2><p>啟動伺服器後，開啟瀏覽器前往：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/api-docs</span><br></pre></td></tr></table></figure>

<p>你會看到一個完整的互動式 API 文件頁面，可以點擊操作 <code>GET /todos</code> 與 <code>POST /todos</code>。</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>整合 Swagger 到 ESM 架構的 Express 專案中並不困難，關鍵在於：</p>
<ul>
<li>使用 <code>swagger-jsdoc</code> 從 JSDoc 註解產生規格。</li>
<li>搭配 <code>swagger-ui-express</code> 呈現互動式 API 頁面。</li>
<li>配合 ES Module 語法撰寫程式碼。</li>
</ul>
<p>這樣的文件工具能大幅提升開發效率、降低溝通成本，特別適合多人協作或需要對外提供 API 文件的專案。</p>
<hr>
<p>如果你想進一步整合 TypeScript、OpenAPI YAML 檔案、或搭配 FastAPI、NestJS 等框架，也可以告訴我，我可以提供對應版本的教學。是否需要？</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://swagger.io/">官方文件</a></li>
</ol>
]]></content>
      <tags>
        <tag>API</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>整合 Tailwind CSS 與 daisyUI 的入門教學筆記 | 學習筆記</title>
    <url>/2024/10/16/learning-notes-tailwind-css-daisyui-intro-tutorial/</url>
    <content><![CDATA[<h2 id="一、前言：為什麼選擇-Tailwind-CSS-搭配-daisyUI？"><a href="#一、前言：為什麼選擇-Tailwind-CSS-搭配-daisyUI？" class="headerlink" title="一、前言：為什麼選擇 Tailwind CSS 搭配 daisyUI？"></a>一、前言：為什麼選擇 Tailwind CSS 搭配 daisyUI？</h2><p>在現代前端開發中，Tailwind CSS 提供了高度自訂、原子化的 CSS class，使得開發者能夠以更模組化與語意化的方式撰寫樣式。然而，Tailwind 並不內建 UI 元件，這就使得一些常見元件（如按鈕、表單、卡片）仍需手動組裝樣式。</p>
<p>這時，<code>daisyUI</code> 就成為極佳的搭檔。daisyUI 是一個基於 Tailwind CSS 架構的元件庫，提供豐富的預設元件樣式與主題切換能力，讓你能快速建構出一致、美觀的介面，並維持 Tailwind CSS 的開發哲學。</p>
<hr>
<h2 id="二、基本安裝流程"><a href="#二、基本安裝流程" class="headerlink" title="二、基本安裝流程"></a>二、基本安裝流程</h2><h3 id="1-初始化專案"><a href="#1-初始化專案" class="headerlink" title="1. 初始化專案"></a>1. 初始化專案</h3><p>首先建立一個新的專案，並安裝 Tailwind CSS。這裡以 Vite 為例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create vite@latest my-app -- --template vanilla</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>接著安裝 Tailwind CSS 相關套件：</p>
<ol>
<li>tailwindcss	核心庫，提供 Tailwind 的 utility class</li>
<li>postcss	CSS 處理工具，Tailwind 用它來轉換 CSS</li>
<li>autoprefixer	為 CSS 自動加上瀏覽器前綴，如 -webkit-</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝相關套件</span></span><br><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br><span class="line"><span class="comment"># 初始化設定檔</span></span><br><span class="line"><span class="comment"># 建立 Tailwind CSS 的設定檔 tailwind.config.js</span></span><br><span class="line"><span class="comment"># 加上 -p 參數會同時建立 PostCSS 的設定檔 postcss.config.js</span></span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure>

<h3 id="2-設定-Tailwind"><a href="#2-設定-Tailwind" class="headerlink" title="2. 設定 Tailwind"></a>2. 設定 Tailwind</h3><p>修改 <code>tailwind.config.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./index.html&quot;</span>, <span class="string">&quot;./src/**/*.&#123;js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建立 <code>./src/style.css</code> 並加上 Tailwind 的 directives：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<h3 id="3-安裝-daisyUI"><a href="#3-安裝-daisyUI" class="headerlink" title="3. 安裝 daisyUI"></a>3. 安裝 daisyUI</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install daisyui</span><br></pre></td></tr></table></figure>

<p>然後在 <code>tailwind.config.js</code> 中加入插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./index.html&quot;</span>, <span class="string">&quot;./src/**/*.&#123;js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;daisyui&quot;</span>)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可選：設定主題</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">daisyui</span>: &#123;</span><br><span class="line">  <span class="attr">themes</span>: [<span class="string">&quot;light&quot;</span>, <span class="string">&quot;dark&quot;</span>, <span class="string">&quot;cupcake&quot;</span>, <span class="string">&quot;synthwave&quot;</span>, <span class="string">&quot;dracula&quot;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、開始使用：元件實戰範例"><a href="#三、開始使用：元件實戰範例" class="headerlink" title="三、開始使用：元件實戰範例"></a>三、開始使用：元件實戰範例</h2><p>現在你已成功安裝與整合 Tailwind CSS + daisyUI，接下來讓我們透過實際範例來掌握它們的用法。</p>
<h3 id="範例一：按鈕樣式"><a href="#範例一：按鈕樣式" class="headerlink" title="範例一：按鈕樣式"></a>範例一：按鈕樣式</h3><p>daisyUI 提供多種按鈕樣式，只需使用 <code>btn</code> class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>主要按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>次要按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-accent&quot;</span>&gt;</span>強調按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline&quot;</span>&gt;</span>外框按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以搭配大小與形狀：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-circle btn-error&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-square btn-info&quot;</span>&gt;</span>i<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="範例二：表單與輸入框"><a href="#範例二：表單與輸入框" class="headerlink" title="範例二：表單與輸入框"></a>範例二：表單與輸入框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control w-full max-w-xs&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label-text&quot;</span>&gt;</span>使用者名稱<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入名稱&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input input-bordered w-full&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control w-full max-w-xs&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label-text&quot;</span>&gt;</span>選擇國家<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;select select-bordered&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">selected</span>&gt;</span>選擇一個選項<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>台灣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>美國<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="範例三：卡片元件"><a href="#範例三：卡片元件" class="headerlink" title="範例三：卡片元件"></a>範例三：卡片元件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card w-96 bg-base-100 shadow-xl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figure</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://placeimg.com/400/225/tech&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;科技圖&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>科技卡片<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個搭配 Tailwind CSS 與 daisyUI 所設計的卡片元件。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-actions justify-end&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>查看更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="範例四：主題切換"><a href="#範例四：主題切換" class="headerlink" title="範例四：主題切換"></a>範例四：主題切換</h3><p>daisyUI 預設支援多主題切換，可透過修改 <code>&lt;html&gt;</code> 的 <code>data-theme</code> 屬性達成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">data-theme</span>=<span class="string">&quot;dracula&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者透過 JS 切換：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-theme&quot;</span>, <span class="string">&quot;light&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、整合應用：登入頁設計"><a href="#四、整合應用：登入頁設計" class="headerlink" title="四、整合應用：登入頁設計"></a>四、整合應用：登入頁設計</h2><p>我們結合 daisyUI 元件製作一個登入表單：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min-h-screen bg-base-200 flex items-center justify-center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card w-full max-w-sm shadow-2xl bg-base-100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-bold text-center mb-4&quot;</span>&gt;</span>登入系統<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label-text&quot;</span>&gt;</span>電子郵件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;you@example.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input input-bordered&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label-text&quot;</span>&gt;</span>密碼<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入密碼&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input input-bordered&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control mt-6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>整合 Tailwind CSS 和 daisyUI 後這個表單完全不需要寫自訂 CSS，就能擁有一致的樣式與響應式設計。</p>
<hr>
<h2 id="五、總結與延伸學習"><a href="#五、總結與延伸學習" class="headerlink" title="五、總結與延伸學習"></a>五、總結與延伸學習</h2><p>整合 Tailwind CSS 和 daisyUI 的好處在於：</p>
<ul>
<li>可以保有 Tailwind CSS 的彈性與控制權。</li>
<li>daisyUI 提供現成且風格統一的元件，開發速度大幅提升。</li>
<li>可輕鬆切換主題，實現暗色模式等功能。</li>
<li>支援任意框架，React、Vue、Svelte、Alpine.js 都適用。</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>css</tag>
        <tag>Tailwind</tag>
        <tag>TailwindCSS</tag>
        <tag>daisyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Tailwind CSS 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/30/learning-notes-tailwind-css-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是-Tailwind-CSS？"><a href="#一、什麼是-Tailwind-CSS？" class="headerlink" title="一、什麼是 Tailwind CSS？"></a>一、什麼是 Tailwind CSS？</h1><p>Tailwind CSS 是一款以「<code>工具類別優先</code>」（<code>Utility-First</code>）為核心設計理念的 CSS 框架，與傳統的 CSS 框架（如 Bootstrap、Bulma）不同，它不提供預設的 UI 元件，而是提供大量的樣式工具類別，讓開發者可以快速組合來建構 UI，而不需要額外撰寫自訂 CSS。  </p>
<p>相較於傳統 CSS 框架，Tailwind CSS 具有以下幾個主要優勢：  </p>
<ol>
<li><strong>開發效率高</strong>：只需使用<code>類別組合</code>即可完成設計，無需撰寫額外 CSS。  </li>
<li><strong>高度可客製化</strong>：可以透過設定檔調整顏色、字型、間距等設計。  </li>
<li><strong>內建響應式支援</strong>：透過 <code>sm: md: lg: xl:</code> 等前綴輕鬆定義不同裝置的樣式。  </li>
<li><strong>一致性強</strong>：開發團隊可以統一使用 Tailwind CSS 定義的設計樣式，減少 UI 風格不一致的問題。  </li>
<li><strong>效能優化</strong>：可透過 PurgeCSS 移除未使用的樣式，確保最小化 CSS 檔案大小，提高網站載入速度。</li>
</ol>
<hr>
<h1 id="二、安裝-Tailwind-CSS"><a href="#二、安裝-Tailwind-CSS" class="headerlink" title="二、安裝 Tailwind CSS"></a>二、安裝 Tailwind CSS</h1><p>Tailwind CSS 可以透過多種方式安裝，以下介紹幾種常見的方法：  </p>
<h3 id="1-使用-CDN（適合快速測試）"><a href="#1-使用-CDN（適合快速測試）" class="headerlink" title="1. 使用 CDN（適合快速測試）"></a>1. 使用 CDN（適合快速測試）</h3><p>如果只是想快速體驗 Tailwind CSS，可以直接在 HTML 檔案中加入以下 <code>&lt;link&gt;</code>：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tailwindcss@3.0.0/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種方式適合小型專案或測試 Tailwind CSS 的功能，但不適合正式開發，因為無法使用客製化設定。  </p>
<h3 id="2-透過-npm-安裝（推薦方式）"><a href="#2-透過-npm-安裝（推薦方式）" class="headerlink" title="2. 透過 npm 安裝（推薦方式）"></a>2. 透過 npm 安裝（推薦方式）</h3><p>在正式開發環境中，建議使用 npm 或 yarn 來安裝 Tailwind CSS，以便進行客製化設定。  </p>
<p><strong>安裝 Tailwind CSS</strong>：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure>

<p>執行上述指令後，會在專案根目錄中產生 <code>tailwind.config.js</code> 設定檔，可用來調整 Tailwind 的預設樣式。  </p>
<p><strong>設定 Tailwind CSS</strong>：  </p>
<p>開啟 <code>tailwind.config.js</code>，找到 <code>content</code> 設定，確保 Tailwind 只處理專案內的相關檔案，例如：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./src/**/*.&#123;html,js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣 Tailwind CSS 就只會掃描 <code>src</code> 資料夾內的 HTML、JavaScript 和 TypeScript 檔案，避免產生不必要的 CSS。  </p>
<p><strong>引入 Tailwind 樣式</strong>：  </p>
<p>在 <code>src/index.css</code> 或 <code>styles.css</code> 檔案中加入以下內容，讓 Tailwind CSS 套用基礎樣式：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<p>最後，在開發環境中執行 Tailwind 編譯指令：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx tailwindcss -i ./src/index.css -o ./dist/output.css --watch</span><br></pre></td></tr></table></figure>

<p>這會自動監聽檔案變化，並輸出 Tailwind CSS 的樣式到 <code>output.css</code>。  </p>
<hr>
<h1 id="三、Tailwind-CSS-常用類別"><a href="#三、Tailwind-CSS-常用類別" class="headerlink" title="三、Tailwind CSS 常用類別"></a>三、Tailwind CSS 常用類別</h1><p>Tailwind CSS 提供大量的工具類別，以下介紹幾個常用的類別和應用範例。  </p>
<h3 id="1-文字樣式"><a href="#1-文字樣式" class="headerlink" title="1. 文字樣式"></a>1. 文字樣式</h3><p>Tailwind 允許透過類別來快速調整字體大小、顏色、行距等樣式，例如：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lg font-bold text-gray-700 leading-relaxed&quot;</span>&gt;</span></span><br><span class="line">  這是一段示範文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中：  </p>
<ul>
<li><code>text-lg</code>：字體大小  </li>
<li><code>font-bold</code>：加粗  </li>
<li><code>text-gray-700</code>：深灰色文字  </li>
<li><code>leading-relaxed</code>：行距較寬</li>
</ul>
<h3 id="2-背景與邊框"><a href="#2-背景與邊框" class="headerlink" title="2. 背景與邊框"></a>2. 背景與邊框</h3><p>可以使用背景色與邊框樣式來設計 UI，示例如下：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-500 text-white p-4 rounded-lg shadow-lg&quot;</span>&gt;</span></span><br><span class="line">  Tailwind CSS 範例</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>bg-blue-500</code>：藍色背景  </li>
<li><code>text-white</code>：白色文字  </li>
<li><code>p-4</code>：內距 16px  </li>
<li><code>rounded-lg</code>：圓角  </li>
<li><code>shadow-lg</code>：大型陰影</li>
</ul>
<h3 id="3-Flexbox-佈局"><a href="#3-Flexbox-佈局" class="headerlink" title="3. Flexbox 佈局"></a>3. Flexbox 佈局</h3><p>Tailwind CSS 提供完整的 Flexbox 工具類別，讓開發者能夠快速進行佈局：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center justify-between p-4 bg-gray-200&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>左側內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>右側內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>flex</code>：啟用 Flexbox  </li>
<li><code>items-center</code>：垂直置中  </li>
<li><code>justify-between</code>：左右對齊</li>
</ul>
<h3 id="4-Grid-佈局"><a href="#4-Grid-佈局" class="headerlink" title="4. Grid 佈局"></a>4. Grid 佈局</h3><p>使用 Grid 來建立多欄式佈局：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-3 gap-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red-200 p-4&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-green-200 p-4&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-200 p-4&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>grid</code>：啟用 Grid  </li>
<li><code>grid-cols-3</code>：建立三欄  </li>
<li><code>gap-4</code>：欄間距</li>
</ul>
<h3 id="5-響應式設計"><a href="#5-響應式設計" class="headerlink" title="5. 響應式設計"></a>5. 響應式設計</h3><p>Tailwind 內建響應式前綴，適用於不同裝置：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-base md:text-lg lg:text-xl xl:text-2xl&quot;</span>&gt;</span></span><br><span class="line">  響應式字體大小</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>text-base</code>：手機（預設）  </li>
<li><code>md:text-lg</code>：平板（<code>min-width: 768px</code>）  </li>
<li><code>lg:text-xl</code>：筆電（<code>min-width: 1024px</code>）  </li>
<li><code>xl:text-2xl</code>：桌機（<code>min-width: 1280px</code>）</li>
</ul>
<hr>
<h1 id="四、Tailwind-CSS-進階功能"><a href="#四、Tailwind-CSS-進階功能" class="headerlink" title="四、Tailwind CSS 進階功能"></a>四、Tailwind CSS 進階功能</h1><h3 id="1-自訂樣式"><a href="#1-自訂樣式" class="headerlink" title="1. 自訂樣式"></a>1. 自訂樣式</h3><p>可以透過 <code>tailwind.config.js</code> 來擴充自訂樣式，例如新增顏色：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;</span><br><span class="line">      <span class="attr">colors</span>: &#123;</span><br><span class="line">        <span class="attr">primary</span>: <span class="string">&quot;#1E40AF&quot;</span>,</span><br><span class="line">        <span class="attr">secondary</span>: <span class="string">&quot;#9333EA&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣就可以在 HTML 中使用 <code>text-primary</code> 或 <code>bg-secondary</code> 來套用顏色。  </p>
<h3 id="2-使用-apply-簡化樣式"><a href="#2-使用-apply-簡化樣式" class="headerlink" title="2. 使用 @apply 簡化樣式"></a>2. 使用 @apply 簡化樣式</h3><p>在 CSS 檔案中使用 <code>@apply</code> 來重複使用 Tailwind 類別：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> bg-blue-<span class="number">500</span> text-white px-<span class="number">4</span> py-<span class="number">2</span> rounded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後在 HTML 中只需寫：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、總結"><a href="#五、總結" class="headerlink" title="五、總結"></a>五、總結</h1><p>Tailwind CSS 透過工具類別的方式大幅提升開發效率，並提供響應式設計、靈活佈局與高度客製化的功能。對於前端開發者而言，熟悉 Tailwind CSS 可以讓 UI 設計更加直觀、高效，並減少對自訂 CSS 的依賴，進而提升開發維護性。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>Tailwind</tag>
        <tag>Tailwind CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>TanStack Query 入門教學筆記 | 學習筆記</title>
    <url>/2024/02/01/learning-notes-tanstack-query-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代前端開發中，資料取得（Data Fetching）與狀態管理是非常重要的課題。傳統上，我們可能會使用 <code>useEffect</code> 搭配 <code>fetch</code> 或 <code>axios</code> 來手動管理資料請求，並維護載入狀態、錯誤狀態與資料快取等，但這樣往往容易導致重複程式碼、管理複雜以及效能不佳。</p>
<p>TanStack Query（舊名 React Query）是一個專門用來管理伺服器狀態（server state）的函式庫，極大地簡化了資料抓取、快取、同步、重新整理與錯誤處理的流程。它不只支援 React，也能搭配 Vue、Svelte 等其他框架。</p>
<p>這篇筆記將介紹 TanStack Query 的核心概念與使用方式，並提供一個簡單範例，幫助你快速上手。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>TanStack Query 是什麼？</strong><br>一個用於管理非同步伺服器資料的 React Hooks 函式庫，能自動處理快取、背景重新整理、錯誤重試等。</p>
</li>
<li><p><strong>主要功能</strong></p>
<ul>
<li>自動快取資料，減少重複請求。</li>
<li>自動背景刷新（Background Refetching）保持資料最新。</li>
<li>支援資料同步與離線快取。</li>
<li>強大的錯誤重試與錯誤處理機制。</li>
<li>方便整合 Pagination、Infinite Query。</li>
<li>非常輕量且易於擴充。</li>
</ul>
</li>
<li><p><strong>核心概念</strong></p>
<ul>
<li><strong>Query</strong>：對伺服器資料的請求。</li>
<li><strong>Query Key</strong>：唯一標識一個 Query 的鍵，決定快取與重新抓取。</li>
<li><strong>useQuery Hook</strong>：用於發起資料請求並取得資料狀態。</li>
<li><strong>Query Client</strong>：全域管理 Query 狀態與快取。</li>
</ul>
</li>
<li><p><strong>安裝方式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @tanstack/react-query</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add @tanstack/react-query</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>基本使用步驟</strong></p>
<ol>
<li>在 React 根組件包裹 <code>&lt;QueryClientProvider&gt;</code>。</li>
<li>使用 <code>useQuery</code> Hook 進行資料請求。</li>
<li>使用 <code>data</code>、<code>error</code>、<code>isLoading</code> 等狀態呈現畫面。</li>
</ol>
</li>
<li><p><strong>常用參數</strong></p>
<ul>
<li><code>queryKey</code>：快取與識別用的陣列或字串。</li>
<li><code>queryFn</code>：負責非同步取得資料的函式。</li>
<li><code>enabled</code>：是否啟用該 query。</li>
<li><code>staleTime</code>：資料被視為新鮮的時間（避免頻繁重新抓取）。</li>
<li><code>cacheTime</code>：資料快取存在時間。</li>
<li><code>retry</code>：失敗時重試次數。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>以下以 React 搭配 TanStack Query 實現一個簡單的使用者列表資料抓取為例：</p>
<h3 id="1-設定-Query-Client"><a href="#1-設定-Query-Client" class="headerlink" title="1. 設定 Query Client"></a>1. 設定 Query Client</h3><p>在應用程式最外層（通常是 <code>App.js</code> 或 <code>index.js</code>）包裹 <code>QueryClientProvider</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QueryClient</span>, <span class="title class_">QueryClientProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserList</span> <span class="keyword">from</span> <span class="string">&#x27;./UserList&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryClient = <span class="keyword">new</span> <span class="title class_">QueryClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">QueryClientProvider</span> <span class="attr">client</span>=<span class="string">&#123;queryClient&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserList</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">QueryClientProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-建立-UserList-元件，使用-useQuery-抓取資料"><a href="#2-建立-UserList-元件，使用-useQuery-抓取資料" class="headerlink" title="2. 建立 UserList 元件，使用 useQuery 抓取資料"></a>2. 建立 UserList 元件，使用 <code>useQuery</code> 抓取資料</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;網路錯誤&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading, isError &#125; = <span class="title function_">useQuery</span>([<span class="string">&#x27;users&#x27;</span>], fetchUsers, &#123;</span><br><span class="line">    <span class="attr">staleTime</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span>, <span class="comment">// 5分鐘內資料視為新鮮</span></span><br><span class="line">    <span class="attr">retry</span>: <span class="number">2</span>, <span class="comment">// 失敗重試2次</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>資料載入中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isError) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>錯誤發生：&#123;error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map((user) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name&#125;（&#123;user.email&#125;）</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserList</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-說明"><a href="#3-說明" class="headerlink" title="3. 說明"></a>3. 說明</h3><ul>
<li><p><code>useQuery</code> 第一個參數為 query key，這裡用 <code>[&#39;users&#39;]</code> 表示抓取使用者列表。</p>
</li>
<li><p>第二個參數是非同步函式 <code>fetchUsers</code>，負責呼叫 API 並回傳資料。</p>
</li>
<li><p>返回的物件中包含多種狀態：</p>
<ul>
<li><code>isLoading</code>：資料還在請求中。</li>
<li><code>isError</code> 與 <code>error</code>：請求失敗時的錯誤狀態與訊息。</li>
<li><code>data</code>：請求成功後的資料。</li>
</ul>
</li>
<li><p><code>staleTime</code> 設定資料多久內視為新鮮，避免頻繁重新抓取。</p>
</li>
<li><p><code>retry</code> 設定失敗時自動重試的次數。</p>
</li>
</ul>
<hr>
<h2 id="進階應用"><a href="#進階應用" class="headerlink" title="進階應用"></a>進階應用</h2><ul>
<li><p><strong>背景重新抓取</strong><br>使用者回到頁面或重新聚焦視窗時，TanStack Query 預設會重新抓取最新資料，保持資料同步。<br>可透過 <code>refetchOnWindowFocus</code> 控制是否啟用。</p>
</li>
<li><p><strong>資料快取與共享</strong><br>不同組件如果使用相同 <code>queryKey</code>，會共用快取資料，避免重複請求。</p>
</li>
<li><p><strong>Mutation</strong><br>除了讀取資料，TanStack Query 也提供 <code>useMutation</code> 用於資料修改（新增、更新、刪除）並自動管理快取更新。</p>
</li>
<li><p><strong>分頁與無限滾動</strong><br>支援分頁資料抓取的 <code>useInfiniteQuery</code>，適合實作滾動載入。</p>
</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>TanStack Query 是一個強大且方便的資料狀態管理工具，解決了傳統手動管理非同步請求的種種痛點。它自動快取、背景重新整理、錯誤重試等機制，大幅提升開發效率與使用者體驗。</p>
]]></content>
      <tags>
        <tag>React Query</tag>
        <tag>TanStack Query</tag>
      </tags>
  </entry>
  <entry>
    <title>Tree Shaking 介紹與入門教學筆記 | 學習筆記</title>
    <url>/2024/07/01/learning-notes-tree-shaking-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代前端開發中，專案的程式碼結構越來越複雜，為了提高效能與使用者體驗，<strong>減少最終打包後的 JavaScript 檔案大小</strong>成為一項重要任務。這時，「Tree Shaking」技術便扮演了關鍵角色。</p>
<p><strong>Tree Shaking</strong> 是一種靜態程式碼分析技術，能夠在打包階段分析模組之間的依賴關係，<strong>移除未被實際使用的程式碼（dead code）</strong>。這不僅能優化網站載入速度，也讓程式碼更精簡、維護性更高。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>Tree Shaking 是什麼：</strong></p>
<ul>
<li>靜態分析 JavaScript 模組的依賴關係，排除未使用的導出（export）。</li>
<li>減少 bundle 體積，提升網站效能與載入速度。</li>
</ul>
</li>
<li><p><strong>依賴條件：</strong></p>
<ul>
<li>必須使用 <strong>ES Module</strong>（<code>import</code> &#x2F; <code>export</code>），不適用於 CommonJS（<code>require</code> &#x2F; <code>module.exports</code>）。</li>
<li>模組必須 <strong>無副作用（side effects）</strong>。</li>
<li>打包工具必須支援 Tree Shaking（如 Webpack、Rollup、Vite）。</li>
</ul>
</li>
<li><p><strong>支援工具：</strong></p>
<ul>
<li><strong>Webpack</strong>：需設定 <code>mode: &#39;production&#39;</code>，可配合 <code>sideEffects</code> 設定。</li>
<li><strong>Rollup</strong>：原生支援 Tree Shaking。</li>
<li><strong>Vite</strong>：基於 Rollup，自然具備支援能力。</li>
</ul>
</li>
<li><p><strong>副作用（Side Effects）：</strong></p>
<ul>
<li>當模組在載入時就執行會對外部環境產生影響的操作（如改寫全域物件、注入 CSS），即視為有副作用。</li>
<li>若模組被標示為有副作用，Tree Shaking 不會移除它，即使未被使用。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>以下範例展示如何使用 Tree Shaking 與如何正確設定專案來支援這項技術。</p>
<h3 id="範例-1：錯誤導入方式，導致無法-Tree-Shaking"><a href="#範例-1：錯誤導入方式，導致無法-Tree-Shaking" class="headerlink" title="範例 1：錯誤導入方式，導致無法 Tree Shaking"></a>範例 1：錯誤導入方式，導致無法 Tree Shaking</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">uniq</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p>使用 <code>import _ from &#39;lodash&#39;</code> 會引入整個 Lodash 函式庫，即使你只使用了 <code>uniq</code> 一個函式，打包結果也包含全部模組。</p>
<hr>
<h3 id="範例-2：正確方式，搭配-Tree-Shaking-使用"><a href="#範例-2：正確方式，搭配-Tree-Shaking-使用" class="headerlink" title="範例 2：正確方式，搭配 Tree Shaking 使用"></a>範例 2：正確方式，搭配 Tree Shaking 使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install lodash-es</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; uniq &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">uniq</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p><code>lodash-es</code> 是 Lodash 的 ES 模組版本，允許 Tree Shaking。打包工具會自動排除未使用的其他函式，例如 <code>cloneDeep</code>、<code>merge</code> 等，顯著降低檔案體積。</p>
<hr>
<h3 id="範例-3：Webpack-基礎設定"><a href="#範例-3：Webpack-基礎設定" class="headerlink" title="範例 3：Webpack 基礎設定"></a>範例 3：Webpack 基礎設定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 啟用 Tree Shaking 與壓縮</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">usedExports</span>: <span class="literal">true</span>, <span class="comment">// 標記已使用的模組導出（production 模式下自動啟用）</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這樣的設定告訴 Webpack 整個專案皆無副作用，因此可放心進行模組的 Tree Shaking。</p>
<p>若有些檔案需保留副作用（如樣式導入），可以用陣列方式指定：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/styles.css&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="範例-4：Rollup-自動-Tree-Shaking"><a href="#範例-4：Rollup-自動-Tree-Shaking" class="headerlink" title="範例 4：Rollup 自動 Tree Shaking"></a>範例 4：Rollup 自動 Tree Shaking</h3><p>Rollup 原生支援 Tree Shaking，只需使用 ES Module 即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-babel&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&#x27;dist/bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">babel</span>(&#123; <span class="attr">babelHelpers</span>: <span class="string">&#x27;bundled&#x27;</span> &#125;)],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Rollup 會分析哪些函式實際被使用，未使用的會自動排除。</p>
<hr>
<h2 id="建議實務策略"><a href="#建議實務策略" class="headerlink" title="建議實務策略"></a>建議實務策略</h2><ul>
<li><strong>使用模組化的函式庫版本</strong>，如 <code>lodash-es</code>、<code>date-fns</code>（每個功能一個函式）。</li>
<li><strong>避免使用 CommonJS 套件或 <code>require()</code> 語法</strong>，否則無法靜態分析。</li>
<li><strong>定期分析 bundle 體積</strong>，使用工具如 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">Webpack Bundle Analyzer</a>。</li>
<li><strong>結合動態 import</strong>，搭配 lazy loading 拆分 chunk 可進一步優化效能。</li>
</ul>
<hr>
<h2 id="補充副作用（side-effects）"><a href="#補充副作用（side-effects）" class="headerlink" title="補充副作用（side effects）"></a>補充副作用（side effects）</h2><p>在 JavaScript 中，<strong>副作用（side effects）</strong> 指的是 <strong>當程式碼執行時，對外部環境造成改變或依賴外部狀態</strong> 的行為。副作用是 Tree Shaking 技術的一大考量點，因為具有副作用的程式碼通常無法被安全地移除，即使它沒有被「明確使用」。</p>
<hr>
<h2 id="一、什麼是副作用？"><a href="#一、什麼是副作用？" class="headerlink" title="一、什麼是副作用？"></a>一、什麼是副作用？</h2><h3 id="常見的副作用行為包括："><a href="#常見的副作用行為包括：" class="headerlink" title="常見的副作用行為包括："></a>常見的副作用行為包括：</h3><ul>
<li><strong>修改全域變數或物件</strong></li>
<li><strong>DOM 操作</strong></li>
<li><strong>寫入檔案 &#x2F; 本地儲存</strong></li>
<li><strong>發送 API 請求</strong></li>
<li><strong>設定計時器（<code>setTimeout</code> &#x2F; <code>setInterval</code>）</strong></li>
<li><strong>console.log、alert 等印出操作</strong></li>
<li><strong>匯入會執行即時副作用的模組（例如樣式、polyfill）</strong></li>
</ul>
<hr>
<h2 id="二、舉例說明"><a href="#二、舉例說明" class="headerlink" title="二、舉例說明"></a>二、舉例說明</h2><h3 id="✅-無副作用（pure-function）"><a href="#✅-無副作用（pure-function）" class="headerlink" title="✅ 無副作用（pure function）"></a>✅ 無副作用（pure function）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個函式純粹根據輸入產出結果，不會影響其他程式碼，可被安全地移除或優化。</p>
<hr>
<h3 id="❌-有副作用"><a href="#❌-有副作用" class="headerlink" title="❌ 有副作用"></a>❌ 有副作用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;載入模組時執行&#x27;</span>); <span class="comment">// 印出訊息就是副作用</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>; <span class="comment">// 操作 DOM</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即使 <code>add()</code> 函式未使用，只要這個模組被 import，就會執行 <code>console.log</code> 和 <code>document</code> 操作，因此打包工具不敢移除它（怕破壞行為）。</p>
<hr>
<h2 id="三、Tree-Shaking-為什麼在意副作用？"><a href="#三、Tree-Shaking-為什麼在意副作用？" class="headerlink" title="三、Tree Shaking 為什麼在意副作用？"></a>三、Tree Shaking 為什麼在意副作用？</h2><p>因為 Tree Shaking 的目標是 <strong>移除未使用的程式碼</strong>，但：</p>
<ul>
<li>如果一段程式碼 <strong>可能有副作用</strong>，打包工具 <strong>不敢隨便刪除</strong>，怕造成功能錯誤。</li>
<li>所以需要明確標示模組是否有副作用。</li>
</ul>
<hr>
<h2 id="四、如何告訴打包工具副作用資訊？"><a href="#四、如何告訴打包工具副作用資訊？" class="headerlink" title="四、如何告訴打包工具副作用資訊？"></a>四、如何告訴打包工具副作用資訊？</h2><p>在專案或套件的 <code>package.json</code> 加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>代表：整個專案或套件中，所有模組都無副作用，Webpack&#x2F;Rollup 就可以放心 Tree Shake。</p>
<p>若某些檔案（如樣式）確實有副作用，可以指定：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/styles.css&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、實務建議"><a href="#五、實務建議" class="headerlink" title="五、實務建議"></a>五、實務建議</h2><ul>
<li>撰寫可預測的 <strong>純函式（Pure Function）</strong>，避免模組執行就改變外部狀態。</li>
<li>匯入函式時盡量使用模組化方式，例如只 import 使用到的功能。</li>
<li>避免使用模組中會「立即執行」某些操作的套件，若無法避免，務必在 <code>sideEffects</code> 中設定。</li>
</ul>
<p>副作用本身並不是壞事，許多實用功能（像是發送請求、改變頁面樣式）本來就需要副作用。但在做效能優化時，<strong>了解副作用的存在與影響是 Tree Shaking 成功的關鍵</strong>。</p>
<p>若模組沒有副作用，且未被使用，就可以安全地刪除。這就是 Tree Shaking 的核心機制。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Tree Shaking 是現代前端打包流程中的一項關鍵技術，對於大型應用或需要精細資源管理的專案尤其重要。透過正確地使用 ES 模組、無副作用模組設計與支援工具設定，開發者可以有效刪除未使用的程式碼，提升效能、加快載入速度，並優化使用者體驗。</p>
<p>在實務專案中，建議開發者持續追蹤打包結果，並使用具備良好模組結構與 Tree Shaking 支援的函式庫，以保持專案維持在最佳的資源狀態。</p>
]]></content>
      <tags>
        <tag>ES Module</tag>
        <tag>Tree Shaking</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/02/learning-notes-typescript-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是-TypeScript？"><a href="#一、什麼是-TypeScript？" class="headerlink" title="一、什麼是 TypeScript？"></a>一、什麼是 TypeScript？</h1><p>TypeScript 是由 Microsoft 開發的 JavaScript 超集（Superset），提供靜態型別檢查（Static Type Checking），讓開發者在編譯時發現錯誤，提升程式碼的可靠性與可維護性。TypeScript 會被編譯為標準 JavaScript，並可以運行於任何支援 JavaScript 的環境，例如瀏覽器或 Node.js。  </p>
<h3 id="TypeScript-的主要特點"><a href="#TypeScript-的主要特點" class="headerlink" title="TypeScript 的主要特點"></a>TypeScript 的主要特點</h3><ol>
<li><strong>靜態型別檢查</strong>：在開發階段偵測類型錯誤，減少潛在錯誤。  </li>
<li><strong>強大的 IDE 支援</strong>：提供自動補全、型別推斷等功能，提高開發效率。  </li>
<li><strong>物件導向特性</strong>：支援類別（Class）、介面（Interface）、泛型（Generics）等功能。  </li>
<li><strong>相容 JavaScript</strong>：可以與現有的 JavaScript 程式碼共存，逐步導入 TypeScript。  </li>
<li><strong>模組化開發</strong>：支援 ES6+ 模組系統，便於管理大型應用程式。</li>
</ol>
<hr>
<h1 id="二、安裝與設定-TypeScript"><a href="#二、安裝與設定-TypeScript" class="headerlink" title="二、安裝與設定 TypeScript"></a>二、安裝與設定 TypeScript</h1><h3 id="1-安裝-TypeScript"><a href="#1-安裝-TypeScript" class="headerlink" title="1. 安裝 TypeScript"></a>1. 安裝 TypeScript</h3><p>可以使用 npm 來安裝 TypeScript：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<p>安裝完成後，可以使用以下指令來檢查 TypeScript 版本：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure>

<h3 id="2-初始化-TypeScript-專案"><a href="#2-初始化-TypeScript-專案" class="headerlink" title="2. 初始化 TypeScript 專案"></a>2. 初始化 TypeScript 專案</h3><p>在專案目錄中執行以下指令，產生 <code>tsconfig.json</code> 設定檔：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>這個設定檔可以調整 TypeScript 的編譯選項，例如輸出目錄、是否允許隱式 <code>any</code> 類型等。  </p>
<hr>
<h1 id="三、基本語法"><a href="#三、基本語法" class="headerlink" title="三、基本語法"></a>三、基本語法</h1><h2 id="1-變數與型別"><a href="#1-變數與型別" class="headerlink" title="1. 變數與型別"></a>1. 變數與型別</h2><p>TypeScript 透過 <code>:</code> 來指定變數的型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">isStudent</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>也可以使用 <code>any</code> 來允許變數接受任何型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">value = <span class="number">123</span>;  <span class="comment">// 不會報錯</span></span><br></pre></td></tr></table></figure>

<h3 id="2-陣列與元組"><a href="#2-陣列與元組" class="headerlink" title="2. 陣列與元組"></a>2. 陣列與元組</h3><p>可以使用 <code>type[]</code> 來定義陣列型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>元組（Tuple）允許指定固定數量與型別的元素：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>];</span><br></pre></td></tr></table></figure>

<h3 id="3-物件與介面"><a href="#3-物件與介面" class="headerlink" title="3. 物件與介面"></a>3. 物件與介面</h3><p>可以使用 <code>interface</code> 來定義物件的結構：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  isStudent?: <span class="built_in">boolean</span>;  <span class="comment">// 可選屬性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-函式與型別"><a href="#4-函式與型別" class="headerlink" title="4. 函式與型別"></a>4. 函式與型別</h3><p>函式的參數與回傳值可以明確指定型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若函式沒有回傳值，可以使用 <code>void</code>：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用箭頭函式語法：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> a * b;</span><br></pre></td></tr></table></figure>

<h3 id="5-型別別名（Type-Alias）"><a href="#5-型別別名（Type-Alias）" class="headerlink" title="5. 型別別名（Type Alias）"></a>5. 型別別名（Type Alias）</h3><p><code>type</code> 關鍵字可以為型別取別名：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">userId</span>: <span class="variable constant_">ID</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、進階語法"><a href="#四、進階語法" class="headerlink" title="四、進階語法"></a>四、進階語法</h1><h3 id="1-Enum（列舉型別）"><a href="#1-Enum（列舉型別）" class="headerlink" title="1. Enum（列舉型別）"></a>1. Enum（列舉型別）</h3><p><code>enum</code> 允許定義一組具有特定名稱的數值：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">move</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-泛型（Generics）"><a href="#2-泛型（Generics）" class="headerlink" title="2. 泛型（Generics）"></a>2. 泛型（Generics）</h3><p>泛型允許函式或類別支援不同的型別，提高可重用性：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>));</span><br></pre></td></tr></table></figure>

<p>泛型也可用於類別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">content</span>: T;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;TypeScript&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-類別與繼承"><a href="#3-類別與繼承" class="headerlink" title="3. 類別與繼承"></a>3. 類別與繼承</h3><p>TypeScript 提供完整的類別支援，與 JavaScript ES6 類似：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">alice.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<p>繼承類別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="attr">studentId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, studentId: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">studentId</span> = studentId;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bob = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">123</span>);</span><br><span class="line">bob.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<h3 id="4-非空斷言（Non-null-Assertion）"><a href="#4-非空斷言（Non-null-Assertion）" class="headerlink" title="4. 非空斷言（Non-null Assertion）"></a>4. 非空斷言（Non-null Assertion）</h3><p>可以使用 <code>!</code> 來告訴 TypeScript 變數一定不會是 <code>null</code> 或 <code>undefined</code>：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value!.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、TypeScript-與-JavaScript-的比較"><a href="#五、TypeScript-與-JavaScript-的比較" class="headerlink" title="五、TypeScript 與 JavaScript 的比較"></a>五、TypeScript 與 JavaScript 的比較</h1><table>
<thead>
<tr>
<th>特性</th>
<th>JavaScript</th>
<th>TypeScript</th>
</tr>
</thead>
<tbody><tr>
<td>型別檢查</td>
<td>無</td>
<td>靜態型別檢查</td>
</tr>
<tr>
<td>介面</td>
<td>無</td>
<td>有介面與型別定義</td>
</tr>
<tr>
<td>類別與繼承</td>
<td>ES6+ 支援</td>
<td>支援完整 OOP</td>
</tr>
<tr>
<td>泛型</td>
<td>無</td>
<td>支援泛型開發</td>
</tr>
<tr>
<td>Enum 列舉</td>
<td>無</td>
<td>有內建 Enum</td>
</tr>
<tr>
<td>編譯時錯誤</td>
<td>無</td>
<td>可提前檢查錯誤</td>
</tr>
</tbody></table>
<hr>
<h1 id="六、TypeScript-專案開發"><a href="#六、TypeScript-專案開發" class="headerlink" title="六、TypeScript 專案開發"></a>六、TypeScript 專案開發</h1><p>TypeScript 可與現代開發工具整合，如 Webpack、Babel 等。例如，在 React 或 Vue 開發中，可以使用 TypeScript 提供的型別檢查來提升程式碼質量。  </p>
<p>在專案中安裝 TypeScript 相依套件：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install typescript @types/node --save-dev</span><br></pre></td></tr></table></figure>

<p>若要搭配 React，則需安裝 <code>@types/react</code> 和 <code>@types/react-dom</code>：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @types/react @types/react-dom --save-dev</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="七、結論"><a href="#七、結論" class="headerlink" title="七、結論"></a>七、結論</h1><p>TypeScript 提供靜態型別檢查、模組化開發、泛型與完整的物件導向特性，使 JavaScript 程式碼更安全、可維護且容易擴展。透過與現有 JavaScript 相容的特性，可以逐步導入 TypeScript，提升專案的開發體驗與效能。在現代前端與後端開發中，TypeScript 已成為主流選擇之一。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>useSWR 入門教學筆記：打造高效、簡潔的資料請求方式 | 學習筆記</title>
    <url>/2024/12/23/learning-notes-useswr-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代前端開發中，資料的取得與管理是不可或缺的一環。傳統上，我們可能使用 <code>useEffect</code> 搭配 <code>fetch</code> 或 <code>axios</code> 來處理資料請求，但這樣的方式不僅冗長，還需要手動管理 loading、error 狀態與快取邏輯。為了解決這些問題，Vercel 推出的 SWR（stale-while-revalidate）提供了一種簡潔、聲明式且高效的資料取得方式，特別適合搭配 React 應用開發。</p>
<p>本文將介紹 SWR 的核心觀念、使用方式與基本範例，幫助我們快速上手並應用於實務開發中。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>SWR 是什麼？</strong></p>
<ul>
<li>SWR 是由 Vercel 開發的 React Hooks 函式庫，提供資料快取與同步機制。</li>
<li>名稱來自 HTTP 快取策略 “stale-while-revalidate”，意指：<strong>先顯示舊資料，再重新驗證更新資料</strong>。</li>
</ul>
</li>
<li><p><strong>為什麼要使用 SWR？</strong></p>
<ul>
<li>自動處理資料快取與重新驗證。</li>
<li>簡化資料請求邏輯，減少樣板程式碼。</li>
<li>支援多種進階功能（錯誤重試、revalidate on focus、polling 等）。</li>
</ul>
</li>
<li><p><strong>基本用法</strong></p>
<ul>
<li>使用 <code>useSWR(key, fetcher)</code> 進行資料請求。</li>
<li><code>key</code>：唯一識別資料來源的 key，通常為 API 路徑。</li>
<li><code>fetcher</code>：資料請求函式，可使用 <code>fetch</code> 或 <code>axios</code> 實作。</li>
</ul>
</li>
<li><p><strong>常見功能</strong></p>
<ul>
<li><code>isLoading</code>、<code>error</code> 狀態管理。</li>
<li>自動重試與重新整理資料。</li>
<li>快取與全域共用資料（Shared cache）。</li>
<li>手動重新驗證資料（revalidate）。</li>
<li>支援 SSR、Pagination、Mutation 等進階功能。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例：取得-GitHub-使用者資料"><a href="#實際範例：取得-GitHub-使用者資料" class="headerlink" title="實際範例：取得 GitHub 使用者資料"></a>實際範例：取得 GitHub 使用者資料</h2><h3 id="1-安裝-SWR"><a href="#1-安裝-SWR" class="headerlink" title="1. 安裝 SWR"></a>1. 安裝 SWR</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install swr</span><br><span class="line"><span class="comment"># 或使用 yarn</span></span><br><span class="line">yarn add swr</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-撰寫-fetcher-函式"><a href="#2-撰寫-fetcher-函式" class="headerlink" title="2. 撰寫 fetcher 函式"></a>2. 撰寫 fetcher 函式</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libs/fetcher.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url: <span class="built_in">string</span></span>) =&gt; <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-在元件中使用-useSWR"><a href="#3-在元件中使用-useSWR" class="headerlink" title="3. 在元件中使用 useSWR"></a>3. 在元件中使用 useSWR</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/UserProfile.tsx</span></span><br><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&#x27;swr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetcher &#125; <span class="keyword">from</span> <span class="string">&#x27;../libs/fetcher&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(<span class="string">&#x27;https://api.github.com/users/octocat&#x27;</span>, fetcher);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>載入中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>載入失敗：&#123;error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;data.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>GitHub：&#123;data.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Followers：&#123;data.followers&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;data.avatar_url&#125;</span> <span class="attr">width</span>=<span class="string">&#123;100&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserProfile</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-手動重新驗證資料"><a href="#4-手動重新驗證資料" class="headerlink" title="4. 手動重新驗證資料"></a>4. 手動重新驗證資料</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data, mutate &#125; = <span class="title function_">useSWR</span>(<span class="string">&#x27;/api/data&#x27;</span>, fetcher);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手動刷新資料</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleRefresh</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">mutate</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-搭配條件式載入"><a href="#5-搭配條件式載入" class="headerlink" title="5. 搭配條件式載入"></a>5. 搭配條件式載入</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shouldFetch = userId !== <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useSWR</span>(shouldFetch ? <span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span> : <span class="literal">null</span>, fetcher);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-自訂快取與設定"><a href="#6-自訂快取與設定" class="headerlink" title="6. 自訂快取與設定"></a>6. 自訂快取與設定</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&#x27;swr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useSWR</span>(<span class="string">&#x27;/api/data&#x27;</span>, fetcher, &#123;</span><br><span class="line">  <span class="attr">refreshInterval</span>: <span class="number">10000</span>, <span class="comment">// 每 10 秒重新抓資料</span></span><br><span class="line">  <span class="attr">revalidateOnFocus</span>: <span class="literal">true</span>, <span class="comment">// 回到畫面時自動刷新</span></span><br><span class="line">  <span class="attr">dedupingInterval</span>: <span class="number">5000</span>, <span class="comment">// 阻止過於頻繁的 API 請求</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>SWR 提供了一種優雅、聲明式的方式來管理 React 應用中的資料請求與快取，不僅能有效簡化程式碼，還能提高使用者體驗與應用效能。其彈性與擴充性也適合應用於中大型專案中。</p>
<p>當我們熟悉了 SWR 的基本用法後，接下來也可以進一步探索以下功能：</p>
<ul>
<li><strong>Mutation API</strong>：用於資料寫入後手動更新快取。</li>
<li><strong>依賴 key 的動態載入</strong>：搭配 router 參數動態請求資料。</li>
<li><strong>全域快取策略自訂（SWRConfig）</strong>：統一設定所有請求的行為。</li>
</ul>
<p>透過 SWR，我們不再需要手動處理快取與副作用邏輯，只需專注於資料的呈現與邏輯本身，是開發現代 React 應用的絕佳利器。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://swr.vercel.app/">React Hooks for Data Fetching</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>react</tag>
        <tag>html</tag>
        <tag>fetch</tag>
        <tag>useSWR</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue i18n 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/13/learning-notes-vue-i18n-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-Vue-I18n-簡介"><a href="#1-Vue-I18n-簡介" class="headerlink" title="1. Vue I18n 簡介"></a>1. Vue I18n 簡介</h2><p>Vue i18n 是 Vue.js 的國際化（Internationalization）解決方案，可用於管理應用程式的多語系內容。當開發需要支援不同語言的應用時，Vue i18n 提供了一個高效的方式來處理翻譯、數字格式、日期格式等。</p>
<h3 id="1-1-為何使用-Vue-I18n？"><a href="#1-1-為何使用-Vue-I18n？" class="headerlink" title="1.1 為何使用 Vue I18n？"></a>1.1 為何使用 Vue I18n？</h3><ul>
<li><strong>動態切換語言</strong>：讓使用者能夠即時更改語言。</li>
<li><strong>簡化多語系管理</strong>：集中化翻譯內容，方便維護。</li>
<li><strong>格式化支援</strong>：內建日期、時間、數字等格式化功能。</li>
</ul>
<h2 id="2-安裝-Vue-I18n"><a href="#2-安裝-Vue-I18n" class="headerlink" title="2. 安裝 Vue I18n"></a>2. 安裝 Vue I18n</h2><p>Vue I18n 可透過 npm 安裝，適用於 Vue 3 應用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure>

<h2 id="3-設定-Vue-I18n"><a href="#3-設定-Vue-I18n" class="headerlink" title="3. 設定 Vue I18n"></a>3. 設定 Vue I18n</h2><p>在 Vue 3 中，可以使用 <code>createI18n</code> 來設定 Vue I18n：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Vue I18n!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    <span class="attr">welcome</span>: <span class="string">&#x27;歡迎使用 Vue I18n！&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// 預設語言</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>, <span class="comment">// 備用語言</span></span><br><span class="line">  messages</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(i18n);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-在組件中使用-Vue-I18n"><a href="#4-在組件中使用-Vue-I18n" class="headerlink" title="4. 在組件中使用 Vue I18n"></a>4. 在組件中使用 Vue I18n</h2><h3 id="4-1-使用-t-方法"><a href="#4-1-使用-t-方法" class="headerlink" title="4.1 使用 $t 方法"></a>4.1 使用 <code>$t</code> 方法</h3><p>在 Vue 組件中，可以透過 <code>$t</code> 方法來取得翻譯內容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-切換語言"><a href="#4-2-切換語言" class="headerlink" title="4.2 切換語言"></a>4.2 切換語言</h3><p>可以透過 <code>this.$i18n.locale</code> 來更改語言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;changeLanguage(&#x27;en&#x27;)&quot;&gt;English&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeLanguage(&#x27;zh&#x27;)&quot;&gt;中文&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeLanguage(lang) &#123;</span><br><span class="line">      this.$i18n.locale = lang;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-使用外部-JSON-檔案管理翻譯內容"><a href="#5-使用外部-JSON-檔案管理翻譯內容" class="headerlink" title="5. 使用外部 JSON 檔案管理翻譯內容"></a>5. 使用外部 JSON 檔案管理翻譯內容</h2><p>當專案的翻譯內容較多時，建議將翻譯字串拆分成獨立的 JSON 檔案。</p>
<p><strong>建立語言檔案：</strong></p>
<p><code>locales/en.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Welcome to Vue I18n!&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>locales/zh.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歡迎使用 Vue I18n！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改 <code>i18n</code> 設定：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&#x27;./locales/en.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&#x27;./locales/zh.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123; en, zh &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="6-插值與變數"><a href="#6-插值與變數" class="headerlink" title="6. 插值與變數"></a>6. 插值與變數</h2><p>Vue I18n 支援在翻譯字串中插入變數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">greeting</span>: <span class="string">&#x27;Hello, &#123;name&#125;!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    <span class="attr">greeting</span>: <span class="string">&#x27;你好, &#123;name&#125;!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在組件中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; $t(&#x27;greeting&#x27;, &#123; name: &#x27;John&#x27; &#125;) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-訊息格式化與日期、數字處理"><a href="#7-訊息格式化與日期、數字處理" class="headerlink" title="7. 訊息格式化與日期、數字處理"></a>7. 訊息格式化與日期、數字處理</h2><p>Vue I18n 內建 <code>numberFormats</code> 和 <code>datetimeFormats</code>，可用於格式化數字與日期。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">  messages,</span><br><span class="line">  <span class="attr">numberFormats</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">currency</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;USD&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">zh</span>: &#123;</span><br><span class="line">      <span class="attr">currency</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;TWD&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在組件中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; $n(1000, &#x27;currency&#x27;) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-延遲載入翻譯（Lazy-Loading）"><a href="#8-延遲載入翻譯（Lazy-Loading）" class="headerlink" title="8. 延遲載入翻譯（Lazy Loading）"></a>8. 延遲載入翻譯（Lazy Loading）</h2><p>當應用程式的語言檔案過多時，建議使用動態載入（Lazy Loading）來優化效能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadLocaleMessages</span>(<span class="params">locale</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> messages = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`./locales/<span class="subst">$&#123;locale&#125;</span>.json`</span>);</span><br><span class="line">  i18n.<span class="property">global</span>.<span class="title function_">setLocaleMessage</span>(locale, messages.<span class="property">default</span>);</span><br><span class="line">  i18n.<span class="property">global</span>.<span class="property">locale</span> = locale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-結論"><a href="#9-結論" class="headerlink" title="9. 結論"></a>9. 結論</h2><p>Vue I18n 是 Vue.js 中強大的國際化解決方案，透過 <code>$t</code> 方法、插值變數、外部 JSON 檔案管理，以及數字與日期格式化功能，可以讓開發者輕鬆實作多語系應用。本篇筆記介紹了 Vue I18n 的基本使用方式，進一步學習可研究動態載入、多語系 SEO 以及與 Vue Router 的結合。</p>
]]></content>
      <tags>
        <tag>i18n</tag>
        <tag>Vue</tag>
        <tag>Vue i18n</tag>
        <tag>多語系</tag>
        <tag>多國語系</tag>
        <tag>在地化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue ref 與 reactive 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/16/learning-notes-vue-ref-reactive-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Vue 3 中，<code>ref</code> 與 <code>reactive</code> 都是用來創建<strong>響應式資料</strong>的工具，但它們適用的情境略有不同。以下是清楚的比較與實際使用範例，幫助你理解什麼時候該用哪一個。</p>
<hr>
<h2 id="ref-使用情境"><a href="#ref-使用情境" class="headerlink" title="ref 使用情境"></a><code>ref</code> 使用情境</h2><h3 id="適用於："><a href="#適用於：" class="headerlink" title="適用於："></a>適用於：</h3><ul>
<li><strong>原始資料型別</strong>：如 <code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Date</code> 等。</li>
<li>你只需要追蹤單一值。</li>
<li>當你需要某個變數傳遞到 <code>&lt;template&gt;</code> 或函式中。</li>
</ul>
<h3 id="語法："><a href="#語法：" class="headerlink" title="語法："></a>語法：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">count.<span class="property">value</span>++ <span class="comment">// 需要用 .value 訪問或修改</span></span><br></pre></td></tr></table></figure>

<h3 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;Hello&#x27;)</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">const updateMessage = () =&gt; &#123;</span><br><span class="line">  message.value = &#x27;Hi Vue 3&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="reactive-使用情境"><a href="#reactive-使用情境" class="headerlink" title="reactive 使用情境"></a><code>reactive</code> 使用情境</h2><h3 id="適用於：-1"><a href="#適用於：-1" class="headerlink" title="適用於："></a>適用於：</h3><ul>
<li><strong>物件或陣列</strong>：需要操作多個屬性的資料結構。</li>
<li>多層巢狀資料或你希望所有屬性都具有響應性。</li>
<li>表單資料、設定物件等複雜狀態管理。</li>
</ul>
<h3 id="語法：-1"><a href="#語法：-1" class="headerlink" title="語法："></a>語法：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Daniel&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">user.<span class="property">age</span>++ <span class="comment">// 直接修改即可，無需 .value</span></span><br></pre></td></tr></table></figure>

<h3 id="範例：-1"><a href="#範例：-1" class="headerlink" title="範例："></a>範例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const form = reactive(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  email: &#x27;&#x27;,</span><br><span class="line">  isSubscribed: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const submitForm = () =&gt; &#123;</span><br><span class="line">  console.log(form.username, form.email, form.isSubscribed)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="⚠️-ref-包物件-vs-reactive"><a href="#⚠️-ref-包物件-vs-reactive" class="headerlink" title="⚠️ ref 包物件 vs reactive"></a>⚠️ <code>ref</code> 包物件 vs <code>reactive</code></h2><p>雖然你也可以這樣用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Daniel&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>但要存取時就需要：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span></span><br></pre></td></tr></table></figure>

<p>用 <code>reactive</code> 則可以直接操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span></span><br></pre></td></tr></table></figure>

<p>所以若你有<strong>物件資料</strong>，通常選擇 <code>reactive</code> 更直覺。</p>
<hr>
<h2 id="建議使用方式整理："><a href="#建議使用方式整理：" class="headerlink" title="建議使用方式整理："></a>建議使用方式整理：</h2><table>
<thead>
<tr>
<th>類型</th>
<th>建議使用方式</th>
</tr>
</thead>
<tbody><tr>
<td>單一變數（數字、字串）</td>
<td><code>ref</code></td>
</tr>
<tr>
<td>多欄位表單資料</td>
<td><code>reactive</code></td>
</tr>
<tr>
<td>陣列、物件、巢狀結構</td>
<td><code>reactive</code></td>
</tr>
<tr>
<td>要被 <code>watch</code> 或 <code>computed</code> 的原始值</td>
<td><code>ref</code></td>
</tr>
</tbody></table>
<hr>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>vue.js</tag>
        <tag>ref</tag>
        <tag>reactive</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-vue-router-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue Router 是 Vue.js 官方提供的前端路由解決方案，專為構建單頁應用（SPA, Single Page Application）而設計。它讓我們可以根據網址變化動態切換畫面而不重新載入頁面，是開發 Vue 應用不可或缺的工具之一。</p>
<p>本文將介紹 Vue Router 的基本概念、安裝方式、核心語法，並透過簡單實作幫助我們快速入門。</p>
<hr>
<h2 id="一、什麼是前端路由"><a href="#一、什麼是前端路由" class="headerlink" title="一、什麼是前端路由"></a>一、什麼是前端路由</h2><p>在傳統網頁架構中，網址的改變會導致瀏覽器重新向伺服器請求一個新的 HTML 頁面。但在 SPA 中，整個網站的內容是透過 JavaScript 管理畫面切換，網址改變時並不會重新載入整個頁面，而是由「前端路由器」來處理畫面更新。</p>
<p>Vue Router 就是 Vue 的前端路由器。</p>
<hr>
<h2 id="二、安裝-Vue-Router"><a href="#二、安裝-Vue-Router" class="headerlink" title="二、安裝 Vue Router"></a>二、安裝 Vue Router</h2><p>在 Vue 3 專案中，可以透過以下指令安裝 Vue Router：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<p>安裝完成後，在 <code>src/router/index.js</code>（或 <code>router.ts</code>）中建立路由設定。</p>
<hr>
<h2 id="三、基本使用範例"><a href="#三、基本使用範例" class="headerlink" title="三、基本使用範例"></a>三、基本使用範例</h2><h3 id="1-建立路由元件"><a href="#1-建立路由元件" class="headerlink" title="1. 建立路由元件"></a>1. 建立路由元件</h3><p>建立幾個簡單的元件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/views/Home.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/views/About.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-設定路由"><a href="#2-設定路由" class="headerlink" title="2. 設定路由"></a>2. 設定路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../views/About.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<h3 id="3-在-main-js-掛載路由"><a href="#3-在-main-js-掛載路由" class="headerlink" title="3. 在 main.js 掛載路由"></a>3. 在 main.js 掛載路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-lt-router-view-gt-顯示頁面"><a href="#4-使用-lt-router-view-gt-顯示頁面" class="headerlink" title="4. 使用 &lt;router-view&gt; 顯示頁面"></a>4. 使用 <code>&lt;router-view&gt;</code> 顯示頁面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- src/App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我的網站&lt;/h1&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;首頁&lt;/router-link&gt;</span><br><span class="line">      |</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;關於&lt;/router-link&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;router-link&gt;</code> 是 Vue Router 提供的元件，用來建立不重新載入的內部連結。<code>&lt;router-view&gt;</code> 則是畫面會顯示對應元件的插槽。</p>
<hr>
<h2 id="四、動態路由參數"><a href="#四、動態路由參數" class="headerlink" title="四、動態路由參數"></a>四、動態路由參數</h2><p>可使用 <code>:id</code> 的方式定義動態參數：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&quot;../views/User.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;];</span><br></pre></td></tr></table></figure>

<p>在元件中取得參數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- views/User.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;使用者 ID：&#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、巢狀路由"><a href="#五、巢狀路由" class="headerlink" title="五、巢狀路由"></a>五、巢狀路由</h2><p>當需要在某個頁面內部再切換子頁面時，可使用巢狀路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Dashboard</span> <span class="keyword">from</span> <span class="string">&quot;../views/Dashboard.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;../views/Profile.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Settings</span> <span class="keyword">from</span> <span class="string">&quot;../views/Settings.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/dashboard&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Dashboard</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>, <span class="attr">component</span>: <span class="title class_">Profile</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>在 <code>Dashboard.vue</code> 中放置 <code>&lt;router-view&gt;</code> 來呈現子路由內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;儀表板&lt;/h2&gt;</span><br><span class="line">    &lt;router-link to=&quot;/dashboard/profile&quot;&gt;個人資料&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/dashboard/settings&quot;&gt;設定&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、導覽守衛（Navigation-Guard）"><a href="#六、導覽守衛（Navigation-Guard）" class="headerlink" title="六、導覽守衛（Navigation Guard）"></a>六、導覽守衛（Navigation Guard）</h2><p>我們可以用來保護某些頁面，例如使用者未登入不得進入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="literal">false</span> <span class="comment">// 假設未登入</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/dashboard&#x27;</span> &amp;&amp; !isLoggedIn) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 導回首頁</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、路由模式（Hash-vs-History）"><a href="#七、路由模式（Hash-vs-History）" class="headerlink" title="七、路由模式（Hash vs History）"></a>七、路由模式（Hash vs History）</h2><p>Vue Router 支援兩種模式：</p>
<ol>
<li><strong>Hash 模式（預設）：</strong> 網址含 <code>#</code>，如 <code>/#/about</code>，適用於靜態伺服器</li>
<li><strong>History 模式（推薦）：</strong> 網址乾淨，需伺服器配合設定</li>
</ol>
<p>選擇 History 模式時，需設定：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>若使用 Vite &#x2F; Vue CLI，也需額外設定伺服器的 404 fallback。</p>
<hr>
<h2 id="八、程式化導航"><a href="#八、程式化導航" class="headerlink" title="八、程式化導航"></a>八、程式化導航</h2><p>我們也可以在程式中使用 <code>$router</code> 導覽：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/about&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>或者使用命名路由與參數：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">123</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="九、總結"><a href="#九、總結" class="headerlink" title="九、總結"></a>九、總結</h2><table>
<thead>
<tr>
<th>概念</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;router-view&gt;</code></td>
<td>顯示當前路由對應的元件</td>
</tr>
<tr>
<td><code>&lt;router-link&gt;</code></td>
<td>建立內部連結</td>
</tr>
<tr>
<td><code>$route</code></td>
<td>取得當前路由資訊（如參數）</td>
</tr>
<tr>
<td><code>$router</code></td>
<td>控制路由導航的方法</td>
</tr>
<tr>
<td>動態路由</td>
<td>使用 <code>:id</code> 定義參數</td>
</tr>
<tr>
<td>巢狀路由</td>
<td>路由中可包含子路由</td>
</tr>
<tr>
<td>導覽守衛</td>
<td>控制進入頁面的權限</td>
</tr>
<tr>
<td>模式</td>
<td><code>hash</code> 或 <code>history</code> 模式</td>
</tr>
</tbody></table>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Vue Router 是構建 Vue SPA 必備的工具之一，掌握它能幫助我們設計更有結構、可導航的前端應用。在進階應用中，Vue Router 還支援命名路由、懶加載、滾動行為、過渡動畫等功能。</p>
<p>如果我們有興趣了解 Vue Router 與後端整合、登入驗證、或 Nuxt.js 中的路由自動生成，歡迎再提出更進一步的需求。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>Vue</tag>
        <tag>Vue Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 正確新增或修改物件屬性入門教學筆記 | 學習筆記</title>
    <url>/2024/12/14/learning-notes-vue-set-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Vue 2（Options API）中，<code>this.$set</code> 是用來<strong>在響應式系統中正確新增或修改物件屬性</strong>的方法。這對於<strong>動態新增屬性或修改陣列的指定索引值</strong>特別有用。</p>
<hr>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(target, propertyName/index, value)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>target</code>：要修改的對象或陣列</li>
<li><code>propertyName</code>（物件）或 <code>index</code>（陣列）</li>
<li><code>value</code>：要設的值</li>
</ul>
<hr>
<h2 id="為什麼需要-this-set？"><a href="#為什麼需要-this-set？" class="headerlink" title="為什麼需要 this.$set？"></a>為什麼需要 <code>this.$set</code>？</h2><p>Vue 2 的 reactivity（響應式系統）使用 <code>Object.defineProperty</code>，它<strong>無法偵測到新加的屬性</strong>或是直接對陣列用索引來賦值。</p>
<p>例如，下面的程式碼是不會觸發畫面更新的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">someObj</span>.<span class="property">newKey</span> = <span class="string">&#x27;value&#x27;</span>      <span class="comment">// 不會觸發更新</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">someArray</span>[<span class="number">1</span>] = <span class="string">&#x27;changed&#x27;</span>      <span class="comment">// 不會觸發更新</span></span><br></pre></td></tr></table></figure>

<p>必須改成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">someObj</span>, <span class="string">&#x27;newKey&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)      <span class="comment">// 會觸發更新</span></span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">someArray</span>, <span class="number">1</span>, <span class="string">&#x27;changed&#x27;</span>)         <span class="comment">// 會觸發更新</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="範例一：對物件新增屬性"><a href="#範例一：對物件新增屬性" class="headerlink" title="範例一：對物件新增屬性"></a>範例一：對物件新增屬性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">user</span>, <span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣才能讓 <code>user.age</code> 成為響應式屬性，更新時畫面才會重新渲染。</p>
<hr>
<h2 id="範例二：修改陣列中的值"><a href="#範例二：修改陣列中的值" class="headerlink" title="範例二：修改陣列中的值"></a>範例二：修改陣列中的值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">items</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">updateItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">items</span>, <span class="number">1</span>, <span class="string">&#x27;changed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Vue-3-呢？"><a href="#Vue-3-呢？" class="headerlink" title="Vue 3 呢？"></a>Vue 3 呢？</h2><p>在 Vue 3 裡，因為 reactivity 系統改用 <strong>Proxy</strong>，所以可以直接新增或修改屬性，不需要 <code>this.$set</code> 了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">someObj</span>.<span class="property">newKey</span> = <span class="string">&#x27;value&#x27;</span>   <span class="comment">// Vue 3 沒問題</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">someArray</span>[<span class="number">1</span>] = <span class="string">&#x27;changed&#x27;</span>   <span class="comment">// Vue 3 沒問題</span></span><br></pre></td></tr></table></figure>

<hr>
<p>如果你正在寫 Vue 2 的 Tic Tac Toe 遊戲，當你要動態更新棋盤的某個格子時，這樣做就是對的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">board</span>[row], col, <span class="string">&#x27;X&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>這樣才能確保畫面能即時更新。</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>vue.js</tag>
        <tag>this.$set</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue v-cloak 入門教學筆記 | 學習筆記</title>
    <url>/2024/02/20/learning-notes-vue-v-cloak-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>v-cloak</code> 在 Vue 3 依然存在，作用與 Vue 2 相同：在 Vue 實例或組件掛載完成之前，避免模板中的插值語法（如 <code>&#123;&#123; message &#125;&#125;</code>）閃爍顯示給使用者。搭配 CSS 可在 Vue 掛載完成前隱藏元素，增進首屏體驗。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><code>v-cloak</code> 為特殊屬性，Vue 3 掛載完成會自動移除。</li>
<li>必須搭配 CSS <code>[v-cloak] &#123; display: none; &#125;</code> 讓元素在掛載前隱藏。</li>
<li>在 Vue 3，掛載方式改用 <code>createApp</code>。</li>
<li>可用於根組件或子組件的根元素。</li>
<li>不會與 <code>v-if</code>、<code>v-show</code> 衝突。</li>
</ul>
<hr>
<h2 id="Vue-3-實際範例"><a href="#Vue-3-實際範例" class="headerlink" title="Vue 3 實際範例"></a>Vue 3 實際範例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 3 v-cloak 範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Vue 3 掛載完成！&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Vue-3-單文件組件-SFC-範例"><a href="#Vue-3-單文件組件-SFC-範例" class="headerlink" title="Vue 3 單文件組件 (SFC) 範例"></a>Vue 3 單文件組件 (SFC) 範例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-cloak&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;這是 Vue 3 SFC 範例&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li><code>v-cloak</code> 在 Vue 3 的核心概念不變，仍用於避免模板閃爍。</li>
<li>需配合 CSS <code>[v-cloak]</code> 隱藏元素，等 Vue 掛載後自動移除。</li>
<li>掛載方式使用 <code>createApp</code>，搭配 <code>.mount()</code>。</li>
<li>可應用於純 HTML 或組件模板中。</li>
</ul>
]]></content>
      <tags>
        <tag>瀏覽器渲染</tag>
        <tag>Vue</tag>
        <tag>v-cloak</tag>
      </tags>
  </entry>
  <entry>
    <title>將 Vue 3 應用部署到 GitHub Pages 入門語法教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-vue3-app-github-pages-deploy-intro-tutorial%20copy/</url>
    <content><![CDATA[<p>要將 Vue 3 應用部署到 GitHub Pages，這裡有一個詳細的步驟說明，指導你如何使用 <code>gh-pages</code> 部署你的應用。</p>
<h3 id="1-安裝-gh-pages-套件"><a href="#1-安裝-gh-pages-套件" class="headerlink" title="1. 安裝 gh-pages 套件"></a>1. 安裝 <code>gh-pages</code> 套件</h3><p>首先，你需要安裝 <code>gh-pages</code> 套件來將你的專案部署到 GitHub Pages。</p>
<p>在專案目錄中執行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gh-pages</span><br></pre></td></tr></table></figure>

<h3 id="2-配置-vite-config-js"><a href="#2-配置-vite-config-js" class="headerlink" title="2. 配置 vite.config.js"></a>2. 配置 <code>vite.config.js</code></h3><p>為了將專案部署到 GitHub Pages，你需要配置 <code>vite.config.js</code> 文件中的 <code>base</code> 屬性，讓它使用 GitHub 的存儲庫名稱作為基本路徑。</p>
<p>打開 <code>vite.config.js</code>，並根據你的 GitHub 用戶名和存儲庫名稱來設定 <code>base</code> 屬性。假設你的 GitHub 存儲庫名稱是 <code>my-vue-app</code>，配置應該是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&quot;/my-vue-app/&quot;</span>, <span class="comment">// 用你的 GitHub repository 名稱替換</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-更新-package-json"><a href="#3-更新-package-json" class="headerlink" title="3. 更新 package.json"></a>3. 更新 <code>package.json</code></h3><p>你需要在 <code>package.json</code> 中添加兩個腳本來處理部署。打開 <code>package.json</code>，並在 <code>scripts</code> 部分添加 <code>predeploy</code> 和 <code>deploy</code> 腳本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;predeploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gh-pages -d dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>predeploy</code> 會先執行 <code>npm run build</code>，這會構建你的應用。</li>
<li><code>deploy</code> 會將 <code>dist</code> 目錄（即構建後的文件）推送到 GitHub Pages。</li>
</ul>
<h3 id="4-設定-GitHub-Pages"><a href="#4-設定-GitHub-Pages" class="headerlink" title="4. 設定 GitHub Pages"></a>4. 設定 GitHub Pages</h3><p>如果你還沒設定過 GitHub Pages，請先確保你的 GitHub 存儲庫設定了 GitHub Pages。</p>
<ol>
<li>在 GitHub 上打開你的存儲庫。</li>
<li>點擊 <code>Settings</code>。</li>
<li>滾動到 <code>Pages</code> 部分，並將 <code>Source</code> 設定為 <code>gh-pages</code> 分支。</li>
</ol>
<h3 id="5-部署到-GitHub-Pages"><a href="#5-部署到-GitHub-Pages" class="headerlink" title="5. 部署到 GitHub Pages"></a>5. 部署到 GitHub Pages</h3><p>完成上述配置後，你就可以將專案部署到 GitHub Pages 了。</p>
<p>執行以下命令來構建並部署專案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>

<p><code>gh-pages</code> 會自動將構建後的 <code>dist</code> 目錄推送到 <code>gh-pages</code> 分支。你可以在 GitHub 上查看部署情況。</p>
<h3 id="6-訪問你的應用"><a href="#6-訪問你的應用" class="headerlink" title="6. 訪問你的應用"></a>6. 訪問你的應用</h3><p>部署完成後，你可以使用以下 URL 來訪問你的應用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://&lt;你的 GitHub 用戶名&gt;.github.io/my-vue-app/</span><br></pre></td></tr></table></figure>

<p>請將 <code>&lt;你的 GitHub 用戶名&gt;</code> 和 <code>my-vue-app</code> 替換為你實際的 GitHub 用戶名和存儲庫名稱。</p>
<h3 id="7-自動化部署（可選）"><a href="#7-自動化部署（可選）" class="headerlink" title="7. 自動化部署（可選）"></a>7. 自動化部署（可選）</h3><p>如果我們希望每次推送代碼時自動部署到 GitHub Pages，你可以使用 GitHub Actions 來自動化這個過程。GitHub 提供了許多現成的 Actions 來進行自動部署，像是 <a href="https://github.com/marketplace/actions/deploy-to-github-pages">GitHub Action for deploying to GitHub Pages</a>。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Element Plus 介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-vue3-element-plus-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代前端開發中，UI 框架對於提升開發效率、提升用戶體驗具有至關重要的作用。Element Plus 是一個基於 Vue 3 的開源 UI 框架，它提供了豐富的組件，並且與 Vue 3 的 Composition API 完美兼容，能幫助開發者快速構建高質量的前端應用。</p>
<p>在筆記中，我們將使用 Vue 3 的 <code>setup()</code> 語法來講解如何在專案中使用 Element Plus，並展示如何搭配 Vue 3 的新特性來實現更加清晰和模組化的開發模式。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><strong>Element Plus</strong>：基於 Vue 3 的 UI 組件庫，提供了豐富的 UI 元件，支持 Composition API 和 TypeScript。</li>
<li><strong>Vue 3 Setup</strong>：使用 Vue 3 的 Composition API 和 <code>setup()</code> 來構建組件邏輯，並將 UI 與邏輯分開。</li>
<li><strong>組件設置</strong>：展示如何在 <code>setup()</code> 中引入並使用 Element Plus 組件。</li>
<li><strong>全域配置</strong>：設置 Element Plus 的全域屬性，例如默認主題或組件大小。</li>
<li><strong>實際範例</strong>：通過簡單的範例，演示如何在 Vue 3 中使用 Element Plus 進行開發。</li>
</ul>
<h2 id="安裝與設置"><a href="#安裝與設置" class="headerlink" title="安裝與設置"></a>安裝與設置</h2><h3 id="安裝-Element-Plus"><a href="#安裝-Element-Plus" class="headerlink" title="安裝 Element Plus"></a>安裝 Element Plus</h3><p>在 Vue 3 專案中使用 Element Plus，首先需要安裝它。假設你的專案已經配置了 Vue 3，則可以通過以下命令安裝 Element Plus。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure>

<p>或者使用 <code>yarn</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add element-plus</span><br></pre></td></tr></table></figure>

<h3 id="設置-Vue-3-與-Element-Plus"><a href="#設置-Vue-3-與-Element-Plus" class="headerlink" title="設置 Vue 3 與 Element Plus"></a>設置 Vue 3 與 Element Plus</h3><p>在 Vue 3 的專案中，通過 <code>setup()</code> 語法來設置 Element Plus，首先需要在 <code>main.js</code> 或 <code>main.ts</code> 中引入 Element Plus 並配置樣式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>這樣，Element Plus 就成功集成到你的 Vue 3 專案中，接下來可以開始使用其組件。</p>
<h2 id="使用-Vue-3-Setup-語法進行開發"><a href="#使用-Vue-3-Setup-語法進行開發" class="headerlink" title="使用 Vue 3 Setup 語法進行開發"></a>使用 Vue 3 Setup 語法進行開發</h2><h3 id="按鈕-Button-組件"><a href="#按鈕-Button-組件" class="headerlink" title="按鈕 (Button) 組件"></a>按鈕 (Button) 組件</h3><p>在 Vue 3 中，<code>setup()</code> 是一個組件的初始化函數，所有的組件邏輯應該放在這個函數中。以下是如何在 <code>setup()</code> 中使用 Element Plus 的按鈕組件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot;&gt;主要按鈕&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;success&quot;&gt;成功按鈕&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=&quot;danger&quot;&gt;危險按鈕&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ElButton &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在此範例中，使用 <code>import</code> 引入 <code>ElButton</code> 組件，並在模板中直接使用。這樣，我們就能夠根據需要渲染出不同樣式的按鈕。Element Plus 的組件會自動按照設置渲染出對應的 UI。</p>
<h3 id="對話框-Dialog-組件"><a href="#對話框-Dialog-組件" class="headerlink" title="對話框 (Dialog) 組件"></a>對話框 (Dialog) 組件</h3><p>Element Plus 提供了功能強大的對話框組件，能夠輕鬆實現彈窗效果。下面是如何在 <code>setup()</code> 中實現一個顯示對話框的功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button @click=&quot;openDialog&quot;&gt;顯示對話框&lt;/el-button&gt;</span><br><span class="line">  &lt;el-dialog :visible.sync=&quot;dialogVisible&quot; title=&quot;對話框標題&quot;&gt;</span><br><span class="line">    &lt;p&gt;這是一個對話框示例。&lt;/p&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; ElButton, ElDialog &#125; from &#x27;element-plus&#x27;;</span><br><span class="line"></span><br><span class="line">const dialogVisible = ref(false);</span><br><span class="line"></span><br><span class="line">const openDialog = () =&gt; &#123;</span><br><span class="line">  dialogVisible.value = true;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，使用 <code>ref()</code> 創建了 <code>dialogVisible</code> 這個響應式變數，並且通過按鈕的點擊事件來控制對話框的顯示和隱藏。<code>sync</code> 修飾符用來將對話框的顯示狀態與 <code>dialogVisible</code> 變數同步。</p>
<h3 id="表單-Form-組件"><a href="#表單-Form-組件" class="headerlink" title="表單 (Form) 組件"></a>表單 (Form) 組件</h3><p>Element Plus 的表單組件支持高效的表單驗證，以下範例展示如何在 <code>setup()</code> 中使用表單組件進行資料提交。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form :model=&quot;form&quot; ref=&quot;formRef&quot; label-width=&quot;120px&quot;&gt;</span><br><span class="line">    &lt;el-form-item</span><br><span class="line">      label=&quot;名稱&quot;</span><br><span class="line">      prop=&quot;name&quot;</span><br><span class="line">      :rules=&quot;[&#123; required: true, message: &#x27;請輸入名稱&#x27;, trigger: &#x27;blur&#x27; &#125;]&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-input v-model=&quot;form.name&quot; placeholder=&quot;請輸入名稱&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;提交&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; ElButton, ElForm, ElFormItem, ElInput &#125; from &#x27;element-plus&#x27;;</span><br><span class="line"></span><br><span class="line">const form = ref(&#123;</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const submitForm = () =&gt; &#123;</span><br><span class="line">  // 表單提交處理</span><br><span class="line">  console.log(form.value.name);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，使用 <code>ref()</code> 創建表單的資料模型，並且為名稱欄位設置了必填的驗證規則。當點擊提交按鈕時，將會輸出表單中的名稱欄位值。</p>
<h3 id="表格-Table-組件"><a href="#表格-Table-組件" class="headerlink" title="表格 (Table) 組件"></a>表格 (Table) 組件</h3><p>Element Plus 的表格組件支持展示大量數據，並且提供排序、過濾等功能。以下是如何使用 <code>setup()</code> 語法來渲染表格：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;年齡&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;地址&quot; prop=&quot;address&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; ElTable, ElTableColumn &#125; from &#x27;element-plus&#x27;;</span><br><span class="line"></span><br><span class="line">const tableData = ref([</span><br><span class="line">  &#123; name: &#x27;王小明&#x27;, age: 25, address: &#x27;台北市&#x27; &#125;,</span><br><span class="line">  &#123; name: &#x27;李大華&#x27;, age: 30, address: &#x27;高雄市&#x27; &#125;,</span><br><span class="line">  &#123; name: &#x27;張三&#x27;, age: 28, address: &#x27;台中市&#x27; &#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>這個範例展示了如何使用 <code>ref()</code> 創建表格的數據源，並使用 <code>ElTable</code> 和 <code>ElTableColumn</code> 來渲染表格。</p>
<h2 id="全域配置"><a href="#全域配置" class="headerlink" title="全域配置"></a>全域配置</h2><p>Element Plus 提供了全域配置的能力，允許你在項目中設置統一的組件配置。例如，設置所有按鈕的默認大小或主題色彩等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span>, <span class="comment">// 設定所有組件的大小為 small</span></span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">3000</span>, <span class="comment">// 設定 z-index</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>這樣設置之後，你的所有組件將會默認使用小號尺寸，並且對話框等組件的 z-index 也會被統一設置。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Element Plus 是一個強大且易於使用的 UI 框架，與 Vue 3 的 Composition API 完美集成。通過 <code>setup()</code> 語法，開發者能夠更加簡潔且模組化地編寫組件邏輯，從而提升開發效率。無論是常見的按鈕、對話框，還是複雜的表格、表單，Element Plus 都能提供強大的支持。希望本文能幫助你快速上手 Element Plus，並利用它來構建高效、現代化的前端應用。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>Vue</tag>
        <tag>Vue Router</tag>
        <tag>Element Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [1] - Declarative Rendering 聲明式渲染 | 學習筆記</title>
    <url>/2021/01/31/learning-notes-vuejs-3-official-tutorial-1-declarative-rendering/</url>
    <content><![CDATA[<h1 id="Declarative-Rendering-聲明式渲染"><a href="#Declarative-Rendering-聲明式渲染" class="headerlink" title="Declarative Rendering 聲明式渲染"></a>Declarative Rendering 聲明式渲染</h1><p>在 Vue3 我們常看到的是 Vue 單文件元件 (SFC)。SFC 是一個可重用的、獨立的程式碼區塊，它將相關的 HTML、CSS 和 JavaScript 封裝在一起，並寫在一個 <code>.vue</code> 文件中。</p>
<p>Vue 的核心特性是聲明式渲染：使用擴展 HTML 的模板語法，我們可以根據 JavaScript 的狀態描述 HTML 應該如何呈現。當狀態發生變化時，HTML 會自動更新。</p>
<p>可以在狀態變化時觸發更新的狀態被認為是響應式的。我們可以使用 Vue 的 <code>reactive()</code> API 來聲明響應式狀態。通過 <code>reactive()</code> 創建的對象是 JavaScript 的 Proxy，它們的行為與普通物件相同：</p>
<p>SFC 版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="property">count</span>) <span class="comment">// 0</span></span><br><span class="line">counter.<span class="property">count</span>++</span><br></pre></td></tr></table></figure>

<p>html 版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// component logic</span></span><br><span class="line">    <span class="comment">// declare some reactive state here.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// exposed to template</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Make me dynamic!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>reactive()</code> 只能作用於物件（包括陣列和內建類型如 Map 和 Set）。另一方面，<code>ref()</code> 可以接受任何類型的值並創建一物件，其內部值通過 <code>.value</code> 屬性暴露出來：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">value</span>) <span class="comment">// &quot;Hello World!&quot;</span></span><br><span class="line">message.<span class="property">value</span> = <span class="string">&#x27;Changed&#x27;</span></span><br></pre></td></tr></table></figure>

<p>有關 <code>reactive()</code> 和 <code>ref()</code> 的更多細節，可以參考官方教學<a href="https://vuejs.org/guide/essentials/reactivity-fundamentals.html">指南 - 響應式基礎</a>。</p>
<p>在組件的 <code>&lt;script setup&gt;</code> 區塊中聲明的響應式狀態可以直接在模板中使用。我們可以基於 <code>counter</code> 對象和 <code>message</code> 的值，使用 Mustache 語法渲染動態文字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count is: &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，當在模板中訪問 <code>message</code> 的 <code>ref</code> 值時，我們不需要使用 <code>.value</code>：它會自動取值，以提供更簡潔的用法。</p>
<p>Mustache <code>&#123;&#123; &#125;&#125;</code> 中的內容不限於標識符或路徑 —— 我們可以使用任何有效的 JavaScript 表達式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>現在，試著自己創建一些響應式狀態，並使用它來為模板中的 <code>&lt;h1&gt;</code> 渲染動態文本內容吧！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> counter = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count is: &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Vue.js 3 提供了更好的性能、更靈活的 API 和更簡潔的開發體驗。無論是使用 Composition API 還是 Options API，都能快速上手並構建強大的前端應用。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [10] - Components 元件 | 學習筆記</title>
    <url>/2021/02/09/learning-notes-vuejs-3-official-tutorial-10-components/</url>
    <content><![CDATA[<h1 id="Components-元件"><a href="#Components-元件" class="headerlink" title="Components 元件"></a>Components 元件</h1><p>到目前為止，我們只使用了一個單一的元件。實際的 Vue 應用程式通常是由巢狀元件所組成的。</p>
<p>父元件可以在其模板中渲染另一個元件作為子元件。要使用子元件，我們需要先匯入它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然後，我們可以在模板中使用該元件，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>我們現在試試看將匯入子元件並將其渲染到模板中。</p>
<figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>ChildComp.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A Child Component!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [11] - Props 屬性 | 學習筆記</title>
    <url>/2021/02/10/learning-notes-vuejs-3-official-tutorial-11-props/</url>
    <content><![CDATA[<h1 id="Props-屬性"><a href="#Props-屬性" class="headerlink" title="Props 屬性"></a>Props 屬性</h1><p>子元件可以透過 Props 接收來自父元件的輸入。首先，子元件需要宣告它所接收的 Props：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComp.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  msg: String</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意，<code>defineProps()</code> 是一個編譯時的巨集，不需要額外匯入。一旦宣告後，<code>msg</code> Prop 就可以在子元件的模板中使用，也可以透過 <code>defineProps()</code> 返回的物件在 JavaScript 中存取。</p>
<p>父元件可以像設定屬性一樣，將 Prop 傳遞給子元件。若要傳遞動態值，也可以使用 <code>v-bind</code> 語法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp :msg=&quot;greeting&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>我們現在在編輯器中試試看吧！</p>
<figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> greeting = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> <span class="attr">:msg</span>=<span class="string">&quot;greeting&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>ChildComp.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg || &#x27;No props passed yet&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [12] - Emits 事件傳遞 | 學習筆記</title>
    <url>/2021/02/11/learning-notes-vuejs-3-official-tutorial-12-emits/</url>
    <content><![CDATA[<h1 id="Emits-事件傳遞"><a href="#Emits-事件傳遞" class="headerlink" title="Emits 事件傳遞"></a>Emits 事件傳遞</h1><p>除了接收 Props 之外，子元件也可以向父元件觸發事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 宣告要觸發的事件</span><br><span class="line">const emit = defineEmits([&#x27;response&#x27;])</span><br><span class="line"></span><br><span class="line">// 觸發事件並傳遞參數</span><br><span class="line">emit(&#x27;response&#x27;, &#x27;hello from child&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>emit()</code> 的第一個參數是事件名稱，任何額外的參數都會傳遞給事件監聽器。</p>
<p>父元件可以使用 <code>v-on</code> 來監聽子元件觸發的事件——如下範例中，處理函式接收來自子元件 <code>emit</code> 的額外參數，並將其賦值給本地狀態：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp @response=&quot;(msg) =&gt; childMsg = msg&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>現在我們在編輯器中試試看吧！</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [13] - Slots 插槽 | 學習筆記</title>
    <url>/2021/02/13/learning-notes-vuejs-3-official-tutorial-13-slots/</url>
    <content><![CDATA[<h1 id="Slots-插槽"><a href="#Slots-插槽" class="headerlink" title="Slots 插槽"></a>Slots 插槽</h1><p>除了透過 Props 傳遞資料外，父元件還可以透過插槽將模板片段傳遞給子元件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp&gt;</span><br><span class="line">    這是一些插槽內容！</span><br><span class="line">  &lt;/ChildComp&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>在子元件中，可以使用 <code>&lt;slot&gt;</code> 元素作為插槽來渲染父元件傳遞的內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 子元件的模板 --&gt;</span><br><span class="line">  &lt;slot /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>插槽內的內容會被視為「預設內容」：當父元件沒有傳遞插槽內容時，會顯示這些預設內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;slot&gt;預設內容&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>目前我們尚未向 <code>&lt;ChildComp&gt;</code> 傳遞任何插槽內容，因此你應該會看到預設內容。現在試著利用父元件的 <code>msg</code> 狀態，為子元件提供一些插槽內容吧！</p>
<figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">ChildComp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>ChildComp.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">ChildComp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [2] - Attribute Bindings 屬性綁定 | 學習筆記</title>
    <url>/2021/02/01/learning-notes-vuejs-3-official-tutorial-2-attribute-bindings/</url>
    <content><![CDATA[<p><strong>Attribute Bindings 屬性綁定</strong><br>在 Vue 中，Mustache 語法只能用於文字插值。要將屬性綁定到動態值，我們需要使用 <code>v-bind</code> 指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指令是一種特殊的屬性，以 <code>v-</code> 前綴開頭，屬於 Vue 的模板語法的一部分。與文字插值類似，指令的值是 JavaScript 表達式，可以訪問組件的狀態。有關 <code>v-bind</code> 和指令語法的完整細節，請參閱官方說明<a href="https://vuejs.org/guide/essentials/template-syntax.html">指南 - 模板語法</a>。</p>
<p>冒號之後的部分（<code>:id</code>）是指令的「參數」。在這裡，元素的 <code>id</code> 屬性將與組件狀態中的 <code>dynamicId</code> 屬性同步。</p>
<p>由於 <code>v-bind</code> 的使用頻率很高，Vue 提供了專用的簡寫語法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>我們可以試著將動態類名綁定到 <code>&lt;h1&gt;</code>，使用 <code>titleClass</code> 的 <code>ref</code> 作為值。如果綁定正確，文字應該會變成紅色！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> titleClass = <span class="title function_">ref</span>(<span class="string">&#x27;title&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;titleClass&quot;</span>&gt;</span>Make me red<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- add dynamic class binding here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [3] - Event Listeners 事件監聽器 | 學習筆記</title>
    <url>/2021/02/02/learning-notes-vuejs-3-official-tutorial-3-event-listeners/</url>
    <content><![CDATA[<p><strong>Event Listeners 事件監聽器</strong><br>在 Vue 中，我們可以使用 <code>v-on</code> 指令監聽 DOM 事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由於 <code>v-on</code> 的使用頻率很高，Vue 提供了一個簡寫語法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這裡，<code>increment</code> 是在 <code>&lt;script setup&gt;</code> 中定義的一個函式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定義響應式狀態</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 定義函式來更新狀態</span><br><span class="line">function increment() &#123;</span><br><span class="line">  // 更新組件的狀態</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在函式內，我們可以透過修改 <code>ref</code> 的值來更新組件的狀態。</p>
<hr>
<p>事件處理器也可以使用內聯表達式，並透過<strong>修飾符</strong>簡化常見任務。這些細節在<a href="https://vuejs.org/guide/essentials/event-handling.html">指南 - 事件處理</a>中有詳細說明。</p>
<hr>
<p>現在，我們可以試著自己實作 <code>increment</code> 函式，並使用 <code>v-on</code> 將它綁定到按鈕。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [4] - Form Bindings 表單綁定 | 學習筆記</title>
    <url>/2021/02/03/learning-notes-vuejs-3-official-tutorial-4-form-bindings/</url>
    <content><![CDATA[<p><strong>Form Bindings 表單綁定</strong><br>使用 <code>v-bind</code> 和 <code>v-on</code> 結合，我們可以對表單輸入元素創建雙向綁定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// v-on 處理器接收原生 DOM 事件作為參數</span></span></span><br><span class="line"><span class="language-javascript">  text.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當您在輸入框中輸入時，您應該會看到 <code>&lt;p&gt;</code> 中的文字隨之更新。</p>
<hr>
<p>為了簡化雙向綁定，Vue 提供了 <code>v-model</code> 指令，它本質上是上述代碼的語法糖：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-model</code> 會自動同步 <code>&lt;input&gt;</code> 的值與綁定的狀態，因此我們不再需要為此使用事件處理器。</p>
<hr>
<p><code>v-model</code> 不僅適用於文本輸入，還適用於其他輸入類型，如復選框 (checkbox)、單選按鈕 (radio button) 和下拉選單 (select dropdown)。有關更多細節，請參閱官方<a href="https://vuejs.org/guide/essentials/forms.html">指南 - 表單綁定</a>。</p>
<hr>
<p>現在，我們試著將代碼重構為使用 <code>v-model</code>。</p>
<p>SFC&#x2F;Composition 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SFC&#x2F;Options 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">text</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML&#x2F;Options 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">text</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML&#x2F;Composition 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      text.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      text,</span></span><br><span class="line"><span class="language-javascript">      onInput</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [5] - Conditional Rendering 表單綁定 | 學習筆記</title>
    <url>/2021/02/04/learning-notes-vuejs-3-official-tutorial-5-conditional-rendering/</url>
    <content><![CDATA[<p><strong>Conditional Rendering 條件渲染</strong><br>在 Vue 中，我們可以使用 <code>v-if</code> 指令來條件式渲染元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這個 <code>&lt;h1&gt;</code> 只有在 <code>awesome</code> 的值為真值時才會被渲染。如果 <code>awesome</code> 的值變為假值，它將從 DOM 中被移除。</p>
<hr>
<p>我們還可以使用 <code>v-else</code> 和 <code>v-else-if</code> 表示條件的其他分支：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>目前的範例同時顯示了兩個 <code>&lt;h1&gt;</code>，按鈕也沒有作用。請嘗試為 <code>&lt;h1&gt;</code> 添加 <code>v-if</code> 和 <code>v-else</code> 指令，並實作一個 <code>toggle()</code> 方法，使我們可以透過按鈕來切換顯示的內容。</p>
<hr>
<p>示例程式碼範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line">  &lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;toggle&quot;&gt;Toggle&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const awesome = ref(true)</span><br><span class="line"></span><br><span class="line">function toggle() &#123;</span><br><span class="line">  awesome.value = !awesome.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>更多關於 <code>v-if</code> 的詳細內容請參閱官方<a href="https://vuejs.org/guide/essentials/conditional.html">指南 - 條件渲染</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> awesome = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  awesome.<span class="property">value</span> = !awesome.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [7] - Computed Property 計算屬性 | 學習筆記</title>
    <url>/2021/02/06/learning-notes-vuejs-3-official-tutorial-7-computed-property/</url>
    <content><![CDATA[<h1 id="Computed-Property-計算屬性"><a href="#Computed-Property-計算屬性" class="headerlink" title="Computed Property 計算屬性"></a>Computed Property 計算屬性</h1><p>讓我們在前一個待辦清單的範例基礎上繼續改進。這裡，我們已經為每個待辦項目新增了切換功能 (toggle)，這是透過在每個待辦物件中新增一個 <code>done</code> 屬性，並使用 <code>v-model</code> 綁定到核取方塊來實現的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.done&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下來我們可以進一步改進功能，新增一個按鈕來隱藏已完成的待辦項目。我們已經有一個按鈕可以切換 <code>hideCompleted</code> 狀態。但要如何根據這個狀態來動態渲染不同的待辦清單項目呢？</p>
<p>這裡引入了 <code>computed()</code>。我們可以建立一個計算屬性，基於其他的響應式數據來源來計算它的 <code>.value</code> 值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hideCompleted = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filteredTodos = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 根據 `todos.value` 和 `hideCompleted.value`</span></span><br><span class="line">  <span class="comment">// 返回篩選後的待辦項目</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我們將 <code>v-for</code> 的數據來源從原本的 <code>todos</code> 改為 <code>filteredTodos</code>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;li v-for=&quot;todo in todos&quot;&gt;</span></span><br><span class="line"><span class="addition">+ &lt;li v-for=&quot;todo in filteredTodos&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<p>計算屬性會自動追蹤其計算邏輯中使用的其他響應式數據作為依賴項目。它會快取計算結果，並在其依賴項目改變時自動更新。</p>
<p>現在，嘗試新增一個 <code>filteredTodos</code> 計算屬性，並實現其計算邏輯！如果實現正確，當隱藏已完成項目時，勾選一個待辦項目應會立即將其隱藏。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> id = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodo = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> hideCompleted = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn HTML&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> filteredTodos = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> hideCompleted.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    ? todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> !t.<span class="property">done</span>)</span></span><br><span class="line"><span class="language-javascript">    : todos.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: newTodo.<span class="property">value</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">  newTodo.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">todo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t !== todo)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodo&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;new todo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.done&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; done: todo.done &#125;&quot;</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;hideCompleted = !hideCompleted&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.done</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [6] - List Rendering 表單綁定 | 學習筆記</title>
    <url>/2021/02/05/learning-notes-vuejs-3-official-tutorial-6-list-rendering/</url>
    <content><![CDATA[<p><strong>List Rendering 列表渲染</strong><br>我們可以使用 <code>v-for</code> 指令根據一個來源陣列來渲染元素列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這裡，<code>todo</code> 是一個局部變數，代表目前被迭代的陣列元素。它的作用域僅限於 <code>v-for</code> 元素內部，類似於函式的作用域。</p>
<hr>
<p>請注意，我們為每個 <code>todo</code> 對象指定了一個唯一的 <code>id</code>，並將其綁定為每個 <code>&lt;li&gt;</code> 的特殊 <code>key</code> 屬性。<code>key</code> 允許 Vue 精準地移動每個 <code>&lt;li&gt;</code>，以匹配陣列中對應對象的位置。</p>
<hr>
<p>有兩種方式可以更新列表：</p>
<ol>
<li><p>對來源陣列調用可變方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">todos.<span class="property">value</span>.<span class="title function_">push</span>(newTodo)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用新的陣列替換：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="comment">/* ... */</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<p>以下是一個簡單的待辦事項列表範例，您可以試著實現 <code>addTodo()</code> 和 <code>removeTodo()</code> 方法，使其正常運作！</p>
<h3 id="範例程式碼："><a href="#範例程式碼：" class="headerlink" title="範例程式碼："></a>範例程式碼：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo.id)&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodoText&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Add a new todo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定義待辦事項列表和新增的文字</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue.js&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Build a project&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodoText = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 新增待辦事項</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (newTodoText.<span class="property">value</span>.<span class="title function_">trim</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">    todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="comment">// 使用當前時間作為唯一 ID</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: newTodoText.<span class="property">value</span>.<span class="title function_">trim</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    newTodoText.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 清空輸入框</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 移除待辦事項</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>更多關於 <code>v-for</code> 的詳細內容，請參閱官方<a href="https://vuejs.org/guide/essentials/list.html">指南 - 列表渲染</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// give each todo a unique id</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> id = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodo = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn HTML&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: newTodo.<span class="property">value</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">  newTodo.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">todo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t !== todo)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodo&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;new todo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [8] - Lifecycle and Template Refs 生命週期與模板引用 | 學習筆記</title>
    <url>/2021/02/07/learning-notes-vuejs-3-official-tutorial-8-lifecycle-and-template-refs/</url>
    <content><![CDATA[<h2 id="Lifecycle-and-Template-Refs-生命週期與模板引用"><a href="#Lifecycle-and-Template-Refs-生命週期與模板引用" class="headerlink" title="Lifecycle and Template Refs 生命週期與模板引用"></a>Lifecycle and Template Refs 生命週期與模板引用</h2><p>到目前為止，Vue.js 透過響應式資料與聲明式渲染，幫助我們處理了所有的 DOM 更新。然而，無可避免地會有需要手動操作 DOM 的情況。</p>
<p>我們可以使用特殊的 <code>ref</code> 屬性來請求模板引用 (template ref)，也就是模板中某個元素的引用：</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;pElementRef&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定義引用"><a href="#定義引用" class="headerlink" title="定義引用"></a>定義引用</h3><p>為了訪問這個引用，我們需要宣告一個名稱匹配的 <code>ref</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pElementRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>請注意，這個 <code>ref</code> 在初始化時會是 <code>null</code>，因為當 <code>&lt;script setup&gt;</code> 被執行時，對應的 DOM 元素還不存在。模板引用只有在元件掛載 (mounted) 後才能被訪問。</p>
<h3 id="在掛載後執行程式碼"><a href="#在掛載後執行程式碼" class="headerlink" title="在掛載後執行程式碼"></a>在掛載後執行程式碼</h3><p>我們可以使用 <code>onMounted()</code> 函式在掛載後執行程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 元件已掛載完成</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生命週期鉤子"><a href="#生命週期鉤子" class="headerlink" title="生命週期鉤子"></a>生命週期鉤子</h3><p>這稱為生命週期鉤子 (lifecycle hook)，它允許我們在元件生命週期的特定時間點註冊回呼函式。其他的生命週期鉤子還包括 <code>onUpdated</code> 和 <code>onUnmounted</code> 等。更多細節請參考官方文件 <a href="https://vuejs.org/guide/essentials/lifecycle.html">生命週期圖示</a>。</p>
<h3 id="試試看"><a href="#試試看" class="headerlink" title="試試看"></a>試試看</h3><p>現在，我們可以嘗試添加一個 <code>onMounted</code> 鉤子，透過 <code>pElementRef.value</code> 訪問 <code>&lt;p&gt;</code> 元素，並對其進行一些直接的 DOM 操作（例如更改 <code>textContent</code>）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pElementRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  pElementRef.<span class="property">value</span>.<span class="property">textContent</span> = <span class="string">&#x27;mounted!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;pElementRef&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [9] - Watchers 觀察者 | 學習筆記</title>
    <url>/2021/02/08/learning-notes-vuejs-3-official-tutorial-9-watchers/</url>
    <content><![CDATA[<h1 id="Watchers-觀察者"><a href="#Watchers-觀察者" class="headerlink" title="Watchers 觀察者"></a>Watchers 觀察者</h1><p>有時我們可能需要以反應性的方式執行「Side-effect 副作用」，例如，當一個數值改變時將其記錄到控制台。我們可以使用觀察者來實現這一點：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 是的，console.log() 是一種副作用</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新的計數是：<span class="subst">$&#123;newCount&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>watch()</code> 可以直接監視一個 <code>ref</code>，每當 <code>count</code> 的值改變時，回調函數就會被觸發。<code>watch()</code> 也可以監視其他類型的數據來源——更多細節請參閱指南：觀察者（Watchers）。</p>
<p>比將訊息記錄到控制台更實用的例子，可能是當一個 ID 發生變化時，根據新 ID 獲取數據。我們的代碼目前是在元件掛載時，從一個模擬 API 獲取 <code>todos</code> 數據。此外，還有一個按鈕可以遞增應該被獲取的 <code>todo</code> ID。請嘗試實現一個觀察者，在按下按鈕時根據新 ID 獲取新的 <code>todo</code> 數據。</p>
<p>參考範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todoId = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todoData = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todoData.<span class="property">value</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;todoId.value&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  todoData.<span class="property">value</span> = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fetchData</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(todoId, fetchData)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Todo id: &#123;&#123; todoId &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;todoId++&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!todoData&quot;</span>&gt;</span>Fetch next todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;!todoData&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; todoData &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 Options API 和 Composition API 風格差異教學筆記 | 學習筆記</title>
    <url>/2020/11/16/learning-notes-vuejs-3-whats-diff-between-options-api-composition-api/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根據<a href="https://vuejs.org/guide/introduction.html#api-styles">官方文件的說明</a>，一般來說 Vue 元件可以用兩種不同的 API 風格來撰寫：<strong>Options API</strong> 和 <strong>Composition API</strong>。</p>
<hr>
<h1 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a><strong>Options API</strong></h1><p>使用 Options API 時，我們透過一個包含 <code>data</code>、<code>methods</code> 和 <code>mounted</code> 等選項的物件來定義元件邏輯。選項中定義的屬性會在函式內透過 <code>this</code> 曝露，<code>this</code> 指向的是元件實例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 從 data() 返回的屬性成為響應式狀態，</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 並會透過 `this` 曝露。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Methods 是變更狀態並觸發更新的函式，</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 可作為模板中的事件處理程序綁定。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 生命週期鉤子會在組件的不同階段被調用。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 此函式會在組件掛載時調用。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`初始計數值為 <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>。`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a><strong>Composition API</strong></h1><p>使用 Composition API 時，我們透過導入的 API 函式來定義組件邏輯。在單文件組件 (SFC) 中，Composition API 通常搭配 <code>&lt;script setup&gt;</code> 使用。<code>setup</code> 屬性是一個提示，它讓 Vue 執行編譯時轉換，從而減少樣板代碼。舉例來說，在 <code>&lt;script setup&gt;</code> 中宣告的導入、第一層變數和函式可直接用於模板中。</p>
<p>以下是相同的組件，模板保持不變，但改用 Composition API 和 <code>&lt;script setup&gt;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 響應式狀態</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 改變狀態並觸發更新的函式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 生命週期鉤子</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`初始計數值為 <span class="subst">$&#123;count.value&#125;</span>。`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="該選擇哪種風格？"><a href="#該選擇哪種風格？" class="headerlink" title="該選擇哪種風格？"></a><strong>該選擇哪種風格？</strong></h1><p>這兩種 API 風格都能滿足常見的使用場景。它們是基於相同底層系統的不同介面。實際上，<strong>Options API 是基於 Composition API 實現的</strong>！Vue 的核心概念和知識在兩種風格中是共通的。</p>
<ol>
<li><p><strong>Options API</strong>  </p>
<ul>
<li>圍繞「組件實例」（如範例中的 <code>this</code>）進行設計，對於來自 OOP 語言背景的使用者，這種風格通常更符合以類為基礎的思維模型。</li>
<li>初學者友好，通過選項分組的方式隱藏了響應式細節，簡化程式碼組織。</li>
</ul>
</li>
<li><p><strong>Composition API</strong>  </p>
<ul>
<li>在函式作用域中直接宣告響應式狀態變數，並透過組合多個函式來管理複雜性。</li>
<li>更加靈活，但需要對 Vue 的響應式機制有深入理解才能有效使用。</li>
<li>適合組織和重用邏輯的更強大模式。</li>
</ul>
</li>
</ol>
<h1 id="學習上的建議"><a href="#學習上的建議" class="headerlink" title="學習上的建議"></a><strong>學習上的建議</strong></h1><ul>
<li><strong>新手學習</strong>：選擇對您來說更容易理解的風格。大多數核心概念在兩種風格中是共通的，您之後可以再學習另一種風格。  </li>
<li><strong>生產使用</strong>：  <ul>
<li>如果不使用建構工具，或計畫主要用於低複雜度場景（如漸進式增強），建議使用 <code>Options API</code>。  </li>
<li>如果計畫使用 Vue 構建完整應用，建議使用 <strong>Composition API + 單文件組件</strong>。</li>
</ul>
</li>
</ul>
<p>在學習階段，我們也不需要僅限於某一種風格。可以根據適合的情境使用適合的 API 風格。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
        <tag>Options API</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue pinia 保持 reactive 入門教學筆記 | 學習筆記</title>
    <url>/2023/12/21/learning-notes-vuejs-pinia-store-reactive-intro-tutorial%20copy/</url>
    <content><![CDATA[<p>保持 reactive 寫法：</p>
<hr>
<h2 id="1️-用-computed"><a href="#1️-用-computed" class="headerlink" title="1️. 用 computed"></a>1️. 用 <code>computed</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> todoStore.<span class="property">todos</span>)</span><br></pre></td></tr></table></figure>

<p><strong>優點</strong>  </p>
<ul>
<li>保持 reactive  </li>
<li>簡單直接  </li>
<li>在 template 裡 <code>todos</code> 可以直接使用</li>
</ul>
<p><strong>缺點</strong>  </p>
<ul>
<li>如果只是讀值，其實有點多餘</li>
</ul>
<p><strong>建議用於</strong>：在 template 需要用 <code>v-for=&quot;todo in todos&quot;</code> 這種情況下。</p>
<hr>
<h2 id="2️-直接使用-todoStore-todos-在-template"><a href="#2️-直接使用-todoStore-todos-在-template" class="headerlink" title="2️. 直接使用 todoStore.todos 在 template"></a>2️. 直接使用 <code>todoStore.todos</code> 在 template</h2><p>不額外宣告變數，直接寫：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;todo in todoStore.todos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p><strong>優點</strong>  </p>
<ul>
<li>直接讀取 store，最簡單  </li>
<li>不需要 <code>computed</code></li>
</ul>
<p><strong>缺點</strong>  </p>
<ul>
<li>如果在 <code>script</code> 多處使用 todos，每次都要寫 <code>todoStore.todos</code></li>
</ul>
<p><strong>建議用於</strong>：只在 template 需要使用 todos 的情況。</p>
<hr>
<h2 id="3️-使用-storeToRefs"><a href="#3️-使用-storeToRefs" class="headerlink" title="3️. 使用 storeToRefs"></a>3️. 使用 <code>storeToRefs</code></h2><p>這是 Pinia 官方推薦的方式，可以一次把 state 解構成 reactive ref：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoStore = <span class="title function_">useTodoStore</span>()</span><br><span class="line"><span class="keyword">const</span> &#123; todos &#125; = <span class="title function_">storeToRefs</span>(todoStore)</span><br></pre></td></tr></table></figure>

<p><strong>優點</strong>  </p>
<ul>
<li><code>todos</code> 是 reactive  </li>
<li>取值時不會失去 reactive  </li>
<li>適合同時取多個 state（例如 <code>const &#123; todos, count &#125; = storeToRefs(todoStore)</code>）</li>
</ul>
<p><strong>缺點</strong>  </p>
<ul>
<li>需要額外 import <code>storeToRefs</code>  </li>
<li>初學者可能不熟悉</li>
</ul>
<p><strong>建議用於</strong>：component 中需要多個 state 且偏好解構寫法時。</p>
<hr>
<h2 id="寫法比較"><a href="#寫法比較" class="headerlink" title="寫法比較"></a>寫法比較</h2><table>
<thead>
<tr>
<th>寫法</th>
<th>是否 reactive</th>
<th>適用場景</th>
</tr>
</thead>
<tbody><tr>
<td><code>computed</code> 包一層</td>
<td>是</td>
<td>script 內多次使用</td>
</tr>
<tr>
<td>直接 <code>todoStore.todos</code></td>
<td>是</td>
<td>只在 template 使用</td>
</tr>
<tr>
<td><code>storeToRefs</code></td>
<td>是</td>
<td>多個 state 解構需要時</td>
</tr>
</tbody></table>
<hr>
<h2 id="建議"><a href="#建議" class="headerlink" title="建議"></a>建議</h2><ul>
<li>如果只需要一個 state：<code>computed</code> 或直接用 <code>todoStore.todos</code></li>
<li>如果需要多個 state：<code>storeToRefs</code></li>
</ul>
<hr>
<h3 id="範例（使用-storeToRefs）"><a href="#範例（使用-storeToRefs）" class="headerlink" title="範例（使用 storeToRefs）"></a>範例（使用 <code>storeToRefs</code>）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useTodoStore &#125; from &#x27;../stores/todoStore&#x27;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">const todoStore = useTodoStore()</span><br><span class="line">const &#123; todos &#125; = storeToRefs(todoStore)</span><br><span class="line"></span><br><span class="line">function addTodo() &#123; ... &#125;</span><br><span class="line">function removeTodo(id) &#123; ... &#125;</span><br><span class="line">function toggleComplete(id) &#123; ... &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>template 裡直接使用 <code>todos</code>，效果與 <code>computed</code> 相同。</p>
<hr>
<p><strong>總結</strong><br>三種寫法都可行，主要差異在語法風格與使用場景。若不想意外解構成非 reactive 值，使用 <code>storeToRefs</code> 是最安全的。</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>JavaScript</tag>
        <tag>reactive</tag>
        <tag>pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 入門教學筆記：集中式狀態管理實作入門教學筆記 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-vuex-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Vue.js 開發中，當應用程式變得複雜，元件之間需要共享的狀態越來越多時，僅靠 props 與 events 傳遞資料會變得混亂與難以維護。這時，我們就需要一個集中式的狀態管理方案，而 Vuex 正是官方為 Vue 提供的解決方案。</p>
<p>Vuex 是一個專為 Vue 應用開發的狀態管理模式。它將應用中所有的狀態集中管理，並以可預測的方式更新，便於追蹤與維護。</p>
<hr>
<h2 id="一、Vuex-是什麼？"><a href="#一、Vuex-是什麼？" class="headerlink" title="一、Vuex 是什麼？"></a>一、Vuex 是什麼？</h2><p>Vuex 基於 <a href="https://facebook.github.io/flux/docs/in-depth-overview/">Flux 架構</a> 設計，核心概念如下：</p>
<ul>
<li><strong>State</strong>：集中管理的資料來源（全域狀態）</li>
<li><strong>Getter</strong>：從 state 派生出來的資料（類似 computed）</li>
<li><strong>Mutation</strong>：唯一可以同步改變 state 的方法</li>
<li><strong>Action</strong>：處理非同步操作並提交 mutation</li>
<li><strong>Module</strong>：將 store 拆分為模組化結構</li>
</ul>
<hr>
<h2 id="二、安裝與設定-Vuex"><a href="#二、安裝與設定-Vuex" class="headerlink" title="二、安裝與設定 Vuex"></a>二、安裝與設定 Vuex</h2><p>以 Vue 3 專案為例，先安裝 Vuex：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex@4</span><br></pre></td></tr></table></figure>

<h3 id="建立-store"><a href="#建立-store" class="headerlink" title="建立 store"></a>建立 store</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">incrementAsync</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、在-Vue-中註冊-Vuex"><a href="#三、在-Vue-中註冊-Vuex" class="headerlink" title="三、在 Vue 中註冊 Vuex"></a>三、在 Vue 中註冊 Vuex</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、在元件中使用-Vuex"><a href="#四、在元件中使用-Vuex" class="headerlink" title="四、在元件中使用 Vuex"></a>四、在元件中使用 Vuex</h2><h3 id="1-讀取-State-和-Getter"><a href="#1-讀取-State-和-Getter" class="headerlink" title="1. 讀取 State 和 Getter"></a>1. 讀取 State 和 Getter</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count：&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Double：&#123;&#123; doubleCount &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const store = useStore();</span><br><span class="line">    const count = computed(() =&gt; store.state.count);</span><br><span class="line">    const doubleCount = computed(() =&gt; store.getters.doubleCount);</span><br><span class="line">    return &#123; count, doubleCount &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-呼叫-Mutation-和-Action"><a href="#2-呼叫-Mutation-和-Action" class="headerlink" title="2. 呼叫 Mutation 和 Action"></a>2. 呼叫 Mutation 和 Action</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;incrementAsync&quot;&gt;+1（非同步）&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const store = useStore();</span><br><span class="line">    const increment = () =&gt; store.commit(&quot;increment&quot;);</span><br><span class="line">    const incrementAsync = () =&gt; store.dispatch(&quot;incrementAsync&quot;);</span><br><span class="line">    return &#123; increment, incrementAsync &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、模組化-Vuex-Store"><a href="#五、模組化-Vuex-Store" class="headerlink" title="五、模組化 Vuex Store"></a>五、模組化 Vuex Store</h2><p>當我們的應用變大，state 增加時，可將 store 拆分成多個模組。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/modules/counter.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">&quot;./modules/counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    counter,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在元件中使用時要記得模組的命名空間：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">commit</span>(<span class="string">&quot;counter/increment&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、Vuex-與-Composition-API-的搭配"><a href="#六、Vuex-與-Composition-API-的搭配" class="headerlink" title="六、Vuex 與 Composition API 的搭配"></a>六、Vuex 與 Composition API 的搭配</h2><p>Vuex 4 支援 Vue 3 的 Composition API，我們可以透過 <code>useStore()</code> 搭配 <code>computed()</code> 來存取或操作資料。這樣的使用方式更模組化，也能更輕鬆撰寫邏輯可重用的自定義 hooks。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// composables/useCounter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> store.<span class="property">state</span>.<span class="property">counter</span>.<span class="property">count</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; store.<span class="title function_">commit</span>(<span class="string">&quot;counter/increment&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123; count, increment &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、Vuex-與非同步操作的實務應用"><a href="#七、Vuex-與非同步操作的實務應用" class="headerlink" title="七、Vuex 與非同步操作的實務應用"></a>七、Vuex 與非同步操作的實務應用</h2><p>Vuex 的 Action 適合處理 API 呼叫，例如取得後端資料：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/todos.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">    <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="params">state, flag</span>) &#123;</span><br><span class="line">      state.<span class="property">loading</span> = flag;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="params">state, todos</span>) &#123;</span><br><span class="line">      state.<span class="property">list</span> = todos;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchTodos</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&quot;setLoading&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&quot;setTodos&quot;</span>, data.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&quot;setLoading&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="八、Vuex-的限制與未來"><a href="#八、Vuex-的限制與未來" class="headerlink" title="八、Vuex 的限制與未來"></a>八、Vuex 的限制與未來</h2><p>Vuex 提供完整的狀態追蹤與結構化設計，適合大型應用。不過，它的學習曲線略高，對於小型專案可能顯得冗長。Vue 團隊也在 Vue 3 推出後推薦使用 <a href="https://pinia.vuejs.org/">Pinia</a> 作為新的官方狀態管理方案，擁有更輕量的語法與更佳的 TypeScript 支援。</p>
<p>但 Vuex 在大型專案、多人協作、需要嚴格管理資料流程的場景下仍然非常實用與穩定。</p>
<hr>
<h2 id="九、總結與建議"><a href="#九、總結與建議" class="headerlink" title="九、總結與建議"></a>九、總結與建議</h2><table>
<thead>
<tr>
<th>功能</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>state</td>
<td>全域共享狀態資料</td>
</tr>
<tr>
<td>getters</td>
<td>從 state 衍生計算的資料</td>
</tr>
<tr>
<td>mutations</td>
<td>同步更新狀態的唯一方法</td>
</tr>
<tr>
<td>actions</td>
<td>處理非同步並提交 mutation</td>
</tr>
<tr>
<td>modules</td>
<td>將 store 拆分管理</td>
</tr>
<tr>
<td>Composition API</td>
<td>搭配 <code>useStore()</code> 模組化使用</td>
</tr>
</tbody></table>
<p>建議我們在小型應用中可以先用 <code>props</code> 和 <code>emit</code> 傳遞資料，等到資料流變複雜或頁面之間需頻繁共享狀態時，再引入 Vuex 管理。當然，若我們正開發大型後台系統、電子商務網站，Vuex 的集中式結構能大大提升可維護性與擴展性。</p>
<p>如欲進一步探索，建議查看 Vuex 官方文件、或試著實作一個待辦清單管理應用，實踐 Vuex 中的完整生命週期與流程。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>Vue</tag>
        <tag>Vue Router</tag>
      </tags>
  </entry>
  <entry>
    <title>React 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/01/learning-notes-w3schools-react-basic-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在當代的前端開發中，React 是最具代表性的 JavaScript 函式庫之一。由 Facebook 軟體工程師 Jordan Walke 所開發，React 被廣泛應用於建構動態使用者介面，尤其適用於大型單頁應用（SPA, Single Page Application）。本篇文章將帶你認識 React 的核心概念、其背後的工作原理、使用前的基礎知識與發展歷史，並透過實例進行初步實作。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ol>
<li><p><strong>什麼是 React？</strong></p>
<ul>
<li>React 是一個前端 JavaScript 函式庫，用來建構使用者介面（UI）。</li>
<li>React 的別稱包括 React.js 與 ReactJS。</li>
<li>它專注於「元件化思維」，每個 UI 元素都被視為一個可重複使用的元件（Component）。</li>
</ul>
</li>
<li><p><strong>React 如何運作？</strong></p>
<ul>
<li>React 在記憶體中建立一個「虛擬 DOM」（Virtual DOM）。</li>
<li>所有 DOM 操作會先發生在虛擬 DOM 中，再批次更新實體 DOM。</li>
<li>這樣的差異化更新策略可提升效能，只變更必要的部分。</li>
</ul>
</li>
<li><p><strong>React 的優勢</strong></p>
<ul>
<li>高效能：避免不必要的 DOM 操作。</li>
<li>組件化：提升程式碼的重用性與可維護性。</li>
<li>單向資料流：資料流動清晰易懂。</li>
<li>強大社群與生態圈：大量開源資源與工具支援。</li>
</ul>
</li>
<li><p><strong>使用 React 前的必要基礎</strong></p>
<ul>
<li>熟悉 HTML 結構與語意標記。</li>
<li>理解 CSS 排版與樣式應用。</li>
<li>掌握 JavaScript 基本語法與函數觀念（如 ES6 語法、變數宣告、陣列方法等）。</li>
</ul>
</li>
<li><p><strong>React 的發展歷程</strong></p>
<ul>
<li>2011 年：React 首次應用於 Facebook 的新聞動態功能（Newsfeed）。</li>
<li>2013 年 7 月：React 對外發布首個公開版本 0.3.0。</li>
<li>2024 年 12 月：React 最新穩定版本為 19.0.0。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>以下是一個簡單的 React 程式碼範例，展示如何建立與渲染一個元件。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 React 與 ReactDOM 函式庫</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立一個簡單的元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，React 世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的 DOM 節點中渲染該元件</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="解說："><a href="#解說：" class="headerlink" title="解說："></a>解說：</h3><ol>
<li><code>import React from &#39;react&#39;;</code> 是使用 React 所必須的匯入語句。</li>
<li><code>Welcome</code> 是一個函數式元件（Functional Component），回傳的是 JSX 語法。</li>
<li><code>ReactDOM.createRoot</code> 創建一個 root 對象，負責將元件掛載至網頁的 <code>#root</code> DOM 節點。</li>
<li><code>root.render(&lt;Welcome /&gt;)</code> 是將我們的元件渲染到網頁中。</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 是一個現代網頁開發的重要工具，特別適合構建具互動性與模組化結構的網頁。透過虛擬 DOM 技術，React 讓介面更新更有效率，並提供清晰的元件架構設計。對於有基本前端知識的開發者而言，React 是進階的最佳入門選擇之一。建議你在學習 React 前，先打好 HTML、CSS 與 JavaScript 的基礎，將能更順利掌握 React 的概念與應用。</p>
<p>接著我們將學習 React 的 JSX 語法、狀態管理（useState）、事件處理、生命週期（useEffect）等核心概念，逐步建立自己的 React 專案。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Components 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/05/learning-notes-w3schools-react-components-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個用於建立 UI 組件的 JavaScript 函式庫，而 JSX 則是 React 中的重要語法擴充。前一章我們已學會如何使用 JSX 編寫 React 介面，本文將進一步說明 React 元件（Components）的基本觀念與應用，並介紹如何透過函式元件（Function Components）與類別元件（Class Components）撰寫可重用的 UI 模組。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React 元件就像函式，會回傳 HTML 元素</li>
<li>元件是可獨立、可重複使用的程式區塊</li>
<li>React 元件主要有兩種類型：函式元件與類別元件</li>
<li>現代 React 建議使用函式元件搭配 Hooks</li>
<li>元件名稱需以大寫開頭</li>
<li>類別元件需繼承 React.Component 並實作 render 方法</li>
<li>函式元件語法簡潔，易於撰寫與理解</li>
</ul>
<h2 id="實例解說"><a href="#實例解說" class="headerlink" title="實例解說"></a>實例解說</h2><ol>
<li>建立類別元件<br>使用 <code>class</code> 關鍵字定義元件並繼承 <code>React.Component</code>，需實作 <code>render()</code> 方法，該方法需回傳一段 JSX：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hi, I am a Car!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>建立函式元件<br>使用 <code>function</code> 或箭頭函式定義元件，直接回傳 JSX 即可：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hi, I am a Car!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這是現代 React 中最推薦的元件撰寫方式，語法簡單且易於維護。</p>
<ol start="3">
<li>函式元件範例完整呈現<br>將元件渲染到頁面中：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hi, I am a Car!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>注意 <code>&lt;Car /&gt;</code> 是一個 JSX 自定義標籤，代表我們自訂的元件。</p>
<ol start="4">
<li>多個元件組合<br>可以將元件組合成更大的 UI 架構：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a Car!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Who lives in my Garage?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Car</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Garage</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>此例中 <code>Garage</code> 是父元件，包含了一個 <code>Car</code> 子元件。</p>
<ol start="5">
<li>使用 props 傳遞資料<br>元件可透過 props 接收參數以提高重用性：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Ford&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;BMW&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>類別元件使用 props</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;this.props.brand&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Toyota&quot;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>React 元件是建構 UI 的基本單位，具備獨立、可重複使用的特性。無論是使用函式或類別方式撰寫元件，只要掌握元件的命名規則與回傳 HTML 的模式，就能快速建立簡潔有彈性的前端介面。現代 React 開發已以函式元件為主，建議優先掌握函式元件的寫法並搭配後續的 Hook 技術使用。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React 條件渲染入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/08/learning-notes-w3schools-react-conditional-rendering-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個用於建立 UI 組件的 JavaScript 函式庫，而 JSX 則是 React 中的重要語法擴充。前一章我們已學會如何使用 JSX 編寫 React 介面，本文將進一步說明 React 元件（Components）、props 與事件（Events）的基本觀念與應用，並介紹如何透過函式元件建立互動性的使用者介面，進而引入條件渲染的方式，讓介面能根據資料狀態動態改變內容。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React 元件就像函式，會回傳 HTML 元素</li>
<li>元件是可獨立、可重複使用的程式區塊</li>
<li>元件名稱需以大寫開頭</li>
<li>props 是元件接收的參數，用來傳遞資料</li>
<li>props 是唯讀的，不能在元件內部直接修改</li>
<li>事件處理使用 camelCase 並以大括號包覆事件處理函式</li>
<li>可使用箭頭函式傳遞參數至事件處理器</li>
<li>可透過 if、三元運算子、邏輯運算子 <code>&amp;&amp;</code> 實現條件渲染</li>
</ul>
<h2 id="React-條件渲染"><a href="#React-條件渲染" class="headerlink" title="React 條件渲染"></a>React 條件渲染</h2><p>React 提供多種條件渲染的方式，以下為三種常見範例：</p>
<ul>
<li>使用 if 陳述式：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MadeGoal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Goal!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MissedGoal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>MISSED!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Goal</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isGoal = props.<span class="property">isGoal</span>;</span><br><span class="line">  <span class="keyword">if</span> (isGoal) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MadeGoal</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MissedGoal</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Goal</span> <span class="attr">isGoal</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>&amp;&amp;</code> 邏輯運算子：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cars = props.<span class="property">cars</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Garage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;cars.length &gt; 0 &amp;&amp; <span class="tag">&lt;<span class="name">h2</span>&gt;</span>You have &#123;cars.length&#125; cars in your garage.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cars = [<span class="string">&#x27;Ford&#x27;</span>, <span class="string">&#x27;BMW&#x27;</span>, <span class="string">&#x27;Audi&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Garage</span> <span class="attr">cars</span>=<span class="string">&#123;cars&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用三元運算子：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Goal</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isGoal = props.<span class="property">isGoal</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;isGoal ? <span class="tag">&lt;<span class="name">MadeGoal</span> /&gt;</span> : <span class="tag">&lt;<span class="name">MissedGoal</span> /&gt;</span>&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Goal</span> <span class="attr">isGoal</span>=<span class="string">&#123;false&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 元件是建構 UI 的基本單位，透過 props 傳遞資料與事件處理建立互動，並透過條件渲染控制顯示邏輯。這些基礎觀念為日後深入學習狀態管理、Hooks 與表單處理等主題奠定堅實基礎。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>在 React 中使用 Sass 進行樣式設計教學 | w3schools 學習筆記</title>
    <url>/2024/01/15/learning-notes-w3schools-react-css-sass-style-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在現代前端開發中，維護與管理 CSS 樣式是一項重要任務，尤其當應用程式日益龐大、元件複雜時，單純使用原生 CSS 經常會遇到樣式難以重用、命名衝突等問題。這時候，Sass（Syntactically Awesome Stylesheets）這類 CSS 預處理器便顯得格外實用。Sass 提供變數、巢狀語法、Mixin 等強大功能，有助於讓樣式更具模組化與可維護性。</p>
<p>本篇教學將說明如何在 React 專案中使用 Sass，從安裝、建立樣式檔案、到實際在元件中引用，手把手帶你完成設定。</p>
<hr>
<h3 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h3><ul>
<li><strong>Sass 是什麼</strong>：一種 CSS 預處理器，可在瀏覽器載入前編譯成標準 CSS。</li>
<li><strong>安裝方法</strong>：可透過 <code>npm i sass</code> 安裝 Sass 至 React 專案中。</li>
<li><strong>副檔名</strong>：Sass 檔案使用 <code>.scss</code> 副檔名。</li>
<li><strong>支援變數與函數</strong>：可使用 <code>$變數</code>、<code>@mixin</code> 等進階語法撰寫樣式。</li>
<li><strong>與 React 整合方式</strong>：與 CSS 類似，透過 <code>import &#39;./樣式.scss&#39;</code> 導入樣式。</li>
</ul>
<hr>
<h3 id="Sass-是什麼？"><a href="#Sass-是什麼？" class="headerlink" title="Sass 是什麼？"></a>Sass 是什麼？</h3><p>Sass（Syntactically Awesome Stylesheets）是一種 CSS 的擴充語法，稱為 CSS 預處理器（preprocessor）。Sass 檔案會在伺服器端進行編譯，轉換為標準的 CSS，然後再由瀏覽器載入。</p>
<p>與傳統 CSS 相比，Sass 提供多種程式化的功能，包括：</p>
<ul>
<li>變數（Variables）</li>
<li>巢狀語法（Nesting）</li>
<li>混合（Mixins）</li>
<li>繼承（Inheritance）</li>
</ul>
<p>這些功能可以大幅簡化樣式維護與邏輯。</p>
<hr>
<h3 id="如何在-React-中使用-Sass？"><a href="#如何在-React-中使用-Sass？" class="headerlink" title="如何在 React 中使用 Sass？"></a>如何在 React 中使用 Sass？</h3><p>若你使用 <code>vite</code> 建立專案，只需要簡單幾步即可在 React 中整合 Sass。</p>
<h4 id="安裝-Sass"><a href="#安裝-Sass" class="headerlink" title="安裝 Sass"></a>安裝 Sass</h4><p>打開終端機，並在 React 專案目錄中執行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i sass</span><br></pre></td></tr></table></figure>

<p>安裝完成後，即可開始在專案中撰寫與導入 <code>.scss</code> 檔案。</p>
<hr>
<h3 id="建立-Sass-檔案"><a href="#建立-Sass-檔案" class="headerlink" title="建立 Sass 檔案"></a>建立 Sass 檔案</h3><p>建立 <code>.scss</code> 檔案的方式與 CSS 相同，唯一差別是副檔名由 <code>.css</code> 改為 <code>.scss</code>。</p>
<p>假設建立一個名為 <code>my-sass.scss</code> 的檔案，其內容如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義一個變數</span></span><br><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用變數設定 h1 的文字顏色</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段 Sass 程式碼定義了一個 <code>$myColor</code> 的變數，並將其應用於 <code>h1</code> 標題文字的顏色。</p>
<hr>
<h3 id="在-React-元件中使用-Sass"><a href="#在-React-元件中使用-Sass" class="headerlink" title="在 React 元件中使用 Sass"></a>在 React 元件中使用 Sass</h3><p>要在 React 元件中使用 Sass，只需像導入 CSS 檔案一樣導入 <code>.scss</code> 檔案即可。</p>
<p>以下是一個完整範例：</p>
<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a><code>index.js</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./my-sass.scss&#x27;</span>; <span class="comment">// 導入 Sass 樣式檔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立一個簡單的元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Style!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a little style!.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 掛載元件到畫面上</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>只要這樣導入 Sass 檔案，該樣式就會自動被應用到對應的元素上，與原生 CSS 的使用方式幾乎一致。</p>
<hr>
<h3 id="延伸學習建議"><a href="#延伸學習建議" class="headerlink" title="延伸學習建議"></a>延伸學習建議</h3><p>若你對 Sass 有更進一步的興趣，建議深入學習以下主題：</p>
<ul>
<li>Sass Mixin 的建立與使用</li>
<li>巢狀規則與 BEM 命名法結合技巧</li>
<li>Sass 的分割與模組化導入（@import &#x2F; @use）</li>
<li>與 CSS Modules、Styled-components 等工具的比較與選擇</li>
</ul>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>Sass 為 CSS 帶來更多彈性與可維護性，是開發大型 React 應用時的重要利器。配合 <code>vite</code> 的簡單整合方式，即使是初學者也能快速上手。只需幾步就能建立出具備變數與結構邏輯的樣式系統，為專案帶來更清晰、可維護的樣式架構。</p>
<p>無論是個人 Side Project 或是商業應用，學會 Sass 的使用，將大大提升你在前端開發上的效率與品質。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
<li><a href="https://reactrouter.com/">React router 官方網站</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React 中使用 CSS 的三種方式教學 | w3schools 學習筆記</title>
    <url>/2024/01/14/learning-notes-w3schools-react-css-style-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發 React 應用程式時，樣式的管理與設計是一項不可忽視的重要部分。雖然 React 是一個 JavaScript 函式庫，主要用於建構使用者介面，但它本身並不限制開發者如何為元件加上樣式。React 提供多種整合 CSS 的方法，這篇文章將會深入介紹三種最常見的樣式處理方式：<strong>行內樣式（Inline Styling）</strong>、<strong>CSS 樣式表（Stylesheet）</strong>以及<strong>CSS 模組（CSS Modules）</strong>，並說明每種方式的使用情境與範例。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React 支援使用 JavaScript 對元件進行行內樣式設計。</li>
<li>傳統 CSS 樣式表可以與 React 搭配使用，只需匯入對應檔案。</li>
<li>使用 CSS Modules 可避免樣式名稱衝突，適用於大型專案。</li>
</ul>
<hr>
<h2 id="一、行內樣式（Inline-Styling）"><a href="#一、行內樣式（Inline-Styling）" class="headerlink" title="一、行內樣式（Inline Styling）"></a>一、行內樣式（Inline Styling）</h2><p>React 提供以 JavaScript 物件的方式設定行內樣式，這種方式最直接也最簡單，適合少量樣式或動態樣式情境。</p>
<h3 id="實作範例："><a href="#實作範例：" class="headerlink" title="實作範例："></a>實作範例：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>Hello Style!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a little style!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>**注意：**在 JSX 中，JavaScript 表達式必須寫在大括號 <code>&#123;&#125;</code> 內，而行內樣式本身是一個物件，因此需使用雙層大括號 <code>&#123;&#123;&#125;&#125;</code>。</p>
</blockquote>
<hr>
<h3 id="屬性名稱需使用-camelCase-命名方式"><a href="#屬性名稱需使用-camelCase-命名方式" class="headerlink" title="屬性名稱需使用 camelCase 命名方式"></a>屬性名稱需使用 camelCase 命名方式</h3><p>在 JavaScript 中無法使用帶有連字符（例如 <code>background-color</code>）的 CSS 屬性名稱，因此需轉換為 camelCase，例如：<code>backgroundColor</code>。</p>
<h3 id="實作範例：-1"><a href="#實作範例：-1" class="headerlink" title="實作範例："></a>實作範例：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> &#x27;<span class="attr">lightblue</span>&#x27; &#125;&#125;&gt;</span>Hello Style!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a little style!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用樣式物件來管理樣式"><a href="#使用樣式物件來管理樣式" class="headerlink" title="使用樣式物件來管理樣式"></a>使用樣式物件來管理樣式</h3><p>若樣式較多，可先定義一個樣式物件，再以變數形式傳入 <code>style</code> 屬性中。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> myStyle = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;DodgerBlue&#x27;</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="string">&#x27;10px&#x27;</span>,</span><br><span class="line">    <span class="attr">fontFamily</span>: <span class="string">&#x27;Sans-Serif&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;myStyle&#125;</span>&gt;</span>Hello Style!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a little style!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、CSS-樣式表（Stylesheet）"><a href="#二、CSS-樣式表（Stylesheet）" class="headerlink" title="二、CSS 樣式表（Stylesheet）"></a>二、CSS 樣式表（Stylesheet）</h2><p>若你偏好將樣式與程式邏輯分離，傳統的 CSS 樣式表仍然是實用的選擇。只需建立 <code>.css</code> 檔案並在元件或主程式中匯入即可。</p>
<h3 id="步驟一：建立-App-css-檔案"><a href="#步驟一：建立-App-css-檔案" class="headerlink" title="步驟一：建立 App.css 檔案"></a>步驟一：建立 <code>App.css</code> 檔案</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* App.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#282c34</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Sans-Serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>**提示：**檔案名稱可以自由命名，但副檔名需為 <code>.css</code>。</p>
</blockquote>
<h3 id="步驟二：匯入樣式表"><a href="#步驟二：匯入樣式表" class="headerlink" title="步驟二：匯入樣式表"></a>步驟二：匯入樣式表</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Style!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a little style!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>這種方式與傳統 HTML 開發流程相似，適合簡單專案或共用樣式的情境。</p>
<hr>
<h2 id="三、CSS-Modules"><a href="#三、CSS-Modules" class="headerlink" title="三、CSS Modules"></a>三、CSS Modules</h2><p>CSS Modules 是一種模組化的 CSS 寫法，每個 CSS 檔案的樣式只作用於匯入該檔案的元件，能有效避免樣式衝突，特別適合大型應用程式或多人協作的開發環境。</p>
<h3 id="步驟一：建立模組化樣式檔案"><a href="#步驟一：建立模組化樣式檔案" class="headerlink" title="步驟一：建立模組化樣式檔案"></a>步驟一：建立模組化樣式檔案</h3><p>建立一個名稱為 <code>my-style.module.css</code> 的 CSS 檔案：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* my-style.module.css */</span></span><br><span class="line"><span class="selector-class">.bigblue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: DodgerBlue;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Sans-Serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>**注意：**檔案名稱需符合 <code>*.module.css</code> 格式，才能啟用模組功能。</p>
</blockquote>
<h3 id="步驟二：在元件中匯入模組"><a href="#步驟二：在元件中匯入模組" class="headerlink" title="步驟二：在元件中匯入模組"></a>步驟二：在元件中匯入模組</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Car.js</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./my-style.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Car</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;styles.bigblue&#125;</span>&gt;</span>Hello Car!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Car</span>;</span><br></pre></td></tr></table></figure>

<h3 id="步驟三：匯入元件至主程式"><a href="#步驟三：匯入元件至主程式" class="headerlink" title="步驟三：匯入元件至主程式"></a>步驟三：匯入元件至主程式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Car</span> <span class="keyword">from</span> <span class="string">&#x27;./Car.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>透過這種方式，<code>.bigblue</code> 樣式只會應用於 <code>Car</code> 元件，其他元件不會受到影響。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 提供靈活的方式來處理樣式，你可以根據專案規模與開發需求選擇最適合的做法：</p>
<ul>
<li>小型元件或需動態切換樣式 → 行內樣式</li>
<li>簡單專案或共用樣式 → 外部樣式表</li>
<li>中大型專案或多人開發 → CSS Modules</li>
</ul>
<p>透過良好的樣式管理方式，不僅可以提升 UI 的一致性與可維護性，也讓你能更專注於元件的邏輯設計。</p>
<p>如果你正開始學習 React，建議從行內樣式入手，漸進式學習 CSS Modules，將有助於建立健全的開發習慣與架構。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
<li><a href="https://reactrouter.com/">React router 官方網站</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React 與 ES6 語法教學入門 | w3schools 學習筆記</title>
    <url>/2024/01/02/learning-notes-w3schools-react-es6-basic-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES6（ECMAScript 2015）是 JavaScript 的第六版，於 2015 年發布，為 JavaScript 帶來了重大語法革新。React 作為現今最受歡迎的前端框架和函式庫之一，其核心設計與語法極度依賴 ES6 的各項功能。因此，學習 React 前，理解 ES6 的語法特性將大幅提升開發效率與理解深度。</p>
<p>本文將說明 React 常用的 ES6 特性，並透過簡明範例幫助你掌握其實作方式。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p>ES6 是 ECMAScript 第六版，又稱 ECMAScript 2015。</p>
</li>
<li><p>React 使用大量 ES6 語法，包括：</p>
<ul>
<li>Class 類別</li>
<li>箭頭函式</li>
<li>let、const 變數宣告</li>
<li>陣列方法（如 .map）</li>
<li>解構（Destructuring）</li>
<li>模組系統（import&#x2F;export）</li>
<li>三元運算子（Ternary Operator）</li>
<li>展開運算子（Spread Operator）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="1-類別與繼承（Classes-amp-Inheritance）"><a href="#1-類別與繼承（Classes-amp-Inheritance）" class="headerlink" title="1. 類別與繼承（Classes &amp; Inheritance）"></a>1. 類別與繼承（Classes &amp; Inheritance）</h2><p>ES6 引入了 class 關鍵字來定義類別：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">present</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I have a &#x27;</span> + <span class="variable language_">this</span>.<span class="property">brand</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mycar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;Ford&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mycar.<span class="title function_">present</span>());</span><br></pre></td></tr></table></figure>

<p>繼承使用 <code>extends</code> 關鍵字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, model</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">present</span>() + <span class="string">&#x27;, it is a &#x27;</span> + <span class="variable language_">this</span>.<span class="property">model</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mycar = <span class="keyword">new</span> <span class="title class_">Model</span>(<span class="string">&#x27;Ford&#x27;</span>, <span class="string">&#x27;Mustang&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mycar.<span class="title function_">show</span>());</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-箭頭函式（Arrow-Functions）"><a href="#2-箭頭函式（Arrow-Functions）" class="headerlink" title="2. 箭頭函式（Arrow Functions）"></a>2. 箭頭函式（Arrow Functions）</h2><p>簡化函式的寫法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">hello</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name</span>) =&gt; <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-變數宣告（let、const、var）"><a href="#3-變數宣告（let、const、var）" class="headerlink" title="3. 變數宣告（let、const、var）"></a>3. 變數宣告（let、const、var）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 函式作用域</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">10</span>; <span class="comment">// 區塊作用域</span></span><br><span class="line"><span class="keyword">const</span> z = <span class="number">15</span>; <span class="comment">// 常數，不可重新指派</span></span><br></pre></td></tr></table></figure>

<p>const 宣告的是參考不可變：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">3</span>); <span class="comment">// 可以修改內容</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-陣列方法（Array-map）"><a href="#4-陣列方法（Array-map）" class="headerlink" title="4. 陣列方法（Array.map）"></a>4. 陣列方法（Array.map）</h2><p>在 React 中常用於渲染列表：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = fruits.<span class="title function_">map</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;fruit&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-解構賦值（Destructuring）"><a href="#5-解構賦值（Destructuring）" class="headerlink" title="5. 解構賦值（Destructuring）"></a>5. 解構賦值（Destructuring）</h2><p>解構陣列：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vehicles = [<span class="string">&#x27;mustang&#x27;</span>, <span class="string">&#x27;f-150&#x27;</span>, <span class="string">&#x27;expedition&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [car, , suv] = vehicles;</span><br></pre></td></tr></table></figure>

<p>解構函式回傳值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [a + b, a - b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [sum, diff] = <span class="title function_">calc</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-展開運算子（Spread-Operator）"><a href="#6-展開運算子（Spread-Operator）" class="headerlink" title="6. 展開運算子（Spread Operator）"></a>6. 展開運算子（Spread Operator）</h2><p>複製或合併陣列與物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> all = [...numbers1, ...numbers2];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> update = &#123; <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> updatedCar = &#123; ...car, ...update &#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-模組系統（Modules）"><a href="#7-模組系統（Modules）" class="headerlink" title="7. 模組系統（Modules）"></a>7. 模組系統（Modules）</h2><p><code>export</code> 和 <code>import</code> 用於模組化程式碼：</p>
<h3 id="命名匯出："><a href="#命名匯出：" class="headerlink" title="命名匯出："></a>命名匯出：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;Jesse&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">40</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age &#125; <span class="keyword">from</span> <span class="string">&#x27;./person.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="預設匯出："><a href="#預設匯出：" class="headerlink" title="預設匯出："></a>預設匯出：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// message.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">message</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> message;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> message <span class="keyword">from</span> <span class="string">&#x27;./message.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-三元運算子（Ternary-Operator）"><a href="#8-三元運算子（Ternary-Operator）" class="headerlink" title="8. 三元運算子（Ternary Operator）"></a>8. 三元運算子（Ternary Operator）</h2><p>條件判斷簡化語法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isAuth = <span class="literal">true</span>;</span><br><span class="line">isAuth ? <span class="title function_">renderApp</span>() : <span class="title function_">renderLogin</span>();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>ES6 為 JavaScript 帶來嶄新的語法與思維方式，也為 React 帶來強大的表達力與模組化能力。熟練掌握這些語法，將能讓你在開發 React 專案時更加順手、高效並撰寫出更具可維護性的程式碼。若你尚未熟悉這些語法，建議你從簡單的練習開始，搭配 React 實際開發經驗進行吸收與內化。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_es6.asp">React ES6</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Events 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/07/learning-notes-w3schools-react-events-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個用於建立 UI 組件的 JavaScript 函式庫，而 JSX 則是 React 中的重要語法擴充。前一章我們已學會如何使用 JSX 編寫 React 介面，本文將進一步說明 React 元件（Components）、props 與事件處理的基本觀念與應用，並介紹如何透過函式元件傳遞資料及觸發動作，建立更互動且靈活的 UI 架構。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React 元件就像函式，會回傳 HTML 元素</li>
<li>元件是可獨立、可重複使用的程式區塊</li>
<li>React 元件主要有兩種類型：函式元件與類別元件</li>
<li>元件名稱需以大寫開頭</li>
<li>props 是元件接收的參數，用來傳遞資料</li>
<li>props 是唯讀的，不能在元件內部直接修改</li>
<li>使用 props 可以讓元件更具重用性與彈性</li>
<li>React 事件與 HTML DOM 事件類似，但語法使用 camelCase</li>
<li>事件處理函式使用大括號包裹，支援箭頭函式與參數傳遞</li>
</ul>
<h2 id="實例解說"><a href="#實例解說" class="headerlink" title="實例解說"></a>實例解說</h2><ol>
<li>建立函式元件<br>使用 <code>function</code> 或箭頭函式定義元件，直接回傳 JSX 即可：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hi, I am a Car!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>將元件渲染到畫面<br>使用 ReactDOM 將元件掛載到 HTML 中的指定節點：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 props 傳遞資料<br>可透過 HTML 屬性語法向元件傳遞資料，資料將以物件形式傳入元件的參數 props：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Ford&quot;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>父子元件資料傳遞<br>父元件可透過 props 向子元件傳遞資料：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Who lives in my garage?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Ford&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Garage</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>傳遞變數與物件<br>可傳遞變數給 props：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> carName = <span class="string">&#x27;Ford&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&#123;carName&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可傳遞物件並在子元件中取用屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand.model&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> carInfo = &#123; <span class="attr">name</span>: <span class="string">&#x27;Ford&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;Mustang&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&#123;carInfo&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>類別元件使用 props<br>類別元件接收 props 的方式略有不同：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;this.props.brand&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Toyota&quot;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>React 事件處理<br>React 支援與 HTML 相同的事件（如 click、change、mouseover 等），但語法不同：</li>
</ol>
<ul>
<li>事件名稱使用 camelCase，如 onClick</li>
<li>事件處理函式使用大括號包裹</li>
</ul>
<p>基本範例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Football</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">shoot</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Great Shot!&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;shoot&#125;</span>&gt;</span>Take the shot!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Football</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>傳遞參數到事件處理函式<br>若要傳入參數，使用箭頭函式包裹：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Football</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">shoot</span> = (<span class="params">msg</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(msg);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> shoot(&#x27;Goal!&#x27;)&#125;&gt;Take the shot!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>取得事件物件<br>事件處理函式會自動接收事件物件，可用來取得事件類型、目標等資訊：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Football</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">shoot</span> = (<span class="params">msg, event</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(event.<span class="property">type</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(event)</span> =&gt;</span> shoot(&#x27;Goal!&#x27;, event)&#125;&gt;Take the shot!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 元件是建構 UI 的基本單位，透過 props 傳遞資料可以讓元件之間建立清晰的資料流，而透過事件處理則能讓使用者與介面產生互動。掌握元件、props 與事件的使用，將有助於建立模組化、互動性高且維護性良好的 React 應用程式。接下來可以進一步學習 state、hook 與生命週期等更進階的主題，打造更完整的前端應用。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React 表單入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/11/learning-notes-w3schools-react-form-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網頁開發中，表單（Forms）是使用者與網站互動最常見的方式之一。透過表單，我們可以讓使用者輸入資料、提交查詢、填寫訂單等。而在 React 中，表單不再只是簡單的 HTML 元素堆疊，而是成為受控元件（controlled components）的一部分，由 React 元件的 state 負責管理輸入值與提交行為。</p>
<p>本篇教學將帶你一步一步掌握如何在 React 中建立表單、處理輸入變更、提交資料，並涵蓋文字輸入框、多個欄位、Textarea 與 Select 的特殊處理方式，幫助你更靈活地控制資料流程與使用者體驗。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>在 React 中，表單輸入值由 component state 管理，稱為「受控元件」。</li>
<li>使用 <code>useState</code> hook 來追蹤每個欄位的變化。</li>
<li>使用 <code>onChange</code> 事件處理輸入值的即時更新。</li>
<li>使用 <code>onSubmit</code> 處理表單送出行為，並透過 <code>event.preventDefault()</code> 阻止預設重新整理頁面的行為。</li>
<li>多個欄位可透過 <code>name</code> 屬性與通用的 <code>handleChange</code> 事件處理函式管理。</li>
<li><code>textarea</code> 與 <code>select</code> 元素在 React 中透過 <code>value</code> 屬性控制初始與變更的值。</li>
</ul>
<hr>
<h2 id="實際範例與說明"><a href="#實際範例與說明" class="headerlink" title="實際範例與說明"></a>實際範例與說明</h2><h3 id="一、建立簡單表單"><a href="#一、建立簡單表單" class="headerlink" title="一、建立簡單表單"></a>一、建立簡單表單</h3><p>最基本的 React 表單可以像這樣寫：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Enter your name:</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>雖然這段程式碼可以運作，但在送出表單時會導致頁面刷新。這不是 React 推薦的處理方式。</p>
<hr>
<h3 id="二、控制輸入欄位（Controlled-Components）"><a href="#二、控制輸入欄位（Controlled-Components）" class="headerlink" title="二、控制輸入欄位（Controlled Components）"></a>二、控制輸入欄位（Controlled Components）</h3><p>我們希望讓 React 完全掌控輸入欄位的狀態，因此需透過 <code>useState</code> 控制值，並在 <code>onChange</code> 事件中更新：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Enter your name:</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="三、處理表單提交"><a href="#三、處理表單提交" class="headerlink" title="三、處理表單提交"></a>三、處理表單提交</h3><p>若想處理送出資料而非重新整理頁面，需使用 <code>onSubmit</code> 並加上 <code>preventDefault()</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`您輸入的名字是：<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Enter your name:</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="四、多個輸入欄位的管理"><a href="#四、多個輸入欄位的管理" class="headerlink" title="四、多個輸入欄位的管理"></a>四、多個輸入欄位的管理</h3><p>當表單中有多個欄位時，使用一個 <code>inputs</code> 物件來集中管理會更加方便：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputs, setInputs] = <span class="title function_">useState</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = event.<span class="property">target</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">const</span> value = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">setInputs</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> (&#123; ...values, [name]: value &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`使用者輸入資料：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(inputs)&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Enter your name:</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&#123;inputs.username</span> || &#x27;&#x27;&#125; <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Enter your age:</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&#123;inputs.age</span> || &#x27;&#x27;&#125; <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="五、Textarea-的處理方式"><a href="#五、Textarea-的處理方式" class="headerlink" title="五、Textarea 的處理方式"></a>五、Textarea 的處理方式</h3><p>在 HTML 中 <code>&lt;textarea&gt;</code> 的值寫在標籤中，但在 React 中，需改為用 <code>value</code> 屬性控制：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [textarea, setTextarea] = <span class="title function_">useState</span>(<span class="string">&#x27;這裡是預設文字&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTextarea</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;textarea&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="六、Select-下拉選單的處理方式"><a href="#六、Select-下拉選單的處理方式" class="headerlink" title="六、Select 下拉選單的處理方式"></a>六、Select 下拉選單的處理方式</h3><p>同樣地，<code>&lt;select&gt;</code> 元素的選擇值也應由 <code>value</code> 屬性控制：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [myCar, setMyCar] = <span class="title function_">useState</span>(<span class="string">&#x27;Volvo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setMyCar</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;myCar&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Ford&quot;</span>&gt;</span>Ford<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Fiat&quot;</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 提供一種結構化且一致的方式來處理表單資料，透過 Hook 與事件處理，可以讓應用程式中的資料流更容易掌控與維護。只要掌握好 <code>useState</code>、<code>onChange</code>、<code>onSubmit</code> 等基本技巧，就能在 React 中打造功能完整且具有互動性的表單介面，提升整體使用者體驗與應用穩定性。未來若進一步搭配表單驗證函式庫（如 Formik 或 React Hook Form），可以更加有效率地管理大型與複雜表單邏輯。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Custom Hooks 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/23/learning-notes-w3schools-react-hooks-custom-hooks-basic-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 React 應用程式中，隨著功能的增加與維護需求的提升，我們常常會遇到多個元件需要共享相同邏輯的情況。為了避免重複撰寫相似程式碼、增加維護成本，React 提供了一個優雅的解法：<strong>自訂 Hook（Custom Hook）</strong>。</p>
<p>自 React 16.8 版本開始，我們能使用 Hook 來管理狀態與副作用，而自訂 Hook 則是讓我們可以把邏輯封裝起來，像一般函式一樣在多個元件中重複使用。這篇文章將介紹如何從實際範例中將撰寫資料抓取的邏輯封裝成一個 Custom Hook，並展示其應用方式。</p>
<hr>
<h3 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h3><ul>
<li>React Hook 是一種能在函式元件中使用的功能，讓你能使用狀態（state）與其他 React 功能。</li>
<li><strong>Custom Hook 是自訂的 Hook 函式</strong>，其命名必須以 <code>use</code> 開頭（例如：<code>useFetch</code>）。</li>
<li>Custom Hook 讓我們可以<strong>封裝與重複使用邏輯</strong>，而不重複撰寫相同的程式碼。</li>
<li>可透過傳入參數來讓 Hook 更具彈性與重用性。</li>
<li>可將如資料抓取（fetching）、表單邏輯、事件監聽等邏輯封裝成 Custom Hook。</li>
</ul>
<hr>
<h3 id="實作範例"><a href="#實作範例" class="headerlink" title="實作範例"></a>實作範例</h3><h4 id="初始範例：在元件中撰寫抓取邏輯"><a href="#初始範例：在元件中撰寫抓取邏輯" class="headerlink" title="初始範例：在元件中撰寫抓取邏輯"></a>初始範例：在元件中撰寫抓取邏輯</h4><p>以下是一個簡單的 React 元件 <code>Home</code>，它在載入時從 JSONPlaceholder 抓取待辦事項（todo）資料，並顯示在頁面上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">setData</span>(data));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data &amp;&amp;</span></span><br><span class="line"><span class="language-xml">        data.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>這段程式碼可以正常運作，但若我們之後在其他元件中也需要類似的資料抓取功能，就會發現邏輯無法重用，這時就是 Custom Hook 派上用場的時候。</p>
<hr>
<h4 id="抽出邏輯：撰寫-Custom-Hook"><a href="#抽出邏輯：撰寫-Custom-Hook" class="headerlink" title="抽出邏輯：撰寫 Custom Hook"></a>抽出邏輯：撰寫 Custom Hook</h4><p>我們可以將 <code>fetch</code> 的邏輯抽出成一個名為 <code>useFetch</code> 的自訂 Hook，放在 <code>useFetch.js</code> 檔案中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useFetch.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useFetch</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">setData</span>(data));</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [data];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useFetch;</span><br></pre></td></tr></table></figure>

<p>這個 Hook 會接收一個 URL 作為參數，並返回從該 URL 抓取到的資料。</p>
<hr>
<h4 id="使用-Custom-Hook-的元件"><a href="#使用-Custom-Hook-的元件" class="headerlink" title="使用 Custom Hook 的元件"></a>使用 Custom Hook 的元件</h4><p>有了 <code>useFetch</code> 之後，我們就可以在 <code>Home</code> 元件中直接使用這個 Hook，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useFetch <span class="keyword">from</span> <span class="string">&#x27;./useFetch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data] = <span class="title function_">useFetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data &amp;&amp;</span></span><br><span class="line"><span class="language-xml">        data.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="說明與分析"><a href="#說明與分析" class="headerlink" title="說明與分析"></a>說明與分析</h3><p>這個自訂 Hook 的設計有以下幾個特點：</p>
<ol>
<li><strong>命名規則</strong>：遵守 React 規範，Hook 函式以 <code>use</code> 開頭（此例為 <code>useFetch</code>），才能被 React 正確識別為 Hook。</li>
<li><strong>封裝邏輯</strong>：將 <code>useState</code> 和 <code>useEffect</code> 的邏輯封裝在 <code>useFetch</code> 中，不再重複撰寫於元件內。</li>
<li><strong>提高重用性</strong>：只要傳入不同的 URL，就能從其他 API 抓取資料，使用方式彈性且簡潔。</li>
<li><strong>維護簡便</strong>：若日後需要修改資料抓取的邏輯，只需在 <code>useFetch.js</code> 中調整一次，即可影響所有使用該 Hook 的元件。</li>
</ol>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>自訂 Hook 是 React 開發中非常實用的工具，讓我們能夠撰寫模組化、可重複使用且容易維護的邏輯。當你在多個元件中發現重複的邏輯（如資料抓取、訂閱事件、表單處理等），就可以考慮將其封裝成一個 Custom Hook，提升程式碼品質與開發效率。</p>
<p>透過本文介紹的 <code>useFetch</code> 範例，你應該能夠掌握如何將常見的副作用邏輯抽離為一個可重用的 Hook，也歡迎在實務中嘗試建立更多適合自己應用場景的自訂 Hook。</p>
<hr>
<p>如果你想了解更多關於資料抓取的技術細節，可以進一步學習 <strong>JavaScript Fetch API</strong> 的用法，並搭配錯誤處理（如 <code>.catch()</code>）與 loading 狀態等進行擴充。這將使你的 Custom Hook 更加完善。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/16/learning-notes-w3schools-react-hooks-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hooks 是在 React 16.8 版本中加入的新功能。Hooks 讓你可以在「函式元件（function components）」中使用狀態（state）以及其他 React 功能。因此，自從有了 Hooks 之後，<strong>類別元件（class components）通常就不再是必要的了</strong>。</p>
<p>儘管 Hooks 幾乎取代了類別元件的使用方式，但 React 團隊目前<strong>並沒有打算移除 class 元件</strong>的支援。</p>
<hr>
<h3 id="什麼是-Hook？"><a href="#什麼是-Hook？" class="headerlink" title="什麼是 Hook？"></a>什麼是 Hook？</h3><p>Hooks 讓我們能夠「掛勾（hook into）」React 的核心功能，例如 <strong>狀態管理（state）</strong> 和 <strong>生命週期方法（lifecycle methods）</strong>。</p>
<hr>
<h3 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FavoriteColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我最喜歡的顏色是 &#123;color&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setColor(&#x27;blue&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        藍色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setColor(&#x27;red&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        紅色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setColor(&#x27;pink&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        粉紅色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setColor(&#x27;green&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        綠色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">FavoriteColor</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>在這個範例中，我們透過 <code>useState</code> 這個 Hook 來追蹤應用程式的狀態。</p>
<blockquote>
<p><strong>狀態（State）</strong>：泛指那些會隨著使用者互動或應用邏輯而改變的資料或屬性。</p>
</blockquote>
<p>此外，<strong>使用 Hook 前必須先從 <code>react</code> 模組中引入對應的函式</strong>，例如這裡的 <code>useState</code>。</p>
<hr>
<h3 id="使用-Hook-的三大規則"><a href="#使用-Hook-的三大規則" class="headerlink" title="使用 Hook 的三大規則"></a>使用 Hook 的三大規則</h3><ol>
<li><strong>只能在 React 的函式元件中呼叫 Hooks</strong></li>
<li><strong>只能在元件的最上層（Top-level）呼叫</strong>，不能寫在 <code>if</code>、<code>for</code>、<code>函式</code>中等區塊內</li>
<li><strong>不能有條件式地呼叫 Hook</strong>（例如不能寫在 <code>if</code> 判斷中）</li>
</ol>
<blockquote>
<p>注意：Hooks <strong>無法</strong>在 class 類別元件中使用！</p>
</blockquote>
<hr>
<h3 id="自訂-Hook（Custom-Hooks）"><a href="#自訂-Hook（Custom-Hooks）" class="headerlink" title="自訂 Hook（Custom Hooks）"></a>自訂 Hook（Custom Hooks）</h3><p>如果你有一些包含狀態的邏輯（stateful logic），需要在多個元件之間重複使用，這時可以考慮<strong>封裝成自訂 Hook</strong>，以提升可讀性與重用性。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useCallback 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/21/learning-notes-w3schools-react-hooks-usecallback-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 中，每次元件重新渲染時，元件內部定義的函式也會被重新建立。這會導致某些子元件即使其 <code>props</code> 沒有變動，卻仍然會被重新渲染，造成效能浪費。<code>useCallback</code> Hook 是 React 提供的工具，用來記憶（memoize）函式的參考，以避免不必要的重新渲染。它的使用情境與 <code>useMemo</code> 類似，不同之處在於：<code>useMemo</code> 記憶的是「值」，而 <code>useCallback</code> 記憶的是「函式」。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><code>useCallback</code> 是 React 提供的 Hook，可回傳一個<strong>記憶化的函式</strong>。</li>
<li>記憶化的概念就像是快取（caching），只在依賴值變更時才重新建立函式。</li>
<li><code>useCallback</code> 可改善效能，避免函式在每次重新渲染時被重新定義。</li>
<li>常與 <code>React.memo</code> 搭配使用，防止不必要的子元件重新渲染。</li>
<li>與 <code>useMemo</code> 類似，但 <code>useMemo</code> 回傳的是「值」，<code>useCallback</code> 回傳的是「函式」。</li>
<li>若函式沒有依賴到外部變數，也可以將依賴陣列設為空陣列（<code>[]</code>），表示永遠不重新建立。</li>
</ul>
<hr>
<h2 id="問題說明：為何子元件會重渲染？"><a href="#問題說明：為何子元件會重渲染？" class="headerlink" title="問題說明：為何子元件會重渲染？"></a>問題說明：為何子元件會重渲染？</h2><p>在下列範例中，即使 <code>todos</code> 陣列沒有變動，點擊 <code>+</code> 按鈕後，子元件 <code>Todos</code> 仍會重新渲染：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Todos</span> <span class="keyword">from</span> <span class="string">&#x27;./Todos&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> [...t, <span class="string">&#x27;New Todo&#x27;</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Todos</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">addTodo</span>=<span class="string">&#123;addTodo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Todos.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Todos</span> = (<span class="params">&#123; todos, addTodo &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child render&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.map((todo, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodo&#125;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Todos</span>);</span><br></pre></td></tr></table></figure>

<p>上述例子中，我們使用了 <code>React.memo</code> 包裹 <code>Todos</code> 元件，理論上當 <code>todos</code> 不變時，它不該重新渲染。然而，當你點擊「+」按鈕後 <code>Todos</code> 仍然會重渲染，原因在於：</p>
<h3 id="參考相等性（Referential-Equality）"><a href="#參考相等性（Referential-Equality）" class="headerlink" title="參考相等性（Referential Equality）"></a><strong>參考相等性（Referential Equality）</strong></h3><p>每次 <code>App</code> 元件重新渲染時，<code>addTodo</code> 函式都會重新建立，導致其記憶位置不同。雖然 <code>Todos</code> 的 <code>props.todos</code> 沒變，但 <code>props.addTodo</code> 是一個新的函式，因此 <code>React.memo</code> 偵測到 <code>props</code> 有變動，就會導致子元件重新渲染。</p>
<hr>
<h2 id="解法：使用-useCallback-記憶函式"><a href="#解法：使用-useCallback-記憶函式" class="headerlink" title="解法：使用 useCallback 記憶函式"></a>解法：使用 useCallback 記憶函式</h2><p>為了解決上述問題，可以使用 <code>useCallback</code> 記憶 <code>addTodo</code> 函式，讓它只在 <code>todos</code> 改變時才重新定義：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Todos</span> <span class="keyword">from</span> <span class="string">&#x27;./Todos&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addTodo = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> [...t, <span class="string">&#x27;New Todo&#x27;</span>]);</span><br><span class="line">  &#125;, [todos]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Todos</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">addTodo</span>=<span class="string">&#123;addTodo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>此時，當點擊 <code>+</code> 按鈕時，<code>addTodo</code> 函式不再被重新建立，因此 <code>Todos</code> 元件也不會被不必要地重新渲染。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li><code>useCallback</code> 是優化 React 應用效能的重要工具，尤其是在元件傳遞函式給子元件時。</li>
<li>若你搭配 <code>React.memo</code> 使用，請務必搭配 <code>useCallback</code>，以避免函式參考不一致而導致的重渲染。</li>
<li>不過也不要過度使用 <code>useCallback</code>，因為它本身也有效能成本，應該根據實際需求與效能瓶頸來使用。</li>
</ul>
<p>在實務中，對於常被重複渲染、或複雜邏輯包裝的子元件來說，<code>useCallback</code> 能有效避免不必要的重新渲染，是撰寫高效 React 應用程式時不可忽視的工具。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useContext 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/18/learning-notes-w3schools-react-hooks-usecontext-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 應用程式中，當需要在多個巢狀元件之間共享資料時，傳遞 <code>props</code> 是最基本的做法。但當元件層級變深，這樣的資料傳遞會變得繁瑣且難以維護，這種情況被稱為「props drilling」。為了解決這個問題，React 提供了 Context API，搭配 <code>useContext</code> Hook 可以讓你在不需要一層層傳遞 <code>props</code> 的情況下，輕鬆地在深層元件中讀取共享的狀態。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React Context 是一種全域狀態管理的工具。</li>
<li>可以搭配 <code>useState</code> 使用，實現跨元件樹狀結構的資料共享。</li>
<li>「prop drilling」是指一層層傳遞 <code>props</code>，容易造成程式碼混亂。</li>
<li>使用 Context 包裝需要共享資料的元件樹，可避免不必要的傳遞。</li>
<li><code>useContext</code> Hook 用於在任意元件中讀取指定 Context 的值。</li>
</ul>
<hr>
<h2 id="問題背景與傳統寫法"><a href="#問題背景與傳統寫法" class="headerlink" title="問題背景與傳統寫法"></a>問題背景與傳統寫法</h2><p>假設我們有一個使用者名稱 <code>user</code> 的狀態，我們希望在最上層的元件設定這個狀態，並在最底層的第 5 個元件中使用它。傳統的做法會是逐層傳遞：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="string">&#x27;Jesse Hall&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Hello $&#123;user&#125;!`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component2</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component2</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component3</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component3</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component4</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component4</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component5</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component5</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;`Hello $&#123;user&#125; again!`&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Component1</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>雖然只有第 1 和第 5 個元件需要這個資料，但第 2 到第 4 個元件也被迫傳遞 <code>props</code>，造成不必要的耦合。</p>
<hr>
<h2 id="解決方案：使用-React-Context-與-useContext-Hook"><a href="#解決方案：使用-React-Context-與-useContext-Hook" class="headerlink" title="解決方案：使用 React Context 與 useContext Hook"></a>解決方案：使用 React Context 與 useContext Hook</h2><h3 id="步驟一：建立-Context"><a href="#步驟一：建立-Context" class="headerlink" title="步驟一：建立 Context"></a>步驟一：建立 Context</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserContext</span> = <span class="title function_">createContext</span>();</span><br></pre></td></tr></table></figure>

<p>這段程式碼建立了一個新的 Context，用來傳遞 <code>user</code> 的狀態。</p>
<hr>
<h3 id="步驟二：使用-Provider-包住需要資料的元件樹"><a href="#步驟二：使用-Provider-包住需要資料的元件樹" class="headerlink" title="步驟二：使用 Provider 包住需要資料的元件樹"></a>步驟二：使用 Provider 包住需要資料的元件樹</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="string">&#x27;Jesse Hall&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">UserContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Hello $&#123;user&#125;!`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">UserContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserContext.Provider</code> 負責提供資料給子元件。所有被包住的子元件都能透過 <code>useContext</code> 取得 <code>user</code> 的值。</p>
<hr>
<h3 id="步驟三：在需要的元件中使用-useContext-取得資料"><a href="#步驟三：在需要的元件中使用-useContext-取得資料" class="headerlink" title="步驟三：在需要的元件中使用 useContext 取得資料"></a>步驟三：在需要的元件中使用 useContext 取得資料</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">UserContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;`Hello $&#123;user&#125; again!`&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需一行即可取得 Context 的值，避免層層傳遞 <code>props</code>。</p>
<hr>
<h2 id="完整範例程式碼"><a href="#完整範例程式碼" class="headerlink" title="完整範例程式碼"></a>完整範例程式碼</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="string">&#x27;Jesse Hall&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">UserContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;user&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Hello $&#123;user&#125;!`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">UserContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component3</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component4</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component5</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">UserContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Component 5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;`Hello $&#123;user&#125; again!`&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Component1</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>透過 <code>useContext</code> Hook 搭配 Context API，你可以有效管理全域或區域性的狀態，避免繁瑣的 <code>props</code> 傳遞，讓元件間的溝通更加清晰與高效。這種模式特別適用於需要在多個巢狀元件中共享資料的情境，例如主題切換、登入狀態管理、使用者資料等。</p>
<p>熟練掌握 React Context 與 <code>useContext</code>，將大幅提升你在開發大型 React 應用的能力與維護性。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useEffect 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/18/learning-notes-w3schools-react-hooks-useeffect-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 React 函式型元件中，<code>useEffect</code> 是一個強大且常用的 Hook，用來處理副作用（side effects）。副作用指的是那些不直接涉及元件渲染的操作，例如：發送 API 請求、操作 DOM、設定或清除計時器等。</p>
<p>傳統上，這些操作會在 <code>componentDidMount</code>、<code>componentDidUpdate</code> 或 <code>componentWillUnmount</code> 等生命週期函式中進行，而在函式元件中，<code>useEffect</code> 正是用來統一處理這些行為。</p>
<hr>
<h3 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h3><ul>
<li><code>useEffect</code> 可以執行副作用操作，例如：抓取資料、設定計時器、監聽事件。</li>
<li>語法格式：<code>useEffect(函式, 依賴陣列)</code></li>
<li>不提供第二個參數時，<code>useEffect</code> 每次重新渲染都會執行。</li>
<li>傳入空陣列作為第二個參數，則只會在元件初次渲染時執行一次。</li>
<li>若依賴陣列中包含特定的 state 或 props，只要它們改變，副作用就會重新執行。</li>
<li>可以在 <code>useEffect</code> 裡透過回傳一個函式進行資源清除（cleanup），避免記憶體洩漏。</li>
</ul>
<hr>
<h3 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h3><h4 id="範例一：沒有依賴陣列，導致每次渲染都執行"><a href="#範例一：沒有依賴陣列，導致每次渲染都執行" class="headerlink" title="範例一：沒有依賴陣列，導致每次渲染都執行"></a>範例一：沒有依賴陣列，導致每次渲染都執行</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I&#x27;ve rendered &#123;count&#125; times!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p><strong>問題說明：</strong></p>
<ul>
<li>每次渲染都會重新執行 <code>useEffect</code>，導致 <code>setTimeout</code> 一直重複，數字不斷累加，非預期行為。</li>
</ul>
<hr>
<h4 id="範例二：使用空陣列作為依賴，只執行一次"><a href="#範例二：使用空陣列作為依賴，只執行一次" class="headerlink" title="範例二：使用空陣列作為依賴，只執行一次"></a>範例二：使用空陣列作為依賴，只執行一次</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, []); <span class="comment">// 加上空陣列，只在初始渲染時執行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I&#x27;ve rendered &#123;count&#125; times!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p><strong>重點：</strong></p>
<ul>
<li>空陣列表示沒有任何依賴，因此只會在元件掛載時執行一次副作用。</li>
</ul>
<hr>
<h4 id="範例三：有依賴變數，根據-count-改變而重新執行"><a href="#範例三：有依賴變數，根據-count-改變而重新執行" class="headerlink" title="範例三：有依賴變數，根據 count 改變而重新執行"></a>範例三：有依賴變數，根據 count 改變而重新執行</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [calculation, setCalculation] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCalculation</span>(<span class="function">() =&gt;</span> count * <span class="number">2</span>);</span><br><span class="line">  &#125;, [count]); <span class="comment">// 每次 count 改變就重新計算</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount((c) =&gt; c + 1)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Calculation: &#123;calculation&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p><strong>重點：</strong></p>
<ul>
<li>依賴陣列中包含 <code>count</code>，因此只要 <code>count</code> 改變，<code>useEffect</code> 就會重新執行，計算新的值。</li>
</ul>
<hr>
<h3 id="副作用的清除（Effect-Cleanup）"><a href="#副作用的清除（Effect-Cleanup）" class="headerlink" title="副作用的清除（Effect Cleanup）"></a>副作用的清除（Effect Cleanup）</h3><p>某些副作用，如計時器、訂閱、事件監聽器等，當元件卸載或依賴改變時，應該清除，否則可能會導致記憶體洩漏或非預期行為。</p>
<p>在 <code>useEffect</code> 中可以回傳一個函式，用來執行清除動作。</p>
<h4 id="範例四：清除計時器"><a href="#範例四：清除計時器" class="headerlink" title="範例四：清除計時器"></a>範例四：清除計時器</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timer); <span class="comment">// 清除 timeout</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I&#x27;ve rendered &#123;count&#125; times!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p><strong>說明：</strong></p>
<ul>
<li><code>setTimeout</code> 被命名為 <code>timer</code>，在 <code>useEffect</code> 的清除函式中使用 <code>clearTimeout(timer)</code> 移除它，避免重複執行。</li>
</ul>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>React 的 <code>useEffect</code> 是處理副作用的主要工具。理解它的運作邏輯、依賴機制與清除策略，能幫助開發者更有效率地控制元件的生命周期與效能。</p>
<p><strong>使用建議：</strong></p>
<ul>
<li>若副作用只需在元件初次渲染執行，請傳入空陣列。</li>
<li>若需要根據變數變動執行副作用，將其加入依賴陣列中。</li>
<li>若副作用產生了外部資源（如計時器、訂閱等），務必記得清除。</li>
</ul>
<p>掌握這些原則後，就能更靈活並安全地使用 <code>useEffect</code>，打造高效穩定的 React 應用。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useMemo 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/22/learning-notes-w3schools-react-hooks-usememo-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 的開發中，我們常會遇到一些運算成本高昂（expensive）的函式，例如複雜的計算或操作大量資料。如果這些運算每次重新渲染都會重新執行，可能會導致效能低落，甚至造成使用者界面的卡頓或延遲。此時，我們可以使用 React 的 <code>useMemo</code> Hook，透過「記憶化」（memoization）技術，避免不必要的重新計算，從而提升效能。</p>
<p>本文將說明 <code>useMemo</code> 的用途、使用時機，並透過實際範例展示其效能優化的實際效果。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><code>useMemo</code> 是 React 提供的 Hook，用來「記憶化」一個計算結果，僅在依賴（dependencies）變動時才重新計算。</p>
</li>
<li><p>它的語法為：<code>useMemo(() =&gt; &#123; return value &#125;, [dependencies])</code></p>
</li>
<li><p><code>useMemo</code> 適合用在：</p>
<ul>
<li>資源密集的計算</li>
<li>必須避免重複執行的運算</li>
</ul>
</li>
<li><p><code>useMemo</code> 與 <code>useCallback</code> 類似，但：</p>
<ul>
<li><code>useMemo</code> 回傳的是 <strong>記憶化的值</strong></li>
<li><code>useCallback</code> 回傳的是 <strong>記憶化的函式</strong></li>
</ul>
</li>
<li><p>搭配依賴陣列使用，確保只在必要時重新計算</p>
</li>
</ul>
<hr>
<h2 id="範例一：未使用-useMemo，效能不佳"><a href="#範例一：未使用-useMemo，效能不佳" class="headerlink" title="範例一：未使用 useMemo，效能不佳"></a>範例一：未使用 useMemo，效能不佳</h2><p>以下是一個基本範例，展示若每次重新渲染都執行一次昂貴的計算函式 <code>expensiveCalculation</code>，會造成延遲的情形：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> calculation = <span class="title function_">expensiveCalculation</span>(count); <span class="comment">// 每次 render 都執行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> [...t, <span class="string">&#x27;New Todo&#x27;</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todos.map((todo, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodo&#125;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Expensive Calculation<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;calculation&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">expensiveCalculation</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Calculating...&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="問題說明："><a href="#問題說明：" class="headerlink" title="問題說明："></a>問題說明：</h3><p>當我們只是點擊「Add Todo」按鈕，實際上並未更動 <code>count</code>，但昂貴的 <code>expensiveCalculation(count)</code> 卻仍然被重新執行，造成整體效能低落。</p>
<hr>
<h2 id="範例二：使用-useMemo-優化效能"><a href="#範例二：使用-useMemo-優化效能" class="headerlink" title="範例二：使用 useMemo 優化效能"></a>範例二：使用 useMemo 優化效能</h2><p>接下來我們使用 <code>useMemo</code> 來包裝昂貴的計算函式，使其僅在 <code>count</code> 變動時才重新執行：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> calculation = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">expensiveCalculation</span>(count), [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTodos</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> [...t, <span class="string">&#x27;New Todo&#x27;</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todos.map((todo, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodo&#125;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Expensive Calculation<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;calculation&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">expensiveCalculation</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Calculating...&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="優化結果："><a href="#優化結果：" class="headerlink" title="優化結果："></a>優化結果：</h3><ul>
<li>當你按下「Add Todo」時，不再觸發 <code>expensiveCalculation</code></li>
<li>僅當 <code>count</code> 變動時，才會重新執行昂貴的計算</li>
<li>大幅減少不必要的運算與效能浪費</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><code>useMemo</code> 是 React 提供用來優化效能的重要工具，尤其在面對昂貴計算或複雜資料處理時，能有效避免不必要的運算。雖然 <code>useMemo</code> 不該過度使用於簡單運算，但在大型應用中，對於效能的提升非常有幫助。</p>
<h3 id="使用時機建議："><a href="#使用時機建議：" class="headerlink" title="使用時機建議："></a>使用時機建議：</h3><ul>
<li>當某個函式或邏輯的執行成本高昂</li>
<li>該邏輯只需在某些依賴值變化時執行一次</li>
<li>搭配 <code>useMemo</code> 可減少重複運算、提升 UI 響應速度</li>
</ul>
<p>記得：不要為了使用而使用，只有在效能瓶頸或實際需求下，<code>useMemo</code> 才能發揮其最大效益。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useReducer 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/20/learning-notes-w3schools-react-hooks-usereducer-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 中，<code>useState</code> 是管理狀態的基礎 Hook，但當應用的狀態邏輯越來越複雜，像是涉及多個欄位更新、交叉依賴或分支邏輯，使用 <code>useState</code> 可能變得難以維護。這時，React 提供的 <code>useReducer</code> Hook 是一個更合適的選擇。</p>
<p><code>useReducer</code> 的概念與 Redux 類似，它讓你將狀態管理邏輯集中在一個 reducer 函式中，透過 <code>dispatch</code> 發送動作來更新狀態，使邏輯清晰、可維護性高，非常適合用於中型到大型的應用。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><code>useReducer</code> 與 <code>useState</code> 類似，但更適合處理複雜邏輯或多狀態管理。</p>
</li>
<li><p>語法格式為：<code>const [state, dispatch] = useReducer(reducer, initialState)</code></p>
</li>
<li><p><code>reducer</code> 是一個函式，根據傳入的 <code>action</code> 物件決定如何更新狀態。</p>
</li>
<li><p>所有狀態更新都透過 <code>dispatch(action)</code> 進行。</p>
</li>
<li><p>初始狀態 <code>initialState</code> 通常是物件或陣列。</p>
</li>
<li><p>適合用在：</p>
<ul>
<li>表單資料管理</li>
<li>Todo List 或清單類資料</li>
<li>複雜的元件邏輯</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實際範例：使用-useReducer-建立-Todo-狀態管理"><a href="#實際範例：使用-useReducer-建立-Todo-狀態管理" class="headerlink" title="實際範例：使用 useReducer 建立 Todo 狀態管理"></a>實際範例：使用 useReducer 建立 Todo 狀態管理</h2><p>以下範例展示如何透過 <code>useReducer</code> 管理一個 Todo List 的完成狀態切換邏輯。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始狀態：包含兩個代辦事項</span></span><br><span class="line"><span class="keyword">const</span> initialTodos = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Todo 1&#x27;</span>,</span><br><span class="line">    <span class="attr">complete</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Todo 2&#x27;</span>,</span><br><span class="line">    <span class="attr">complete</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer 函式：根據 action 決定如何更新狀態</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;COMPLETE&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (todo.<span class="property">id</span> === action.<span class="property">id</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; ...todo, <span class="attr">complete</span>: !todo.<span class="property">complete</span> &#125;; <span class="comment">// 切換完成狀態</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> todo;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state; <span class="comment">// 沒有匹配的 action 則回傳原狀態</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元件：顯示代辦事項清單</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Todos</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, dispatch] = <span class="title function_">useReducer</span>(reducer, initialTodos);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 處理 checkbox 切換</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleComplete</span> = (<span class="params">todo</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;COMPLETE&#x27;</span>, <span class="attr">id</span>: todo.<span class="property">id</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.map((todo) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;todo.complete&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> handleComplete(todo)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123;todo.title&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染應用</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Todos</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><ul>
<li><code>initialTodos</code> 是初始狀態，為一個陣列，包含代辦事項的 <code>id</code>、<code>title</code> 與 <code>complete</code> 狀態。</li>
<li><code>reducer</code> 是一個純函式，根據傳入的 <code>action</code> 型別（此處為 <code>&quot;COMPLETE&quot;</code>）來更新對應的 todo 狀態。</li>
<li><code>dispatch</code> 是用來觸發 <code>reducer</code> 的函式，只要呼叫 <code>dispatch(&#123; type: &quot;COMPLETE&quot;, id: todo.id &#125;)</code>，就會依據 <code>id</code> 切換該 todo 的完成狀態。</li>
</ul>
<hr>
<h2 id="延伸說明"><a href="#延伸說明" class="headerlink" title="延伸說明"></a>延伸說明</h2><p>上述範例僅實作了完成狀態的切換，但實務中 <code>useReducer</code> 更能發揮作用，因為你可以整合所有的 CRUD 操作邏輯於同一個 reducer 裡，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;ADD&quot;</span>:</span><br><span class="line">  <span class="keyword">return</span> [...state, newTodo];</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;DELETE&quot;</span>:</span><br><span class="line">  <span class="keyword">return</span> state.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== action.<span class="property">id</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;UPDATE&quot;</span>:</span><br><span class="line">  <span class="keyword">return</span> state.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> === action.<span class="property">id</span> ? &#123; ...todo, <span class="attr">title</span>: action.<span class="property">title</span> &#125; : todo);</span><br></pre></td></tr></table></figure>

<p>這樣一來，整個應用的狀態更新都統一由 <code>reducer</code> 管理，讓邏輯集中且更容易除錯與擴充。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><code>useReducer</code> 是 React 提供用來處理複雜狀態邏輯的重要工具。當你遇到以下情況時，建議考慮使用 <code>useReducer</code>：</p>
<ul>
<li>多個狀態變數需要統一處理</li>
<li>狀態轉換邏輯複雜且重複</li>
<li>想將狀態管理從元件中抽離以提升可讀性</li>
</ul>
<p>透過 <code>useReducer</code>，你可以實現更模組化、可維護的應用狀態邏輯，使開發效率更高、錯誤更少。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useRef 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/19/learning-notes-w3schools-react-hooks-useref-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 中，<code>useRef</code> 是一個非常實用的 Hook，它提供了一個方法來<strong>在元件重新渲染之間保留值</strong>。不同於 <code>useState</code>，當 <code>useRef</code> 的值改變時<strong>不會觸發元件重新渲染</strong>，這使它成為追蹤狀態變化、儲存 DOM 參考或避免不必要重新渲染的理想選擇。</p>
<p>本文將深入說明 <code>useRef</code> 的三種主要用途：</p>
<ol>
<li><strong>避免重新渲染的狀態儲存</strong></li>
<li><strong>直接操作 DOM 元素</strong></li>
<li><strong>追蹤先前的狀態值</strong></li>
</ol>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><code>useRef</code> 可用來在元件間保留值而不觸發重新渲染。</p>
</li>
<li><p>常用於：</p>
<ul>
<li>儲存不可變的值或變數</li>
<li>直接存取 DOM 元素（透過 <code>ref</code>）</li>
<li>記錄先前的狀態（例如輸入欄位的歷史值）</li>
</ul>
</li>
<li><p><code>useRef()</code> 回傳一個包含 <code>.current</code> 屬性的物件。</p>
</li>
<li><p>修改 <code>ref.current</code> 不會導致畫面重繪，因此對效能影響小。</p>
</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="範例-1：避免重新渲染的計數器"><a href="#範例-1：避免重新渲染的計數器" class="headerlink" title="範例 1：避免重新渲染的計數器"></a>範例 1：避免重新渲染的計數器</h3><p>使用 <code>useRef</code> 追蹤畫面渲染次數（如果用 <code>useState</code> 反而會導致無限循環）：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    count.<span class="property">current</span> = count.<span class="property">current</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Render Count: &#123;count.current&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="說明："><a href="#說明：" class="headerlink" title="說明："></a>說明：</h3><ul>
<li><code>useRef(0)</code> 初始化 <code>count.current</code> 為 0。</li>
<li>每次渲染後，<code>useEffect</code> 更新 <code>count.current</code>。</li>
<li>即使值變了，畫面不會重新渲染，這正是 <code>useRef</code> 的特性。</li>
</ul>
<hr>
<h3 id="範例-2：存取-DOM-元素"><a href="#範例-2：存取-DOM-元素" class="headerlink" title="範例 2：存取 DOM 元素"></a>範例 2：存取 DOM 元素</h3><p>在 React 中，大部分的 DOM 操作應交由框架管理，但在特定情況下，我們需要<strong>手動聚焦、選取或操作元素</strong>，這時 <code>useRef</code> 就派上用場。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputElement = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputElement.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputElement&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;focusInput&#125;</span>&gt;</span>Focus Input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="說明：-1"><a href="#說明：-1" class="headerlink" title="說明："></a>說明：</h3><ul>
<li>使用 <code>ref=&#123;inputElement&#125;</code> 將 input 元素指向 <code>useRef()</code> 的回傳值。</li>
<li>呼叫 <code>inputElement.current.focus()</code> 來讓輸入框聚焦。</li>
</ul>
<hr>
<h3 id="範例-3：追蹤先前的狀態值"><a href="#範例-3：追蹤先前的狀態值" class="headerlink" title="範例 3：追蹤先前的狀態值"></a>範例 3：追蹤先前的狀態值</h3><p>如果你想知道某個值在上一次渲染的狀態是什麼，可以使用 <code>useRef</code> 搭配 <code>useEffect</code> 來達成。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> previousInputValue = <span class="title function_">useRef</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    previousInputValue.<span class="property">current</span> = inputValue;</span><br><span class="line">  &#125;, [inputValue]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Current Value: &#123;inputValue&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Previous Value: &#123;previousInputValue.current&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h3 id="說明：-2"><a href="#說明：-2" class="headerlink" title="說明："></a>說明：</h3><ul>
<li><code>useRef</code> 儲存上一個 <code>inputValue</code>。</li>
<li>每次 <code>inputValue</code> 改變時，<code>useEffect</code> 都會更新 <code>previousInputValue.current</code>。</li>
<li>在畫面上同時顯示目前值與上一個值。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><code>useRef</code> 是 React 中一個簡單卻強大的工具，適用於以下情境：</p>
<ul>
<li><strong>維持不影響渲染的狀態資料</strong>（例如計數器、定時器 ID、外部資料等）</li>
<li><strong>直接操作 DOM 元素</strong>（例如設定焦點、自動滾動）</li>
<li><strong>追蹤先前的狀態值或變數</strong>（例如表單內容變化）</li>
</ul>
<p>理解並善用 <code>useRef</code> 可以幫助你更靈活地處理 React 元件中的各種非視覺狀態，讓應用程式更穩定、效能更佳。下次當你不需要觸發重新渲染時，請記得考慮使用 <code>useRef</code>！</p>
<hr>
<p>如果你需要我幫你將此內容轉換為 Markdown、部落格文章格式或簡報稿，也可以告訴我。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks useState 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/17/learning-notes-w3schools-react-hooks-usestate-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 函式元件中，<code>useState</code> 是最常用的 Hook 之一，能讓我們在無需使用 class 的情況下新增與管理元件的「狀態」（state）。狀態是指會隨著使用者互動或應用邏輯變化而更新的資料，例如：輸入框的內容、按鈕點擊次數、切換的主題顏色等。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><code>useState</code> 是 React 提供的 Hook，用來在函式型元件中儲存與更新狀態。</li>
<li>使用前需先從 <code>react</code> 匯入 <code>useState</code>。</li>
<li><code>useState(初始值)</code> 會回傳一個陣列，包含目前的狀態值與更新狀態的函式。</li>
<li>更新狀態請使用 <code>setXXX</code> 函式，<strong>不可直接修改狀態變數</strong>。</li>
<li>可以建立多個 <code>useState</code> 追蹤不同變數，也可使用一個物件整合多個欄位。</li>
<li>若要更新物件或陣列的部分內容，應使用展開運算子（spread operator）來保留其他值。</li>
</ul>
<hr>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><h3 id="1-匯入-useState"><a href="#1-匯入-useState" class="headerlink" title="1. 匯入 useState"></a>1. 匯入 <code>useState</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用時，請確認使用的是具名匯入（named import），<code>useState</code> 是 <code>react</code> 模組的一部分。</p>
<hr>
<h3 id="2-初始化狀態"><a href="#2-初始化狀態" class="headerlink" title="2. 初始化狀態"></a>2. 初始化狀態</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FavoriteColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>color</code> 是目前狀態值；<code>setColor</code> 是修改此狀態的函式；初始值設定為空字串。</p>
<hr>
<h3 id="3-讀取狀態並渲染"><a href="#3-讀取狀態並渲染" class="headerlink" title="3. 讀取狀態並渲染"></a>3. 讀取狀態並渲染</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FavoriteColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My favorite color is &#123;color&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此例中，畫面上會顯示 <code>My favorite color is red!</code>，透過 JSX 讀取狀態。</p>
<hr>
<h3 id="4-使用按鈕更新狀態"><a href="#4-使用按鈕更新狀態" class="headerlink" title="4. 使用按鈕更新狀態"></a>4. 使用按鈕更新狀態</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FavoriteColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My favorite color is &#123;color&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setColor(&#x27;blue&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Blue</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>點擊按鈕時，會透過 <code>setColor</code> 將 <code>color</code> 更新為 <code>&quot;blue&quot;</code>，畫面也會即時更新。</p>
<hr>
<h3 id="5-多個狀態變數"><a href="#5-多個狀態變數" class="headerlink" title="5. 多個狀態變數"></a>5. 多個狀態變數</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [brand, setBrand] = <span class="title function_">useState</span>(<span class="string">&#x27;Ford&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [model, setModel] = <span class="title function_">useState</span>(<span class="string">&#x27;Mustang&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [year, setYear] = <span class="title function_">useState</span>(<span class="string">&#x27;1964&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My &#123;brand&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        It is a &#123;color&#125; &#123;model&#125; from &#123;year&#125;.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這種方式使用多個 <code>useState</code> 管理多個欄位，彼此獨立。</p>
<hr>
<h3 id="6-使用物件作為單一狀態"><a href="#6-使用物件作為單一狀態" class="headerlink" title="6. 使用物件作為單一狀態"></a>6. 使用物件作為單一狀態</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [car, setCar] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span>,</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;Mustang&#x27;</span>,</span><br><span class="line">    <span class="attr">year</span>: <span class="string">&#x27;1964&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My &#123;car.brand&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        It is a &#123;car.color&#125; &#123;car.model&#125; from &#123;car.year&#125;.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以物件作為狀態，可集中管理多個欄位，也使程式碼更易維護。</p>
<hr>
<h3 id="7-更新物件中的單一欄位"><a href="#7-更新物件中的單一欄位" class="headerlink" title="7. 更新物件中的單一欄位"></a>7. 更新物件中的單一欄位</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [car, setCar] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span>,</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;Mustang&#x27;</span>,</span><br><span class="line">    <span class="attr">year</span>: <span class="string">&#x27;1964&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateColor</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCar</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...prevState, <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My &#123;car.brand&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        It is a &#123;car.color&#125; &#123;car.model&#125; from &#123;car.year&#125;.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;updateColor&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Blue</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡使用展開運算子（<code>...prevState</code>）來保留其他屬性，僅更新 <code>color</code>。若直接使用 <code>setCar(&#123; color: &quot;blue&quot; &#125;)</code>，會造成其他屬性遺失。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 的 <code>useState</code> 是建立互動式 UI 的基礎，能讓我們在函式型元件中管理狀態。透過這個 Hook，我們可以：</p>
<ul>
<li>初始化與讀取狀態值</li>
<li>透過更新函式改變狀態並重新渲染畫面</li>
<li>使用多個 <code>useState</code> 管理多個資料</li>
<li>或整合為一個物件並使用展開運算子更新部分欄位</li>
</ul>
<p>熟練掌握 <code>useState</code> 是學會 React 開發不可或缺的第一步。建議初學者透過實作各種小範例來加深理解與記憶。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React JSX 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/04/learning-notes-w3schools-react-jsx-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個用於建立 UI 元件的 JavaScript 函式庫，而 JSX 則是屬於 React 中的一個元件模板語法糖。這篇文章將簡要介紹 JSX 是什麼，如何撰寫、條件式使用以及特殊對應，幫助初學者或 React 開發者進一步瞭解 JSX 的基礎應用。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>JSX 是 JavaScript XML 的縮寫</li>
<li>允許在 JavaScript 代碼中直接寫 HTML</li>
<li>JSX 會被轉譯變成 React.createElement()</li>
<li>JSX 中的 HTML 項目必須有唯一的層級結點</li>
<li>可用小括號 {} 執行 JavaScript 表達式</li>
<li>允許使用 fragment (空括號) 以避免額外 DOM 結構</li>
<li>HTML 元素必須適當關閉，並使用 className 代替 class</li>
<li>使用條件語句時， if 必須在 JSX 之外，可用三元表達式</li>
</ul>
<h2 id="實例解說"><a href="#實例解說" class="headerlink" title="實例解說"></a>實例解說</h2><ol>
<li>JSX 與非 JSX 寫法</li>
</ol>
<p>使用 JSX 的方式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I Love JSX!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(myElement);</span><br></pre></td></tr></table></figure>

<p>未使用 JSX 的方式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, &#123;&#125;, <span class="string">&#x27;I do not use JSX!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(myElement);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>JSX 表達式範例</li>
</ol>
<p>使用 JSX 方式計算數學表達式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>React is &#123;5 + 5&#125; times better with JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>多行 HTML 要用 () 包起</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Cherries<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>唯一一層級結點要求</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph too.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>或是使用 fragment ：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph too.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>元素必須適當關閉</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用 className 代替 class</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;myclass&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>JSX 條件語句</li>
</ol>
<p>方式 1：使用 if 在 JSX 之外</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;Goodbye&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  text = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>方式 2：使用三元表達式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> myElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;x &lt; 10 ? &#x27;Hello&#x27; : &#x27;Goodbye&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>JSX</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React List 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/09/learning-notes-w3schools-react-list-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個用於建立 UI 組件的 JavaScript 函式庫，而 JSX 則是 React 中的重要語法擴充。前一章我們已學會如何使用 JSX 編寫 React 介面，本文將進一步說明 React 元件（Components）、props、事件處理（Events）、條件渲染（Conditional Rendering）與列表渲染（Lists）的基本觀念與應用，協助讀者掌握建立互動式介面的核心技巧。</p>
<h2 id="渲染列表與使用-key"><a href="#渲染列表與使用-key" class="headerlink" title="渲染列表與使用 key"></a>渲染列表與使用 key</h2><p>基本列表渲染：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>I am a &#123;props.brand&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cars = [<span class="string">&#x27;Ford&#x27;</span>, <span class="string">&#x27;BMW&#x27;</span>, <span class="string">&#x27;Audi&#x27;</span>];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Who lives in my garage?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;cars.map((car) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&#123;car&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加上 key 改寫版本：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>I am a &#123;props.brand&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cars = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">brand</span>: <span class="string">&#x27;BMW&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">brand</span>: <span class="string">&#x27;Audi&#x27;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Who lives in my garage?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;cars.map((car) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Car</span> <span class="attr">key</span>=<span class="string">&#123;car.id&#125;</span> <span class="attr">brand</span>=<span class="string">&#123;car.brand&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>結論<br>React 提供了彈性而強大的組件機制，透過 props 傳遞資料、事件處理強化互動、條件與列表渲染控制顯示邏輯，讓開發者可以有效建立模組化與資料驅動的使用者介面。熟悉這些基本觀念，將為深入理解 React 的狀態管理與 hooks 打下堅實基礎。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>提升效能的利器：React.memo 使用入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/13/learning-notes-w3schools-react-memo-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 React 中，當元件的父元件重新渲染時，預設情況下其所有子元件也會一併重新渲染，即便傳入的 <code>props</code> 完全沒變動。這種「不必要的重新渲染」若發生在大型應用中，會導致效能下降，尤其是當某些元件非常複雜、包含大量計算或 DOM 操作時。</p>
<p>為了避免這種情況，React 提供了一個高階元件函式：<code>React.memo</code>。這個函式能讓你<strong>記憶</strong>元件的輸出結果，當傳入的 <code>props</code> 沒有變更時，React 就會<strong>跳過該元件的重新渲染</strong>，達到提升效能的效果。</p>
<hr>
<h3 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h3><ul>
<li>React.memo 可讓函式型元件根據 <code>props</code> 的淺層比較決定是否重新渲染</li>
<li>適合用在<strong>接收不變 props 的純顯示元件</strong></li>
<li>若 <code>props</code> 為函式、物件、陣列時，注意傳入參考要穩定，否則仍會觸發重新渲染</li>
<li>效能提升明顯的情況：元件內容複雜、資料量大或頻繁更新的應用場景</li>
<li>搭配 <code>useCallback</code>、<code>useMemo</code> 可進一步優化</li>
</ul>
<hr>
<h3 id="問題說明"><a href="#問題說明" class="headerlink" title="問題說明"></a>問題說明</h3><p>以下是一個簡單的 React 應用，包含一個計數器與待辦事項列表元件（<code>Todos</code>）：</p>
<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Todos</span> <span class="keyword">from</span> <span class="string">&#x27;./Todos&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([<span class="string">&#x27;todo 1&#x27;</span>, <span class="string">&#x27;todo 2&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Todos</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h4 id="Todos-js"><a href="#Todos-js" class="headerlink" title="Todos.js"></a>Todos.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Todos</span> = (<span class="params">&#123; todos &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child render&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.map((todo, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Todos</span>;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，每當你點擊「+」按鈕讓 <code>count</code> 增加時，整個 <code>App</code> 元件重新渲染，而 <code>Todos</code> 元件也會一併被重新渲染，即使 <code>todos</code> 陣列完全沒有變更。你可以從 console log 中觀察到 <code>child render</code> 不斷出現。</p>
<p>若這個 <code>Todos</code> 元件變得很複雜，這樣的重新渲染就會造成效能浪費。</p>
<hr>
<h3 id="解法：使用-React-memo"><a href="#解法：使用-React-memo" class="headerlink" title="解法：使用 React.memo"></a>解法：使用 React.memo</h3><p>要解決這個問題，我們可以使用 <code>memo</code> 將 <code>Todos</code> 元件包裝起來，使其只有在 <code>props.todos</code> 變動時才會重新渲染。</p>
<h4 id="修改-Todos-js"><a href="#修改-Todos-js" class="headerlink" title="修改 Todos.js"></a>修改 Todos.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Todos</span> = (<span class="params">&#123; todos &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child render&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;todos.map((todo, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Todos</span>);</span><br></pre></td></tr></table></figure>

<p>這裡我們引入 <code>memo</code> 並用它包裝元件。這樣一來，只要 <code>todos</code> 的內容沒有改變，<code>Todos</code> 元件就不會重新執行 render。</p>
<hr>
<h3 id="行為比較與效能提升說明"><a href="#行為比較與效能提升說明" class="headerlink" title="行為比較與效能提升說明"></a>行為比較與效能提升說明</h3><table>
<thead>
<tr>
<th>行為</th>
<th>未使用 memo</th>
<th>使用 memo</th>
</tr>
</thead>
<tbody><tr>
<td>count 變更時</td>
<td>重新渲染 Todos</td>
<td>不重新渲染 Todos</td>
</tr>
<tr>
<td>todos 改變時</td>
<td>重新渲染 Todos</td>
<td>重新渲染 Todos</td>
</tr>
<tr>
<td>效能影響</td>
<td>易造成浪費</td>
<td>避免不必要更新</td>
</tr>
</tbody></table>
<hr>
<h3 id="延伸說明"><a href="#延伸說明" class="headerlink" title="延伸說明"></a>延伸說明</h3><ul>
<li><strong>memo 比較的是 props 的淺層相等性</strong>。若傳入的是物件、函式等「參考型資料」，每次 render 都會被視為不同，仍然會觸發重新渲染。</li>
<li>若要避免這種情況，可搭配 <code>useMemo</code> 或 <code>useCallback</code> 讓 props 穩定。</li>
<li><code>memo</code> 並非萬能，只有在元件內容複雜、render 成本高時，才明顯帶來效能優化。過度使用反而會增加記憶體與比較成本。</li>
</ul>
<hr>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p><code>React.memo</code> 是 React 應用中常見的效能優化技巧之一。透過對 props 進行淺層比較，可以有效避免不必要的子元件重新渲染。當你的應用中包含大量重複渲染的靜態元件或資料時，適時使用 <code>memo</code> 可以大幅提升效能表現。</p>
<p>建議在開發時養成習慣：**只有當元件的 props 確實可能不會變動，且 render 成本高時再使用 <code>memo</code>**，讓效能優化達到真正效果。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
<li><a href="https://reactrouter.com/">React router 官方網站</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Props 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/06/learning-notes-w3schools-react-props-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個用於建立 UI 組件的 JavaScript 函式庫，而 JSX 則是 React 中的重要語法擴充。前一章我們已學會如何使用 JSX 編寫 React 介面，本文將進一步說明 React 元件（Components）與 props 的基本觀念與應用，並介紹如何透過函式元件傳遞資料，建立更靈活的 UI 架構。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React 元件就像函式，會回傳 HTML 元素</li>
<li>元件是可獨立、可重複使用的程式區塊</li>
<li>React 元件主要有兩種類型：函式元件與類別元件</li>
<li>元件名稱需以大寫開頭</li>
<li>props 是元件接收的參數，用來傳遞資料</li>
<li>props 是唯讀的，不能在元件內部直接修改</li>
<li>使用 props 可以讓元件更具重用性與彈性</li>
</ul>
<h2 id="實例解說"><a href="#實例解說" class="headerlink" title="實例解說"></a>實例解說</h2><ol>
<li>建立函式元件<br>使用 <code>function</code> 或箭頭函式定義元件，直接回傳 JSX 即可：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hi, I am a Car!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>將元件渲染到畫面<br>使用 ReactDOM 將元件掛載到 HTML 中的指定節點：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 props 傳遞資料<br>可透過 HTML 屬性語法向元件傳遞資料，資料將以物件形式傳入元件的參數 props：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Ford&quot;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>父子元件資料傳遞<br>父元件可透過 props 向子元件傳遞資料：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Who lives in my garage?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Ford&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Garage</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>傳遞變數與物件<br>可傳遞變數給 props：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> carName = <span class="string">&#x27;Ford&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&#123;carName&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可傳遞物件並在子元件中取用屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;props.brand.model&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Garage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> carInfo = &#123; <span class="attr">name</span>: <span class="string">&#x27;Ford&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;Mustang&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&#123;carInfo&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>類別元件使用 props<br>類別元件接收 props 的方式略有不同：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am a &#123;this.props.brand&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Car</span> <span class="attr">brand</span>=<span class="string">&quot;Toyota&quot;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 元件是建構 UI 的基本單位，透過 props 傳遞資料，可以讓元件之間建立清晰的資料流，提升程式碼的重用性與可維護性。掌握 props 的使用，將有助於建立模組化、彈性化的前端介面，並為日後深入學習 state、hook 與 context 等進階主題奠定基礎。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React Render HTML 入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/03/learning-notes-w3schools-react-render-html-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 是一個專門用於構建使用者介面（UI）的 JavaScript 函式庫，其主要目標就是將 HTML 呈現在網頁中。透過 React 的核心函式 <code>createRoot()</code> 和方法 <code>render()</code>，開發者可以將 UI 元件渲染到指定的 HTML 元素中。本文將介紹 React 如何在網頁上渲染 HTML，包括核心函式與方法的用途、應用位置與語法示範，並介紹與 JSX 語法的結合使用方式。</p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>React 透過 <code>createRoot()</code> 函式與 <code>render()</code> 方法將 HTML 渲染到網頁上。</li>
<li><code>createRoot()</code> 用於指定要渲染的目標 HTML 元素。</li>
<li><code>render()</code> 用於將 React 元件實際渲染到指定元素中。</li>
<li>標準的 React 專案會在 <code>public/index.html</code> 中提供 <code>&lt;div id=&quot;root&quot;&gt;</code> 作為渲染容器。</li>
<li>JSX 語法允許開發者在 JavaScript 中撰寫類似 HTML 的程式碼。</li>
<li>根節點不必一定是 <code>&lt;div&gt;</code>，也不一定要命名為 <code>root</code>。</li>
</ul>
<h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><ol>
<li>渲染一段簡單的段落：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>上述程式碼會將 “Hello” 文字渲染到 HTML 文件中的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 JSX 撰寫 HTML 表格並渲染：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myelement = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>John<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Elsa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line">root.<span class="title function_">render</span>(myelement);</span><br></pre></td></tr></table></figure>

<p>此段程式會顯示一個包含名稱的簡單表格，渲染至 <code>root</code> 節點中。</p>
<ol start="3">
<li>更換根節點的標籤與 id：<br>不一定要使用 <code>&lt;div id=&quot;root&quot;&gt;</code> 作為渲染節點，可以自行命名：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;sandy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>對應的 React 程式碼如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sandy&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(container);</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hallo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>此範例將段落渲染至 <code>header</code> 元素。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React 的渲染邏輯核心在於兩個部分：定義渲染目標與執行渲染動作。透過 <code>createRoot()</code> 指定 HTML 元素、<code>render()</code> 注入 React 元件，開發者可以將 UI 動態顯示在任何節點上。搭配 JSX 語法，不僅可以撰寫更具可讀性的 UI 結構，也讓程式碼維護更為便利。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_render.asp">React Render HTML</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 React Router 實現多頁面導覽功能教學（React Router v6）入門教學 | w3schools 學習筆記</title>
    <url>/2024/01/12/learning-notes-w3schools-react-router-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React 是一個強大的 JavaScript 函式庫，專門用於建立使用者介面。不過，React 本身並未內建「頁面路由」功能。如果你想要為你的 React 專案加入多個頁面，例如首頁、部落格、聯絡我們頁面等等，就必須引入額外的工具。而在眾多路由解決方案中，<strong>React Router</strong> 是最受歡迎且廣泛使用的選擇。</p>
<p>本文將帶你從零開始，教你如何在使用 Create React App 建立的專案中導入 React Router，並建立一個基本的多頁面架構。</p>
<hr>
<h3 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h3><ul>
<li><strong>React 本身不包含頁面路由功能</strong></li>
<li><strong>React Router 是 React 中最常用的路由套件</strong></li>
<li><strong>React Router v6 是目前最新的主要版本</strong></li>
<li><strong>需安裝 <code>react-router-dom</code> 套件來使用瀏覽器路由功能</strong></li>
<li><strong>使用 <code>&lt;BrowserRouter&gt;</code>, <code>&lt;Routes&gt;</code>, <code>&lt;Route&gt;</code> 建立路由結構</strong></li>
<li><strong>使用 <code>&lt;Outlet&gt;</code> 顯示巢狀路由對應的內容</strong></li>
<li><strong>使用 <code>&lt;Link&gt;</code> 而非 <code>&lt;a&gt;</code> 進行頁面內部連結</strong></li>
</ul>
<hr>
<h3 id="安裝-React-Router"><a href="#安裝-React-Router" class="headerlink" title="安裝 React Router"></a>安裝 React Router</h3><p>在你的 React 專案根目錄下，打開終端機，執行以下指令安裝 React Router：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D react-router-dom</span><br></pre></td></tr></table></figure>

<p>如果你是從 React Router v5 升級，建議加入 <code>@latest</code> 旗標：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D react-router-dom@latest</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="建立頁面資料夾與基本結構"><a href="#建立頁面資料夾與基本結構" class="headerlink" title="建立頁面資料夾與基本結構"></a>建立頁面資料夾與基本結構</h3><p>為了建立多頁面應用，我們需要在 <code>src</code> 資料夾中新增一個 <code>pages</code> 資料夾，並在其中建立五個頁面元件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/pages/</span><br><span class="line">├── Layout.js</span><br><span class="line">├── Home.js</span><br><span class="line">├── Blogs.js</span><br><span class="line">├── Contact.js</span><br><span class="line">└── NoPage.js</span><br></pre></td></tr></table></figure>

<p>每個檔案都將包含一個簡單的 React 函式元件。</p>
<hr>
<h3 id="設定主路由（index-js）"><a href="#設定主路由（index-js）" class="headerlink" title="設定主路由（index.js）"></a>設定主路由（index.js）</h3><p>在 <code>src/index.js</code> 中引入路由模組與頁面元件，並建立應用程式主結構：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Blogs</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Blogs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Contact</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Contact&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NoPage</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/NoPage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;blogs&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Blogs</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;contact&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Contact</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NoPage</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="說明範例運作原理"><a href="#說明範例運作原理" class="headerlink" title="說明範例運作原理"></a>說明範例運作原理</h3><ul>
<li>**<code>&lt;BrowserRouter&gt;</code>**：外層包住整個路由結構，提供瀏覽器路由功能。</li>
<li>**<code>&lt;Routes&gt;</code> 與 <code>&lt;Route&gt;</code>**：定義所有路由規則與對應的元件。</li>
<li>**巢狀 <code>&lt;Route&gt;</code>**：<code>Layout</code> 元件作為共同外框，其下包含巢狀頁面路由。</li>
<li>**<code>&lt;Route index&gt;</code>**：定義 <code>/</code> 路徑的預設頁面為 <code>Home</code>。</li>
<li>**<code>&lt;Route path=&quot;*&quot;&gt;</code>**：匹配所有未定義的網址，用於顯示 404 頁面。</li>
</ul>
<hr>
<h3 id="建立頁面元件"><a href="#建立頁面元件" class="headerlink" title="建立頁面元件"></a>建立頁面元件</h3><h4 id="Layout-js（共享頁面結構）"><a href="#Layout-js（共享頁面結構）" class="headerlink" title="Layout.js（共享頁面結構）"></a>Layout.js（共享頁面結構）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Layout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/blogs&quot;</span>&gt;</span>Blogs<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/contact&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Layout</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>&lt;Link&gt;</code> 元素建立頁面間的連結。</li>
<li><code>&lt;Outlet&gt;</code> 負責渲染目前選中的頁面內容。</li>
</ul>
<h4 id="Home-js"><a href="#Home-js" class="headerlink" title="Home.js"></a>Home.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Blogs-js"><a href="#Blogs-js" class="headerlink" title="Blogs.js"></a>Blogs.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Blogs</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Blog Articles<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Blogs</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Contact-js"><a href="#Contact-js" class="headerlink" title="Contact.js"></a>Contact.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Contact</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Contact Me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Contact</span>;</span><br></pre></td></tr></table></figure>

<h4 id="NoPage-js（404-頁面）"><a href="#NoPage-js（404-頁面）" class="headerlink" title="NoPage.js（404 頁面）"></a>NoPage.js（404 頁面）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">NoPage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NoPage</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>透過 React Router，我們可以很輕鬆地為 React 應用程式建立一個多頁面的瀏覽體驗。本篇教學展示了如何安裝 React Router、建立路由結構、撰寫頁面元件，並結合 <code>&lt;Outlet&gt;</code> 與 <code>&lt;Link&gt;</code> 實現共用頁面框架與路由切換。這只是入門，React Router v6 還支援更多進階功能，例如動態路由、路由守衛、路由參數等，適合進一步探索使用。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.w3schools.com/react/react_customhooks.asp">React Custom Hooks</a></li>
<li><a href="https://reactrouter.com/">React router 官方網站</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>React Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 前端效能優化入門教學筆記 | 學習筆記</title>
    <url>/2024/10/16/learning-notes-web-client-performance-optimization-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在網頁開發中，效能優化是一個不可忽視的重要課題。無論是企業網站、單頁應用（SPA），或是電商平台，效能表現都直接影響使用者體驗與轉換率。</p>
<p>本篇筆記將介紹 Web 前端效能優化的核心概念、常見策略與實務範例，幫助你為專案建立良好的基礎。</p>
<hr>
<h2 id="為什麼需要前端效能優化？"><a href="#為什麼需要前端效能優化？" class="headerlink" title="為什麼需要前端效能優化？"></a>為什麼需要前端效能優化？</h2><p>前端效能不佳會導致：</p>
<ul>
<li>首次載入時間過長</li>
<li>使用者等待過久，產生跳出行為</li>
<li>SEO 表現不佳（Google 會參考 LCP、CLS、FCP 等指標）</li>
</ul>
<p>透過有效的優化策略，我們能讓網站更快、更穩、更吸引人。</p>
<hr>
<h2 id="效能優化的三個層面"><a href="#效能優化的三個層面" class="headerlink" title="效能優化的三個層面"></a>效能優化的三個層面</h2><ol>
<li><strong>載入效能（Loading Performance）</strong>：提升頁面初始載入速度。</li>
<li><strong>互動效能（Interaction Performance）</strong>：優化點擊、滑動等互動的流暢度。</li>
<li><strong>渲染效能（Rendering Performance）</strong>：減少重繪、重排與動畫卡頓。</li>
</ol>
<hr>
<h2 id="一、減少不必要的資源請求"><a href="#一、減少不必要的資源請求" class="headerlink" title="一、減少不必要的資源請求"></a>一、減少不必要的資源請求</h2><h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><p>透過 CDN（Content Delivery Network）可將靜態資源分發到全球節點，加速載入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 Google Fonts CDN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Roboto&amp;display=swap&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="合併與壓縮資源（Minify-amp-Bundle）"><a href="#合併與壓縮資源（Minify-amp-Bundle）" class="headerlink" title="合併與壓縮資源（Minify &amp; Bundle）"></a>合併與壓縮資源（Minify &amp; Bundle）</h3><p>使用打包工具如 Webpack、Vite，可以：</p>
<ul>
<li>將 JS &#x2F; CSS 壓縮（Minify）</li>
<li>移除註解與空白</li>
<li>合併多個檔案減少 HTTP 請求數量</li>
</ul>
<h4 id="範例（Webpack-設定簡略）："><a href="#範例（Webpack-設定簡略）：" class="headerlink" title="範例（Webpack 設定簡略）："></a>範例（Webpack 設定簡略）：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 自動啟用壓縮</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、圖片與多媒體優化"><a href="#二、圖片與多媒體優化" class="headerlink" title="二、圖片與多媒體優化"></a>二、圖片與多媒體優化</h2><h3 id="適當圖片格式"><a href="#適當圖片格式" class="headerlink" title="適當圖片格式"></a>適當圖片格式</h3><ul>
<li>使用 <strong>WebP</strong> 或 <strong>AVIF</strong> 取代 JPEG &#x2F; PNG，可減少檔案體積 25% 以上</li>
<li>SVG 適用於圖示與 icon，解析度不會失真</li>
</ul>
<h3 id="延遲載入圖片（Lazy-Loading）"><a href="#延遲載入圖片（Lazy-Loading）" class="headerlink" title="延遲載入圖片（Lazy Loading）"></a>延遲載入圖片（Lazy Loading）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;thumbnail.jpg&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;延遲載入圖片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>或搭配 JavaScript 實現滾動載入。</p>
<hr>
<h2 id="三、有效使用-Cache（快取）"><a href="#三、有效使用-Cache（快取）" class="headerlink" title="三、有效使用 Cache（快取）"></a>三、有效使用 Cache（快取）</h2><h3 id="設定-Cache-Control-標頭"><a href="#設定-Cache-Control-標頭" class="headerlink" title="設定 Cache-Control 標頭"></a>設定 Cache-Control 標頭</h3><p>在伺服器上設定靜態資源快取策略：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=31536000, immutable</span><br></pre></td></tr></table></figure>

<p>適用於版本化的資源檔案（如 <code>main.123abc.js</code>），可快取一年不變。</p>
<hr>
<h2 id="四、精簡-CSS-與-JavaScript"><a href="#四、精簡-CSS-與-JavaScript" class="headerlink" title="四、精簡 CSS 與 JavaScript"></a>四、精簡 CSS 與 JavaScript</h2><h3 id="移除未使用的-CSS（Tree-Shaking）"><a href="#移除未使用的-CSS（Tree-Shaking）" class="headerlink" title="移除未使用的 CSS（Tree Shaking）"></a>移除未使用的 CSS（Tree Shaking）</h3><p>使用工具如 <strong>PurgeCSS</strong>、<strong>TailwindCSS JIT Mode</strong> 可自動剔除沒用到的樣式。</p>
<h4 id="PurgeCSS-使用方式（簡略）："><a href="#PurgeCSS-使用方式（簡略）：" class="headerlink" title="PurgeCSS 使用方式（簡略）："></a>PurgeCSS 使用方式（簡略）：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> purgecss = <span class="built_in">require</span>(<span class="string">&#x27;@fullhuman/postcss-purgecss&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">purgecss</span>(&#123;</span><br><span class="line">      <span class="attr">content</span>: [<span class="string">&#x27;./**/*.html&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="延遲載入-JS（Defer-x2F-Async）"><a href="#延遲載入-JS（Defer-x2F-Async）" class="headerlink" title="延遲載入 JS（Defer &#x2F; Async）"></a>延遲載入 JS（Defer &#x2F; Async）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>defer</code>: 等 DOM 解析完才執行，不阻塞渲染</li>
<li><code>async</code>: 載入完成即執行，適合非必要腳本（如 GA）</li>
</ul>
<hr>
<h2 id="五、避免過度重排與重繪"><a href="#五、避免過度重排與重繪" class="headerlink" title="五、避免過度重排與重繪"></a>五、避免過度重排與重繪</h2><h3 id="使用-class-切換取代-style-修改"><a href="#使用-class-切換取代-style-修改" class="headerlink" title="使用 class 切換取代 style 修改"></a>使用 class 切換取代 style 修改</h3><p>重複直接操作 DOM style 屬性會導致效能下降，改用 CSS class 控制樣式較佳。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不推薦</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">element.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;50px&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推薦</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;resized&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.resized</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-transform-與-opacity-進行動畫"><a href="#使用-transform-與-opacity-進行動畫" class="headerlink" title="使用 transform 與 opacity 進行動畫"></a>使用 <code>transform</code> 與 <code>opacity</code> 進行動畫</h3><p>避免透過 <code>top</code>、<code>left</code>、<code>width</code> 等影響 layout 的屬性來做動畫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推薦做法：使用 transform */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.05</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、最佳化-DOM-結構與渲染"><a href="#六、最佳化-DOM-結構與渲染" class="headerlink" title="六、最佳化 DOM 結構與渲染"></a>六、最佳化 DOM 結構與渲染</h2><ul>
<li>減少過深的 DOM 巢狀結構</li>
<li>使用虛擬滾動（Virtual Scroll）載入大量列表</li>
<li>避免頻繁操作 DOM，應該一次性改動（使用 DocumentFragment 或 requestAnimationFrame）</li>
</ul>
<hr>
<h2 id="七、使用開發工具檢查效能"><a href="#七、使用開發工具檢查效能" class="headerlink" title="七、使用開發工具檢查效能"></a>七、使用開發工具檢查效能</h2><h3 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h3><ol>
<li><strong>Lighthouse</strong>：提供整體效能建議</li>
<li><strong>Performance Panel</strong>：檢查 JS 執行、動畫、Layout shift 等問題</li>
<li><strong>Network Panel</strong>：觀察資源大小、載入順序與快取狀態</li>
</ol>
<hr>
<h2 id="總結與建議實作順序"><a href="#總結與建議實作順序" class="headerlink" title="總結與建議實作順序"></a>總結與建議實作順序</h2><p>若你剛開始進行專案的效能優化，可以依照以下順序著手：</p>
<ol>
<li>壓縮與合併 JS &#x2F; CSS</li>
<li>圖片格式轉換與 Lazy Load</li>
<li>CDN 部署靜態資源</li>
<li>移除未使用樣式與延遲載入腳本</li>
<li>改善動畫與 DOM 操作</li>
<li>導入快取策略</li>
<li>使用 Lighthouse 檢查並優化問題</li>
</ol>
<p>效能優化並非一次性工作，而是一個持續調整的過程。建議我們可以從專案開始就納入效能考量，將它當成基本開發原則來實踐。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://www.youtube.com/watch?v=evrNn54UkHQ">Core Web Vitals: An everyday explanation (Taiwanese with English subtitles)</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>css</tag>
        <tag>web</tag>
        <tag>前端效能</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 資訊安全入門教學筆記 | 學習筆記</title>
    <url>/2024/10/16/learning-notes-web-security-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在現代網頁應用中，資安問題層出不窮，從簡單的跨站攻擊（XSS）到複雜的憑證竊取、身份偽造（CSRF），都可能導致個資外洩、系統遭入侵甚至企業商譽受損。</p>
<p>本篇筆記將從實務角度出發，介紹幾種常見 Web 資安風險及其防範策略，讓你能以最基本的方式保護網站與使用者安全。</p>
<hr>
<h2 id="一、常見-Web-資安威脅類型"><a href="#一、常見-Web-資安威脅類型" class="headerlink" title="一、常見 Web 資安威脅類型"></a>一、常見 Web 資安威脅類型</h2><h3 id="1-XSS（Cross-Site-Scripting，跨站腳本攻擊）"><a href="#1-XSS（Cross-Site-Scripting，跨站腳本攻擊）" class="headerlink" title="1. XSS（Cross-Site Scripting，跨站腳本攻擊）"></a>1. XSS（Cross-Site Scripting，跨站腳本攻擊）</h3><p><strong>原理</strong>：攻擊者將惡意腳本注入至網站，當其他使用者瀏覽該頁面時，惡意腳本便會在其瀏覽器上執行，例如竊取 cookie、冒充使用者操作等。</p>
<h3 id="實例："><a href="#實例：" class="headerlink" title="實例："></a>實例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 攻擊者輸入的留言內容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;你被 XSS 攻擊了&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若網站未正確處理輸入，這段 JavaScript 就會直接被執行。</p>
<h3 id="防範方式："><a href="#防範方式：" class="headerlink" title="防範方式："></a>防範方式：</h3><ul>
<li>對所有輸入進行 <strong>轉義（Escape）</strong></li>
<li>使用前端框架自動編碼機制（如 React 的 JSX）</li>
<li>避免使用 <code>innerHTML</code> 插入未清洗的資料</li>
</ul>
<h4 id="範例（JavaScript-轉義文字）："><a href="#範例（JavaScript-轉義文字）：" class="headerlink" title="範例（JavaScript 轉義文字）："></a>範例（JavaScript 轉義文字）：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">escapeHtml</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&quot;&amp;amp;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&quot;&amp;quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&quot;&amp;#039;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-CSRF（Cross-Site-Request-Forgery，跨站請求偽造）"><a href="#2-CSRF（Cross-Site-Request-Forgery，跨站請求偽造）" class="headerlink" title="2. CSRF（Cross-Site Request Forgery，跨站請求偽造）"></a>2. CSRF（Cross-Site Request Forgery，跨站請求偽造）</h3><p><strong>原理</strong>：攻擊者引導使用者點擊惡意連結或載入圖片，使其在未察覺情況下對已登入的網站發送請求，進而竄改資料或觸發操作。</p>
<h3 id="實例：-1"><a href="#實例：-1" class="headerlink" title="實例："></a>實例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 攻擊者網站中隱藏圖片，觸發某網站的轉帳請求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bank.com/transfer?amount=1000&amp;to=attacker&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果使用者已登入 <code>bank.com</code> 且未防範 CSRF，就可能無意間轉帳。</p>
<h3 id="防範方式：-1"><a href="#防範方式：-1" class="headerlink" title="防範方式："></a>防範方式：</h3><ul>
<li>後端驗證 <strong>CSRF Token</strong></li>
<li>使用 <strong>SameSite Cookie 屬性</strong></li>
<li>僅允許 POST &#x2F; PATCH &#x2F; DELETE 操作變更狀態</li>
<li>驗證 Referer &#x2F; Origin 標頭（有風險）</li>
</ul>
<h4 id="範例（Express-CSRF-Token）："><a href="#範例（Express-CSRF-Token）：" class="headerlink" title="範例（Express + CSRF Token）："></a>範例（Express + CSRF Token）：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> csrf = <span class="built_in">require</span>(<span class="string">&quot;csurf&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">csrf</span>(&#123; <span class="attr">cookie</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/form&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;form&quot;</span>, &#123; <span class="attr">csrfToken</span>: req.<span class="title function_">csrfToken</span>() &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-SQL-Injection（SQL-注入）"><a href="#3-SQL-Injection（SQL-注入）" class="headerlink" title="3. SQL Injection（SQL 注入）"></a>3. SQL Injection（SQL 注入）</h3><p><strong>原理</strong>：透過惡意輸入拼接 SQL 查詢語句，導致資料庫查詢異常，甚至刪除資料。</p>
<h3 id="實例：-2"><a href="#實例：-2" class="headerlink" title="實例："></a>實例：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 假設未使用參數化查詢</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>攻擊者輸入 <code>&#39; OR 1=1; --</code> 可繞過認證邏輯，取得所有帳戶資料。</p>
<h3 id="防範方式：-2"><a href="#防範方式：-2" class="headerlink" title="防範方式："></a>防範方式：</h3><ul>
<li>使用 ORM 或預處理語句（Prepared Statement）</li>
<li>不拼接 SQL 字串，改用參數綁定</li>
<li>限制資料庫帳號權限</li>
</ul>
<h4 id="範例（Node-js-MySQL）："><a href="#範例（Node-js-MySQL）：" class="headerlink" title="範例（Node.js + MySQL）："></a>範例（Node.js + MySQL）：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line"><span class="keyword">const</span> password = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(query, [username, password], <span class="keyword">function</span> (<span class="params">err, results</span>) &#123;</span><br><span class="line">  <span class="comment">// 安全地查詢</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-資料傳輸未加密（缺少-HTTPS）"><a href="#4-資料傳輸未加密（缺少-HTTPS）" class="headerlink" title="4. 資料傳輸未加密（缺少 HTTPS）"></a>4. 資料傳輸未加密（缺少 HTTPS）</h3><p><strong>原理</strong>：若網站使用 HTTP，使用者資料（如帳號密碼、金流資訊）在傳輸過程中可能被中間人攔截（Man-in-the-Middle attack）。</p>
<h3 id="防範方式：-3"><a href="#防範方式：-3" class="headerlink" title="防範方式："></a>防範方式：</h3><ul>
<li>強制使用 HTTPS（導入憑證）</li>
<li>使用 HSTS（HTTP Strict Transport Security）</li>
<li>移除 HTTP 存取（使用 301 重導）</li>
</ul>
<h4 id="範例（NGINX-強制-HTTPS）："><a href="#範例（NGINX-強制-HTTPS）：" class="headerlink" title="範例（NGINX 強制 HTTPS）："></a>範例（NGINX 強制 HTTPS）：</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-檔案上傳風險"><a href="#5-檔案上傳風險" class="headerlink" title="5. 檔案上傳風險"></a>5. 檔案上傳風險</h3><p><strong>原理</strong>：攻擊者透過檔案上傳功能傳入惡意腳本（如 <code>.php</code>、<code>.jsp</code>），若伺服器未阻擋，可能導致遠端代碼執行。</p>
<h3 id="防範方式：-4"><a href="#防範方式：-4" class="headerlink" title="防範方式："></a>防範方式：</h3><ul>
<li>限制可上傳的檔案類型與副檔名</li>
<li>不讓使用者可直接存取上傳目錄</li>
<li>使用 UUID 改名，避免原檔名執行</li>
</ul>
<hr>
<h2 id="附加安全性強化機制"><a href="#附加安全性強化機制" class="headerlink" title="附加安全性強化機制"></a>附加安全性強化機制</h2><h3 id="HTTP-安全標頭設定（Security-Headers）"><a href="#HTTP-安全標頭設定（Security-Headers）" class="headerlink" title="HTTP 安全標頭設定（Security Headers）"></a>HTTP 安全標頭設定（Security Headers）</h3><p>使用如 Helmet（Express.js 中間件）快速加入以下標頭：</p>
<ul>
<li><code>Content-Security-Policy</code>：防止 XSS 和資源注入</li>
<li><code>X-Frame-Options</code>：防止點擊劫持（Clickjacking）</li>
<li><code>X-Content-Type-Options</code>：避免 MIME 類型混淆</li>
<li><code>Strict-Transport-Security</code>：強制 HTTPS</li>
</ul>
<h4 id="範例（Node-js-Helmet）："><a href="#範例（Node-js-Helmet）：" class="headerlink" title="範例（Node.js + Helmet）："></a>範例（Node.js + Helmet）：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">&quot;helmet&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">helmet</span>());</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結與建議實作順序"><a href="#總結與建議實作順序" class="headerlink" title="總結與建議實作順序"></a>總結與建議實作順序</h2><p>如果剛開始建立 Web 專案，可以按照以下步驟檢查安全性：</p>
<ol>
<li>輸入驗證與輸出轉義，防範 XSS</li>
<li>加入 CSRF Token 機制</li>
<li>資料庫查詢全面使用預處理語句</li>
<li>部署 HTTPS 並強制重導</li>
<li>使用 Helmet 加強安全標頭</li>
<li>定期檢查依賴套件漏洞（如 <code>npm audit</code>）</li>
</ol>
<p>資訊安全並非一勞永逸，而是一種持續維護的工作。建議我們可以將資安意識融入日常開發流程中，隨時更新資安知識與工具。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>web</tag>
        <tag>資訊安全</tag>
        <tag>Web 資訊安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 入門教學筆記：現代前端建構工具的基礎與實戰 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-webpack-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端專案日益龐大與模組化的今天，建構工具（build tools）扮演了極其關鍵的角色。而 Webpack 作為目前最主流的模組打包器（module bundler），廣泛應用於各類前端應用與框架中（如 React、Vue 等）。本篇筆記將介紹 Webpack 的基本概念、核心組件與實際範例，協助你快速理解與實作。</p>
<hr>
<h2 id="一、什麼是-Webpack？"><a href="#一、什麼是-Webpack？" class="headerlink" title="一、什麼是 Webpack？"></a>一、什麼是 Webpack？</h2><p>Webpack 是一個靜態模組打包器，它會從你的應用程式進入點（entry point）開始，分析相依的模組（JavaScript、CSS、圖片、JSON 等），然後打包成一或多個 bundle，供瀏覽器載入使用。</p>
<p>主要特性包含：</p>
<ul>
<li>支援模組系統（如 CommonJS、ESM）</li>
<li>可搭配各種 Loader 處理不同類型資源</li>
<li>使用 Plugin 擴充打包功能</li>
<li>開發與生產模式可分離配置</li>
<li>支援 Hot Module Replacement（HMR）與 Dev Server</li>
</ul>
<hr>
<h2 id="二、基本安裝與專案初始化"><a href="#二、基本安裝與專案初始化" class="headerlink" title="二、基本安裝與專案初始化"></a>二、基本安裝與專案初始化</h2><p>建立一個新的專案資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-webpack-app</span><br><span class="line"><span class="built_in">cd</span> my-webpack-app</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>安裝 Webpack 及其 CLI 工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure>

<p>建立基本的專案目錄結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-webpack-app/</span><br><span class="line">├── dist/</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src/</span><br><span class="line">│   └── index.js</span><br><span class="line">├── package.json</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、撰寫基本範例"><a href="#三、撰寫基本範例" class="headerlink" title="三、撰寫基本範例"></a>三、撰寫基本範例</h2><h3 id="1-src-index-js"><a href="#1-src-index-js" class="headerlink" title="1. src/index.js"></a>1. <code>src/index.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&quot;Hello Webpack!&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br></pre></td></tr></table></figure>

<h3 id="2-src-style-css"><a href="#2-src-style-css" class="headerlink" title="2. src/style.css"></a>2. <code>src/style.css</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-dist-index-html"><a href="#3-dist-index-html" class="headerlink" title="3. dist/index.html"></a>3. <code>dist/index.html</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、Webpack-基礎設定檔"><a href="#四、Webpack-基礎設定檔" class="headerlink" title="四、Webpack 基礎設定檔"></a>四、Webpack 基礎設定檔</h2><p>建立 <code>webpack.config.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>, <span class="comment">// 入口檔案</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>, <span class="comment">// 輸出檔案名稱</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 輸出目錄</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 每次打包清空 dist</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="comment">// 處理 CSS 檔案</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 模式（也可設為 &#x27;production&#x27;）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>安裝所需的 CSS loader：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、打包與啟動"><a href="#五、打包與啟動" class="headerlink" title="五、打包與啟動"></a>五、打包與啟動</h2><p>執行打包指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>

<p>執行後會自動將所有相依檔案打包為 <code>dist/main.js</code>，可以直接打開 <code>dist/index.html</code> 查看效果。</p>
<hr>
<h2 id="六、啟用-Webpack-Dev-Server（開發伺服器）"><a href="#六、啟用-Webpack-Dev-Server（開發伺服器）" class="headerlink" title="六、啟用 Webpack Dev Server（開發伺服器）"></a>六、啟用 Webpack Dev Server（開發伺服器）</h2><p>為了開發方便，我們可以啟用內建的開發伺服器，支援 HMR（Hot Module Replacement）功能。</p>
<p>安裝 dev server：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>

<p>在 <code>webpack.config.js</code> 增加設定：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">static</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自動開啟瀏覽器</span></span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,  <span class="comment">// 啟用 HMR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新 <code>package.json</code> 的 scripts：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>開發伺服器啟動後會自動開啟 <code>localhost:3000</code>，修改檔案後可即時預覽變更。</p>
<hr>
<h2 id="七、區分開發與生產模式"><a href="#七、區分開發與生產模式" class="headerlink" title="七、區分開發與生產模式"></a>七、區分開發與生產模式</h2><p>在實際開發中，我們會針對開發與正式環境建立不同的設定檔，使用 <code>webpack-merge</code> 套件來合併共用設定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-merge</span><br></pre></td></tr></table></figure>

<p>建立以下三個檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webpack.common.js</span><br><span class="line">webpack.dev.js</span><br><span class="line">webpack.prod.js</span><br></pre></td></tr></table></figure>

<p><code>webpack.common.js</code> 放共用設定，其他兩個則各自設定環境特有的項目，例如：</p>
<ul>
<li><code>webpack.dev.js</code>: 開啟 Source Map、HMR</li>
<li><code>webpack.prod.js</code>: 最佳化壓縮、移除 console.log 等</li>
</ul>
<hr>
<h2 id="八、擴充功能：使用-Babel-處理-ES6"><a href="#八、擴充功能：使用-Babel-處理-ES6" class="headerlink" title="八、擴充功能：使用 Babel 處理 ES6+"></a>八、擴充功能：使用 Babel 處理 ES6+</h2><p>Webpack 本身不會轉譯 JavaScript，需要搭配 Babel：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>

<p>新增 <code>.babelrc</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>webpack.config.js</code> 加入規則：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣就能讓 Webpack 在打包過程中使用 Babel 將 ES6+ 語法轉譯為相容的版本。</p>
<hr>
<h2 id="九、使用-Plugin-擴充功能：HtmlWebpackPlugin"><a href="#九、使用-Plugin-擴充功能：HtmlWebpackPlugin" class="headerlink" title="九、使用 Plugin 擴充功能：HtmlWebpackPlugin"></a>九、使用 Plugin 擴充功能：HtmlWebpackPlugin</h2><p>HtmlWebpackPlugin 可自動產生並插入 <code>script</code> 標籤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>修改設定：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;./dist/index.html&quot;</span>,</span><br><span class="line">    <span class="attr">inject</span>: <span class="string">&quot;body&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>不再需要手動在 <code>index.html</code> 中引入 <code>main.js</code>，Webpack 會自動插入對應 bundle。</p>
<hr>
<h2 id="十、結語與建議"><a href="#十、結語與建議" class="headerlink" title="十、結語與建議"></a>十、結語與建議</h2><p>Webpack 雖然設定上比 Vite 複雜，但擁有極高的自訂彈性與完整生態系，是大型專案不可或缺的建構工具。透過 Loader 處理不同格式的資源、Plugin 擴充功能，再加上分環境設定與開發伺服器支援，Webpack 能有效協助你管理現代前端應用的整個建構流程。</p>
<p>適合情境包括：</p>
<ul>
<li>React、Vue 中大型應用</li>
<li>多入口或模組系統複雜的專案</li>
<li>需要高度自訂打包流程的企業內部系統</li>
</ul>
<p>雖然 Vite、Parcel 等工具正迅速崛起，但 Webpack 仍是學習前端建構工具不可忽略的重要基礎。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket 入門教學筆記（ESM 模組版） | 學習筆記</title>
    <url>/2024/07/10/learning-notes-websocket-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代前端與全端開發中，許多應用需求都仰賴即時資料傳輸，例如即時聊天、線上協作、股票報價、IoT 裝置通訊等。而傳統的 HTTP 協定採用「請求－回應」模式，並不適合雙向即時通訊。這時，WebSocket 協定就成為更有效率的替代方案。</p>
<p><strong>WebSocket</strong> 是 HTML5 標準的一部分，它允許在用戶端與伺服器之間建立一條持久的雙向連線。這使得伺服器能即時推播資料給客戶端，而非只能等待客戶端請求，適合實作低延遲、高互動的應用場景。</p>
<p>本教學將透過現代的 <strong>ESM（ECMAScript Module）語法</strong>，介紹如何在 Node.js 環境中建立 WebSocket 應用，並搭配 HTML 客戶端示範雙向通訊流程。</p>
<hr>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li><p><strong>WebSocket 是什麼？</strong><br>一種基於 TCP 的雙向通訊協定，可在瀏覽器與伺服器之間建立長連線。</p>
</li>
<li><p><strong>優點</strong></p>
<ul>
<li>持久連線，不需每次重複建立與關閉連線</li>
<li>支援伺服器主動推播資料給客戶端</li>
<li>節省頻寬與延遲</li>
<li>適用於高即時性場景</li>
</ul>
</li>
<li><p><strong>WebSocket vs HTTP</strong></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>HTTP</th>
<th>WebSocket</th>
</tr>
</thead>
<tbody><tr>
<td>通訊模式</td>
<td>客戶端請求 → 伺服器回應</td>
<td>雙向（Client ↔ Server）</td>
</tr>
<tr>
<td>連線型態</td>
<td>短連線</td>
<td>長連線（持續開啟）</td>
</tr>
<tr>
<td>傳輸效率</td>
<td>較低（含 header）</td>
<td>高效（精簡封包）</td>
</tr>
</tbody></table>
</li>
<li><p><strong>常見應用情境</strong></p>
<ul>
<li>即時聊天系統</li>
<li>線上遊戲同步</li>
<li>IoT 裝置狀態回報</li>
<li>即時儀表板或股市報價</li>
</ul>
</li>
<li><p><strong>基本 API（前端）</strong></p>
<ul>
<li><code>new WebSocket(url)</code>：建立連線</li>
<li><code>socket.onopen</code>：連線成功</li>
<li><code>socket.send()</code>：傳送資料</li>
<li><code>socket.onmessage</code>：接收訊息</li>
<li><code>socket.onclose</code>：連線關閉</li>
<li><code>socket.onerror</code>：錯誤處理</li>
</ul>
</li>
</ul>
<hr>
<h2 id="實作範例（Node-js-ESM-原生-HTML）"><a href="#實作範例（Node-js-ESM-原生-HTML）" class="headerlink" title="實作範例（Node.js + ESM + 原生 HTML）"></a>實作範例（Node.js + ESM + 原生 HTML）</h2><h3 id="一、專案初始化"><a href="#一、專案初始化" class="headerlink" title="一、專案初始化"></a>一、專案初始化</h3><p>建立一個新的資料夾並初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> websocket-esm-demo</span><br><span class="line"><span class="built_in">cd</span> websocket-esm-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install ws</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code> 以啟用 ESM 模組支援：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;websocket-esm-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ws&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="二、伺服器端（使用-ESM-模組語法）"><a href="#二、伺服器端（使用-ESM-模組語法）" class="headerlink" title="二、伺服器端（使用 ESM 模組語法）"></a>二、伺服器端（使用 ESM 模組語法）</h3><p>建立 <code>server.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ws&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用戶已連線&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到用戶訊息：<span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">`伺服器收到：<span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;連線已關閉&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket 錯誤：&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket 伺服器啟動於 ws://localhost:8080&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="三、客戶端-HTML（WebSocket-客戶端）"><a href="#三、客戶端-HTML（WebSocket-客戶端）" class="headerlink" title="三、客戶端 HTML（WebSocket 客戶端）"></a>三、客戶端 HTML（WebSocket 客戶端）</h3><p>建立 <code>index.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket ESM 範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WebSocket 即時通訊示範<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入訊息&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage()&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">logMessage</span>(<span class="string">&#x27;已連線至伺服器&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">logMessage</span>(<span class="string">`來自伺服器：<span class="subst">$&#123;event.data&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">logMessage</span>(<span class="string">&#x27;連線已關閉&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">logMessage</span>(<span class="string">&#x27;連線發生錯誤&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">send</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">logMessage</span>(<span class="string">`你說：<span class="subst">$&#123;input.value&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        li.<span class="property">textContent</span> = msg;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;log&#x27;</span>).<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="四、執行與測試"><a href="#四、執行與測試" class="headerlink" title="四、執行與測試"></a>四、執行與測試</h3><ol>
<li>啟動伺服器：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打開 <code>index.html</code>（直接用瀏覽器開啟或用 VSCode Live Server 插件）</li>
<li>在輸入框輸入訊息，點擊「送出」，觀察瀏覽器與後端終端機回應。</li>
</ol>
<hr>
<h2 id="補充與進階建議"><a href="#補充與進階建議" class="headerlink" title="補充與進階建議"></a>補充與進階建議</h2><ul>
<li><strong>安全性：</strong> 若部署在生產環境，應使用 <code>wss://</code>（WebSocket over TLS）取代 <code>ws://</code>。</li>
<li><strong>重連策略：</strong> 真實場景下需考慮自動重連機制（如斷線重試）。</li>
<li><strong>認證機制：</strong> WebSocket 不支援標準 HTTP 標頭傳遞 JWT，通常可透過 URL query 傳 token，或搭配 Session Cookie。</li>
<li><strong>整合框架：</strong> 可結合 Express、Koa、Fastify 使用同一個 HTTP 伺服器提供 HTTP 與 WS。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>WebSocket 是實現現代即時網頁應用的重要基礎建設，能提供更快、更輕量的資料通訊方式。透過本文，你應該已能建立一個使用 ESM 寫法的簡單 WebSocket 應用，並了解其基本運作流程。未來你可以進一步探索如 Socket.IO、SignalR 或 WebRTC 等進階解決方案，以支援更多功能與兼容性需求。</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>NodeJS</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>軟體工程師和 Web 前後端開發技能樹/學習藍圖（Roadmap）</title>
    <url>/2024/06/22/software-engineer-and-web-develement-skill-tree/</url>
    <content><![CDATA[<h1 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h1><p><a href="https://roadmap.sh/frontend">Frontend Roadmap</a> &#x2F; <a href="https://roadmap.sh/frontend?r=frontend-beginner">Frontend Beginner Roadmap</a></p>
<ol>
<li><input checked="" disabled="" type="checkbox"> HTML</li>
<li><input disabled="" type="checkbox"> CSS</li>
<li><input disabled="" type="checkbox"> JavaScript</li>
<li><input disabled="" type="checkbox"> Version Control Systems&#x2F;Git&#x2F;Github</li>
<li><input disabled="" type="checkbox"> npm</li>
<li><input disabled="" type="checkbox"> Vue</li>
<li><input disabled="" type="checkbox"> React</li>
<li><input disabled="" type="checkbox"> Angular</li>
<li><input disabled="" type="checkbox"> TailwindCSS</li>
<li><input disabled="" type="checkbox"> Vitest</li>
<li><input disabled="" type="checkbox"> Cypress&#x2F;Jest</li>
<li><input disabled="" type="checkbox"> TypeScript</li>
<li><input disabled="" type="checkbox"> PWA</li>
<li><input disabled="" type="checkbox"> SASS&#x2F;LESS&#x2F;PostCSS</li>
<li><input disabled="" type="checkbox"> NodeJS</li>
</ol>
<h1 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h1><p><a href="https://roadmap.sh/backend">Backend Roadmap</a> &#x2F; <a href="https://roadmap.sh/backend?r=backend-beginner">Backend Beginner Roadmap</a></p>
<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p><a href="https://roadmap.sh/devops">DevOps Roadmap</a> &#x2F; <a href="https://roadmap.sh/devops?r=devops-beginner">DevOps Beginner Roadmap</a></p>
<h1 id="全端"><a href="#全端" class="headerlink" title="全端"></a>全端</h1><p><a href="https://roadmap.sh/full-stack">Full Stack Roadmap</a></p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://github.com/kamranahmedse/developer-roadmap?tab=readme-ov-file">github developer-roadmap</a></li>
<li><a href="https://hackmd.io/@were1122was/BkUpHXuAq">N+1 Queries 效能問題</a></li>
</ol>
]]></content>
      <tags>
        <tag>Software Engineer</tag>
        <tag>Frontend Roadmap</tag>
        <tag>Backend Roadmap</tag>
        <tag>DevOps</tag>
        <tag>Full Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>常見軟體工程師/Web 開發技術面試及學習資源整理</title>
    <url>/2023/03/22/software-engineer-technical-interview-resources/</url>
    <content><![CDATA[<p>以下彙整常見軟體工程師技術面試及學習資源整理：</p>
<h2 id="程式解題網站"><a href="#程式解題網站" class="headerlink" title="程式解題網站"></a>程式解題網站</h2><ol>
<li><a href="https://coderbyte.com/developers">coderbyte</a></li>
<li><a href="https://www.codility.com/">codility</a></li>
<li><a href="https://www.hackerrank.com/">hackerrank</a></li>
<li><a href="https://leetcode.com/">leetcode</a></li>
<li><a href="https://www.codewars.com/">codewars</a></li>
<li><a href="https://www.testgorilla.com/">testgorilla</a></li>
<li><a href="https://wehelp.tw/coding">WeHelp Coding 程式解題系統</a></li>
</ol>
<h2 id="線上程式學習網站"><a href="#線上程式學習網站" class="headerlink" title="線上程式學習網站"></a>線上程式學習網站</h2><ol>
<li><a href="https://scrimba.com/home">scrimba</a></li>
<li><a href="https://www.codecademy.com/">codecademy</a></li>
<li><a href="https://www.pluralsight.com/">pluralsight</a></li>
<li><a href="https://teamtreehouse.com/">teamtreehouse</a></li>
<li><a href="https://www.udemy.com/">udemy</a></li>
<li><a href="https://www.freecodecamp.org/">freecodecamp</a></li>
<li><a href="https://developer.mozilla.org/en-US/curriculum/">MDN Curriculum</a></li>
<li><a href="https://www.frontendmentor.io/">frontendmentor</a></li>
<li><a href="https://www.w3schools.com/js/default.asp">JavaScript Tutorial</a></li>
<li><a href="https://www.w3schools.com/react/default.asp">React Tutorial</a></li>
</ol>
<h2 id="常見程式題目"><a href="#常見程式題目" class="headerlink" title="常見程式題目"></a>常見程式題目</h2><ol>
<li><a href="https://github.com/lydiahallie/javascript-questions">lydiahallie JavaScript Questions</a></li>
<li><a href="https://www.frontendinterviewhandbook.com/">Front End Interview Handbook</a></li>
<li><a href="https://bigfrontend.dev/">BigFrontEnd.dev</a></li>
<li><a href="https://www.greatfrontend.com/">greatfrontend</a></li>
<li><a href="https://www.explainthis.io/zh-hant/swe-questions/frontend">explainthis 最常見的前端面試題目</a></li>
<li><a href="https://leetcode.com/studyplan/30-days-of-javascript/">leetcode 30 Days of JavaScript</a></li>
<li><a href="https://leetcode.com/studyplan/top-interview-150/">leetcode Top Interview 150</a></li>
<li><a href="https://www.hackerrank.com/domains/react">react hackerrank</a></li>
<li><a href="https://coderbyte.com/challenges">coderbyte Challenges</a></li>
</ol>
<h2 id="技術面試題目"><a href="#技術面試題目" class="headerlink" title="技術面試題目"></a>技術面試題目</h2><ol>
<li><a href="https://medium.com/hannah-lin/%E9%9D%A2%E8%A9%A6-%E4%B8%AD%E8%8B%B1%E5%B0%8D%E7%85%A7%E4%B9%8B-ts-%E9%9D%A2%E8%A9%A6%E9%A1%8C-1c2e0c6e6b3b">[面試] 中英對照之 TS 面試題</a></li>
<li><a href="https://medium.com/hannah-lin/2024-%E8%B3%87%E6%B7%B1%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97-3cc0f718e78f">2024 資深前端工程師面試心得</a></li>
<li><a href="https://www.freecodecamp.org/news/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb/">Three Ways to Reverse a String in JavaScript</a></li>
</ol>
<h2 id="系統設計"><a href="#系統設計" class="headerlink" title="系統設計"></a>系統設計</h2><ol>
<li><a href="https://www.explainthis.io/zh-hant/swe-questions/system-design">最完整的系統設計面試題</a></li>
<li><a href="https://myapollo.com.tw/blog/interview-question-system-design-introduction/">後端工程師面試考什麼 - 系統設計(system design)心法篇</a></li>
<li><a href="https://www.greatfrontend.com/front-end-system-design-playbook/framework">The RADIO Framework</a></li>
</ol>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10244809?sc=rss.iron">【Day 13】什麼是工程師的技術面試？為什麼技術面試看的不只是技術？</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>Software Engineer</tag>
        <tag>前端工程師</tag>
        <tag>軟體工程</tag>
        <tag>Frontend Roadmap</tag>
        <tag>網頁開發</tag>
        <tag>網站開發</tag>
        <tag>網站開發工具</tag>
        <tag>學習資源</tag>
        <tag>技術面試</tag>
      </tags>
  </entry>
  <entry>
    <title>常見軟體工程師/網頁開發工具和學習資源整理</title>
    <url>/2024/03/22/software-engineering-web-dev-tools-resources/</url>
    <content><![CDATA[<p>以下彙整常見 Web 網頁開發工具和資源整理：</p>
<h2 id="VS-Code-套件"><a href="#VS-Code-套件" class="headerlink" title="VS Code 套件"></a>VS Code 套件</h2><ol>
<li>emmet</li>
<li>Live Server</li>
<li>Material Icon Theme</li>
<li>Babel JavaScript</li>
<li>Prettier</li>
<li>CodeSnap</li>
<li>JavaScript code snippets</li>
<li>Peacock</li>
<li>TODO Highlight</li>
<li>Code Runner</li>
<li>Live Share</li>
<li>Color Highlight</li>
</ol>
<h2 id="Chrome-瀏覽器擴充套件"><a href="#Chrome-瀏覽器擴充套件" class="headerlink" title="Chrome 瀏覽器擴充套件"></a>Chrome 瀏覽器擴充套件</h2><ol>
<li>Responsive Viewer</li>
<li>HTML5 Outliner</li>
<li>ColorZilla</li>
<li>Fonts Ninja</li>
<li>Check My Links</li>
</ol>
<h2 id="終端機工具"><a href="#終端機工具" class="headerlink" title="終端機工具"></a>終端機工具</h2><ol>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh Themes</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a></li>
</ol>
<p>(1). Terminal App：iTerm2<br>網站：<a href="https://iterm2.com/">https://iterm2.com</a></p>
<p>(2). Shell：zsh（macOS 預設就是 zsh）<br>macOS Catalina 之後預設就是 zsh，不用特別安裝<br>比 bash 現代，有 plugin &amp; theme 支援</p>
<p>(3). Framework：Oh My Zsh<br>網站：<a href="https://ohmyz.sh/">https://ohmyz.sh</a></p>
<p>優點：<br>超多好用 plugin（git、docker、npm、自動補齊等）<br>主題選擇豐富（powerlevel10k、agnoster…）<br>安裝簡單，社群活躍</p>
<p>安裝指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">brew install romkatv/powerlevel10k/powerlevel10k</span><br><span class="line"><span class="comment"># vim ~/.zshrc 修改主題樣式</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h1 id="流行技術文件"><a href="#流行技術文件" class="headerlink" title="流行技術文件"></a>流行技術文件</h1><ol>
<li><a href="https://context7.com/">Up-to-date documentation for LLMs and AI code editors</a></li>
</ol>
<h2 id="假文字"><a href="#假文字" class="headerlink" title="假文字"></a>假文字</h2><ol>
<li><a href="https://pinkylam.me/generator/chinese-lorem-ipsum/">中文亂數假文產生器 Chinese Lorem Ipsum</a></li>
<li><a href="https://www.lipsum.com/">英文 Lorem Ipsum</a></li>
</ol>
<h2 id="假圖"><a href="#假圖" class="headerlink" title="假圖"></a>假圖</h2><ol>
<li><a href="https://fakeimg.pl/">Fake images please?</a></li>
<li><a href="https://picsum.photos/">Picsum photos</a></li>
<li><a href="https://placehold.co/">placehold</a></li>
</ol>
<h2 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h2><ol>
<li><a href="https://lucide.dev/">lucide</a></li>
</ol>
<h2 id="投影片"><a href="#投影片" class="headerlink" title="投影片"></a>投影片</h2><ol>
<li><a href="https://sli.dev/">Slidev - Presentation Slides for Developers</a></li>
</ol>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ol>
<li><a href="https://docusaurus.io/">Docusaurus</a></li>
</ol>
<h2 id="影片"><a href="#影片" class="headerlink" title="影片"></a>影片</h2><ol>
<li><a href="https://www.pexels.com/search/videos/creative%20commons%20zero/">Free Creative Commons Zero Videos</a></li>
</ol>
<h1 id="前端學習資源"><a href="#前端學習資源" class="headerlink" title="前端學習資源"></a>前端學習資源</h1><ol>
<li><a href="https://frontendmasters.com/guides/front-end-handbook/2024/">前端開發大全手冊：The Front End Developer&#x2F;Engineer Handbook 2024</a></li>
<li><a href="https://100dayscss.com/">100 天 CSS 練習挑戰</a></li>
<li><a href="https://javascript30.com/">javascript30</a></li>
<li><a href="https://www.greatfrontend.com/">greatfrontend</a></li>
<li><a href="https://www.thisweb.dev/post/front-end-beginner-guide">零基礎一年轉職前端工程師：完整路徑、心得、資源全公開</a></li>
</ol>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ol>
<li><a href="https://daisyui.com/">daisyui</a></li>
<li><a href="https://tailwindcss.com/">TailwindCSS</a></li>
<li><a href="https://realnewbie.com/coding/css/beginner-guide-integrating-tailwindcss-with-daisyui/">新手入門：TailwindCSS 與 DaisyUI 的整合指南</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20128346/ironman/3396">重新認識 Flex 和 Grid 系列</a></li>
</ol>
<h2 id="CSS-文件"><a href="#CSS-文件" class="headerlink" title="CSS 文件"></a>CSS 文件</h2><ol>
<li><a href="https://css-tricks.com/">css-tricks</a></li>
</ol>
<h2 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h2><ol>
<li><a href="https://www.joshwcomeau.com/css/custom-css-reset/">A Modern CSS Reset</a></li>
<li><a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS</a></li>
</ol>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol>
<li><a href="https://learngitbranching.js.org/">Learn Git Branching</a></li>
</ol>
<h2 id="CSS-選擇器練習"><a href="#CSS-選擇器練習" class="headerlink" title="CSS 選擇器練習"></a>CSS 選擇器練習</h2><ol>
<li><a href="https://flukeout.github.io/">CSS Dinner</a></li>
</ol>
<h2 id="CSS-排版練習"><a href="#CSS-排版練習" class="headerlink" title="CSS 排版練習"></a>CSS 排版練習</h2><ol>
<li><a href="https://flexboxfroggy.com/">Flexbox Froggy</a></li>
<li><a href="https://cssgridgarden.com/">CSS Grid Garden</a></li>
</ol>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ol>
<li><a href="https://jsonplaceholder.typicode.com/">{JSON} Placeholder Free fake and reliable API for testing and prototyping.</a></li>
</ol>
<h2 id="設計"><a href="#設計" class="headerlink" title="設計"></a>設計</h2><ol>
<li><a href="https://www.s5-style.com/">s5-style</a></li>
<li><a href="https://www.cssdesignawards.com/">cssdesignawards</a></li>
</ol>
<h2 id="CSS-動畫"><a href="#CSS-動畫" class="headerlink" title="CSS 動畫"></a>CSS 動畫</h2><ol>
<li><a href="https://cubic-bezier.com/">CSS 貝茲曲線</a></li>
</ol>
<h2 id="文件工具"><a href="#文件工具" class="headerlink" title="文件工具"></a>文件工具</h2><ol>
<li><a href="https://docusaurus.io/">docusaurus</a></li>
</ol>
<h2 id="線上編輯器"><a href="#線上編輯器" class="headerlink" title="線上編輯器"></a>線上編輯器</h2><ol>
<li><a href="https://codesandbox.io/">codesandbox</a></li>
<li><a href="https://codepen.io/">codepen</a></li>
<li><a href="https://jsbin.com/">jsbin</a></li>
</ol>
<h2 id="VS-Code-排版工具"><a href="#VS-Code-排版工具" class="headerlink" title="VS Code 排版工具"></a>VS Code 排版工具</h2><p>安裝 Prettier 外掛<br>1️. 打開 <code>VS Code</code> → <code>Extensions</code> → 搜尋 <code>Prettier</code> - <code>Code formatter</code> → 安裝</p>
<p>2️. 在你的 VS Code 設定檔 <code>.vscode/settings.json</code>（或直接設定 → 搜尋「<code>prettier」</code>）加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>prettier.semi: true</code> 就是 每行最後自動加分號<br>以後每次 存檔（<code>Ctrl+S</code>）會自動補分號、排版！</p>
<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>eslint.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js <span class="keyword">from</span> <span class="string">&#x27;@eslint/js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> globals <span class="keyword">from</span> <span class="string">&#x27;globals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pluginVue <span class="keyword">from</span> <span class="string">&#x27;eslint-plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;eslint/config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">files</span>: [<span class="string">&#x27;**/*.&#123;js,mjs,cjs,vue&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">ignores</span>: [<span class="string">&#x27;dist/**&#x27;</span>, <span class="string">&#x27;node_modules/**&#x27;</span>],</span><br><span class="line">    <span class="attr">plugins</span>: &#123; js &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&#x27;js/recommended&#x27;</span>],</span><br><span class="line">    <span class="attr">rules</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">files</span>: [<span class="string">&#x27;**/*.&#123;js,mjs,cjs,vue&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">languageOptions</span>: &#123; <span class="attr">globals</span>: globals.<span class="property">browser</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  pluginVue.<span class="property">configs</span>[<span class="string">&#x27;flat/essential&#x27;</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>軟體工程師</tag>
        <tag>Software Engineer</tag>
        <tag>Web</tag>
        <tag>前端工程師</tag>
        <tag>軟體工程</tag>
        <tag>Frontend Roadmap</tag>
        <tag>網頁開發</tag>
        <tag>網站開發</tag>
        <tag>網站開發工具</tag>
        <tag>學習資源</tag>
        <tag>Software Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>常見 Web Frontend 前端工程師面試準備題目清單</title>
    <url>/2024/01/22/web-frontend-interview-question-list/</url>
    <content><![CDATA[<h1 id="前端工程面試準備清單"><a href="#前端工程面試準備清單" class="headerlink" title="前端工程面試準備清單"></a>前端工程面試準備清單</h1><ol>
<li><p><strong>掌握基礎知識</strong>：在開始解決複雜問題之前，您需要確保對前端開發的基礎知識有扎實的理解，包括 HTML、CSS 和 JavaScript，以及它們如何協作來創建響應式和互動式的網頁。如果您認為自己在這些主題上仍需學習，請參考前端學習路線圖。</p>
</li>
<li><p><strong>練習寫程式</strong>：通過小型專案或在 LeetCode 和 HackerRank 等平台上解決問題，來提升您的前端寫程式技能。專注於與前端開發相關的挑戰。</p>
</li>
<li><p><strong>學習現代框架（framework）和函式庫（library）</strong>：了解如 React、Angular 或 Vue.js 等流行的框架和函式庫。掌握這些工具對於現代前端開發職位至關重要。</p>
</li>
<li><p><strong>熟悉開發工作流程中的基礎工具</strong>：確保您對基本工具和實踐（例如版本控制工具 Git、測試工具（單元測試和整合測試）以及建構工具如 Vite）感到熟悉。這些對於任何前端角色來說都至關重要。</p>
</li>
<li><p><strong>理解 UI&#x2F;UX 原則</strong>：掌握基本的設計和用戶體驗概念可以讓您在前端開發者中脫穎而出。學習無障礙設計、響應式設計，以及如何創建直觀的界面。</p>
</li>
<li><p><strong>準備作品集</strong>：設計和開發作品集或是 side project 可以幫助你展現你在前端的技術能力。</p>
</li>
<li><p><strong>研究不同公司和產業</strong>：透過了解您面試的公司業務和產品，表現出對公司的興趣。準備一些問題在面試時提出，展示您對該角色的重視。</p>
</li>
<li><p><strong>提升溝通能力</strong>：雖然這並非特定於前端開發，但好的溝通能力可以幫助我們與設計師和 PM 在工作上更容易溝通協調。</p>
</li>
</ol>
<h1 id="前端工程面試問題清單"><a href="#前端工程面試問題清單" class="headerlink" title="前端工程面試問題清單"></a>前端工程面試問題清單</h1><h2 id="Beginner-Level"><a href="#Beginner-Level" class="headerlink" title="Beginner Level"></a>Beginner Level</h2><h3 id="1-什麼是-HTML-x2F-CSS-中的-id-和-class-的差別？"><a href="#1-什麼是-HTML-x2F-CSS-中的-id-和-class-的差別？" class="headerlink" title="1. 什麼是 HTML&#x2F;CSS 中的 id 和 class 的差別？"></a>1. 什麼是 HTML&#x2F;CSS 中的 id 和 class 的差別？</h3><p><strong>id</strong> 是用於唯一標識單個 HTML 元素的識別符號。<strong>class</strong> 則是一個可重複使用的識別符號，可以應用於多個元素。</p>
<p><strong>HTML 中 id 與 class 的區別</strong></p>
<ul>
<li>當需要通過 CSS 或 JavaScript 操作單個元素時，應該使用 <strong>id</strong>。</li>
<li>當需要操作一組 DOM 元素時，應該使用 <strong>class</strong>。</li>
</ul>
<p><strong>在 CSS 中：</strong></p>
<ul>
<li><code>#id</code> 選擇具有該 id 的特定元素。</li>
<li><code>.class</code> 選擇具有該 class 的所有元素。</li>
</ul>
<hr>
<h3 id="2-什麼是-CSS-中的盒模型（Box-Model）？"><a href="#2-什麼是-CSS-中的盒模型（Box-Model）？" class="headerlink" title="2. 什麼是 CSS 中的盒模型（Box Model）？"></a>2. <strong>什麼是 CSS 中的盒模型（Box Model）？</strong></h3><p>CSS 盒模型描述了在 <code>DOM</code> 中為元素生成的矩形框。盒模型由以下幾層組成：</p>
<ol>
<li><strong>內容（Content）：</strong> 最內層，用於顯示文字和圖片。</li>
<li><strong>內邊距（Padding）：</strong> 內容與邊框之間的空間。</li>
<li><strong>邊框（Border）：</strong> 包圍元素的外緣，位於內邊距的外側。</li>
<li><strong>外邊距（Margin）：</strong> 邊框外部的空間，用於將該元素與其他元素分隔開。</li>
</ol>
<p>通過分別控制每一層，您可以定義使用者介面中每個元素的外觀。</p>
<h3 id="3-CSS-中-inline、inline-block-和-block-元素的區別"><a href="#3-CSS-中-inline、inline-block-和-block-元素的區別" class="headerlink" title="3. CSS 中 inline、inline-block 和 block 元素的區別"></a>3. <strong>CSS 中 inline、inline-block 和 block 元素的區別</strong></h3><p>在 CSS 中，inline、inline-block 和 block 元素的區別在於它們在網頁中的呈現方式：</p>
<ol>
<li><p><strong>Inline（行內元素）：</strong></p>
<ul>
<li>不具有寬度或高度的屬性。</li>
<li>不會換行，僅佔據其內容所需的寬度。</li>
<li>範例：<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>。</li>
</ul>
</li>
<li><p><strong>Inline-block（行內區塊元素）：</strong></p>
<ul>
<li>與 inline 元素類似，不會換行，但允許設定寬度和高度。</li>
<li>範例：<code>&lt;img&gt;</code>。</li>
</ul>
</li>
<li><p><strong>Block（區塊元素）：</strong></p>
<ul>
<li>會從新行開始，默認佔據可用寬度的整行。</li>
<li>可以自訂寬度和高度。</li>
<li>範例：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="4-HTML-結構中的-SEO-最佳實踐"><a href="#4-HTML-結構中的-SEO-最佳實踐" class="headerlink" title="4. HTML 結構中的 SEO 最佳實踐"></a>4. <strong>HTML 結構中的 SEO 最佳實踐</strong></h3><p><strong>純 HTML 方面：</strong></p>
<ol>
<li><strong>使用語義化的 HTML：</strong> 使用 <code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;main&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code> 和 <code>&lt;footer&gt;</code> 等標籤，提供有意義的結構。</li>
<li><strong>正確的標題層級：</strong> 正確使用 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>，每個頁面僅使用一次 <code>&lt;h1&gt;</code> 作為主標題，其次是 <code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code> 至 <code>&lt;h6&gt;</code>等。</li>
<li><strong>Meta 標籤：</strong> 包含相關的 <code>&lt;meta&gt;</code> 標籤，例如描述（description）、關鍵字（keywords）和視口（viewport），提供網站的元數據。</li>
<li><strong>圖片的 Alt 屬性：</strong> 為圖片添加描述性的 <code>alt</code> 屬性，以提高無障礙性和搜尋引擎的理解能力。</li>
</ol>
<p><strong>其他最佳實踐：</strong></p>
<ol>
<li><strong>內部連結：</strong> 使用內部鏈接連接網站內的內容，幫助搜尋引擎爬取並了解網站結構。</li>
<li><strong>行動裝置友好設計：</strong> 以行動優先的方式設計網站和 CSS，確保響應式設計以提升用戶體驗和搜尋引擎排名。</li>
<li><strong>快速載入時間：</strong> 優化圖片、使用高效的代碼並利用快取來提升頁面載入速度，載入速度越快，在搜尋結果中越具競爭力。</li>
</ol>
<hr>
<h3 id="5-什麼是文件物件模型（DOM）？"><a href="#5-什麼是文件物件模型（DOM）？" class="headerlink" title="5. 什麼是文件物件模型（DOM）？"></a>5. <strong>什麼是文件物件模型（DOM）？</strong></h3><p>文件物件模型（Document Object Model，DOM）是用於網頁文件的 API，它將 HTML 網頁的結構表示為一棵樹，其中每個節點對應於文檔中的一部分（例如元素、屬性或文本）。</p>
<hr>
<h3 id="6-如何為元素添加事件監聽器？"><a href="#6-如何為元素添加事件監聽器？" class="headerlink" title="6. 如何為元素添加事件監聽器？"></a>6. <strong>如何為元素添加事件監聽器？</strong></h3><p>要為元素添加事件監聽器，首先需要通過文檔物件的某種方法（如 <code>getElementById</code>）獲取該元素，然後使用該物件的 <code>addEventListener</code> 方法。</p>
<p>此方法需要接收三個參數：事件名稱（如 <code>click</code>、<code>keyup</code>、<code>mouseup</code> 等）、事件處理函數，以及可選的 boolean（指示是否在捕獲階段觸發事件）。</p>
<hr>
<h3 id="7-null-和-undefined-的區別是什麼？"><a href="#7-null-和-undefined-的區別是什麼？" class="headerlink" title="7. null 和 undefined 的區別是什麼？"></a>7. <strong>null 和 undefined 的區別是什麼？</strong></h3><p>在 JavaScript 中：</p>
<ul>
<li><strong>undefined</strong> 是新變數的默認值，表示變數已被定義，但尚未賦值。</li>
<li><strong>null</strong> 是一個值，表示<code>沒有值</code>或<code>沒有物件</code>，需要由開發者明確賦值給變數。</li>
</ul>
<hr>
<h3 id="8-cookies、sessionStorage-和-localStorage-的區別是什麼？"><a href="#8-cookies、sessionStorage-和-localStorage-的區別是什麼？" class="headerlink" title="8. cookies、sessionStorage 和 localStorage 的區別是什麼？"></a>8. <strong>cookies、sessionStorage 和 localStorage 的區別是什麼？</strong></h3><ul>
<li><p><strong>Cookies：</strong><br>小型資料片段，儲存於瀏覽器中，主要用於在 HTTP 請求之間保留資訊，例如用戶身份驗證、會話管理和追蹤用戶行為。</p>
</li>
<li><p><strong>sessionStorage：</strong><br>用於臨時儲存，只能在同一個 <code>session</code> 中訪問（即瀏覽器視窗或標籤頁開著時）。當瀏覽器視窗關閉時，數據會丟失。</p>
</li>
<li><p><strong>localStorage：</strong><br>與 <code>sessionStorage</code> 類似，但資料在瀏覽器窗口或標籤頁關閉後依然存在，提供長期存儲功能。相較於 <code>cookies</code>，<code>localStorage</code> 的大小限制更大，更適合儲存大資料集。</p>
</li>
</ul>
<hr>
<h3 id="9-瀏覽器如何渲染網站？"><a href="#9-瀏覽器如何渲染網站？" class="headerlink" title="9. 瀏覽器如何渲染網站？"></a>9. <strong>瀏覽器如何渲染網站？</strong></h3><p>瀏覽器渲染網頁的過程包括以下幾個步驟：</p>
<ol>
<li>解析 HTML。</li>
<li>解析 CSS 並應用樣式。</li>
<li>計算頁面佈局中每個元素的位置。</li>
<li>將實際像素繪製到屏幕上，並將它們排序到不同的圖層中。</li>
<li>組合所有圖層，根據 <code>z-index</code> 值、不透明度等渲染到屏幕上。</li>
<li>執行 JavaScript 代碼。</li>
<li>加載非同步資源。</li>
</ol>
<hr>
<h3 id="10-什麼是媒體查詢（Media-Queries）？"><a href="#10-什麼是媒體查詢（Media-Queries）？" class="headerlink" title="10. 什麼是媒體查詢（Media Queries）？"></a>10. <strong>什麼是媒體查詢（Media Queries）？</strong></h3><p>媒體查詢是 CSS 中的一項功能，允許前端開發者根據設備或視口的各種特性應用不同的樣式。例如，根據設備的寬度、高度、方向或類型設定不同的樣式。</p>
<p>通過媒體查詢，可以實現響應式設計，使樣式適應不同的屏幕尺寸和設備能力。</p>
<hr>
<h2 id="中級知識"><a href="#中級知識" class="headerlink" title="中級知識"></a><strong>中級知識</strong></h2><h3 id="1-em-和-rem-單位的區別"><a href="#1-em-和-rem-單位的區別" class="headerlink" title="1. em 和 rem 單位的區別"></a><strong>1. em 和 rem 單位的區別</strong></h3><p><strong>EM 和 REM 在 CSS 中的比較</strong><br>它們都是相對單位，但相對於的基準不同：</p>
<ul>
<li><strong>em</strong>：相對於父元素的字體大小。如果父元素的字體大小是 20px，設定 <code>font-size: 2em</code> 則等於 40px。</li>
<li><strong>rem</strong>：相對於頁面根元素（<code>&lt;html&gt;</code> 元素）的字體大小。例如，若 <code>&lt;html&gt;</code> 的字體大小是 16px，則 <code>1rem</code> 等於 16px。</li>
</ul>
<hr>
<h3 id="2-如何建立-Flexbox-布局"><a href="#2-如何建立-Flexbox-布局" class="headerlink" title="2. 如何建立 Flexbox 布局"></a><strong>2. 如何建立 Flexbox 布局</strong></h3><p>建立 Flexbox 布局需要兩個主要步驟：</p>
<ol>
<li><strong>設置容器元素：</strong> 將 <code>display: flex;</code> 屬性應用到容器元素上。</li>
<li><strong>設定子元素的 Flex 屬性：</strong> 對容器內的每個元素設置 Flexbox 屬性，例如 <code>flex: 1</code>。</li>
</ol>
<hr>
<h3 id="3-CSS-特殊性（Specificity）的解釋及其運作原理"><a href="#3-CSS-特殊性（Specificity）的解釋及其運作原理" class="headerlink" title="3. CSS 特殊性（Specificity）的解釋及其運作原理"></a><strong>3. CSS 特殊性（Specificity）的解釋及其運作原理</strong></h3><p>CSS 特殊性用於決定在樣式衝突時應該應用哪一組樣式。它遵循以下優先順序：</p>
<ol>
<li><strong>行內樣式（Inline style）：</strong> 擁有最高優先權，會覆蓋其他樣式。</li>
<li><strong>ID 選擇器：</strong> 僅次於行內樣式，覆蓋其他類型的樣式。</li>
<li><strong>類別選擇器（Class-based selectors）：</strong> 覆蓋類型選擇器，但低於 ID 選擇器和行內樣式。</li>
<li><strong>類型選擇器（Type selectors）：</strong> 優先級最低，會被其他選擇器覆蓋。</li>
</ol>
<hr>
<h3 id="4-如何建立-CSS-Grid-布局"><a href="#4-如何建立-CSS-Grid-布局" class="headerlink" title="4. 如何建立 CSS Grid 布局"></a><strong>4. 如何建立 CSS Grid 布局</strong></h3><p>建立 Grid 布局的步驟：</p>
<ol>
<li>將包含元素設置為 <code>display: grid</code>。</li>
<li>使用 <code>grid-template-rows</code> 和 <code>grid-template-columns</code> 屬性定義網格的結構。</li>
<li>將元素放置於網格容器內，並使用 <code>grid-column</code> 或 <code>grid-row</code> 屬性指定位置。</li>
</ol>
<hr>
<h3 id="5-什麼是閉包（Closures），以及如何使用它們？"><a href="#5-什麼是閉包（Closures），以及如何使用它們？" class="headerlink" title="5. 什麼是閉包（Closures），以及如何使用它們？"></a><strong>5. 什麼是閉包（Closures），以及如何使用它們？</strong></h3><p>閉包是指當一個函數定義在另一個函數內時，即使外部函數已執行完畢，內部函數仍然可以訪問外部函數的變數和參數。<br>閉包的用途：</p>
<ul>
<li><strong>創建私有變數：</strong> 內部函數可以訪問，但外部無法直接存取。</li>
<li><strong>實現複雜對象：</strong> 創建只有內部上下文可用的豐富數據結構。</li>
</ul>
<hr>
<h3 id="6-什麼是事件委派（Event-Delegation）？"><a href="#6-什麼是事件委派（Event-Delegation）？" class="headerlink" title="6. 什麼是事件委派（Event Delegation）？"></a><strong>6. 什麼是事件委派（Event Delegation）？</strong></h3><p>事件委派是一種在父元素上定義事件處理器的技術，用來處理子元素觸發的事件。<br><strong>事件委派原理：</strong><br>當事件被觸發時，它會沿著 DOM 層次結構向上冒泡，直到到達父元素的事件處理器。</p>
<hr>
<h3 id="7-什麼是-Promise，如何運作？"><a href="#7-什麼是-Promise，如何運作？" class="headerlink" title="7. 什麼是 Promise，如何運作？"></a><strong>7. 什麼是 Promise，如何運作？</strong></h3><p>Promise 是 JavaScript 中用於表示非同步操作最終完成（或失敗）的對象。</p>
<ul>
<li><strong>用途：</strong> 通過 Promise，可以處理非同步操作的成功結果或失敗情況。</li>
<li><strong>工作原理：</strong> Promise 提供 <code>.then()</code> 和 <code>.catch()</code> 方法，分別用於處理成功和失敗的結果。</li>
</ul>
<hr>
<h3 id="8-如何優化網站資源以加快加載時間？"><a href="#8-如何優化網站資源以加快加載時間？" class="headerlink" title="8. 如何優化網站資源以加快加載時間？"></a><strong>8. 如何優化網站資源以加快加載時間？</strong></h3><p>根據資源類型，使用不同的優化技術：</p>
<ul>
<li><strong>CSS 和 JavaScript 文件：</strong> 最小化並壓縮代碼。</li>
<li><strong>圖片：</strong> 使用如 JPEGOptim 或 ImageOptim 等工具壓縮圖片，確保過程中不損失質量。</li>
</ul>
<hr>
<h3 id="9-什麼是-Service-Workers？它們的用途是什麼？"><a href="#9-什麼是-Service-Workers？它們的用途是什麼？" class="headerlink" title="9. 什麼是 Service Workers？它們的用途是什麼？"></a><strong>9. 什麼是 Service Workers？它們的用途是什麼？</strong></h3><p>Service Workers 是在網頁應用程序背景中執行的腳本，與網頁主線程分開運作，提供以下功能：</p>
<ul>
<li>離線快取。</li>
<li>推送通知。</li>
<li>背景同步。</li>
</ul>
<hr>
<h3 id="10-什麼是同源政策（Same-Origin-Policy）？"><a href="#10-什麼是同源政策（Same-Origin-Policy）？" class="headerlink" title="10. 什麼是同源政策（Same-Origin Policy）？"></a><strong>10. 什麼是同源政策（Same-Origin Policy）？</strong></h3><p>同源政策是瀏覽器中的一項安全功能，用於防止網站從其他網站訪問數據（如導入腳本或 API 請求）。</p>
<ul>
<li><strong>用途：</strong> 防止惡意腳本竊取其他網站的敏感數據（如 cookies、本地存儲或內容）。</li>
<li><strong>解決方案：</strong> 使用跨源資源共享（CORS）。服務器需指定允許訪問的域名，並且客戶端應發送正確的標頭，雙方即可進行互動，即使不在同一域名下。</li>
</ul>
<hr>
<h2 id="進階知識"><a href="#進階知識" class="headerlink" title="進階知識"></a><strong>進階知識</strong></h2><h3 id="1-什麼是-CSS-變數？什麼時候會用到？"><a href="#1-什麼是-CSS-變數？什麼時候會用到？" class="headerlink" title="1. 什麼是 CSS 變數？什麼時候會用到？"></a><strong>1. 什麼是 CSS 變數？什麼時候會用到？</strong></h3><p>CSS 變數類似於前端程式語言中的變數，可以由開發者設置並在整個 CSS 樣式表中重複使用。</p>
<ul>
<li><strong>優點：</strong> 將全局使用的值（如顏色）集中管理。例如，CSS 框架常用變數設置常量（如將黑色設置為 <code>#222</code> 而非 <code>#000</code>）。</li>
<li><strong>應用場景：</strong> 當網站需要一致性的設計風格或易於更新的全局樣式時。</li>
</ul>
<hr>
<h3 id="2-如何實現-Critical-CSS-優化網頁的加載時間？"><a href="#2-如何實現-Critical-CSS-優化網頁的加載時間？" class="headerlink" title="2. 如何實現 Critical CSS 優化網頁的加載時間？"></a><strong>2. 如何實現 Critical CSS 優化網頁的加載時間？</strong></h3><p>Critical CSS 是指將關鍵 CSS 規則從 CSS 文件中移除，並內嵌到網站的 <code>&lt;head&gt;</code> 元素中：</p>
<ol>
<li><strong>方法：</strong> 將頁面渲染所需的關鍵樣式直接嵌入到 HTML 文件的 <code>&lt;head&gt;</code> 中。</li>
<li><strong>好處：</strong> 關鍵樣式能立即加載，減少渲染時間；非關鍵樣式則隨後加載（如主 CSS 文件）。</li>
</ol>
<hr>
<h3 id="3-JavaScript-中的事件循環（Event-Loop）是如何運作的？"><a href="#3-JavaScript-中的事件循環（Event-Loop）是如何運作的？" class="headerlink" title="3. JavaScript 中的事件循環（Event Loop）是如何運作的？"></a><strong>3. JavaScript 中的事件循環（Event Loop）是如何運作的？</strong></h3><p>事件循環是 JavaScript 的核心概念，允許執行非同步代碼。<br><strong>運作過程：</strong></p>
<ol>
<li><strong>調用棧（Call Stack）：</strong> JavaScript 使用<code>單線程</code>執行代碼，函數按順序添加到調用棧，執行完畢後移除。</li>
<li><strong>非同步操作：</strong> <code>非同步操作</code>由瀏覽器的 Web API 處理，從調用棧中移除，單獨執行。</li>
<li><strong>任務隊列（Task Queue）：</strong> 當非同步操作完成後，回調函數被放入任務隊列中等待執行。</li>
<li><strong>事件循環：</strong> 檢查調用棧是否為空，若為空，將任務隊列中的回調函數推入調用棧執行。</li>
</ol>
<hr>
<h3 id="4-JavaScript-中的非同步操作處理方式有哪些？"><a href="#4-JavaScript-中的非同步操作處理方式有哪些？" class="headerlink" title="4. JavaScript 中的非同步操作處理方式有哪些？"></a><strong>4. JavaScript 中的非同步操作處理方式有哪些？</strong></h3><p>JavaScript 提供了 4 種主要方法處理非同步操作：</p>
<ol>
<li><strong>回調函數（Callbacks）：</strong> 當非同步操作完成後調用指定函數。</li>
<li><strong>Promises：</strong> 表示非同步操作最終完成的結果，使用 <code>.then()</code> 和 <code>.catch()</code> 處理成功或失敗情況。</li>
<li><strong>Async&#x2F;Await：</strong> Promise 的進化語法，讓非同步代碼看起來像同步代碼，易於閱讀和維護。</li>
<li><strong>事件監聽器（Event Listeners）：</strong> 當特定事件（如用戶操作）觸發時調用回調函數。</li>
</ol>
<hr>
<h3 id="5-如何在單頁應用程式中管理狀態？"><a href="#5-如何在單頁應用程式中管理狀態？" class="headerlink" title="5. 如何在單頁應用程式中管理狀態？"></a><strong>5. 如何在單頁應用程式中管理狀態？</strong></h3><p>在沒有使用函式庫或是框架（如 React 或 Vue.js）的情況下，管理狀態相對複雜，可考慮以下方法：</p>
<ol>
<li><strong>全局變數：</strong> 使用全域變數或全域對象集中管理狀態，但大型應用難以維護。</li>
<li><strong>模組模式（Module Pattern）：</strong> 將狀態封裝到模組內，提供清晰的 API 來管理狀態。</li>
<li><strong>發布&#x2F;訂閱模式（Pub&#x2F;Sub Pattern）：</strong> 基於事件驅動的架構，分離狀態變更邏輯，更靈活但更複雜。</li>
<li><strong>狀態管理庫：</strong> 使用像 Redux 這樣的庫，幫助統一管理應用的狀態。</li>
</ol>
<hr>
<h3 id="6-虛擬-DOM-的運作方式及其優勢"><a href="#6-虛擬-DOM-的運作方式及其優勢" class="headerlink" title="6. 虛擬 DOM 的運作方式及其優勢"></a><strong>6. 虛擬 DOM 的運作方式及其優勢</strong></h3><p><strong>運作方式：</strong></p>
<ol>
<li>將用戶界面複製到內存中的「虛擬 DOM」，這是一個輕量級的 DOM 副本。</li>
<li>當狀態變化時，創建新的虛擬 DOM 並與舊版本進行比較（Diff 算法）。</li>
<li>系統計算出最小的更新操作，僅修改需要變更的節點，減少真實 DOM 操作。</li>
</ol>
<p><strong>優勢：</strong></p>
<ul>
<li><strong>性能優化：</strong> 通過減少 DOM 更新次數，降低 UI 的重排和重繪成本。</li>
<li><strong>跨平台支持：</strong> 虛擬 DOM 提供了應用與渲染 API 的抽象層，支持跨平台實現。</li>
<li><strong>一致性：</strong> 確保 UI 與內部狀態同步，減少錯誤和不一致情況。</li>
</ul>
<hr>
<h3 id="7-什麼是伺服器端渲染（SSR）？何時使用？"><a href="#7-什麼是伺服器端渲染（SSR）？何時使用？" class="headerlink" title="7. 什麼是伺服器端渲染（SSR）？何時使用？"></a><strong>7. 什麼是伺服器端渲染（SSR）？何時使用？</strong></h3><p><strong>伺服器端渲染（SSR）：</strong> 是由伺服器生成完整的 HTML，並將其發送給客戶端，而非在客戶端動態生成內容（即客戶端渲染，CSR）。</p>
<p><strong>適用場景：</strong></p>
<ul>
<li><strong>內容驅動型網站：</strong> 如新聞網站、部落格等需要快速呈現內容的網站。</li>
<li><strong>SEO 重視應用：</strong> 如果網站依賴於搜索引擎流量，SSR 可以改善 SEO 表現。</li>
<li><strong>漸進式 Web 應用：</strong> 需要快速加載的應用可使用 SSR 初始渲染，並在客戶端進行後續交互。</li>
</ul>
<hr>
<h3 id="8-如何分析並改進-Web-應用性能？"><a href="#8-如何分析並改進-Web-應用性能？" class="headerlink" title="8. 如何分析並改進 Web 應用性能？"></a><strong>8. 如何分析並改進 Web 應用性能？</strong></h3><p>需要監控的核心指標包括：</p>
<ul>
<li><strong>首次內容繪製（FCP）：</strong> 首次內容呈現所需時間。</li>
<li><strong>最大內容繪製（LCP）：</strong> 最大內容元素呈現所需時間。</li>
<li><strong>可交互時間（TTI）：</strong> 網頁完全可交互所需時間。</li>
<li><strong>總阻塞時間（TBT）：</strong> 主線程被阻塞的總時間。</li>
<li><strong>累積佈局偏移（CLS）：</strong> 測量視覺穩定性。</li>
</ul>
<hr>
<h3 id="9-什麼是內容安全政策（CSP）？如何提高應用的安全性？"><a href="#9-什麼是內容安全政策（CSP）？如何提高應用的安全性？" class="headerlink" title="9. 什麼是內容安全政策（CSP）？如何提高應用的安全性？"></a><strong>9. 什麼是內容安全政策（CSP）？如何提高應用的安全性？</strong></h3><p><strong>CSP（Content Security Policy）：</strong> 一種安全標準，用於防止跨站腳本（XSS）和代碼注入攻擊。它通過定義和執行允許的資源來源白名單來運作。</p>
<p><strong>優勢：</strong></p>
<ul>
<li><strong>增強安全性：</strong> 有效防禦 XSS 和數據注入攻擊。</li>
<li><strong>更高控制權：</strong> 開發者可細化政策來控制內容來源。</li>
<li><strong>符合規範：</strong> 幫助達成 OWASP Top 10 等安全合規要求。</li>
</ul>
<hr>
<h3 id="10-什麼是-Tree-Shaking？如何提升-Web-應用性能？"><a href="#10-什麼是-Tree-Shaking？如何提升-Web-應用性能？" class="headerlink" title="10. 什麼是 Tree Shaking？如何提升 Web 應用性能？"></a><strong>10. 什麼是 Tree Shaking？如何提升 Web 應用性能？</strong></h3><p><strong>Tree Shaking：</strong> 是 JavaScript 模組打包工具（如 Webpack、Vite）用來移除未使用代碼的技術。</p>
<p><strong>優勢：</strong></p>
<ul>
<li><strong>減少打包大小：</strong> 移除無用代碼，減少發送給客戶端的資源量，加速加載。</li>
<li><strong>性能提升：</strong> 更小的打包大小使解析和執行代碼更快，提升應用響應速度。</li>
<li><strong>資源最佳化：</strong> 開發者可撰寫模組化代碼，而無需擔心未使用的依賴影響打包體積。</li>
</ul>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://github.com/kamranahmedse/developer-roadmap?tab=readme-ov-file">github developer-roadmap</a></li>
<li><a href="https://roadmap.sh/questions/frontend">Top 30 Popular Front End Developer Interview Questions</a></li>
<li><a href="https://life.huli.tw/2020/04/28/2020-senior-front-end-engineer-interview-249c719c1a97/">2020 資深前端工程師面試心得（4y, 100k+）</a></li>
<li><a href="https://www.explainthis.io/zh-hant/swe-questions/frontend">最常見的前端面試題目</a></li>
<li><a href="https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese-traditional/">前端工程師面試問題集 - H5BP</a></li>
<li><a href="https://gist.github.com/hanksudo/5873678">前端工程師面試問題集</a></li>
<li><a href="https://hackmd.io/@mingjunlu/front-end-interview-questions">前端面試問題</a></li>
<li><a href="https://medium.com/@Ching810/2024%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%A9%A6%E6%8A%80%E8%A1%93%E8%80%83%E5%AF%A6%E6%88%B0%E5%88%86%E4%BA%AB-js%E7%AF%87-387ed332d12b">前端面試技術考實戰分享-JS 篇</a></li>
<li><a href="https://www.1111.com.tw/1000w/fanshome/discussTopic.asp?cat=FANS&id=233847">QNAP&#x2F;雷技&#x2F;Yahoo&#x2F;Synology-前端工程師-面試經驗分享</a></li>
<li><a href="https://medium.com/hannah-lin/2024-%E8%B3%87%E6%B7%B1%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97-3cc0f718e78f">2024 資深前端工程師面試心得</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions">JavaScript Questions</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>Software Engineer</tag>
        <tag>前端工程師</tag>
        <tag>Frontend Roadmap</tag>
        <tag>前端面試</tag>
        <tag>interview question</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 資訊安全（Security）簡明入門教學指南</title>
    <url>/2016/10/10/web-security-tutorial-introduction/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>隨著越來越多的服務和資料連上網路，Web 資訊安全已經是 Web 開發中一個重要的環節，然而許多開發者往往希望專注在應用程式的研發，而忽略了資訊安全的重要性。不過若是沒有嚴謹地考慮資訊安全的問題，等到事情發生後反而會造成更嚴重的財務和名譽上的損失。本文希望整理一些 Web 常見資訊安全（Security）的議題和學習資源和讀者一起教學相長，下次建構網路服務時可以更留心 Web 的資訊安全，甚至努力成為一個好的白帽駭客（White Hat Hacker）。</p>
<h1 id="常見-Web-資訊安全（Security）議題"><a href="#常見-Web-資訊安全（Security）議題" class="headerlink" title="常見 Web 資訊安全（Security）議題"></a>常見 Web 資訊安全（Security）議題</h1><p>一般而言 Web 資訊安全（Security）需要符合三點安全要素：</p>
<ol>
<li>保密性：透過加密等方法確保資料的保密性</li>
<li>完整性：要求使用者取得的資料是完整不可被竄改的</li>
<li>可用性：保證網站服務的持續可訪問性</li>
</ol>
<p>以下列出常見影響 Web 資訊安全（Security）的攻擊手法：</p>
<ol>
<li><p>SQL Injection</p>
<p>使用惡意的 SQL 語法去影響資料庫內容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="comment">-- 為忽略掉後面的 SQL</span></span><br><span class="line"><span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>profile?id<span class="operator">=</span><span class="number">1</span>&quot;;DROP TABLE user--</span><br><span class="line"></span><br><span class="line">SELECT * FROM USER WHERE id = &quot;<span class="number">1</span>&quot;; DROP TABLE user--</span><br></pre></td></tr></table></figure>

<p>使用者登入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> password&quot; AND 1=1--</span><br><span class="line">SELECT * FROM USER WHERE username = &quot;Mark&quot;; AND 1=1-- AND PASSWORD=&quot;<span class="number">1234</span>&quot;</span><br></pre></td></tr></table></figure>

<p>簡易防範方式：不信任使用者輸入的資料，確保使用者輸入都要 <code>escape</code> 掉，目前許多成熟 Web 框架都有支援 ORM 服務，大部分都基本防範了 SQL Injection。</p>
</li>
<li><p>XSS（Cross-Site Scripting）<br>XSS 亦即將惡意程式碼注入到網頁，讓看到網頁的使用者會受影響，常見的受災戶包括論壇、討論區等網路服務。事實上 XSS 概念很簡單，透過表單輸入建立一些惡意網址、惡意圖片網址或是 JavsScript 程式碼在 HTML 中注入，當使用者觀看頁面時即會觸發。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>更多關於 XSS 資料可以參考 <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet">XSS Filter Evasion Cheat Sheet</a>。另外也有<a href="https://jiji262.github.io/wooyun_articles/drops/XSS%20Filter%20Evasion%20Cheat%20Sheet%20%E4%B8%AD%E6%96%87%E7%89%88.html">簡體中文版</a></p>
<p>簡易防範方式：不信任使用者輸入的資料，將所有輸入內容編碼並過濾。</p>
</li>
<li><p>CSRF</p>
<p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">CSRF 跨站請求偽造</a> 又被稱為 one-click attack 或者 session riding，通常縮寫為 CSRF 或者 XSRF， 是一種挾制用戶在當前已登入的 Web 應用程式上執行非本意的操作的攻擊方法。</p>
<p>舉維基百科上的例子：假如一家銀行用以執行轉帳操作的 URL 地址如下：</p>
<p><code>http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=10000&amp;for=PayeeName</code></p>
<p>那麼，一個惡意攻擊者可以在另一個網站上放置如下代碼：</p>
<p><code>&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Mark&amp;amount=10000&amp;for=Bob&quot;&gt;</code></p>
<p>若是使用者的登入資訊尚未過期的話就會損失 10000 元的金額。</p>
<p>簡易防範方式：</p>
<ol>
<li><p>檢查 Referer 欄位<br>這是比較基本的驗證方式，通常 HTTP 標頭中有一個 Referer 欄位，其應該和 Request 位置在同一個網域下，因此可以透過驗證是否是在同一個網域來驗證是否為惡意的請求，但會有被更改偽裝的可能。</p>
</li>
<li><p>添加驗證 token<br>一般現在許多的 Web Framework 都有提供在表單加入由 Server 生成的隨機驗證 CSRF 的碼，可以協助防止 CSRF 攻擊。</p>
</li>
</ol>
</li>
<li><p>DoS<br><a href="https://zh.wikipedia.org/zh-tw/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A">Dos 阻斷式攻擊（Denial of Service Attack）</a>又稱為洪水攻擊，是一種網路攻擊手法，其目的在於使目標電腦的網路或系統資源耗盡，使服務暫時中斷或停止，導致真正的使用者無法使用服務。</p>
<p>根據維基百科：DoS 攻擊可以具體分成兩種形式：<code>頻寬消耗型</code> 以及 <code>資源消耗型</code>，它們都是透過大量合法或偽造的請求占用大量網路以及器材資源，以達到癱瘓網路以及系統的目的。</p>
<p>頻寬消耗攻擊又分洪泛攻擊或放大攻擊：洪泛攻擊的特點是利用殭屍程式傳送大量流量至受損的受害者系統，目的在於堵塞其頻寬。放大攻擊和洪泛攻擊類似，是通過惡意放大流量限制受害者系統的頻寬；其特點是利用殭屍程式通過偽造的源 IP（即攻擊目標）向某些存在漏洞的伺服器傳送請求，伺服器在處理請求後向偽造的源 IP 傳送應答，由於這些服務的特殊性導致應答包比請求包更長，因此使用少量的頻寬就能使伺服器傳送大量的 Response 到目標主機上。</p>
<p>資源消耗型又分為協定分析攻擊（SYN flood，SYN 洪水）、LAND attack、CC 攻擊、殭屍網路攻擊、Application level floods（應用程式級洪水攻擊）等。</p>
<p>簡易防範方式：</p>
<ol>
<li><p>防火牆<br>設定規則阻擋簡單攻擊</p>
</li>
<li><p>交換機<br>大多交換機有限制存取控制功能</p>
</li>
<li><p>路由器<br>大多路由器有限制存取控制功能</p>
</li>
<li><p>黑洞啟動<br>將請求轉到空介面或是不存在的位置</p>
</li>
</ol>
</li>
<li><p>檔案上傳漏洞<br>許多網路應用程式可以讓使用者上傳檔案到伺服器端，由於我們不知道使用者會上傳什麼類型的檔案，若不留意就會造成很大的問題。</p>
<p>簡單防範方式：</p>
<ol>
<li><p>阻止非法文件上傳</p>
<ul>
<li>設定檔名白名單</li>
<li>文件標頭判斷</li>
</ul>
</li>
<li><p>阻止非法文件執行</p>
<ul>
<li>存儲目錄與 Web 應用分離</li>
<li>存儲目錄無執行權限</li>
<li>文件重命名</li>
<li>圖片壓縮</li>
</ul>
</li>
</ol>
</li>
<li><p>加密安全<br>有許多的網路服務有提供會員註冊的服務，當使用者使用註冊時注意不要將密碼明碼存入資料庫。若是你使用的服務會在忘記密碼時寄明碼密碼給你很有可能該服務就是使用明碼加密，此時就很容易會榮登<a href="http://plainpass.com/">我的密碼沒加密</a>的網站。不過儘管將密碼加密也未必安全，像是網路上就存在一些<a href="http://www.cmd5.com/">破解網站</a>、<a href="https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8">彩虹表</a> 可以破解加密的密碼。所以通常我們會針對不同使用者使用隨機產生的 salt 字串來加鹽後加密的方式來提高密碼的強健性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sha3(salt + gap + password)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="簡易資安入侵流程"><a href="#簡易資安入侵流程" class="headerlink" title="簡易資安入侵流程"></a>簡易資安入侵流程</h1><ol>
<li><p>偵查（Reconnaissance）<br>攻擊者準備攻擊之前進行的調查，使用 Google 或是社交工程找尋目標的相關資訊，以利之後的攻擊</p>
</li>
<li><p>掃描（Scanning）<br>掃描目標主機的弱點，取得主機作業系統、服務和運作狀況等相關資訊</p>
</li>
<li><p>取得權限（Gaining Access）<br>利用系統弱點取得主機權限</p>
</li>
<li><p>維持權限（Maintaining Access）<br>維持目前取得的權限，以便日後再次存取而不需繁雜的步驟</p>
</li>
<li><p>清除足跡（Clearing Tracks）<br>清除入侵的痕跡</p>
</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上整理一些 Web 常見資訊安全（Security）的議題和學習資源和讀者一起教學相長，成為一個好的白帽駭客（White Hat Hacker）。隨著網路科技的發展，資訊安全的議題只會越來越重要，當下次當有產品要上線到正式環境時，不妨使用 <a href="https://github.com/FallibleInc/security-guide-for-developers/blob/master/security-checklist.md">The Security Checklist</a> 確認一下有哪些資安注意事項是我們沒有注意到的。</p>
<h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><ol>
<li><a href="http://newsletter.ascc.sinica.edu.tw/news/read_news.php?nid=1909">Web Security 網站安全基礎篇（一）</a></li>
<li><a href="http://newsletter.ascc.sinica.edu.tw/news/read_news.php?nid=1917">Web Security 網站安全基礎篇（二）</a></li>
<li><a href="https://www.qa-knowhow.com/?p=2975">3 個免費的 Web 資訊安全自動化測試工具</a></li>
<li><a href="http://blog.orange.tw/2016/07/hitcon-2016-slides-bug-bounty-hunter.html">HITCON 2016 投影片 - Bug Bounty 獎金獵人甘苦談 那些年我回報過的漏洞</a></li>
<li><a href="https://github.com/FallibleInc/security-guide-for-developers/blob/master/security-checklist.md">FallibleInc&#x2F;security-guide-for-developers</a></li>
<li><a href="https://dotblogs.com.tw/jimmyyu/2009/08/16/10098">[資訊安全]防範 Cross-Site-Scripting(XSS)</a></li>
<li><a href="http://www.ithome.com.tw/node/66888">網站防範 XSS 攻擊的關鍵思考</a></li>
</ol>
]]></content>
      <tags>
        <tag>Web, Security</tag>
      </tags>
  </entry>
  <entry>
    <title>10 key terms related to backend engineering</title>
    <url>/2024/01/21/en/about-backend-engineer-10-keywords/</url>
    <content><![CDATA[<p>Here are 10 key terms related to backend engineering, covering essential skills, tools, and work methodologies:  </p>
<ol>
<li><p><strong>Node.js &#x2F; Python &#x2F; Java &#x2F; Ruby &#x2F; PHP</strong> – Common backend programming languages used to build server-side applications.  </p>
</li>
<li><p><strong>Database</strong> – Includes <strong>SQL (e.g., MySQL, PostgreSQL)</strong> and <strong>NoSQL (e.g., MongoDB, Redis)</strong> for data storage, management, and optimization.  </p>
</li>
<li><p><strong>REST API &#x2F; GraphQL</strong> – Designing and implementing server-side APIs to support frontend data requests.  </p>
</li>
<li><p><strong>Authentication &amp; Authorization</strong> – Technologies like OAuth, JWT, and session management to ensure user security and data protection.  </p>
</li>
<li><p><strong>Docker &#x2F; Kubernetes</strong> – Containerization and orchestration tools for application deployment and resource management.  </p>
</li>
<li><p><strong>Cloud Services</strong> – Platforms like AWS, Google Cloud, and Microsoft Azure for cloud-based application hosting and operations.  </p>
</li>
<li><p><strong>Microservices</strong> – Architectural style for designing modular and independently deployable services.  </p>
</li>
<li><p><strong>Message Queues</strong> – Tools like RabbitMQ and Kafka for asynchronous communication in distributed systems.  </p>
</li>
<li><p><strong>Version Control</strong> – Systems like Git&#x2F;GitHub for code management and team collaboration.  </p>
</li>
<li><p><strong>Performance Optimization</strong> – Techniques for improving server and database performance to enhance system efficiency.</p>
</li>
</ol>
<p>These key concepts form the foundation of a backend engineer’s work and career growth. By continuously gaining experience and developing projects, one can become a more proficient software engineer.</p>
]]></content>
      <tags>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>backend</tag>
        <tag>backend engineer</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
