<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>關於 Web 網頁後端工程師 Backend Engineer 的 10 個關鍵字</title>
    <url>/2020/06/21/about-backend-engineer-10-keywords/</url>
    <content><![CDATA[<p>以下整理了後端工程師相關的 10 個關鍵字，涵蓋技能、工具與工作方式：</p>
<ol>
<li><p><strong>Node.js &#x2F; Python &#x2F; Java &#x2F; Ruby &#x2F; PHP</strong>：常見的後端程式語言，用於構建伺服器端應用程式。</p>
</li>
<li><p><strong>Database</strong>（資料庫）：包括 <strong>SQL（如 MySQL, PostgreSQL）</strong> 和 <strong>NoSQL（如 MongoDB, Redis）</strong> 的操作與優化。</p>
</li>
<li><p><strong>REST API &#x2F; GraphQL</strong>：設計與實現伺服器端 API 以支援前端資料請求。</p>
</li>
<li><p><strong>Authentication &amp; Authorization</strong>（認證與授權）：如 OAuth、JWT、Session，確保使用者安全與數據保護。</p>
</li>
<li><p><strong>Docker &#x2F; Kubernetes</strong>：容器化與編排工具，用於應用部署與資源管理。</p>
</li>
<li><p><strong>Cloud Services</strong>：如 AWS、Google Cloud、Microsoft Azure，支援應用程式的雲端部署與運行。</p>
</li>
<li><p><strong>Microservices</strong>（微服務架構）：設計可拆分且可獨立部署的服務模組。</p>
</li>
<li><p><strong>Message Queues</strong>（訊息佇列）：如 RabbitMQ、Kafka，用於分布式系統的非同步通訊。</p>
</li>
<li><p><strong>Version Control</strong>（版本控制）：如 Git &#x2F; GitHub，用於團隊協作與程式碼管理。</p>
</li>
<li><p><strong>Performance Optimization</strong>（效能優化）：針對伺服器與資料庫的效能調優，提升系統效率。</p>
</li>
</ol>
<p>以上關鍵字為後端工程師平常工作或是職涯的核心工作內容和技能樹，透過不斷累積相關經驗和專案開發能力，可以讓自己成為更優秀的軟體工程師。</p>
]]></content>
      <tags>
        <tag>開發者</tag>
        <tag>軟體工程師</tag>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>軟體開發</tag>
        <tag>backend</tag>
        <tag>backend engineer</tag>
        <tag>後端開發</tag>
        <tag>後端工程</tag>
        <tag>網頁後端工程師</tag>
        <tag>後端工程師</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>關於 Web 網頁前端工程師 Frontend Engineer 的 10 個關鍵字</title>
    <url>/2020/06/13/about-frontend-engineer-10-keywords/</url>
    <content><![CDATA[<p>以下整理了前端工程師相關的 10 個關鍵字，涵蓋技能、工具與工作方式：</p>
<ol>
<li><p><strong>HTML</strong>：前端結構的基礎語言，用於定義網頁的內容和結構。</p>
</li>
<li><p><strong>CSS</strong>：用於設計網頁的樣式，包括佈局、配色和字體。</p>
</li>
<li><p><strong>JavaScript</strong>：前端開發的核心語言，為網頁添加互動性。</p>
</li>
<li><p><strong>React &#x2F; Vue &#x2F; Angular</strong>：主流的前端框架和函式庫，用於構建動態、模組化的應用程式。</p>
</li>
<li><p><strong>Responsive Design</strong>（響應式設計）：確保網站在不同裝置和螢幕大小下的最佳顯示效果。</p>
</li>
<li><p><strong>REST API &#x2F; GraphQL</strong>：前端與後端通訊的重要工具，用於前後端資料請求與傳輸。</p>
</li>
<li><p><strong>Webpack &#x2F; Vite &#x2F; Parcel</strong>：模組打包工具，用於構建和優化前端資源。</p>
</li>
<li><p><strong>Git &#x2F; GitHub &#x2F; GitLab</strong>：版本控制工具，用於協作開發與代碼管理。</p>
</li>
<li><p><strong>Cross-Browser Compatibility</strong>（跨瀏覽器相容性）：確保網站在不同瀏覽器上的一致性表現。</p>
</li>
<li><p><strong>UI&#x2F;UX Design</strong>（使用者介面&#x2F;使用者體驗設計）：理解使用者需求，優化網頁的易用性與美觀度。</p>
</li>
</ol>
<p>以上關鍵字為前端工程師平常工作或是職涯的核心工作內容和技能樹，透過不斷累積相關經驗和專案開發能力，可以讓自己成為更優秀的軟體工程師。</p>
]]></content>
      <tags>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>開發者</tag>
        <tag>軟體工程師</tag>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>軟體開發</tag>
        <tag>Web</tag>
        <tag>網頁前端工程師</tag>
        <tag>前端工程師</tag>
      </tags>
  </entry>
  <entry>
    <title>關於軟體工程師 Software Engineer 的 10 個關鍵字</title>
    <url>/2015/01/22/about-software-engineer-10-keywords/</url>
    <content><![CDATA[<p>以下整理了軟體工程師相關的十個關鍵字，涵蓋技能、工具與工作方式：</p>
<ol>
<li><strong>程式語言 (Programming Language)</strong> - 如 Python、Java、C++、JavaScript 等。  </li>
<li><strong>版本控制 (Version Control)</strong> - 例如 Git、GitHub（平台）、GitLab（平台）。  </li>
<li><strong>測試 (Testing)</strong> - 單元測試 (Unit Testing)、整合測試 (Integration Testing)。  </li>
<li><strong>敏捷開發 (Agile Development)</strong> - Scrum、Kanban 等工作方法。  </li>
<li><strong>架構設計和系統設計 (Architecture Design、System Design)</strong> - 微服務 (Microservices)、單體架構 (Monolithic Architecture)。  </li>
<li><strong>資料庫 (Database)</strong> - SQL、NoSQL (如 MongoDB)。  </li>
<li><strong>雲端運算 (Cloud Computing)</strong> - AWS、Azure、Google Cloud。  </li>
<li><strong>DevOps</strong> - CI&#x2F;CD、自動化部署 (Automation Deployment)。  </li>
<li><strong>演算法 (Algorithm)</strong> - 演算法、資料結構、問題解決能力。  </li>
<li><strong>團隊合作 (Collaboration)</strong> - 跨部門溝通、工具 (如 JIRA、Confluence)。</li>
</ol>
<p>以上關鍵字為軟體工程師平常工作或是職涯的核心工作內容和技能樹，透過不斷累積相關經驗和專案開發能力，可以讓自己成為更優秀的軟體工程師。</p>
]]></content>
      <tags>
        <tag>開發者</tag>
        <tag>軟體工程師</tag>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>軟體開發</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/01/learning-notes-cookie-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cookie 是一種儲存在使用者瀏覽器上的小型文字檔案，用於保存使用者的狀態或資訊。常見用途包含：</p>
<p><strong>紀錄登入狀態</strong>：讓使用者在網站上保持登入，不需每次重新輸入帳號。<br><strong>使用者偏好設定</strong>：保存使用者選擇的語言、主題等個人化設定。<br><strong>追蹤使用者行為</strong>：例如分析網站流量、廣告投放追蹤等。</p>
<h1 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h1><p>Cookie 依據不同的分類方式，可以分為以下幾種常見種類：</p>
<h3 id="一、依用途分類："><a href="#一、依用途分類：" class="headerlink" title="一、依用途分類："></a>一、依用途分類：</h3><ol>
<li><p><strong>功能性 Cookie（Functional Cookies）</strong>  </p>
<ul>
<li>主要用於提升網站使用體驗，例如記住使用者的登入狀態、語言設定、購物車內容等。</li>
</ul>
</li>
<li><p><strong>必要性 Cookie（Strictly Necessary Cookies）</strong>  </p>
<ul>
<li>維持網站基本運作所需，例如登入認證、網頁導航等，通常無法被關閉。</li>
</ul>
</li>
<li><p><strong>分析型 Cookie（Analytical&#x2F;Performance Cookies）</strong>  </p>
<ul>
<li>用於收集網站流量數據，分析使用者行為，幫助網站優化，例如 Google Analytics。</li>
</ul>
</li>
<li><p><strong>廣告追蹤 Cookie（Advertising&#x2F;Targeting Cookies）</strong>  </p>
<ul>
<li>用於追蹤使用者瀏覽行為，以提供個人化廣告或推薦內容。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、依存放時間分類："><a href="#二、依存放時間分類：" class="headerlink" title="二、依存放時間分類："></a>二、依存放時間分類：</h3><ol>
<li><p><strong>暫時性 Cookie（Session Cookies）</strong>  </p>
<ul>
<li>只在<code>使用者開啟網頁期間有效</code>，<code>關閉瀏覽器後即刪除</code>。</li>
</ul>
</li>
<li><p><strong>永久性 Cookie（Persistent Cookies）</strong>  </p>
<ul>
<li>設定到期日期，存放於使用者裝置上，保存時間較長，即使關閉瀏覽器也不會刪除，<code>直到設定的到期日或手動刪除</code>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、依來源分類："><a href="#三、依來源分類：" class="headerlink" title="三、依來源分類："></a>三、依來源分類：</h3><ol>
<li><p><strong>第一方 Cookie（First-party Cookies）</strong>  </p>
<ul>
<li>由<code>使用者瀏覽的網站</code>所設定，通常用於<code>記錄該網站上的互動紀錄</code>。</li>
</ul>
</li>
<li><p><strong>第三方 Cookie（Third-party Cookies）</strong>  </p>
<ul>
<li>由非該網站的<code>第三方</code>（如廣告商）設定，用於<code>跨網站追蹤使用者行為</code>，以<code>推送廣告</code>等。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、特殊類型："><a href="#四、特殊類型：" class="headerlink" title="四、特殊類型："></a>四、特殊類型：</h3><ol>
<li><p><strong>安全性 Cookie（Secure Cookies）</strong>  </p>
<ul>
<li>只能透過 <code>HTTPS</code> 傳輸，避免被攔截，主要保障敏感資料安全。</li>
</ul>
</li>
<li><p><strong>HttpOnly Cookie</strong>  </p>
<ul>
<li>僅限伺服器端存取，JavaScript 無法讀取，用於防範 <code>XSS</code> 攻擊。</li>
</ul>
</li>
<li><p><strong>SameSite Cookie</strong>  </p>
<ul>
<li>限制跨站請求攜帶 Cookie，減少 <code>CSRF</code> 攻擊風險，值可設為：</li>
<li><code>Strict</code>：禁止跨站請求攜帶 Cookie。</li>
<li><code>Lax</code>：部分允許，如從第三方網站點擊連結進來時可帶 Cookie。</li>
<li><code>None</code>：允許跨站攜帶，但須配合 Secure。</li>
</ul>
</li>
</ol>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>這些分類會依需求搭配使用，例如一個「<code>必要性第一方暫時性 Cookie</code>」可能用於維護<code>登入和操作狀態</code>；一個「<code>第三方廣告追蹤永久性 Cookie</code>」則可能用於<code>跨網站顯示個人化廣告</code>。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Flexbox align-items 和 align-content 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-css-flexbox-align-items-align-content-garden-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 CSS Flexbox 和 Grid 佈局中，<code>align-items</code> 和 <code>align-content</code> 兩者都與「對齊」有關，但適用的情境不同（單行 vs 多行）：</p>
<h2 id="1-align-items"><a href="#1-align-items" class="headerlink" title="1. align-items"></a>1. <code>align-items</code></h2><ul>
<li>作用於<strong>單行內容</strong>（單行 Flexbox 或 Grid 容器內的項目）。</li>
<li>控制<strong>子元素</strong>在<strong>交叉軸（cross-axis）</strong>上的對齊方式。</li>
</ul>
<h3 id="常見值"><a href="#常見值" class="headerlink" title="常見值"></a><strong>常見值</strong></h3><table>
<thead>
<tr>
<th>值</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>stretch</code></td>
<td>預設值，子元素會拉伸填滿容器的交叉軸</td>
</tr>
<tr>
<td><code>flex-start</code></td>
<td>對齊交叉軸的起始點</td>
</tr>
<tr>
<td><code>flex-end</code></td>
<td>對齊交叉軸的結束點</td>
</tr>
<tr>
<td><code>center</code></td>
<td>置中對齊</td>
</tr>
<tr>
<td><code>baseline</code></td>
<td>以文字基線（baseline）對齊</td>
</tr>
</tbody></table>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a><strong>範例</strong></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 子元素在交叉軸上置中對齊 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <strong>效果</strong>：<code>item</code> 會在 <code>container</code> 的交叉軸（垂直方向）置中對齊。</p>
<hr>
<h2 id="2-align-content"><a href="#2-align-content" class="headerlink" title="2. align-content"></a>2. <code>align-content</code></h2><ul>
<li>作用於<strong>多行內容</strong>（當 <code>flex-wrap: wrap</code> 或 Grid 有多行時）。</li>
<li>控制<strong>整體行的對齊</strong>，而不是單個項目。</li>
</ul>
<h3 id="常見值-1"><a href="#常見值-1" class="headerlink" title="常見值"></a><strong>常見值</strong></h3><table>
<thead>
<tr>
<th>值</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>stretch</code></td>
<td>預設值，行會拉伸填滿容器</td>
</tr>
<tr>
<td><code>flex-start</code></td>
<td>行對齊交叉軸的起始點</td>
</tr>
<tr>
<td><code>flex-end</code></td>
<td>行對齊交叉軸的結束點</td>
</tr>
<tr>
<td><code>center</code></td>
<td>行置中對齊</td>
</tr>
<tr>
<td><code>space-between</code></td>
<td>第一行靠起始點，最後一行靠結束點，其他行平均分布</td>
</tr>
<tr>
<td><code>space-around</code></td>
<td>每行之間有相等的間距</td>
</tr>
<tr>
<td><code>space-evenly</code></td>
<td>每行之間及兩側間距相等</td>
</tr>
</tbody></table>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a><strong>範例</strong></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: center; <span class="comment">/* 整體行群組在交叉軸上置中 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：當 <code>.container</code> 高度足夠時，多行 <code>.item</code> 會整體置中排列。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h2><table>
<thead>
<tr>
<th>屬性</th>
<th>影響對象</th>
<th>適用於</th>
<th>主要功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>align-items</code></td>
<td>子元素</td>
<td>單行（未換行）</td>
<td>控制子元素在交叉軸上的對齊</td>
</tr>
<tr>
<td><code>align-content</code></td>
<td>整體行</td>
<td>多行（<code>flex-wrap: wrap</code>）</td>
<td>控制多行的整體對齊</td>
</tr>
</tbody></table>
<p>如果容器內只有<strong>一行</strong>，<code>align-content</code> 通常不會有影響，這時候應該使用 <code>align-items</code>。</p>
<p>需要 <code>align-content</code> 發揮作用時，請確保：</p>
<ol>
<li>容器有 <code>flex-wrap: wrap;</code>（多行）</li>
<li>容器有足夠的<strong>高度</strong>（不然內容會自動填滿）</li>
</ol>
]]></content>
      <tags>
        <tag>Grid Garden</tag>
        <tag>Grid</tag>
        <tag>align-items</tag>
        <tag>align-content</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Flexbox Froggy 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-css-flexbox-froggy-tutorial/</url>
    <content><![CDATA[<h1 id="1-Flexbox-簡介"><a href="#1-Flexbox-簡介" class="headerlink" title="1. Flexbox 簡介"></a>1. Flexbox 簡介</h1><p><code>Flexbox</code>（Flexible Box Layout）是一種 CSS3 佈局模式，專門用來設計一維的彈性佈局，適用於水平或垂直排列元素，使網頁排版更加靈活且易於維護。</p>
<p>Flexbox Froggy 透過小青蛙過河遊戲化方式去介紹 Flexbox 使用方式：</p>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>Welcome to Flexbox Froggy, a game where you help Froggy and friends by writing CSS code! Guide this frog to the lilypad on the right by using the justify-content property, which aligns items horizontally and accepts the following values:</p>
<p>flex-start: Items align to the left side of the container.<br>flex-end: Items align to the right side of the container.<br>center: Items align at the center of the container.<br>space-between: Items display with equal spacing between them.<br>space-around: Items display with equal spacing around them.<br>For example, justify-content: flex-end; will move the frog to the right. </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>Use justify-content again to help these frogs get to their lilypads. Remember that this CSS property aligns items horizontally and accepts the following values:</p>
<p><code>flex-start</code>: Items align to the left side of the container.<br><code>flex-end</code>: Items align to the right side of the container.<br><code>center</code>: Items align at the center of the container.<br><code>space-between</code>: Items display with equal spacing between them.<br><code>space-around</code>: Items display with equal spacing around them.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>Help all three frogs find their lilypads just by using justify-content. This time, the lilypads have lots of space all around them.</p>
<p>If you find yourself forgetting the possible values for a property, you can click on the property name to view them. Try clicking on justify-content.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p>Now the lilypads on the edges have drifted to the shore, increasing the space between them. Use justify-content. This time, the lilypads have equal spacing between them.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><p>Now use align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:</p>
<p><code>flex-start</code>: Items align to the top of the container.<br><code>flex-end</code>: Items align to the bottom of the container.<br><code>center</code>: Items align at the vertical center of the container.<br><code>baseline</code>: Items display at the baseline of the container.<br><code>stretch</code>: Items are stretched to fit the container.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><p>Lead the frog to the center of the pond using a combination of justify-content and align-items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><p>The frogs need to cross the pond again, this time for some lilypads with plenty of space around them. Use a combination of justify-content and align-items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><p>The frogs need to get in the same order as their lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:</p>
<p><code>row</code>: Items are placed the same as the text direction.<br><code>row-reverse</code>: Items are placed opposite to the text direction.<br><code>column</code>: Items are placed top to bottom.<br><code>column-reverse</code>: Items are placed bottom to top.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><p>Help the frogs find their column of lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:</p>
<p><code>row</code>: Items are placed the same as the text direction.<br><code>row-reverse</code>: Items are placed opposite to the text direction.<br><code>column</code>: Items are placed top to bottom.<br><code>column-reverse</code>: Items are placed bottom to top.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><p>Help the frogs get to their own lilypads. Although they seem close, it will take both flex-direction and justify-content to get them there.</p>
<p>Notice that when you set the direction to a reversed row or column, start and end are also reversed.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><p>Help the frogs find their lilypads using flex-direction and justify-content.</p>
<p>Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><p>Help the frogs find their lilypads using flex-direction and justify-content.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><p>Help the frogs find their lilypads using flex-direction, justify-content, and align-items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><p>Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value <code>(-2, -1, 0, 1, 2)</code>.</p>
<p>Use the order property to reorder the frogs according to their lilypads.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><p>Use the order property to send the red frog to his lilypad.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><p>Another property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><p>Combine order with align-self to help the frogs to their destinations.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><p>Oh no! The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:</p>
<p>nowrap: Every item is fit to a single line.<br>wrap: Items wrap around to additional lines.<br>wrap-reverse: Items wrap around to additional lines in reverse.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><p>Help this army of frogs form three orderly columns using a combination of flex-direction and flex-wrap.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><p>The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of the two properties separated by a space.</p>
<p>For example, you can use flex-flow: row wrap to set rows and wrap them.</p>
<p>Try using flex-flow to repeat the previous level.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: column wrap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-21"><a href="#Level-21" class="headerlink" title="Level 21"></a>Level 21</h2><p>The frogs are spread all over the pond, but the lilypads are bunched at the top. You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:</p>
<p><code>flex-start</code>: Lines are packed at the top of the container.<br><code>flex-end</code>: Lines are packed at the bottom of the container.<br><code>center</code>: Lines are packed at the vertical center of the container.<br><code>space-between</code>: Lines display with equal spacing between them.<br><code>space-around</code>: Lines display with equal spacing around them.<br><code>stretch</code>: Lines are stretched to fit the container.<br>This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-22"><a href="#Level-22" class="headerlink" title="Level 22"></a>Level 22</h2><p>Now the current has bunched the lilypads at the bottom. Use align-content to guide the frogs there.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-23"><a href="#Level-23" class="headerlink" title="Level 23"></a>Level 23</h2><p>The frogs have had a party, but it is time to go home. Use a combination of flex-direction and align-content to get them to their lilypads.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-24"><a href="#Level-24" class="headerlink" title="Level 24"></a>Level 24</h2><p>Bring the frogs home one last time by using the CSS properties you’ve learned:</p>
<p><code>justify-content</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>align-items</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>flex-direction</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>order</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>align-self</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>flex-wrap</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>flex-flow</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<p><code>align-content</code>：Aligns flex items along the main axis.</p>
<p>flex-start (default) flex-end center space-between space-around space-evenly</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pond</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://flexboxfroggy.com/">flexboxfroggy</a></li>
</ol>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>Flexbox Froggy</tag>
        <tag>Flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Flexbox 網頁排版技巧入門教學筆記 | 學習筆記</title>
    <url>/2024/11/14/learning-notes-css-flexbox-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-Flexbox-簡介"><a href="#1-Flexbox-簡介" class="headerlink" title="1. Flexbox 簡介"></a>1. Flexbox 簡介</h2><p><code>Flexbox</code>（Flexible Box Layout）是一種 CSS3 佈局模式，專門用來設計一維的彈性佈局，適用於水平或垂直排列元素，使網頁排版更加靈活且易於維護。</p>
<h3 id="1-1-為何使用-Flexbox？"><a href="#1-1-為何使用-Flexbox？" class="headerlink" title="1.1 為何使用 Flexbox？"></a>1.1 為何使用 Flexbox？</h3><ul>
<li><strong>彈性調整</strong>：元素可根據可用空間動態調整大小。</li>
<li><strong>簡化佈局</strong>：減少對 <code>float</code>、<code>inline-block</code> 及 <code>position</code> 依賴。</li>
<li><strong>更好的對齊方式</strong>：內建強大的對齊與分佈控制。</li>
</ul>
<h2 id="2-Flexbox-基本概念"><a href="#2-Flexbox-基本概念" class="headerlink" title="2. Flexbox 基本概念"></a>2. Flexbox 基本概念</h2><p>Flexbox 佈局的核心概念是 <strong>容器（container）</strong> 和 <strong>子項目（items）</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦對容器使用 <code>display: flex</code>，其內部的子元素將自動變成 Flex 子項目，並受 Flex 佈局影響。</p>
<h2 id="3-Flex-容器屬性"><a href="#3-Flex-容器屬性" class="headerlink" title="3. Flex 容器屬性"></a>3. Flex 容器屬性</h2><h3 id="3-1-flex-direction"><a href="#3-1-flex-direction" class="headerlink" title="3.1 flex-direction"></a>3.1 <code>flex-direction</code></h3><p>決定主軸（main axis）方向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row; <span class="comment">/* 預設值，水平排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse; <span class="comment">/* 反向水平排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column; <span class="comment">/* 垂直排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/* 反向垂直排列 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-justify-content"><a href="#3-2-justify-content" class="headerlink" title="3.2 justify-content"></a>3.2 <code>justify-content</code></h3><p>控制子項目在主軸上的對齊方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start; <span class="comment">/* 預設，從左到右排列 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end; <span class="comment">/* 靠右排列 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/* 置中排列 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* 兩端對齊，間距平均分布 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around; <span class="comment">/* 子項目兩側有相等的間距 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly; <span class="comment">/* 所有間距均等 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-align-items"><a href="#3-3-align-items" class="headerlink" title="3.3 align-items"></a>3.3 <code>align-items</code></h3><p>控制子項目在交叉軸（cross axis）上的對齊方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; <span class="comment">/* 靠起始位置對齊 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: flex-end; <span class="comment">/* 靠末端對齊 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 垂直置中對齊 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: stretch; <span class="comment">/* 預設，撐滿高度 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: baseline; <span class="comment">/* 依據文本基線對齊 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-align-content"><a href="#3-4-align-content" class="headerlink" title="3.4 align-content"></a>3.4 <code>align-content</code></h3><p>適用於多行佈局，控制多行之間的間距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Flex-子項目屬性"><a href="#4-Flex-子項目屬性" class="headerlink" title="4. Flex 子項目屬性"></a>4. Flex 子項目屬性</h2><h3 id="4-1-flex-grow"><a href="#4-1-flex-grow" class="headerlink" title="4.1 flex-grow"></a>4.1 <code>flex-grow</code></h3><p>設定子項目如何分配多餘空間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="comment">/* 所有子項目平均分配空間 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-flex-shrink"><a href="#4-2-flex-shrink" class="headerlink" title="4.2 flex-shrink"></a>4.2 <code>flex-shrink</code></h3><p>控制子項目如何縮小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">/* 防止縮小 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-flex-basis"><a href="#4-3-flex-basis" class="headerlink" title="4.3 flex-basis"></a>4.3 <code>flex-basis</code></h3><p>設定子項目的初始大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">200px</span>; <span class="comment">/* 設定初始寬度或高度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-flex"><a href="#4-4-flex" class="headerlink" title="4.4 flex"></a>4.4 <code>flex</code></h3><p>綜合 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">100px</span>; <span class="comment">/* grow, shrink, basis */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-Flexbox-常見佈局範例"><a href="#5-Flexbox-常見佈局範例" class="headerlink" title="5. Flexbox 常見佈局範例"></a>5. Flexbox 常見佈局範例</h2><h3 id="5-1-水平置中"><a href="#5-1-水平置中" class="headerlink" title="5.1 水平置中"></a>5.1 水平置中</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-等寬三欄佈局"><a href="#5-2-等寬三欄佈局" class="headerlink" title="5.2 等寬三欄佈局"></a>5.2 等寬三欄佈局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-兩欄固定-自適應"><a href="#5-3-兩欄固定-自適應" class="headerlink" title="5.3 兩欄固定 + 自適應"></a>5.3 兩欄固定 + 自適應</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>; <span class="comment">/* 固定 200px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 佔滿剩餘空間 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-結論"><a href="#6-結論" class="headerlink" title="6. 結論"></a>6. 結論</h2><p>Flexbox 是一種強大且直觀的 CSS 佈局方式，能夠解決傳統排版難題，使開發者能夠輕鬆實現響應式佈局與對齊方式。本篇筆記介紹了 Flexbox 的基本屬性及常見佈局範例，進一步學習可以研究 CSS Grid 和更進階的排版技巧。</p>
]]></content>
      <tags>
        <tag>Flexbox</tag>
        <tag>css</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS font-size 單位介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/12/14/learning-notes-css-font-size-intro-tutorial/</url>
    <content><![CDATA[<p>在 CSS 中，<code>px</code>、<code>rem</code>、<code>em</code> 和 <code>vh</code> 都可以用來設定 <code>font-size</code>，但它們的用途和適用場景不同。以下是詳細解析與使用建議：</p>
<hr>
<h3 id="1️-px（像素，固定單位）"><a href="#1️-px（像素，固定單位）" class="headerlink" title="1️. px（像素，固定單位）"></a>1️. <strong><code>px</code>（像素，固定單位）</strong></h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li>絕對單位，與螢幕解析度無關。</li>
<li>不會受父元素影響，設定多少就是多少。</li>
</ul>
<h4 id="適用場景"><a href="#適用場景" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p>精確控制字體大小，例如：</p>
<ul>
<li><strong>Logo、按鈕字體</strong></li>
<li><strong>小型 UI 元素（如標籤、提示訊息）</strong></li>
<li><strong>避免字體大小變動的情境</strong></li>
</ul>
<h4 id="範例"><a href="#範例" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">32px</span>; &#125;  <span class="comment">/* 確保標題大小為 32px */</span></span><br><span class="line"><span class="selector-tag">button</span> &#123; <span class="attribute">font-size</span>: <span class="number">14px</span>; &#125;  <span class="comment">/* UI 按鈕文字固定 14px */</span></span><br></pre></td></tr></table></figure>

<p><strong>何時避免？</strong></p>
<ul>
<li>不利於 <strong>響應式設計</strong>，無法根據使用者的設定（如無障礙放大字體）自適應。</li>
</ul>
<hr>
<h3 id="2️-rem（Root-EM，根元素相對單位）"><a href="#2️-rem（Root-EM，根元素相對單位）" class="headerlink" title="2️. rem（Root EM，根元素相對單位）"></a>2️. <strong><code>rem</code>（Root EM，根元素相對單位）</strong></h3><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li>參照 <strong><code>html</code> 根元素</strong> 的 <code>font-size</code> 來計算。</li>
<li>預設 <code>html</code> 的 <code>font-size</code> 為 <code>16px</code>（可透過 <code>html &#123; font-size: 10px; &#125;</code> 調整）。</li>
<li>可用於全站統一調整字體大小。</li>
</ul>
<h4 id="適用場景-1"><a href="#適用場景-1" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p><strong>全站一致字體設計</strong>，方便調整：</p>
<ul>
<li><strong>段落、標題（H1-H6）</strong></li>
<li><strong>文章內容</strong></li>
<li><strong>大部分標準排版</strong></li>
</ul>
<h4 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;  <span class="comment">/* 設定根元素大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.5rem</span>; &#125;  <span class="comment">/* 16px * 1.5 = 24px */</span></span><br></pre></td></tr></table></figure>
<p>只要改變 <code>html</code> 的 <code>font-size</code>，所有 <code>rem</code> 設定的字體大小都會一起調整。</p>
<p><strong>何時避免？</strong></p>
<ul>
<li><strong>局部組件內縮放時</strong>，可能需要用 <code>em</code> 而不是 <code>rem</code>。</li>
</ul>
<hr>
<h3 id="3️-em（相對單位）"><a href="#3️-em（相對單位）" class="headerlink" title="3️. em（相對單位）"></a>3️. <strong><code>em</code>（相對單位）</strong></h3><h4 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li>相對於 <strong>父元素的 <code>font-size</code></strong> 來計算。</li>
<li>父層字體大小變大，子層 <code>em</code> 設定的大小也會跟著變。</li>
</ul>
<h4 id="適用場景-2"><a href="#適用場景-2" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p><strong>組件內部的字體調整</strong>，適用於：</p>
<ul>
<li><strong>按鈕、卡片、區塊內的標題</strong></li>
<li><strong>排版時要根據父層調整的字體</strong></li>
<li><strong>不同區域需要稍微變大的字體</strong></li>
</ul>
<h4 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;  <span class="comment">/* 設定父層大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125;  <span class="comment">/* 20px * 1.2 = 24px */</span></span><br></pre></td></tr></table></figure>
<p>當 <code>.container</code> <code>font-size</code> 改變時，內部 <code>p</code> 的大小也會跟著變。</p>
<p><strong>何時避免？</strong></p>
<ul>
<li>多層 <code>em</code> 巢狀結構時，字體大小可能會變得難以控制。</li>
</ul>
<hr>
<h3 id="4️-vh（視窗高度單位）"><a href="#4️-vh（視窗高度單位）" class="headerlink" title="4️. vh（視窗高度單位）"></a>4️. <strong><code>vh</code>（視窗高度單位）</strong></h3><h4 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul>
<li><code>1vh</code> 代表 **視窗高度的 1%**。</li>
<li><strong>適合動態字體大小</strong>，可以讓字體隨視窗大小變化。</li>
</ul>
<h4 id="適用場景-3"><a href="#適用場景-3" class="headerlink" title="適用場景"></a><strong>適用場景</strong></h4><p><strong>全螢幕標題或 Hero 文字</strong>：</p>
<ul>
<li><strong>首頁橫幅標題</strong></li>
<li><strong>全螢幕展示頁面</strong></li>
<li><strong>需隨裝置變化的動態字體</strong></li>
</ul>
<h4 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a><strong>範例</strong></h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">10vh</span>; &#125;  <span class="comment">/* 視窗高度的 10% */</span></span><br></pre></td></tr></table></figure>
<p>當視窗縮小，字體會自動變小。</p>
<p><strong>何時避免？</strong></p>
<ul>
<li>文字變化太大時，可能導致小螢幕閱讀困難。</li>
</ul>
<hr>
<h2 id="如何選擇？"><a href="#如何選擇？" class="headerlink" title="如何選擇？"></a><strong>如何選擇？</strong></h2><table>
<thead>
<tr>
<th>單位</th>
<th>依據</th>
<th>優點</th>
<th>缺點</th>
<th>適用場景</th>
</tr>
</thead>
<tbody><tr>
<td><code>px</code></td>
<td>固定大小</td>
<td>精確控制、不變動</td>
<td>無法適應不同裝置</td>
<td>Logo、按鈕、小 UI 元件</td>
</tr>
<tr>
<td><code>rem</code></td>
<td>根元素大小</td>
<td>可全站統一調整</td>
<td>父層無影響，局部調整時需考慮</td>
<td>文章內容、標題、標準排版</td>
</tr>
<tr>
<td><code>em</code></td>
<td>父層大小</td>
<td>組件內可相對調整</td>
<td>巢狀結構時較難控制</td>
<td>按鈕、卡片區塊內標題</td>
</tr>
<tr>
<td><code>vh</code></td>
<td>視窗高度</td>
<td>可隨視窗變化</td>
<td>小螢幕可能太小、大螢幕可能過大</td>
<td>全螢幕標題、動態字體</td>
</tr>
</tbody></table>
<hr>
<h2 id="最佳實踐"><a href="#最佳實踐" class="headerlink" title="最佳實踐"></a><strong>最佳實踐</strong></h2><p><strong>一般網站內容</strong></p>
<ul>
<li>使用 <code>rem</code> 設定主字體，確保一致性：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;  </span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1rem</span>; &#125;  <span class="comment">/* 16px */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">2rem</span>; &#125;  <span class="comment">/* 32px */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>局部 UI 組件</strong></p>
<ul>
<li>使用 <code>em</code>，確保字體相對變化：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123; <span class="attribute">font-size</span>: <span class="number">1em</span>; &#125;  <span class="comment">/* 依據父層大小 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>全螢幕標題</strong></p>
<ul>
<li>使用 <code>vh</code>，確保字體適應畫面：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hero-title</span> &#123; <span class="attribute">font-size</span>: <span class="number">8vh</span>; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>特殊 UI（固定大小）</strong></p>
<ul>
<li>使用 <code>px</code>，避免字體縮放：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123; <span class="attribute">font-size</span>: <span class="number">24px</span>; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h3><ul>
<li><strong>固定字體</strong> → <code>px</code></li>
<li><strong>全站一致性</strong> → <code>rem</code></li>
<li><strong>組件內相對縮放</strong> → <code>em</code></li>
<li><strong>視窗自適應</strong> → <code>vh</code></li>
</ul>
<p>若有特定的設計需求或專案需求，可以再根據需求細調合適的單位。</p>
]]></content>
      <tags>
        <tag>font-size</tag>
        <tag>px</tag>
        <tag>rem</tag>
        <tag>em</tag>
        <tag>vh</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid Garden 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-css-grid-garden-tutorial/</url>
    <content><![CDATA[<h1 id="1-Grid-簡介"><a href="#1-Grid-簡介" class="headerlink" title="1. Grid 簡介"></a>1. Grid 簡介</h1><p><code>Grid</code>（Grid Layout）是一種 CSS3 佈局模式，專門用來設計一維的彈性佈局，適用於水平或垂直排列元素，使網頁排版更加靈活且易於維護。</p>
<p>Grid Garden 透過花圃澆花遊戲化方式去介紹 Grid 使用方式</p>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>Welcome to Grid Garden, where you write CSS code to grow your carrot garden! Water only the areas that have carrots by using the grid-column-start property.</p>
<p>For example, grid-column-start: 3; will water the area starting at the 3rd vertical grid line, which is another way of saying the 3rd vertical border from the left in the grid.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>Uh oh, looks like weeds are growing in the corner of your garden. Use grid-column-start to poison them. Note that the weeds start at the 5th vertical grid line.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>When grid-column-start is used alone, the grid item by default will span exactly one column. However, you can extend the item across multiple columns by adding the grid-column-end property.</p>
<p>Using grid-column-end, water all of your carrots while avoiding the dirt. We don’t want to waste any water! Note that the carrots start at the 1st vertical grid line and end at the 4th.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><p>When pairing grid-column-start and grid-column-end, you might assume that the end value has to be greater than the start value. But this turns out not the case!</p>
<p>Try setting grid-column-end to a value less than 5 to water your carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><p>If you want to count grid lines from the right instead of the left, you can give grid-column-start and grid-column-end negative values. For example, you can set it to -1 to specify the first grid line from the right.</p>
<p>Try setting grid-column-end to a negative value.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: -<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><p>Now try setting grid-column-start to a negative value.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><p>Instead of defining a grid item based on the start and end positions of the grid lines, you can define it based on your desired column width using the span keyword. Keep in mind that span only works with positive values.</p>
<p>For example, water these carrots with the rule grid-column-end: span 2;.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><p>Try using grid-column-end with the span keyword again to water your carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><p>You can also use the span keyword with grid-column-start to set your item’s width relative to the end position.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><p>Typing both grid-column-start and grid-column-end every time can get tiring. Fortunately, grid-column is a shorthand property that can accept both values at once, separated by a slash.</p>
<p>For example, grid-column: 2 &#x2F; 4; will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">4</span>/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><p>Try using grid-column to water these carrots. The span keyword also works with this shorthand property so give it a try!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>/<span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><p>One of the things that sets CSS grids apart from flexbox is that you can easily position items in two dimensions: columns and rows. grid-row-start works much like grid-column-start except along the vertical axis.</p>
<p>Use grid-row-start to water these carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><p>Now give the shorthand property grid-row a try.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">3</span>/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><p>Use grid-column and grid-row at the same time to set position in both dimensions.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><p>You can also use grid-column and grid-row together to span larger areas within the grid. Give it a try!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>/<span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><p>If typing out both grid-column and grid-row is too much for you, there’s yet another shorthand for that. grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.</p>
<p>One example of this would be grid-area: 1 &#x2F; 1 &#x2F; 3 &#x2F; 6;.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">2</span> / <span class="number">4</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><p>How about multiple items? You can overlap them without any trouble. Use grid-area to define a second area that covers all of the unwatered carrots.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">4</span> / <span class="number">6</span> / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water-2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">3</span> / <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><p>If grid items aren’t explicitly placed with grid-area, grid-column, grid-row, etc., they are automatically placed according to their order in the source code. We can override this using the order property, which is one of the advantages of grid over table-based layout.</p>
<p>By default, all grid items have an order of 0, but this can be set to any positive or negative value, similar to z-index.</p>
<p>Right now, the carrots in the second column are being poisoned and the weeds in the last column are being watered. Change the order value of the poison to fix this right away!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.water</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><p>Now the water and poison are alternating, even though all of the weeds are at the start of your garden. Set the order of the poisons to remedy this.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.water</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poison</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><p>Up to this point, you’ve had your garden set up as a grid with five columns, each 20% of the full width, and five rows, each 20% of the full height.</p>
<p>This was done with the rules grid-template-columns: 20% 20% 20% 20% 20%; and grid-template-rows: 20% 20% 20% 20% 20%; Each rule has five values which create five columns, each set to 20% of the overall width of the garden.</p>
<p>But you can set the grid up however you like. Give grid-template-columns a new value to water your carrots. You’ll want to set the width of the 1st column to be 50%.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50%</span> <span class="number">10%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-21"><a href="#Level-21" class="headerlink" title="Level 21"></a>Level 21</h2><p>Specifying a bunch of columns with identical widths can get tedious. Luckily there’s a repeat function to help with that.</p>
<p>For example, we previously defined five 20% columns with the rule grid-template-columns: 20% 20% 20% 20% 20%;. This can be simplified as grid-template-columns: repeat(5, 20%);</p>
<p>Using grid-template-columns with the repeat function, create eight columns each with 12.5% width. This way you won’t overwater your garden.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">12.5%</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-22"><a href="#Level-22" class="headerlink" title="Level 22"></a>Level 22</h2><p>grid-template-columns doesn’t just accept values in percentages, but also length units like pixels and ems. You can even mix different units together.</p>
<p>Here, set three columns to 100px, 3em, and 40% respectively.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">3em</span> <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-23"><a href="#Level-23" class="headerlink" title="Level 23"></a>Level 23</h2><p>Grid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; the first element occupies 1&#x2F;4 and the second element 3&#x2F;4 of any leftover space.</p>
<p>Here, weeds make up the left 1&#x2F;6 of your first row and carrots the remaining 5&#x2F;6. Create two columns with these widths using fr units.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">5</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-24"><a href="#Level-24" class="headerlink" title="Level 24"></a>Level 24</h2><p>When columns are set with pixels, percentages, or ems, any other columns set with fr will divvy up the space that’s left over.</p>
<p>Here the carrots form a 50 pixel column on the left, and the weeds a 50 pixel column on the right. With grid-template-columns, create these two columns, and use fr to make three more columns that take up the remaining space in between.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">6</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#poison</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">5</span> / <span class="number">6</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-25"><a href="#Level-25" class="headerlink" title="Level 25"></a>Level 25</h2><p>Now there is a 75 pixel column of weeds on the left side of your garden. 3&#x2F;5 of the remaining space is growing carrots, while 2&#x2F;5 has been overrun with weeds.</p>
<p>Use grid-template-columns with a combination of px and fr units to make the necessary columns.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">75px</span> <span class="number">3</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-26"><a href="#Level-26" class="headerlink" title="Level 26"></a>Level 26</h2><p>grid-template-rows works much the same as grid-template-columns.</p>
<p>Use grid-template-rows to water all but the top 50 pixels of your garden. Note that the water is set to fill only your 5th row, so you’ll need to create 5 rows in total.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">12.5px</span> <span class="number">12.5px</span> <span class="number">12.5px</span> <span class="number">12.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-27"><a href="#Level-27" class="headerlink" title="Level 27"></a>Level 27</h2><p>grid-template is a shorthand property that combines grid-template-rows and grid-template-columns.</p>
<p>For example, grid-template: 50% 50% &#x2F; 200px; will create a grid with two rows that are 50% each, and one column that is 200 pixels wide.</p>
<p>Try using grid-template to water an area that includes the top 60% and left 200 pixels of your garden.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template</span>: <span class="number">60%</span> / <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#water</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-28"><a href="#Level-28" class="headerlink" title="Level 28"></a>Level 28</h2><p>Your garden is looking great. Here you’ve left a 50 pixel path at the bottom of your garden and filled the rest with carrots.</p>
<p>Unfortunately, the left 20% of your carrots have been overrun with weeds. Use CSS grid one last time to treat your garden.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#garden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template</span>: <span class="number">1</span>fr <span class="number">50px</span> / <span class="number">1</span>fr <span class="number">4</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://programmingmentor.com/post/playing-css-grid-garden/">Playing CSS Grid Garden with Answers Explained</a></li>
</ol>
]]></content>
      <tags>
        <tag>Grid Garden</tag>
        <tag>Grid</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid 網頁排版技巧入門教學筆記 | 學習筆記</title>
    <url>/2024/11/15/learning-notes-css-grid-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在現今網頁設計中，排版的結構與呈現方式對於用戶體驗至關重要。隨著網頁設計的演進，CSS <code>Grid</code> 成為了最強大且靈活的排版工具之一。透過 CSS Grid，你可以輕鬆創建複雜的佈局，並且適應不同設備的需求。本文將介紹 CSS Grid 的基本概念與使用技巧，幫助你迅速掌握如何在網頁設計中使用 Grid。</p>
<h4 id="1-什麼是-CSS-Grid？"><a href="#1-什麼是-CSS-Grid？" class="headerlink" title="1. 什麼是 CSS Grid？"></a>1. 什麼是 CSS Grid？</h4><p>CSS Grid Layout（簡稱 Grid）是 CSS3 的一個強大功能，允許開發者以列和行的方式來設計網頁佈局。它使得網頁設計更加直觀和靈活，不再需要依賴浮動（float）或定位（position）等老舊技巧，簡化了許多複雜的布局問題。</p>
<p>Grid 是由「<code>容器</code>」和「<code>項目</code>」兩部分組成。容器定義了網格的結構，而項目則是容器內部的元素。你可以在容器內輕鬆地將項目放置在指定的網格區域中，從而創建各種排版樣式。</p>
<h4 id="2-CSS-Grid-的基本語法"><a href="#2-CSS-Grid-的基本語法" class="headerlink" title="2. CSS Grid 的基本語法"></a>2. CSS Grid 的基本語法</h4><p>在使用 CSS Grid 時，首先需要定義一個容器元素並啟用 Grid 布局。這樣，容器內的子元素將成為 Grid 項目。以下是基本的設置步驟：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>display: grid;</code> 啟用容器的 Grid 布局。</li>
<li><code>grid-template-columns: repeat(3, 1fr);</code> 設定三列，每列的寬度為等比例（<code>1fr</code>）。<code>1fr</code> 代表容器寬度的 1&#x2F;3。</li>
<li><code>grid-template-rows: auto;</code> 使得行的高度根據內容自動調整。</li>
<li><code>gap: 10px;</code> 定義網格項目之間的間距。</li>
</ul>
<h4 id="3-定義-Grid-容器的列和行"><a href="#3-定義-Grid-容器的列和行" class="headerlink" title="3. 定義 Grid 容器的列和行"></a>3. 定義 Grid 容器的列和行</h4><p>你可以使用 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 來設置容器內列和行的數量、大小及比例。</p>
<h5 id="定義列"><a href="#定義列" class="headerlink" title="定義列"></a>定義列</h5><p>例如，若想創建四列的佈局，可以這樣寫：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">300px</span> <span class="number">400px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡，我們設置了四列的寬度，前三列有固定的像素寬度，最後一列使用 <code>1fr</code>，即佔據剩餘的可用空間。</p>
<h5 id="定義行"><a href="#定義行" class="headerlink" title="定義行"></a>定義行</h5><p>類似地，你可以設置行的大小。若要讓每一行的高度根據內容自動調整，可以使用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這表示網格容器有兩行，第一行的高度固定為 100px，第二行的高度將根據內容自動調整。</p>
<h4 id="4-放置-Grid-項目"><a href="#4-放置-Grid-項目" class="headerlink" title="4. 放置 Grid 項目"></a>4. 放置 Grid 項目</h4><p>Grid 容器的子元素會自動成為 Grid 項目。你可以使用 <code>grid-column</code> 和 <code>grid-row</code> 屬性來指定某個項目占據的列與行。</p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這表示 <code>.item1</code> 元素會從第 1 列跨越到第 3 列，占據第一行。</p>
<ul>
<li><code>grid-column: 1 / 3;</code> 表示該元素會從第 1 列起，跨越兩列，直到第 3 列結束。</li>
<li><code>grid-row: 1;</code> 表示該元素位於第 1 行。</li>
</ul>
<h4 id="5-使用-fr-單位設置比例"><a href="#5-使用-fr-單位設置比例" class="headerlink" title="5. 使用 fr 單位設置比例"></a>5. 使用 <code>fr</code> 單位設置比例</h4><p>CSS Grid 中最重要的單位之一是 <code>fr</code>（fraction，分數），它讓你可以設定元素在可用空間中所佔比例。</p>
<p>假設你有三列，且希望第一列占 1 部分，第二列占 2 部分，第三列占 3 部分：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣會將總寬度分成六等份，其中第一列占 1 份，第二列占 2 份，第三列占 3 份。這樣的佈局適合於動態響應式設計。</p>
<h4 id="6-設置間距"><a href="#6-設置間距" class="headerlink" title="6. 設置間距"></a>6. 設置間距</h4><p>除了 <code>gap</code> 屬性，你還可以為列與行的間距分別設置不同的值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡，<code>gap: 10px 20px;</code> 的第一個數值設定了行之間的間距為 10px，第二個數值設定了列之間的間距為 20px。</p>
<h4 id="7-嵌套-Grid"><a href="#7-嵌套-Grid" class="headerlink" title="7. 嵌套 Grid"></a>7. 嵌套 Grid</h4><p>Grid 允許你在網格項目內再次使用 Grid 佈局，這樣可以創建更複雜的排版結構。例如，假設你在某個項目內再創建一個小的網格：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，<code>.item1</code> 是一個 Grid 項目，它內部再次使用 Grid 排版，定義兩列，其中第一列占據 1 部分，第二列占據 2 部分。</p>
<h4 id="8-響應式設計"><a href="#8-響應式設計" class="headerlink" title="8. 響應式設計"></a>8. 響應式設計</h4><p>Grid 讓你輕鬆應對不同設備的佈局需求。你可以使用媒體查詢來調整 Grid 排版。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段程式碼會根據螢幕寬度變化調整容器的列數：在寬度大於 768px 時顯示四列，在寬度小於 768px 時顯示兩列，在寬度小於 480px 時顯示單列。</p>
<h4 id="9-小結"><a href="#9-小結" class="headerlink" title="9. 小結"></a>9. 小結</h4><p>CSS Grid 為現代網頁設計提供了一個簡單、強大且靈活的排版解決方案。它不僅能夠解決過去使用浮動或定位方法無法達成的複雜佈局，還能輕鬆適應響應式設計的需求。掌握 CSS Grid，你將能夠更高效地創建現代化的網頁佈局，提升設計的精確度與可維護性。希望本文的介紹能幫助你快速入門並將這項技術應用到你的項目中。</p>
]]></content>
      <tags>
        <tag>Grid</tag>
        <tag>css</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/14/learning-notes-css-intro-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-CSS？"><a href="#1-什麼是-CSS？" class="headerlink" title="1. 什麼是 CSS？"></a>1. 什麼是 CSS？</h4><p>CSS（Cascading Style Sheets，層疊樣式表）是一種用來美化 HTML 頁面的樣式語言。透過 CSS，可以設定字體、顏色、間距、佈局等，讓網頁更具吸引力和可讀性。  </p>
<p>CSS 透過選擇器（Selectors）來指定 HTML 元素，並套用樣式規則（Rules）。  </p>
<hr>
<h4 id="2-CSS-的使用方式"><a href="#2-CSS-的使用方式" class="headerlink" title="2. CSS 的使用方式"></a>2. CSS 的使用方式</h4><p>有三種方式可以在 HTML 文件中使用 CSS：  </p>
<h5 id="2-1-內部-CSS（Internal-CSS）"><a href="#2-1-內部-CSS（Internal-CSS）" class="headerlink" title="2.1 內部 CSS（Internal CSS）"></a>2.1 內部 CSS（Internal CSS）</h5><p>將 CSS 直接寫在 HTML 的 <code>&lt;style&gt;</code> 標籤內：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>內部 CSS 範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>這是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-外部-CSS（External-CSS）"><a href="#2-2-外部-CSS（External-CSS）" class="headerlink" title="2.2 外部 CSS（External CSS）"></a>2.2 外部 CSS（External CSS）</h5><p>將 CSS 放入獨立的 <code>.css</code> 檔案，並透過 <code>&lt;link&gt;</code> 引入：  </p>
<p><strong>styles.css</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HTML 文件：</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部 CSS 範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>這是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-行內-CSS（Inline-CSS）"><a href="#2-3-行內-CSS（Inline-CSS）" class="headerlink" title="2.3 行內 CSS（Inline CSS）"></a>2.3 行內 CSS（Inline CSS）</h5><p>直接在 HTML 標籤內使用 <code>style</code> 屬性：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red; text-align: center;&quot;</span>&gt;</span>這是紅色標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>行內 CSS 只能用於單一元素，不利於維護，因此不建議大量使用。</p>
<hr>
<h4 id="3-CSS-選擇器（Selectors）"><a href="#3-CSS-選擇器（Selectors）" class="headerlink" title="3. CSS 選擇器（Selectors）"></a>3. CSS 選擇器（Selectors）</h4><p>選擇器用於選取 HTML 元素並套用樣式，常見的選擇器有：</p>
<h5 id="3-1-元素選擇器（Element-Selector）"><a href="#3-1-元素選擇器（Element-Selector）" class="headerlink" title="3.1 元素選擇器（Element Selector）"></a>3.1 元素選擇器（Element Selector）</h5><p>直接指定 HTML 標籤：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-類別選擇器（Class-Selector）"><a href="#3-2-類別選擇器（Class-Selector）" class="headerlink" title="3.2 類別選擇器（Class Selector）"></a>3.2 類別選擇器（Class Selector）</h5><p>使用 <code>.</code> 選擇類別，適用於多個元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.important-text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;important-text&quot;</span>&gt;</span>這是一段重要的文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-ID-選擇器（ID-Selector）"><a href="#3-3-ID-選擇器（ID-Selector）" class="headerlink" title="3.3 ID 選擇器（ID Selector）"></a>3.3 ID 選擇器（ID Selector）</h5><p>使用 <code>#</code> 選擇 ID，適用於單一元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;main-title&quot;</span>&gt;</span>這是主標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-4-群組選擇器（Group-Selector）"><a href="#3-4-群組選擇器（Group-Selector）" class="headerlink" title="3.4 群組選擇器（Group Selector）"></a>3.4 群組選擇器（Group Selector）</h5><p>同時選取多個元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-後代選擇器（Descendant-Selector）"><a href="#3-5-後代選擇器（Descendant-Selector）" class="headerlink" title="3.5 後代選擇器（Descendant Selector）"></a>3.5 後代選擇器（Descendant Selector）</h5><p>選取某個元素內的特定元素：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這段文字會變成灰色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="4-盒模型（Box-Model）"><a href="#4-盒模型（Box-Model）" class="headerlink" title="4. 盒模型（Box Model）"></a>4. 盒模型（Box Model）</h4><p>CSS 中的所有元素都遵循盒模型（Box Model），包含以下部分：</p>
<ul>
<li><strong>Content（內容）</strong>：元素內部的內容，如文字或圖片。  </li>
<li><strong>Padding（內邊距）</strong>：內容與邊框之間的距離。  </li>
<li><strong>Border（邊框）</strong>：元素的邊界。  </li>
<li><strong>Margin（外邊距）</strong>：元素與其他元素之間的距離。</li>
</ul>
<p>範例：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>這是一個盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：box-sizing 屬性： content-box（預設）、border-box（寬高合計包含 padding 和 border）</p>
<hr>
<h4 id="5-常見的-CSS-屬性"><a href="#5-常見的-CSS-屬性" class="headerlink" title="5. 常見的 CSS 屬性"></a>5. 常見的 CSS 屬性</h4><h5 id="5-1-文字樣式"><a href="#5-1-文字樣式" class="headerlink" title="5.1 文字樣式"></a>5.1 文字樣式</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-背景樣式"><a href="#5-2-背景樣式" class="headerlink" title="5.2 背景樣式"></a>5.2 背景樣式</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;background.jpg&quot;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-3-邊框與圓角"><a href="#5-3-邊框與圓角" class="headerlink" title="5.3 邊框與圓角"></a>5.3 邊框與圓角</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-4-Flexbox-佈局"><a href="#5-4-Flexbox-佈局" class="headerlink" title="5.4 Flexbox 佈局"></a>5.4 Flexbox 佈局</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對應的 HTML：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>置中內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="6-響應式設計（Responsive-Design）"><a href="#6-響應式設計（Responsive-Design）" class="headerlink" title="6. 響應式設計（Responsive Design）"></a>6. 響應式設計（Responsive Design）</h4><p>使用 <code>@media</code> 來適應不同裝置：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當螢幕寬度小於 600px 時，背景變為淺灰色。</p>
<hr>
<h4 id="7-總結"><a href="#7-總結" class="headerlink" title="7. 總結"></a>7. 總結</h4><p>本篇筆記介紹了 CSS 的基本概念，包括選擇器、樣式屬性、盒模型與佈局技巧。熟練 CSS 之後，可以進一步學習 Flexbox、Grid、動畫（Animation）等進階技術，並與 JavaScript 結合，打造互動性更高的網頁。實際練習與製作小型專案是學習 CSS 的最佳方式。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>stylesheet</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 權重（Specificity）入門教學筆記 | 學習筆記</title>
    <url>/2021/12/15/learning-notes-css-specificity-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-CSS-權重？"><a href="#1-什麼是-CSS-權重？" class="headerlink" title="1. 什麼是 CSS 權重？"></a>1. 什麼是 CSS 權重？</h4><p>CSS 權重（Specificity）是指當多個選擇器同時作用於同一個元素時，瀏覽器決定應用哪條 CSS 規則的優先級機制。不同選擇器具有不同的權重，權重高的樣式會覆蓋權重低的樣式。  </p>
<hr>
<h4 id="2-CSS-權重的計算方式"><a href="#2-CSS-權重的計算方式" class="headerlink" title="2. CSS 權重的計算方式"></a>2. CSS 權重的計算方式</h4><p>CSS 權重由四個部分組成，從高到低分別是：  </p>
<ol>
<li><strong>行內樣式（Inline Styles）</strong></li>
<li><strong>ID 選擇器（ID Selectors）</strong></li>
<li><strong>類別、偽類與屬性選擇器（Class, Pseudo-classes, Attribute Selectors）</strong></li>
<li><strong>元素與偽元素選擇器（Element, Pseudo-elements）</strong></li>
</ol>
<p>每種類型的選擇器都有固定的權重值，計算時以「數值」方式比較：</p>
<table>
<thead>
<tr>
<th>選擇器類型</th>
<th>權重值</th>
</tr>
</thead>
<tbody><tr>
<td>行內樣式（<code>style=&quot;&quot;</code>）</td>
<td>1000</td>
</tr>
<tr>
<td>ID 選擇器（<code>#id</code>）</td>
<td>100</td>
</tr>
<tr>
<td>類別選擇器（<code>.class</code>）、偽類（<code>:hover</code>）、屬性選擇器（<code>[type=&quot;text&quot;]</code>）</td>
<td>10</td>
</tr>
<tr>
<td>元素選擇器（<code>div</code>、<code>p</code>）、偽元素（<code>::before</code>、<code>::after</code>）</td>
<td>1</td>
</tr>
</tbody></table>
<hr>
<h4 id="3-權重計算範例"><a href="#3-權重計算範例" class="headerlink" title="3. 權重計算範例"></a>3. 權重計算範例</h4><h5 id="3-1-元素選擇器-vs-類別選擇器"><a href="#3-1-元素選擇器-vs-類別選擇器" class="headerlink" title="3.1 元素選擇器 vs. 類別選擇器"></a>3.1 元素選擇器 vs. 類別選擇器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 權重 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是紅色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>.text</code> 的權重為 10，比 <code>p</code> 的權重 1 高，因此文字顯示為紅色。</p>
<hr>
<h5 id="3-2-類別-vs-ID-選擇器"><a href="#3-2-類別-vs-ID-選擇器" class="headerlink" title="3.2 類別 vs. ID 選擇器"></a>3.2 類別 vs. ID 選擇器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green; <span class="comment">/* 權重 100 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是綠色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>#main</code> 的權重 100 高於 <code>.text</code> 的 10，因此文字顯示為綠色。</p>
<hr>
<h5 id="3-3-屬性選擇器與偽類"><a href="#3-3-屬性選擇器與偽類" class="headerlink" title="3.3 屬性選擇器與偽類"></a>3.3 屬性選擇器與偽類</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black; <span class="comment">/* 權重 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 10 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;Example&quot;</span>&gt;</span>這段文字會是紅色，滑鼠懸停時變藍色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>p[title]</code> 與 <code>p:hover</code> 權重相同（10），但 <code>p:hover</code> 只在滑鼠懸停時生效，因此預設為紅色，懸停時變藍色。</p>
<hr>
<h4 id="4-多個選擇器組合計算"><a href="#4-多個選擇器組合計算" class="headerlink" title="4. 多個選擇器組合計算"></a>4. 多個選擇器組合計算</h4><p>當一個 CSS 規則包含多種選擇器時，其權重會累加計算。</p>
<h5 id="4-1-複合選擇器"><a href="#4-1-複合選擇器" class="headerlink" title="4.1 複合選擇器"></a>4.1 複合選擇器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 權重 2 (div=1 + p=1) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 權重 11 (div=1 + .text=10) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green; <span class="comment">/* 權重 110 (#container=100 + .text=10) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是綠色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> <code>#container .text</code> 的權重 110 高於 <code>div .text</code>（11）和 <code>div p</code>（2），所以文字顯示為綠色。</p>
<hr>
<h5 id="4-2-important-覆蓋權重"><a href="#4-2-important-覆蓋權重" class="headerlink" title="4.2 !important 覆蓋權重"></a>4.2 !important 覆蓋權重</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>這段文字應該是紅色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong> 即使 <code>#main</code> 的權重較高，<code>!important</code> 仍然強制覆蓋樣式，使文字變紅。</p>
<hr>
<h4 id="5-權重衝突的解決策略"><a href="#5-權重衝突的解決策略" class="headerlink" title="5. 權重衝突的解決策略"></a>5. 權重衝突的解決策略</h4><ol>
<li><strong>避免使用 <code>!important</code>，除非是必要的</strong></li>
<li><strong>使用更具體的選擇器</strong></li>
<li><strong>組織 CSS 層級結構</strong></li>
<li><strong>使用適當的 CSS 預處理器（如 SCSS、LESS）</strong></li>
</ol>
<hr>
<h4 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h4><p>理解 CSS 權重是撰寫高效、可維護樣式表的關鍵。透過計算選擇器的權重，可以精確控制樣式的優先級，避免不必要的覆蓋問題，提升開發效率。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>stylesheet</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Stacking Context 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/14/learning-notes-css-stacking-context-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網頁開發中，當多個 HTML 元素重疊時，決定它們顯示順序的機制稱為 <strong>Stacking Context（堆疊上下文）</strong>。這是一個重要概念，影響 <code>z-index</code> 的行為，並決定元素在畫面上的排列順序。</p>
<hr>
<h2 id="1-什麼是-Stacking-Context"><a href="#1-什麼是-Stacking-Context" class="headerlink" title="1. 什麼是 Stacking Context"></a><strong>1. 什麼是 Stacking Context</strong></h2><p><strong>Stacking Context</strong> 是一個獨立的層級空間，內部的元素會依照特定規則進行排序，但不會影響外部的層級。當一個元素建立了 Stacking Context，裡面的元素只會與其內部其他元素比較 <code>z-index</code>，而不會與外部的 <code>z-index</code> 直接互動。</p>
<hr>
<h2 id="2-Stacking-Context-的建立方式"><a href="#2-Stacking-Context-的建立方式" class="headerlink" title="2. Stacking Context 的建立方式"></a><strong>2. Stacking Context 的建立方式</strong></h2><p>某些 CSS 屬性和條件會觸發 Stacking Context 的建立，以下是常見的觸發方式：</p>
<h3 id="2-1-根元素-lt-html-gt"><a href="#2-1-根元素-lt-html-gt" class="headerlink" title="2.1 根元素 (&lt;html&gt;)"></a><strong>2.1 根元素 (<code>&lt;html&gt;</code>)</strong></h3><p>HTML 的根元素 (<code>&lt;html&gt;</code>) 本身是一個 Stacking Context，所有的元素都在這個上下文中運作。</p>
<h3 id="2-2-z-index-非-auto-並且-position-為-relative、absolute-或-fixed"><a href="#2-2-z-index-非-auto-並且-position-為-relative、absolute-或-fixed" class="headerlink" title="2.2 z-index 非 auto 並且 position 為 relative、absolute 或 fixed"></a><strong>2.2 <code>z-index</code> 非 <code>auto</code> 並且 <code>position</code> 為 <code>relative</code>、<code>absolute</code> 或 <code>fixed</code></strong></h3><p>當 <code>position</code> 為 <code>relative</code>、<code>absolute</code> 或 <code>fixed</code>，且 <code>z-index</code> 設定為非 <code>auto</code> 時，該元素會創建新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-opacity-小於-1"><a href="#2-3-opacity-小於-1" class="headerlink" title="2.3 opacity 小於 1"></a><strong>2.3 <code>opacity</code> 小於 1</strong></h3><p>任何 <code>opacity</code> 設定小於 <code>1</code>（但大於 <code>0</code>）的元素都會建立新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transparent-box</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-transform、filter、clip-path、perspective-不為-none"><a href="#2-4-transform、filter、clip-path、perspective-不為-none" class="headerlink" title="2.4 transform、filter、clip-path、perspective 不為 none"></a><strong>2.4 <code>transform</code>、<code>filter</code>、<code>clip-path</code>、<code>perspective</code> 不為 <code>none</code></strong></h3><p>只要元素應用了 <code>transform</code>（例如 <code>scale</code>、<code>rotate</code>）、<code>filter</code> 或 <code>clip-path</code>，它就會建立新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transformed-box</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>); <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-will-change-設定特定值"><a href="#2-5-will-change-設定特定值" class="headerlink" title="2.5 will-change 設定特定值"></a><strong>2.5 <code>will-change</code> 設定特定值</strong></h3><p>如果 <code>will-change</code> 被設定為 <code>transform</code>、<code>opacity</code>、<code>filter</code> 這類的屬性，該元素會創建新的 Stacking Context。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.optimized-box</span> &#123;</span><br><span class="line">    <span class="attribute">will-change</span>: transform; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-Stacking-Context-的影響"><a href="#3-Stacking-Context-的影響" class="headerlink" title="3. Stacking Context 的影響"></a><strong>3. Stacking Context 的影響</strong></h2><h3 id="3-1-z-index-影響範圍"><a href="#3-1-z-index-影響範圍" class="headerlink" title="3.1 z-index 影響範圍"></a><strong>3.1 <code>z-index</code> 影響範圍</strong></h3><p>如果某個元素在新的 Stacking Context 中，即使它的 <code>z-index</code> 設定得很高，也不會超過它所在的 Stacking Context。這意味著：</p>
<ul>
<li>內部 <code>z-index</code> 的值 <strong>只在該 Stacking Context 內比較</strong>。</li>
<li>外部的元素如果 <code>z-index</code> 更高，仍然可能覆蓋內部 Stacking Context 內的元素。</li>
</ul>
<h3 id="範例：z-index-失效的情境"><a href="#範例：z-index-失效的情境" class="headerlink" title="範例：z-index 失效的情境"></a><strong>範例：z-index 失效的情境</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>; <span class="comment">/* 創建 Stacking Context */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>; <span class="comment">/* 只在 .parent 內生效 */</span></span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outside</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>結果：</strong></p>
<ul>
<li><code>.child</code> 的 <code>z-index: 9999</code> 只在 <code>.parent</code> 內生效。</li>
<li><code>.outside</code> 的 <code>z-index: 20</code> 屬於 <code>html</code> 根 Stacking Context，所以 <code>.outside</code> 會蓋住 <code>.child</code>。</li>
</ul>
<hr>
<h2 id="4-如何-Debug-Stacking-Context"><a href="#4-如何-Debug-Stacking-Context" class="headerlink" title="4. 如何 Debug Stacking Context"></a><strong>4. 如何 Debug Stacking Context</strong></h2><p>當 <code>z-index</code> 沒有如預期運作時，可以用以下方式檢查：</p>
<h3 id="4-1-使用開發者工具"><a href="#4-1-使用開發者工具" class="headerlink" title="4.1 使用開發者工具"></a><strong>4.1 使用開發者工具</strong></h3><ul>
<li>在 <strong>Chrome 開發者工具</strong>（F12）內，檢查 <code>z-index</code> 的層級。</li>
<li>在「Elements」面板檢查 <code>z-index</code> 及是否有 <code>opacity</code>、<code>transform</code> 等影響屬性。</li>
</ul>
<h3 id="4-2-確保-Stacking-Context"><a href="#4-2-確保-Stacking-Context" class="headerlink" title="4.2 確保 Stacking Context"></a><strong>4.2 確保 Stacking Context</strong></h3><p>如果發現 <code>z-index</code> 設定沒有影響，可以：</p>
<ol>
<li>確認父元素是否創建了新的 Stacking Context。</li>
<li>嘗試移除 <code>transform</code>、<code>opacity</code> 或 <code>filter</code>，看看是否影響 <code>z-index</code>。</li>
</ol>
<hr>
<h2 id="5-Stacking-Context-的應用場景"><a href="#5-Stacking-Context-的應用場景" class="headerlink" title="5. Stacking Context 的應用場景"></a><strong>5. Stacking Context 的應用場景</strong></h2><h3 id="5-1-固定導覽列與內容遮罩"><a href="#5-1-固定導覽列與內容遮罩" class="headerlink" title="5.1 固定導覽列與內容遮罩"></a><strong>5.1 固定導覽列與內容遮罩</strong></h3><p>當 <code>position: fixed</code> 的導覽列無法覆蓋其他元素時，可以確保它擁有較高 <code>z-index</code>，並避免它被無意創建的 Stacking Context 影響。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-Modal（模態視窗）"><a href="#5-2-Modal（模態視窗）" class="headerlink" title="5.2 Modal（模態視窗）"></a><strong>5.2 Modal（模態視窗）</strong></h3><p>確保 <code>modal</code> 的 <code>z-index</code> 高於其他元素，並避免 <code>opacity</code> 或 <code>transform</code> 影響 <code>z-index</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a><strong>6. 總結</strong></h2><ul>
<li><strong>Stacking Context</strong> 影響 <code>z-index</code> 的作用範圍，讓 <code>z-index</code> 不總是依照數值大小決定順序。</li>
<li>多種 CSS 屬性（如 <code>opacity</code>、<code>transform</code>）會創建 Stacking Context，可能影響層級渲染結果。</li>
<li><strong>在開發時，應注意哪些元素創建了 Stacking Context，以確保 <code>z-index</code> 如預期運作</strong>。</li>
</ul>
<p>透過以上概念與技巧，可以更靈活地管理 HTML 元素的層級關係，確保視覺效果正確。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>stylesheet</tag>
      </tags>
  </entry>
  <entry>
    <title>Cypress 測試入門教學筆記 | 學習筆記</title>
    <url>/2024/12/08/learning-notes-cypress-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-Cypress-基礎概念"><a href="#1-Cypress-基礎概念" class="headerlink" title="1. Cypress 基礎概念"></a>1. Cypress 基礎概念</h1><p><code>Cypress</code> 是一款現代化的前端自動化測試工具，主要用於測試 Web 應用程式，支援端對端（<code>E2E</code>）測試、<code>元件測試</code>等。</p>
<h3 id="1-1-為何選擇-Cypress？"><a href="#1-1-為何選擇-Cypress？" class="headerlink" title="1.1 為何選擇 Cypress？"></a>1.1 為何選擇 Cypress？</h3><ul>
<li>簡單易用，直接運行於瀏覽器。</li>
<li>提供即時回饋，方便 Debug。</li>
<li>內建等待機制，避免手動處理異步問題。</li>
<li>支援截圖與錄影，方便測試分析。</li>
</ul>
<h1 id="2-安裝與設定"><a href="#2-安裝與設定" class="headerlink" title="2. 安裝與設定"></a>2. 安裝與設定</h1><h3 id="2-1-安裝-Cypress"><a href="#2-1-安裝-Cypress" class="headerlink" title="2.1 安裝 Cypress"></a>2.1 安裝 Cypress</h3><p>使用 npm 或 yarn 安裝 Cypress：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install cypress --save-dev</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add cypress --dev</span><br></pre></td></tr></table></figure>

<h3 id="2-2-執行-Cypress"><a href="#2-2-執行-Cypress" class="headerlink" title="2.2 執行 Cypress"></a>2.2 執行 Cypress</h3><p>安裝完成後，可以使用以下指令開啟 Cypress GUI：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx cypress open</span><br></pre></td></tr></table></figure>
<p>或直接執行測試：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx cypress run</span><br></pre></td></tr></table></figure>

<h1 id="3-撰寫-Cypress-測試"><a href="#3-撰寫-Cypress-測試" class="headerlink" title="3. 撰寫 Cypress 測試"></a>3. 撰寫 Cypress 測試</h1><h3 id="3-1-建立測試檔案"><a href="#3-1-建立測試檔案" class="headerlink" title="3.1 建立測試檔案"></a>3.1 建立測試檔案</h3><p>Cypress 預設的測試檔案放置於 <code>cypress/e2e/</code> 目錄下，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cypress/e2e/sample_spec.cy.js</span><br></pre></td></tr></table></figure>

<h3 id="3-2-基本測試範例"><a href="#3-2-基本測試範例" class="headerlink" title="3.2 基本測試範例"></a>3.2 基本測試範例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;My First Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://example.cypress.io&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;type&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    cy.<span class="title function_">url</span>().<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;/commands/actions&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-選擇器與操作"><a href="#3-3-選擇器與操作" class="headerlink" title="3.3 選擇器與操作"></a>3.3 選擇器與操作</h3><p>Cypress 提供多種選擇器來查找元素，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(); <span class="comment">// 透過標籤名稱選擇</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.btn-primary&#x27;</span>).<span class="title function_">click</span>(); <span class="comment">// 透過 class 選擇</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#submit-btn&#x27;</span>).<span class="title function_">click</span>(); <span class="comment">// 透過 ID 選擇</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-斷言（Assertions）"><a href="#3-4-斷言（Assertions）" class="headerlink" title="3.4 斷言（Assertions）"></a>3.4 斷言（Assertions）</h3><p>使用 <code>.should()</code> 進行斷言，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.success-message&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Welcome&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="4-進階功能"><a href="#4-進階功能" class="headerlink" title="4. 進階功能"></a>4. 進階功能</h1><h3 id="4-1-錯誤處理與偵錯"><a href="#4-1-錯誤處理與偵錯" class="headerlink" title="4.1 錯誤處理與偵錯"></a>4.1 錯誤處理與偵錯</h3><p>Cypress 提供 <code>cy.pause()</code> 和 <code>cy.debug()</code> 來幫助偵錯：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">pause</span>(); <span class="comment">// 測試暫停</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.result&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-2-假資料與-API-模擬（Mock-API）"><a href="#4-2-假資料與-API-模擬（Mock-API）" class="headerlink" title="4.2 假資料與 API 模擬（Mock API）"></a>4.2 假資料與 API 模擬（Mock API）</h3><p>可以使用 <code>cy.intercept()</code> 攔截 API 請求，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api/user&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;).<span class="title function_">as</span>(<span class="string">&#x27;getUser&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/profile&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@getUser&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-自訂命令"><a href="#4-3-自訂命令" class="headerlink" title="4.3 自訂命令"></a>4.3 自訂命令</h3><p>可以在 <code>cypress/support/commands.js</code> 內定義自訂命令，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;login&#x27;</span>, <span class="function">(<span class="params">email, password</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#email&#x27;</span>).<span class="title function_">type</span>(email);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">type</span>(password);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button[type=&quot;submit&quot;]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然後在測試中使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">login</span>(<span class="string">&#x27;test@example.com&#x27;</span>, <span class="string">&#x27;password123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="5-CI-x2F-CD-整合"><a href="#5-CI-x2F-CD-整合" class="headerlink" title="5. CI&#x2F;CD 整合"></a>5. CI&#x2F;CD 整合</h1><p>Cypress 可以與 CI&#x2F;CD 工具整合，如 GitHub Actions 或 GitLab CI&#x2F;CD。</p>
<h3 id="5-1-GitHub-Actions-設定範例"><a href="#5-1-GitHub-Actions-設定範例" class="headerlink" title="5.1 GitHub Actions 設定範例"></a>5.1 GitHub Actions 設定範例</h3><p>在 <code>.github/workflows/cypress.yml</code> 中新增：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">Tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span></span><br></pre></td></tr></table></figure>

<h1 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h1><p>透過 Cypress，可以輕鬆進行 Web 應用的測試，提高開發效率與穩定性。建議多練習不同測試場景，如表單驗證、API 測試與 RWD 測試，以熟悉 Cypress 強大的測試能力。</p>
]]></content>
      <tags>
        <tag>Cypress</tag>
        <tag>測試</tag>
        <tag>E2E</tag>
        <tag>QA</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Flow 介紹與 GitHub Flow 介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/12/04/learning-notes-git-flow-github-flow-intro-tutorial/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在軟體開發中，版本控制是協作開發中至關重要的工具。Git 作為當前最受歡迎的版本控制系統，其強大的分支管理和版本控制功能，使得開發團隊能夠高效地進行協作。兩種常見的 Git 工作流是 Git Flow 和 GitHub Flow，這些工作流提供了清晰的分支管理策略，讓團隊可以更加有序地開發和部署代碼。本文將介紹 Git Flow 和 GitHub Flow 的基本概念、使用方法，以及它們之間的區別。</p>
<h1 id="一、Git-Flow-介紹"><a href="#一、Git-Flow-介紹" class="headerlink" title="一、Git Flow 介紹"></a>一、Git Flow 介紹</h1><p>Git Flow 是一個基於 Git 的分支管理模型，主要由 Vincent Driessen 提出，旨在幫助開發團隊實現規範化的分支管理，並對不同開發階段的代碼進行有效的管理。Git Flow 工作流適合需要頻繁發布新版本的項目，並且開發流程中包含多個階段，如開發、測試、發佈等。其工作流程通常包含以下幾個核心分支：</p>
<h4 id="1-1-主要分支"><a href="#1-1-主要分支" class="headerlink" title="1.1 主要分支"></a>1.1 主要分支</h4><ol>
<li><p><strong>master 分支</strong>：<br><code>master</code> 分支是 Git Flow 中的核心分支，所有穩定的代碼都應該存在於此。每當一個新版本的代碼準備好發佈時，都會從 <code>develop</code> 分支合併到 <code>master</code>，並標記相應的版本號。這個分支通常只包含穩定的代碼，並且代表了隨時可以部署的代碼。</p>
</li>
<li><p><strong>develop 分支</strong>：<br><code>develop</code> 分支用於開發中的代碼。所有的功能開發都應該從這個分支進行，並且當開發完成後，合併回 <code>develop</code>。這個分支是整個項目的集成區，開發人員應該從 <code>develop</code> 分支開始開發新功能。</p>
</li>
</ol>
<h4 id="1-2-輔助分支"><a href="#1-2-輔助分支" class="headerlink" title="1.2 輔助分支"></a>1.2 輔助分支</h4><ol>
<li><p><strong>feature 分支</strong>：<br><code>feature</code> 分支用於開發新的功能。每個新功能都應該從 <code>develop</code> 分支創建一個新的 <code>feature</code> 分支，並且在功能開發完成後，將該分支合併回 <code>develop</code> 分支。<code>feature</code> 分支的命名通常為 <code>feature/&lt;功能名稱&gt;</code>。</p>
</li>
<li><p><strong>release 分支</strong>：<br>當 <code>develop</code> 分支上的代碼準備好進入測試階段時，會創建一個 <code>release</code> 分支。這個分支用來準備最終的發佈版本。在 <code>release</code> 分支上進行的主要工作包括 bug 修復、文檔編寫等，確保最終版本的穩定性。當測試完成並且代碼準備發佈時，<code>release</code> 分支會被合併到 <code>master</code> 和 <code>develop</code> 分支。</p>
</li>
<li><p><strong>hotfix 分支</strong>：<br><code>hotfix</code> 分支用於修復已經發佈到 <code>master</code> 分支的緊急錯誤。當發佈的版本發現重大問題時，可以立即從 <code>master</code> 分支創建 <code>hotfix</code> 分支，進行修復後，將其合併回 <code>master</code> 和 <code>develop</code> 分支。</p>
</li>
</ol>
<h4 id="1-3-Git-Flow-的流程"><a href="#1-3-Git-Flow-的流程" class="headerlink" title="1.3 Git Flow 的流程"></a>1.3 Git Flow 的流程</h4><p>Git Flow 的流程大致如下：</p>
<ul>
<li>開發新功能時，從 <code>develop</code> 分支創建 <code>feature</code> 分支。</li>
<li>當 <code>feature</code> 分支開發完成後，合併回 <code>develop</code> 分支。</li>
<li>當代碼達到穩定版本，創建 <code>release</code> 分支，進行測試和 bug 修復。</li>
<li>測試完成後，將 <code>release</code> 分支合併回 <code>master</code> 和 <code>develop</code> 分支，並標註版本。</li>
<li>若發現緊急錯誤，從 <code>master</code> 分支創建 <code>hotfix</code> 分支，進行修復並合併回 <code>master</code> 和 <code>develop</code>。</li>
</ul>
<h1 id="二、GitHub-Flow-介紹"><a href="#二、GitHub-Flow-介紹" class="headerlink" title="二、GitHub Flow 介紹"></a>二、GitHub Flow 介紹</h1><p>GitHub Flow 是 GitHub 提出的另一種工作流，主要針對快速迭代和持續集成的開發模式。與 Git Flow 複雜的分支管理相比，GitHub Flow 更加簡單和輕量，適合需要快速交付和頻繁部署的團隊。GitHub Flow 主要有以下幾個步驟：</p>
<h4 id="2-1-GitHub-Flow-的基本流程"><a href="#2-1-GitHub-Flow-的基本流程" class="headerlink" title="2.1 GitHub Flow 的基本流程"></a>2.1 GitHub Flow 的基本流程</h4><ol>
<li><p><strong>創建分支</strong>：<br>每當開始一個新功能或修復一個 bug 時，都應該從 <code>main</code> 分支創建一個新的分支。這個分支通常用來開發新的特性或修復某個問題。</p>
</li>
<li><p><strong>開發與提交</strong>：<br>在新創建的分支上進行開發，並定期將代碼提交到遠程倉庫。這些提交應該是增量的，便於代碼審查和測試。</p>
</li>
<li><p><strong>發送 Pull Request</strong>：<br>當開發完成後，將自己的分支提交為 Pull Request（PR），並請求團隊成員進行代碼審查。PR 是 GitHub Flow 中的關鍵步驟，能夠確保代碼的質量和協作。</p>
</li>
<li><p><strong>代碼審查與測試</strong>：<br>團隊成員進行代碼審查，確保代碼的質量和功能正確性。GitHub Flow 推崇頻繁的測試和集成，因此在 Pull Request 發送後，通常會自動觸發 CI（持續集成）測試，檢查代碼是否有錯誤。</p>
</li>
<li><p><strong>合併分支</strong>：<br>經過代碼審查和測試後，Pull Request 被批准，並將代碼合併到 <code>main</code> 分支。此時，新的代碼版本已經可以進行部署。</p>
</li>
<li><p><strong>部署與發佈</strong>：<br>GitHub Flow 的一大優勢是可以實現持續部署。當代碼合併到 <code>main</code> 分支後，可以立即部署到生產環境，快速交付新版本。</p>
</li>
</ol>
<h4 id="2-2-GitHub-Flow-的特點"><a href="#2-2-GitHub-Flow-的特點" class="headerlink" title="2.2 GitHub Flow 的特點"></a>2.2 GitHub Flow 的特點</h4><p>GitHub Flow 的流程非常簡單，沒有像 Git Flow 那樣的複雜分支結構，適合小型和中型的項目。它的優點在於快速迭代和持續交付，並且便於團隊成員協作。GitHub Flow 更加強調分支管理的簡化，並且強調測試和部署的自動化。</p>
<h1 id="三、Git-Flow-與-GitHub-Flow-的比較"><a href="#三、Git-Flow-與-GitHub-Flow-的比較" class="headerlink" title="三、Git Flow 與 GitHub Flow 的比較"></a>三、Git Flow 與 GitHub Flow 的比較</h1><ul>
<li><p><strong>分支結構</strong>：<br>Git Flow 有多個分支（<code>master</code>、<code>develop</code>、<code>feature</code>、<code>release</code>、<code>hotfix</code>），適用於需要穩定版本發佈的團隊。而 GitHub Flow 只有 <code>main</code> 分支和特性分支，適用於快速迭代和持續集成的開發模式。</p>
</li>
<li><p><strong>適用場景</strong>：<br>Git Flow 更適合複雜的開發流程，尤其是有多個版本和發佈周期的項目。GitHub Flow 更適合快速迭代的小型或中型項目，尤其是需要頻繁部署和交付的團隊。</p>
</li>
<li><p><strong>流程複雜度</strong>：<br>Git Flow 的流程較為繁瑣，對於小型團隊來說可能會顯得過於複雜。GitHub Flow 流程簡單，適合希望保持敏捷和快速交付的團隊。</p>
</li>
</ul>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Git Flow 和 GitHub Flow 各有優缺點，適用的場景也有所不同。選擇哪一種工作流，應根據團隊的規模、項目的複雜度以及發佈頻率來決定。對於需要穩定發佈和多版本管理的項目，Git Flow 是一個更好的選擇。而對於需要快速迭代和頻繁部署的小型項目，GitHub Flow 則是一個更簡單有效的選擇。</p>
]]></content>
      <tags>
        <tag>Git Flow</tag>
        <tag>Github Flow</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 入門語法教學筆記 | 學習筆記</title>
    <url>/2017/02/01/learning-notes-ecmascript6-es6-javascript-intro-tutorial%20copy/</url>
    <content><![CDATA[<p>ECMAScript 6 又稱 ECMAScript 2015，是 JavaScript 語言的新一代標準，讓 JavaScript 可以更容易撰寫大型複雜的應用程式並避免不必要的錯誤。</p>
<p>以下介紹常用 ES6 入門語法：</p>
<h2 id="一、let-amp-const-變數宣告"><a href="#一、let-amp-const-變數宣告" class="headerlink" title="一、let &amp; const 變數宣告"></a>一、let &amp; const 變數宣告</h2><ol>
<li><p><code>let</code>：用於宣告變數，可重新賦值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">name = <span class="string">&#x27;Mike&#x27;</span>;  <span class="comment">// 可以重新賦值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>const</code>：用於宣告常數，賦值後不可更改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">3.1415</span>;  <span class="comment">// 會報錯</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>建議預設使用 <code>const</code>，僅需變更時使用 <code>let</code>。兩者作用域為 block scope</p>
</blockquote>
</li>
</ol>
<p>在 <strong>ES6</strong> 中，<code>let</code> 的 <strong>區塊作用域（Block Scope）</strong> 是它與舊有的 <code>var</code> 最大的不同之一。</p>
<hr>
<h3 id="什麼是-Block-Scope（區塊作用域）？"><a href="#什麼是-Block-Scope（區塊作用域）？" class="headerlink" title="什麼是 Block Scope（區塊作用域）？"></a>什麼是 <strong>Block Scope（區塊作用域）</strong>？</h3><ul>
<li>使用 <code>let</code> 宣告的變數，只能在<strong>該程式區塊 <code>&#123;&#125;</code></strong> 內部存取。</li>
<li>區塊作用域指的是任何用 <code>&#123;&#125;</code> 包起來的範圍，例如：<ul>
<li><code>if</code>、<code>for</code>、<code>while</code> 等程式區塊。</li>
<li>一般 <code>&#123;&#125;</code> 花括號內的區域。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h3><h4 id="1-let-在區塊內的作用範圍"><a href="#1-let-在區塊內的作用範圍" class="headerlink" title="1. let 在區塊內的作用範圍"></a>1. <code>let</code> 在區塊內的作用範圍</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>x</code> 在 <code>&#123;&#125;</code> 區塊內宣告，僅在該區塊內有效。</li>
<li>區塊外存取會出錯。</li>
</ul>
<hr>
<h4 id="2-var-沒有區塊作用域（舊語法對比）"><a href="#2-var-沒有區塊作用域（舊語法對比）" class="headerlink" title="2. var 沒有區塊作用域（舊語法對比）"></a>2. <code>var</code> 沒有區塊作用域（舊語法對比）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);  <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>var</code> 沒有區塊作用域，<code>y</code> 雖在 <code>&#123;&#125;</code> 內宣告，但可在區塊外存取。</li>
</ul>
<hr>
<h4 id="3-for-迴圈中的-let"><a href="#3-for-迴圈中的-let" class="headerlink" title="3. for 迴圈中的 let"></a>3. <code>for</code> 迴圈中的 <code>let</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);  <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);  <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>i</code> 只在 <code>for</code> 迴圈內有效。</li>
</ul>
<hr>
<h4 id="let-的區塊作用域優點"><a href="#let-的區塊作用域優點" class="headerlink" title="let 的區塊作用域優點"></a><code>let</code> 的區塊作用域優點</h4><ol>
<li>避免變數污染：<code>let</code> 限制變數在區塊內，避免影響區塊外的程式碼。</li>
<li>防止重複定義：同一區塊內不能重複宣告相同變數。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;  <span class="comment">// SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure></li>
<li>更安全、可預期的變數管理。</li>
</ol>
<hr>
<h4 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h4><table>
<thead>
<tr>
<th>關鍵字</th>
<th>區塊作用域</th>
<th>重複宣告</th>
<th>提升（Hoisting）行為</th>
</tr>
</thead>
<tbody><tr>
<td><code>let</code></td>
<td>有</td>
<td>不可</td>
<td>提升但不初始化（TDZ）</td>
</tr>
<tr>
<td><code>var</code></td>
<td>無</td>
<td>可</td>
<td>提升並初始化 <code>undefined</code></td>
</tr>
</tbody></table>
<p>**建議盡量用 <code>let</code> 和 <code>const</code>，避免使用 <code>var</code>**！<br>這樣可以減少潛在的 bug，也符合現代 JavaScript 開發的最佳實踐。</p>
<hr>
<h2 id="二、模板字串（Template-Literals）"><a href="#二、模板字串（Template-Literals）" class="headerlink" title="二、模板字串（Template Literals）"></a>二、模板字串（Template Literals）</h2><p>以前字串串變數要使用 <code>+</code>，現在可以使用反引號 (&#96;&#96;) 定義字串，可插入變數。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫 <span class="subst">$&#123;name&#125;</span>，今年 <span class="subst">$&#123;age&#125;</span> 歲`</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、箭頭函式（Arrow-Functions）"><a href="#三、箭頭函式（Arrow-Functions）" class="headerlink" title="三、箭頭函式（Arrow Functions）"></a>三、箭頭函式（Arrow Functions）</h2><ol>
<li>基本語法：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>簡寫形式：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure></li>
<li>單一參數可省略括號：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">square</span> = n =&gt; n * n;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>箭頭函式不會綁定自己的 <code>this</code>，繼承外層作用域的 <code>this</code>。</p>
</blockquote>
</li>
</ol>
<hr>
<p>沒錯！這句話是 <strong>箭頭函式（Arrow Function）</strong> 很重要的特性之一，這裡幫你拆解得更清楚一點：</p>
<hr>
<h4 id="什麼是-this？"><a href="#什麼是-this？" class="headerlink" title="什麼是 this？"></a>什麼是 <code>this</code>？</h4><p><code>this</code> 代表<strong>函式執行時所屬的物件</strong>，依照函式被呼叫的方式不同，<code>this</code> 的值也會不同。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">normalFunction</span>(); <span class="comment">// 在瀏覽器環境中，this 會是 window 物件</span></span><br></pre></td></tr></table></figure>

<p>如果這個函式被某個物件呼叫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>(); <span class="comment">// John，this 指向 obj</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="箭頭函式的-this-特性"><a href="#箭頭函式的-this-特性" class="headerlink" title="箭頭函式的 this 特性"></a>箭頭函式的 <code>this</code> 特性</h4><p><strong>箭頭函式不會綁定自己的 <code>this</code>，它會「繼承外層作用域」的 <code>this</code>。</strong></p>
<p>也就是說：</p>
<ul>
<li>傳統函式：<code>this</code> 依賴呼叫方式來決定。</li>
<li>箭頭函式：<code>this</code> 取決於**箭頭函式宣告時所在的外層作用域的 <code>this</code>**。</li>
</ul>
<p>範例說明：</p>
<h4 id="傳統函式-vs-箭頭函式"><a href="#傳統函式-vs-箭頭函式" class="headerlink" title="傳統函式 vs 箭頭函式"></a>傳統函式 vs 箭頭函式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">normalFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// this 指向 obj</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">arrowFunc</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// this 指向外層（通常是 window 或 undefined）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">normalFunc</span>(); <span class="comment">// John</span></span><br><span class="line">obj.<span class="title function_">arrowFunc</span>();  <span class="comment">// undefined（或瀏覽器中可能是 window.name）</span></span><br></pre></td></tr></table></figure>

<h4 id="常見應用場景：回呼函式（callback）中的-this"><a href="#常見應用場景：回呼函式（callback）中的-this" class="headerlink" title="常見應用場景：回呼函式（callback）中的 this"></a>常見應用場景：回呼函式（callback）中的 <code>this</code></h4><p>假設我們有一個計時器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">timer</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// undefined 或 window.name</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">timer</span>();</span><br></pre></td></tr></table></figure>
<p>因為 setTimeout 裡的傳統函式，它的 <code>this</code> 在執行時會指向 <code>window</code>。</p>
<p>若改用箭頭函式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">timer</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">timer</span>();</span><br></pre></td></tr></table></figure>
<p>箭頭函式不會綁定自己的 <code>this</code>，會繼承 <code>timer</code> 函式的 <code>this</code>，因此會正確印出 <code>John</code>。</p>
<hr>
<h4 id="常見疑問"><a href="#常見疑問" class="headerlink" title="常見疑問"></a>常見疑問</h4><h5 id="為什麼箭頭函式不綁定自己的-this？"><a href="#為什麼箭頭函式不綁定自己的-this？" class="headerlink" title="為什麼箭頭函式不綁定自己的 this？"></a>為什麼箭頭函式不綁定自己的 <code>this</code>？</h5><p>主要是為了解決<strong>回呼函式中 <code>this</code> 易出錯的問題</strong>。</p>
<p>以前會這樣解法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> that = <span class="variable language_">this</span>; <span class="comment">// 變數 that 保存正確的 this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">name</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>現在有箭頭函式，就不用這麼麻煩。</p>
<hr>
<h4 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h4><table>
<thead>
<tr>
<th>類型</th>
<th><code>this</code> 綁定方式</th>
<th>一般用途</th>
</tr>
</thead>
<tbody><tr>
<td>傳統函式 function</td>
<td>執行時決定</td>
<td>物件方法、建構函式</td>
</tr>
<tr>
<td>箭頭函式 &#x3D;&gt;</td>
<td>定義時決定</td>
<td>callback 回呼函式、內部函式需要使用外部 <code>this</code> 的情境</td>
</tr>
</tbody></table>
<hr>
<p>總結：</p>
<ul>
<li><strong>一般物件方法用傳統函式。this 由呼叫的物件決定</strong></li>
<li><strong>callback 回呼函式、內部函式用箭頭函式。</strong></li>
</ul>
<p>這樣就可以避免大部分 <code>this</code> 的混亂狀況！</p>
<h2 id="四、解構賦值（Destructuring）"><a href="#四、解構賦值（Destructuring）" class="headerlink" title="四、解構賦值（Destructuring）"></a>四、解構賦值（Destructuring）</h2><ol>
<li>陣列解構：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = arr;</span><br></pre></td></tr></table></figure></li>
<li>物件解構：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = person;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="五、展開運算符（Spread-Operator）"><a href="#五、展開運算符（Spread-Operator）" class="headerlink" title="五、展開運算符（Spread Operator）"></a>五、展開運算符（Spread Operator）</h2><ol>
<li>陣列展開：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure></li>
<li>物件展開：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj1, <span class="attr">city</span>: <span class="string">&#x27;Taipei&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="六、預設參數（Default-Parameters）"><a href="#六、預設參數（Default-Parameters）" class="headerlink" title="六、預設參數（Default Parameters）"></a>六、預設參數（Default Parameters）</h2><p>函式參數可設定預設值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name = <span class="string">&#x27;訪客&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>();         <span class="comment">// Hello, 訪客!</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;John&#x27;</span>);   <span class="comment">// Hello, John!</span></span><br></pre></td></tr></table></figure>

<hr>
<p>這些 ES6 基礎語法，是現代 JavaScript 開發的常用技巧，掌握這些概念能大幅提升程式撰寫效率。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>ES6</tag>
        <tag>ECMAScript</tag>
        <tag>ECMAScript6</tag>
        <tag>ECMAScript2015</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML &amp; CSS 切版入門教學筆記 | 學習筆記</title>
    <url>/2024/07/01/learning-notes-html-css-layout-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-HTML-基礎概念"><a href="#1-HTML-基礎概念" class="headerlink" title="1. HTML 基礎概念"></a>1. HTML 基礎概念</h1><p>HTML（HyperText Markup Language）是網頁的基礎結構，透過標籤（Tag）定義不同的內容與結構。</p>
<h3 id="1-1-常見標籤"><a href="#1-1-常見標籤" class="headerlink" title="1.1 常見標籤"></a>1.1 常見標籤</h3><ul>
<li><code>&lt;!DOCTYPE html&gt;</code>：宣告 HTML 文件類型。</li>
<li><code>&lt;html&gt;</code>：HTML 文件的根標籤。</li>
<li><code>&lt;head&gt;</code>：包含頁面設定、SEO 資訊、CSS 連結等。</li>
<li><code>&lt;title&gt;</code>：設定網頁標題。</li>
<li><code>&lt;body&gt;</code>：放置頁面可見內容。</li>
<li><code>&lt;h1&gt; ~ &lt;h6&gt;</code>：標題。</li>
<li><code>&lt;p&gt;</code>：段落。</li>
<li><code>&lt;a&gt;</code>：超連結。</li>
<li><code>&lt;img&gt;</code>：圖片。</li>
<li><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>：無序與有序列表。</li>
<li><code>&lt;div&gt;</code>：區塊。</li>
<li><code>&lt;span&gt;</code>：行內元素。</li>
<li><code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>：表格。</li>
</ul>
<h3 id="1-2-HTML5-新增語意標籤"><a href="#1-2-HTML5-新增語意標籤" class="headerlink" title="1.2 HTML5 新增語意標籤"></a>1.2 HTML5 新增語意標籤</h3><ul>
<li><code>&lt;header&gt;</code>：頁首。</li>
<li><code>&lt;nav&gt;</code>：導航。</li>
<li><code>&lt;section&gt;</code>：區段。</li>
<li><code>&lt;article&gt;</code>：獨立內容。</li>
<li><code>&lt;aside&gt;</code>：側邊欄。</li>
<li><code>&lt;footer&gt;</code>：頁尾。</li>
</ul>
<h1 id="2-CSS-基礎概念"><a href="#2-CSS-基礎概念" class="headerlink" title="2. CSS 基礎概念"></a>2. CSS 基礎概念</h1><p>CSS（Cascading Style Sheets）用於設計與美化 HTML 元素。</p>
<h3 id="2-1-CSS-引入方式"><a href="#2-1-CSS-引入方式" class="headerlink" title="2.1 CSS 引入方式"></a>2.1 CSS 引入方式</h3><ul>
<li><strong>內嵌樣式（Inline Style）</strong>：直接寫在 HTML 標籤內，例如：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 16px;&quot;</span>&gt;</span>這是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>內部樣式（Internal Style）</strong>：寫在 <code>&lt;style&gt;</code> 標籤內，例如：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: blue; <span class="attribute">font-size</span>: <span class="number">18px</span>; &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>外部樣式（External Style）</strong>：將 CSS 放入 <code>.css</code> 文件中，再用 <code>&lt;link&gt;</code> 連結，例如：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-CSS-選擇器"><a href="#2-2-CSS-選擇器" class="headerlink" title="2.2 CSS 選擇器"></a>2.2 CSS 選擇器</h3><ul>
<li><strong>標籤選擇器</strong>：影響所有相同標籤，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>類別選擇器（Class）</strong>：適用於多個元素，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123; <span class="attribute">background-color</span>: yellow; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>ID 選擇器</strong>：適用於單一元素，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123; <span class="attribute">font-size</span>: <span class="number">24px</span>; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>後代選擇器</strong>：選擇特定層級內的元素，例如：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-盒模型（Box-Model）"><a href="#2-3-盒模型（Box-Model）" class="headerlink" title="2.3 盒模型（Box Model）"></a>2.3 盒模型（Box Model）</h3><p>盒模型包含四個部分：</p>
<ol>
<li><strong>Content</strong>（內容區域）。</li>
<li><strong>Padding</strong>（內距，內容與邊框之間的距離）。</li>
<li><strong>Border</strong>（邊框）。</li>
<li><strong>Margin</strong>（外距，與其他元素的距離）。</li>
</ol>
<p>範例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-常見版型切版技巧"><a href="#3-常見版型切版技巧" class="headerlink" title="3. 常見版型切版技巧"></a>3. 常見版型切版技巧</h1><h3 id="3-1-Flexbox-佈局"><a href="#3-1-Flexbox-佈局" class="headerlink" title="3.1 Flexbox 佈局"></a>3.1 Flexbox 佈局</h3><p><code>Flexbox</code> 用於彈性排列子元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Grid-佈局"><a href="#3-2-Grid-佈局" class="headerlink" title="3.2 Grid 佈局"></a>3.2 Grid 佈局</h3><p><code>Grid</code> 提供更強大的網格系統。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-響應式設計（RWD）"><a href="#3-3-響應式設計（RWD）" class="headerlink" title="3.3 響應式設計（RWD）"></a>3.3 響應式設計（RWD）</h3><p>使用 <code>@media</code> 來適應不同螢幕尺寸。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-實戰案例：基本網頁切版"><a href="#4-實戰案例：基本網頁切版" class="headerlink" title="4. 實戰案例：基本網頁切版"></a>4. 實戰案例：基本網頁切版</h1><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>簡單網頁<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的網站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>關於<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>聯絡<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的 HTML &amp; CSS 切版示範。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-總結"><a href="#5-總結" class="headerlink" title="5. 總結"></a>5. 總結</h1><p>透過學習 HTML 與 CSS，可以建立結構清晰、外觀美觀的網頁。建議多加練習不同的切版方式，如 Flexbox 和 Grid，並運用 RWD 技巧來提升適應性，讓網站在不同裝置上都能有良好的呈現效果。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>切版</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/13/learning-notes-html-intro-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-HTML？"><a href="#1-什麼是-HTML？" class="headerlink" title="1. 什麼是 HTML？"></a>1. 什麼是 HTML？</h4><p>HTML（HyperText Markup Language，超文本標記語言）是建立網頁的標準語言。它用標籤（tags）來結構化內容，讓瀏覽器能夠解析並顯示網頁。HTML 主要負責網頁的結構，而樣式與行為則交由 CSS 和 JavaScript 負責。</p>
<hr>
<h4 id="2-HTML-文件基本結構"><a href="#2-HTML-文件基本結構" class="headerlink" title="2. HTML 文件基本結構"></a>2. HTML 文件基本結構</h4><p>一個基本的 HTML 文件包含以下部分：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一個 HTML 頁面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎來到我的網站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的 HTML 頁面。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;!DOCTYPE html&gt;</code>：宣告 HTML5 文件類型。  </li>
<li><code>&lt;html lang=&quot;zh-TW&quot;&gt;</code>：定義 HTML 根標籤，<code>lang=&quot;zh-TW&quot;</code> 表示使用繁體中文。  </li>
<li><code>&lt;head&gt;</code>：包含頁面的元資訊（meta information），如編碼、標題等。  </li>
<li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>：設定網頁使用 UTF-8 編碼，確保中文字元正確顯示。  </li>
<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>：讓網頁適應不同裝置的螢幕大小。  </li>
<li><code>&lt;title&gt;</code>：設定瀏覽器標籤上的標題。  </li>
<li><code>&lt;body&gt;</code>：放置網頁的主要內容，如標題、段落、圖片等。</li>
</ul>
<hr>
<h4 id="3-常見-HTML-標籤"><a href="#3-常見-HTML-標籤" class="headerlink" title="3. 常見 HTML 標籤"></a>3. 常見 HTML 標籤</h4><h5 id="3-1-標題與段落"><a href="#3-1-標題與段落" class="headerlink" title="3.1 標題與段落"></a>3.1 標題與段落</h5><p>HTML 提供六種標題 (<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>)，以及 <code>&lt;p&gt;</code> 用來表示段落。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>這是主標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>這是次標題<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>這是小標題<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段文字，HTML 會自動換行。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-超連結"><a href="#3-2-超連結" class="headerlink" title="3.2 超連結"></a>3.2 超連結</h5><p>使用 <code>&lt;a&gt;</code> 標籤建立超連結：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>前往 Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>href</code> 指定連結網址。  </li>
<li><code>target=&quot;_blank&quot;</code> 讓連結在新視窗開啟。</li>
</ul>
<h5 id="3-3-圖片"><a href="#3-3-圖片" class="headerlink" title="3.3 圖片"></a>3.3 圖片</h5><p>使用 <code>&lt;img&gt;</code> 來插入圖片：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示範圖片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>src</code> 指定圖片來源。  </li>
<li><code>alt</code> 提供替代文字。  </li>
<li><code>width</code> 設定圖片寬度（可用 <code>height</code> 指定高度）。</li>
</ul>
<h5 id="3-4-清單"><a href="#3-4-清單" class="headerlink" title="3.4 清單"></a>3.4 清單</h5><p>有序清單 (<code>&lt;ol&gt;</code>) 和無序清單 (<code>&lt;ul&gt;</code>)：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>購物清單<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>蘋果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>步驟<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>打開電腦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>開啟瀏覽器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>輸入網址<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-5-表格"><a href="#3-5-表格" class="headerlink" title="3.5 表格"></a>3.5 表格</h5><p>使用 <code>&lt;table&gt;</code> 來建立表格，並搭配 <code>&lt;tr&gt;</code>（表格列）、<code>&lt;th&gt;</code>（表頭）、<code>&lt;td&gt;</code>（儲存格）：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小華<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>border=&quot;1&quot;</code> 設定表格邊框。</li>
</ul>
<h5 id="3-6-表單"><a href="#3-6-表單" class="headerlink" title="3.6 表單"></a>3.6 表單</h5><p>使用 <code>&lt;form&gt;</code> 來建立表單：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;submit.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>電子郵件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>action=&quot;submit.php&quot;</code> 指定表單提交到 <code>submit.php</code>。  </li>
<li><code>method=&quot;post&quot;</code> 指定使用 POST 方法傳遞數據。  </li>
<li><code>required</code> 讓輸入欄位變成必填。</li>
</ul>
<hr>
<h4 id="4-HTML5-新增標籤"><a href="#4-HTML5-新增標籤" class="headerlink" title="4. HTML5 新增標籤"></a>4. HTML5 新增標籤</h4><p>HTML5 引入了一些語義化標籤，使網頁更具結構性。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>網站標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>聯絡我們<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>最新消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一則最新消息的內容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>版權所有 <span class="symbol">&amp;copy;</span> 2025<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;header&gt;</code>：頁首。  </li>
<li><code>&lt;nav&gt;</code>：導覽區塊。  </li>
<li><code>&lt;section&gt;</code>：內容區塊。  </li>
<li><code>&lt;footer&gt;</code>：頁尾資訊。</li>
</ul>
<hr>
<h4 id="5-HTML-與-CSS-結合"><a href="#5-HTML-與-CSS-結合" class="headerlink" title="5. HTML 與 CSS 結合"></a>5. HTML 與 CSS 結合</h4><p>雖然 HTML 定義了結構，但我們通常使用 CSS 來美化頁面。內嵌 CSS 可以寫在 <code>&lt;style&gt;</code> 內：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者外部引入 CSS 檔案：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h4><p>這篇教學筆記介紹了 HTML 的基本語法，包括標籤、結構與常見元素。學會這些後，可以進一步學習 CSS 來美化網頁，或是學習 JavaScript 增強互動性。最好的學習方式是透過實際練習與製作小專案來熟悉 HTML 語法。</p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>Redux</tag>
        <tag>React Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>async/await 入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-async-await/</url>
    <content><![CDATA[<p><code>async</code> 和 <code>await</code> 是 JavaScript 中處理非同步操作的語法糖，它們使得非同步代碼更加易讀和易寫，避免了傳統回調函數（callback）或 <code>Promise</code> 的 <code>.then()</code> 鏈式調用的冗長性。</p>
<h3 id="1-async-關鍵字"><a href="#1-async-關鍵字" class="headerlink" title="1. async 關鍵字"></a>1. <code>async</code> 關鍵字</h3><p><code>async</code> 是一個關鍵字，用來標記一個函數為「非同步函數」。非同步函數會隱式地返回一個 <code>Promise</code>，並且在函數內部，你可以使用 <code>await</code> 來等待非同步操作的結果。</p>
<h4 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可以在這裡使用 await</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當你呼叫這個函數時，它會立即返回一個 <code>Promise</code>。如果函數內的代碼執行成功，這個 <code>Promise</code> 會被解析；如果有錯誤，<code>Promise</code> 會被拒絕。</p>
<h3 id="2-await-關鍵字"><a href="#2-await-關鍵字" class="headerlink" title="2. await 關鍵字"></a>2. <code>await</code> 關鍵字</h3><p><code>await</code> 必須在 <code>async</code> 函數內部使用，它會讓 JavaScript 等待某個 <code>Promise</code> 完成並返回結果。<code>await</code> 會使得後續代碼暫停，直到 <code>Promise</code> 被解決或拒絕（解決是指成功完成操作，拒絕則是發生錯誤）。</p>
<h4 id="語法-1"><a href="#語法-1" class="headerlink" title="語法"></a>語法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> promise; <span class="comment">// 等待 Promise 完成並取得結果</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>Promise</code> 解決（成功），<code>await</code> 會返回結果。如果 <code>Promise</code> 被拒絕（失敗），會拋出錯誤，這通常需要使用 <code>try...catch</code> 來處理。</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模擬一個非同步操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;Data fetched!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetching data...&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();  <span class="comment">// 等待 fetchData 完成</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 顯示結果</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);  <span class="comment">// 處理錯誤</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>();  <span class="comment">// 呼叫 async 函數</span></span><br></pre></td></tr></table></figure>

<h3 id="3-async-await-的特點："><a href="#3-async-await-的特點：" class="headerlink" title="3. async/await 的特點："></a>3. <code>async/await</code> 的特點：</h3><ul>
<li><strong>簡化非同步代碼</strong>：<code>async/await</code> 讓非同步代碼的寫法更像是同步代碼，避免了回調函數的「Callback hell 回調地獄」。</li>
<li><strong>錯誤處理</strong>：你可以使用 <code>try...catch</code> 塊來捕獲非同步操作中的錯誤，這使得錯誤處理比傳統的 <code>.catch()</code> 更加簡單直觀。</li>
<li><strong>非阻塞執行</strong>：儘管代碼看起來是同步執行的，但非同步操作並不會阻塞主執行線程，其他代碼可以繼續執行。</li>
</ul>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li><code>async</code> 將函數標記為非同步函數。</li>
<li><code>await</code> 使代碼等待 <code>Promise</code> 的解決結果，並可以在 <code>async</code> 函數內使用。</li>
<li>使用 <code>async/await</code> 可以使非同步代碼更加簡潔且易於理解。</li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>非同步</tag>
        <tag>異步</tag>
        <tag>async/await</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Call Stack 入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-call-stack-intro-tutorial/</url>
    <content><![CDATA[<p>在 <code>JavaScript</code> 開發中，理解 <strong>Call Stack（呼叫堆疊）</strong> 是掌握執行流程與錯誤除錯的關鍵概念之一。它決定了程式碼執行的順序，也與同步與非同步行為密切相關。本文將深入介紹 Call Stack 的基本原理，並透過實際範例幫助你理解它的運作方式。</p>
<hr>
<h2 id="1-什麼是-Call-Stack？"><a href="#1-什麼是-Call-Stack？" class="headerlink" title="1. 什麼是 Call Stack？"></a><strong>1. 什麼是 Call Stack？</strong></h2><p>Call Stack 是 JavaScript 引擎用來<strong>管理函式呼叫的結構</strong>，它遵循 <strong>LIFO（Last In, First Out，後進先出）</strong> 原則。當一個函式被呼叫時，它會被推入（push）堆疊頂部，當函式執行完畢後，會從堆疊中彈出（pop）。</p>
<p>JavaScript 是<strong>單執行緒（single-threaded）</strong>的語言，這代表它一次只能執行一件事。Call Stack 便是 JavaScript 用來管理同步程式碼執行順序的機制。</p>
<hr>
<h2 id="2-Call-Stack-運作原理"><a href="#2-Call-Stack-運作原理" class="headerlink" title="2. Call Stack 運作原理"></a><strong>2. Call Stack 運作原理</strong></h2><p>讓我們用一個簡單的範例來說明 Call Stack 的運作方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First function start&quot;</span>);</span><br><span class="line">    <span class="title function_">second</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First function end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">second</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second function start&quot;</span>);</span><br><span class="line">    <span class="title function_">third</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second function end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">third</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Third function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>();</span><br></pre></td></tr></table></figure>

<h3 id="執行步驟"><a href="#執行步驟" class="headerlink" title="執行步驟"></a><strong>執行步驟</strong></h3><ol>
<li><code>first()</code> 被呼叫，推入 Call Stack。</li>
<li><code>first()</code> 內部呼叫 <code>second()</code>，<code>second()</code> 推入 Call Stack。</li>
<li><code>second()</code> 內部呼叫 <code>third()</code>，<code>third()</code> 推入 Call Stack。</li>
<li><code>third()</code> 執行 <code>console.log(&quot;Third function&quot;)</code>，然後執行完畢並從 Call Stack 移除。</li>
<li><code>second()</code> 繼續執行 <code>console.log(&quot;Second function end&quot;)</code>，執行完畢並從 Call Stack 移除。</li>
<li><code>first()</code> 繼續執行 <code>console.log(&quot;First function end&quot;)</code>，執行完畢並從 Call Stack 移除。</li>
<li>Call Stack 清空，程式執行結束。</li>
</ol>
<h3 id="執行輸出"><a href="#執行輸出" class="headerlink" title="執行輸出"></a><strong>執行輸出</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">First function start</span><br><span class="line">Second function start</span><br><span class="line">Third function</span><br><span class="line">Second function end</span><br><span class="line">First function end</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-Call-Stack-與錯誤訊息"><a href="#3-Call-Stack-與錯誤訊息" class="headerlink" title="3. Call Stack 與錯誤訊息"></a><strong>3. Call Stack 與錯誤訊息</strong></h2><p>如果函式之間發生無窮遞迴，Call Stack 會不斷推入函式，最終導致 <code>Maximum call stack size exceeded</code> 錯誤。</p>
<h3 id="範例：遞迴導致-Stack-Overflow"><a href="#範例：遞迴導致-Stack-Overflow" class="headerlink" title="範例：遞迴導致 Stack Overflow"></a><strong>範例：遞迴導致 Stack Overflow</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recursiveFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">recursiveFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">recursiveFunction</span>();</span><br></pre></td></tr></table></figure>

<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a><strong>錯誤訊息</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>
<p>這是因為 <code>recursiveFunction()</code> 不斷呼叫自己，導致 Call Stack 無法清空，最終超過瀏覽器設定的堆疊大小。</p>
<hr>
<h2 id="4-Call-Stack-與非同步"><a href="#4-Call-Stack-與非同步" class="headerlink" title="4. Call Stack 與非同步"></a><strong>4. Call Stack 與非同步</strong></h2><p>JavaScript 本質上是單執行緒的語言，但它透過 <strong>Event Loop（事件迴圈）</strong> 來處理非同步程式碼，例如 <code>setTimeout</code>、<code>fetch</code> 等。</p>
<h3 id="範例：setTimeout-與-Call-Stack"><a href="#範例：setTimeout-與-Call-Stack" class="headerlink" title="範例：setTimeout 與 Call Stack"></a><strong>範例：setTimeout 與 Call Stack</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Inside setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="執行輸出-1"><a href="#執行輸出-1" class="headerlink" title="執行輸出"></a><strong>執行輸出</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">End</span><br><span class="line">Inside setTimeout</span><br></pre></td></tr></table></figure>

<h3 id="執行流程解析"><a href="#執行流程解析" class="headerlink" title="執行流程解析"></a><strong>執行流程解析</strong></h3><ol>
<li><code>console.log(&quot;Start&quot;)</code> 直接執行，輸出 <code>Start</code>。</li>
<li><code>setTimeout</code> 被呼叫，但它是非同步函式，會被放入 <strong>Web API（瀏覽器環境）</strong>，不會影響 Call Stack。</li>
<li><code>console.log(&quot;End&quot;)</code> 直接執行，輸出 <code>End</code>。</li>
<li>當 Call Stack 清空後，事件迴圈（Event Loop）會將 <code>setTimeout</code> 內的回呼函式放入 Call Stack，執行 <code>console.log(&quot;Inside setTimeout&quot;)</code>。</li>
</ol>
<p>這說明了 Call Stack 只負責同步程式碼，非同步程式碼會透過 Web API 與 Event Loop 處理。</p>
<hr>
<h2 id="5-使用開發者工具檢查-Call-Stack"><a href="#5-使用開發者工具檢查-Call-Stack" class="headerlink" title="5. 使用開發者工具檢查 Call Stack"></a><strong>5. 使用開發者工具檢查 Call Stack</strong></h2><p>大多數現代瀏覽器（如 Chrome、Firefox）都內建開發者工具，可用來觀察 Call Stack。</p>
<h3 id="如何使用-Chrome-DevTools"><a href="#如何使用-Chrome-DevTools" class="headerlink" title="如何使用 Chrome DevTools"></a><strong>如何使用 Chrome DevTools</strong></h3><ol>
<li>開啟 Chrome 瀏覽器，按 <code>F12</code> 或 <code>Ctrl + Shift + I</code>（Mac 使用 <code>Cmd + Option + I</code>）。</li>
<li>進入 <strong>Sources</strong> 面板。</li>
<li>設置 <strong>斷點（breakpoint）</strong> 在 JavaScript 代碼內的某行。</li>
<li>重新載入頁面，當程式執行到該行時會暫停。</li>
<li>在右側 <strong>Call Stack 面板</strong> 中查看目前堆疊狀態。</li>
</ol>
<p>這個工具能幫助開發者更直觀地理解 Call Stack 的運作方式。</p>
<hr>
<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a><strong>6. 總結</strong></h2><p>Call Stack 是 JavaScript 引擎管理函式執行順序的核心機制，掌握它的運作原理對於理解 JavaScript 的同步與非同步行為至關重要。總結要點如下：</p>
<ol>
<li><strong>Call Stack 採用 LIFO（後進先出）原則</strong>，函式執行時會推入堆疊，結束後會移除。</li>
<li><strong>過多遞迴可能導致 Stack Overflow</strong>，應確保遞迴函式有適當的終止條件。</li>
<li><strong>JavaScript 是單執行緒的語言</strong>，但透過 Web API 和 Event Loop 可處理非同步操作。</li>
<li><strong>開發者工具能幫助分析 Call Stack</strong>，對於除錯非常有幫助。</li>
</ol>
<p>透過理解 Call Stack 的運作，開發者可以更有效地編寫、優化與除錯 JavaScript 程式碼。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>非同步</tag>
        <tag>異步</tag>
        <tag>Call Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Hoisting 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/15/learning-notes-javascript-hoisting-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-什麼是-Hoisting？"><a href="#1-什麼是-Hoisting？" class="headerlink" title="1. 什麼是 Hoisting？"></a>1. 什麼是 Hoisting？</h2><p>Hoisting（提升）是 JavaScript 中的一種行為，它允許變數與函式在執行時被提升到作用域的頂部，這表示你可以在宣告之前使用它們，而不會發生錯誤。「<code>建立期</code>」（<code>Creation Phase</code>）和「<code>執行期</code>」（<code>Execution Phase</code>），建立期主要為定義變數名稱，執行期為執行程式和指定賦值。</p>
<p>在 JavaScript 中，Hoisting 影響兩種類型的宣告：</p>
<ol>
<li><strong>變數宣告（var, let, const）</strong></li>
<li><strong>函式宣告（Function Declaration）</strong></li>
</ol>
<h2 id="2-變數-Hoisting"><a href="#2-變數-Hoisting" class="headerlink" title="2. 變數 Hoisting"></a>2. 變數 Hoisting</h2><h3 id="2-1-使用-var-的-Hoisting"><a href="#2-1-使用-var-的-Hoisting" class="headerlink" title="2.1 使用 var 的 Hoisting"></a>2.1 使用 <code>var</code> 的 Hoisting</h3><p><code>var</code> 宣告的變數會被提升，但不會初始化，這表示變數本身會被提升到作用域頂端，但其值不會。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>上述程式碼等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>在 Hoisting 過程中，變數 <code>a</code> 被提升（Hoist）到了作用域的頂部，但它的值 <code>10</code> 並沒有一起提升，因此第一次 <code>console.log(a);</code> 會輸出 <code>undefined</code>。</p>
<h3 id="2-2-使用-let-和-const-的-Hoisting"><a href="#2-2-使用-let-和-const-的-Hoisting" class="headerlink" title="2.2 使用 let 和 const 的 Hoisting"></a>2.2 使用 <code>let</code> 和 <code>const</code> 的 Hoisting</h3><p><code>let</code> 和 <code>const</code> 也會被提升，但它們不會自動初始化，因此在變數宣告之前存取會導致 <code>ReferenceError</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: Cannot access &#x27;b&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError</span></span><br><span class="line">b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p><code>let</code> 和 <code>const</code> 變數存在「暫時性死區（Temporal Dead Zone, TDZ）」，這表示變數在初始化之前無法被存取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-總結變數-Hoisting"><a href="#2-3-總結變數-Hoisting" class="headerlink" title="2.3 總結變數 Hoisting"></a>2.3 總結變數 Hoisting</h3><table>
<thead>
<tr>
<th>宣告方式</th>
<th>是否 Hoisting</th>
<th>是否初始化</th>
<th>TDZ 存在</th>
</tr>
</thead>
<tbody><tr>
<td><code>var</code></td>
<td>是</td>
<td><code>undefined</code></td>
<td>否</td>
</tr>
<tr>
<td><code>let</code></td>
<td>是</td>
<td>無</td>
<td>是</td>
</tr>
<tr>
<td><code>const</code></td>
<td>是</td>
<td>無</td>
<td>是</td>
</tr>
</tbody></table>
<h2 id="3-函式-Hoisting"><a href="#3-函式-Hoisting" class="headerlink" title="3. 函式 Hoisting"></a>3. 函式 Hoisting</h2><h3 id="3-1-Function-Declaration（函式宣告）"><a href="#3-1-Function-Declaration（函式宣告）" class="headerlink" title="3.1 Function Declaration（函式宣告）"></a>3.1 Function Declaration（函式宣告）</h3><p>函式宣告（<code>function foo() &#123;&#125;</code>）會完整 Hoisting，因此可以在定義之前調用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hello</span>(); <span class="comment">// Hello, world!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在執行時，JavaScript 會將函式整個提升到作用域頂部，因此 <code>hello()</code> 可以在函式宣告前執行。</p>
<p>等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(); <span class="comment">// Hello, world!</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-Function-Expression（函式表達式）"><a href="#3-2-Function-Expression（函式表達式）" class="headerlink" title="3.2 Function Expression（函式表達式）"></a>3.2 Function Expression（函式表達式）</h3><p>使用 <code>var</code> 宣告的函式表達式（Function Expression）僅會提升變數，但不會提升函式內容，因此無法在宣告前調用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi); <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// TypeError: sayHi is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述程式碼等同於：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sayHi;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>因為 <code>sayHi</code> 在 Hoisting 時只被提升變數，但未初始化，因此 <code>console.log(sayHi);</code> 顯示 <code>undefined</code>，並且 <code>sayHi();</code> 會導致 <code>TypeError</code>。</p>
<h3 id="3-3-使用-let-和-const-的-Function-Expression"><a href="#3-3-使用-let-和-const-的-Function-Expression" class="headerlink" title="3.3 使用 let 和 const 的 Function Expression"></a>3.3 使用 <code>let</code> 和 <code>const</code> 的 Function Expression</h3><p>若函式表達式使用 <code>let</code> 或 <code>const</code>，則變數仍然會被提升，但會受到暫時性死區（TDZ）影響，因此在初始化前使用會導致 <code>ReferenceError</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHello); <span class="comment">// ReferenceError: Cannot access &#x27;sayHello&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-結論與最佳實踐"><a href="#4-結論與最佳實踐" class="headerlink" title="4. 結論與最佳實踐"></a>4. 結論與最佳實踐</h2><h3 id="4-1-總結-Hoisting-行為"><a href="#4-1-總結-Hoisting-行為" class="headerlink" title="4.1 總結 Hoisting 行為"></a>4.1 總結 Hoisting 行為</h3><ol>
<li><strong>變數宣告</strong>：<ul>
<li><code>var</code> 會被提升並初始化為 <code>undefined</code>。</li>
<li><code>let</code> 和 <code>const</code> 會被提升，但不會初始化（存在 TDZ）。</li>
</ul>
</li>
<li><strong>函式宣告</strong>：<ul>
<li><code>function</code> 會完整提升，可以在宣告前調用。</li>
<li><code>var</code> 宣告的函式表達式只提升變數，無法在宣告前調用。</li>
<li><code>let</code> 和 <code>const</code> 宣告的函式表達式受 TDZ 影響，無法在宣告前使用。</li>
</ul>
</li>
</ol>
<h3 id="4-2-最佳實踐"><a href="#4-2-最佳實踐" class="headerlink" title="4.2 最佳實踐"></a>4.2 最佳實踐</h3><ul>
<li>**避免使用 <code>var</code>**，改用 <code>let</code> 或 <code>const</code>。</li>
<li><strong>函式表達式應在使用前宣告</strong>，避免 <code>undefined</code> 或 <code>ReferenceError</code>。</li>
<li><strong>將所有變數與函式宣告放在作用域的開頭</strong>，可減少 Hoisting 帶來的困惑。</li>
</ul>
<h3 id="4-3-最佳實踐範例"><a href="#4-3-最佳實踐範例" class="headerlink" title="4.3 最佳實踐範例"></a>4.3 最佳實踐範例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確做法：將變數與函式宣告放在最上方</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<p>這樣可以確保程式碼易於理解，並避免因 Hoisting 造成的問題。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://medium.com/itsems-frontend/javascript-execution-context-and-call-stack-e36e7f77152e">[JavaScript] Javascript 的執行環境 (Execution context) 與堆疊 (Stack)</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-event-loop/">初學者指南：深入了解 JavaScript 中的 Event Loop（事件循環）</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-call-stack/">初學者指南：深入了解 JavaScript 的 Call Stack（呼叫堆疊）</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-execution-context/">初學者指南：深入了解 JavaScript 的執行環境（Execution Context）</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-creation-phase-execution-phase/">初學者指南：深入了解 JavaScript 的建立期與執行期</a></li>
<li><a href="https://realnewbie.com/coding/javascript/javascript-variable-function-creation-phase-execution-phase-difference/">初學者指南：深入了解 JavaScript 中函式與變數的建立期與執行期差異</a></li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS</tag>
        <tag>Hoisting</tag>
        <tag>變數提升</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 入門教學筆記 | 學習筆記</title>
    <url>/2021/12/14/learning-notes-javascript-intro-tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>JavaScript</code>（簡稱 JS）是一種高階、直譯式、弱型別的程式語言，廣泛應用於 Web 開發。它最初用於瀏覽器端，現在也能在伺服器端（如 Node.js）運行，並支援多種應用開發，如網頁、行動應用、桌面應用等。</p>
<hr>
<h2 id="1-JavaScript-的基本語法"><a href="#1-JavaScript-的基本語法" class="headerlink" title="1. JavaScript 的基本語法"></a>1. JavaScript 的基本語法</h2><h3 id="1-1-變數與常數"><a href="#1-1-變數與常數" class="headerlink" title="1.1 變數與常數"></a>1.1 變數與常數</h3><p>在 JavaScript 中，可以使用 <code>var</code>、<code>let</code> 或 <code>const</code> 來宣告變數。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 傳統變數宣告（不建議使用）</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>; <span class="comment">// 可變變數</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">30</span>; <span class="comment">// 常數，無法重新賦值</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 和 <code>const</code> 具有區塊作用域（Block Scope），而 <code>var</code> 則具有函式作用域（Function Scope）。</p>
<hr>
<h3 id="1-2-資料型別"><a href="#1-2-資料型別" class="headerlink" title="1.2 資料型別"></a>1.2 資料型別</h3><p>JavaScript 主要的資料型別包括：  </p>
<ul>
<li><p><strong>原始型別（Primitive Types）</strong>：</p>
<ul>
<li><code>string</code>（字串）</li>
<li><code>number</code>（數字，包括整數與浮點數）</li>
<li><code>boolean</code>（布林值）</li>
<li><code>null</code>（空值）</li>
<li><code>undefined</code>（未定義）</li>
<li><code>symbol</code>（符號，ES6 引入）</li>
</ul>
</li>
<li><p><strong>參考型別（Reference Types）</strong>：</p>
<ul>
<li><code>object</code>（物件）</li>
<li><code>array</code>（陣列）</li>
<li><code>function</code>（函式）</li>
</ul>
</li>
</ul>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Alice&#x27;</span>; <span class="comment">// 字串</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>; <span class="comment">// 數字</span></span><br><span class="line"><span class="keyword">let</span> isStudent = <span class="literal">true</span>; <span class="comment">// 布林值</span></span><br><span class="line"><span class="keyword">let</span> hobby = <span class="literal">null</span>; <span class="comment">// 空值</span></span><br><span class="line"><span class="keyword">let</span> score; <span class="comment">// 未定義（undefined）</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;; <span class="comment">// 物件</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]; <span class="comment">// 陣列</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-運算子"><a href="#2-運算子" class="headerlink" title="2. 運算子"></a>2. 運算子</h2><h3 id="2-1-算術運算子"><a href="#2-1-算術運算子" class="headerlink" title="2.1 算術運算子"></a>2.1 算術運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x + y); <span class="comment">// 加法：15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x - y); <span class="comment">// 減法：5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x * y); <span class="comment">// 乘法：50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x / y); <span class="comment">// 除法：2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x % y); <span class="comment">// 餘數：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x ** <span class="number">2</span>); <span class="comment">// 次方運算：100</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-比較運算子"><a href="#2-2-比較運算子" class="headerlink" title="2.2 比較運算子"></a>2.2 比較運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt;= <span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt; <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> === <span class="string">&#x27;10&#x27;</span>); <span class="comment">// false（全等）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> == <span class="string">&#x27;10&#x27;</span>); <span class="comment">// true（寬鬆比較）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> !== <span class="string">&#x27;10&#x27;</span>); <span class="comment">// true（全不等）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> != <span class="string">&#x27;10&#x27;</span>); <span class="comment">// false（寬鬆不等）</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-邏輯運算子"><a href="#2-3-邏輯運算子" class="headerlink" title="2.3 邏輯運算子"></a>2.3 邏輯運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>); <span class="comment">// false（AND）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span>); <span class="comment">// true（OR）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>); <span class="comment">// false（NOT）</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-控制流程"><a href="#3-控制流程" class="headerlink" title="3. 控制流程"></a>3. 控制流程</h2><h3 id="3-1-條件判斷"><a href="#3-1-條件判斷" class="headerlink" title="3.1 條件判斷"></a>3.1 條件判斷</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-三元運算子"><a href="#3-2-三元運算子" class="headerlink" title="3.2 三元運算子"></a>3.2 三元運算子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> canVote = age &gt;= <span class="number">18</span> ? <span class="string">&#x27;可以投票&#x27;</span> : <span class="string">&#x27;不可以投票&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(canVote);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-switch-語法"><a href="#3-3-switch-語法" class="headerlink" title="3.3 switch 語法"></a>3.3 <code>switch</code> 語法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;banana&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;黃色&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;紅色&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未知&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-迴圈"><a href="#4-迴圈" class="headerlink" title="4. 迴圈"></a>4. 迴圈</h2><h3 id="4-1-for-迴圈"><a href="#4-1-for-迴圈" class="headerlink" title="4.1 for 迴圈"></a>4.1 <code>for</code> 迴圈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;數字：&#x27;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-while-迴圈"><a href="#4-2-while-迴圈" class="headerlink" title="4.2 while 迴圈"></a>4.2 <code>while</code> 迴圈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;數字：&#x27;</span> + num);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-forEach（適用於陣列）"><a href="#4-3-forEach（適用於陣列）" class="headerlink" title="4.3 forEach（適用於陣列）"></a>4.3 <code>forEach</code>（適用於陣列）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"></span><br><span class="line">colors.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-函式（Functions）"><a href="#5-函式（Functions）" class="headerlink" title="5. 函式（Functions）"></a>5. 函式（Functions）</h2><h3 id="5-1-一般函式"><a href="#5-1-一般函式" class="headerlink" title="5.1 一般函式"></a>5.1 一般函式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-箭頭函式（Arrow-Function）"><a href="#5-2-箭頭函式（Arrow-Function）" class="headerlink" title="5.2 箭頭函式（Arrow Function）"></a>5.2 箭頭函式（Arrow Function）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">4</span>, <span class="number">6</span>)); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-立即執行函式（IIFE）"><a href="#5-3-立即執行函式（IIFE）" class="headerlink" title="5.3 立即執行函式（IIFE）"></a>5.3 立即執行函式（IIFE）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是立即執行函式&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-陣列與物件"><a href="#6-陣列與物件" class="headerlink" title="6. 陣列與物件"></a>6. 陣列與物件</h2><h3 id="6-1-陣列操作"><a href="#6-1-陣列操作" class="headerlink" title="6.1 陣列操作"></a>6.1 陣列操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>];</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">push</span>(<span class="string">&#x27;grape&#x27;</span>); <span class="comment">// 新增</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;grape&#x27;]</span></span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">pop</span>(); <span class="comment">// 移除最後一個</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-物件操作"><a href="#6-2-物件操作" class="headerlink" title="6.2 物件操作"></a>6.2 物件操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &#x27;Alice&#x27;</span></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// &#x27;Hello, my name is Alice&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-非同步處理"><a href="#7-非同步處理" class="headerlink" title="7. 非同步處理"></a>7. 非同步處理</h2><h3 id="7-1-setTimeout-與-setInterval"><a href="#7-1-setTimeout-與-setInterval" class="headerlink" title="7.1 setTimeout 與 setInterval"></a>7.1 <code>setTimeout</code> 與 <code>setInterval</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這段文字將在 2 秒後出現&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-2-Promise"><a href="#7-2-Promise" class="headerlink" title="7.2 Promise"></a>7.2 Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fetchData = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;資料已載入&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fetchData.<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(message));</span><br></pre></td></tr></table></figure>

<h3 id="7-3-async-await"><a href="#7-3-async-await" class="headerlink" title="7.3 async/await"></a>7.3 <code>async/await</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;資料已載入&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>JavaScript 是一種靈活且功能強大的語言，適用於前端與後端開發。本文介紹了基本語法、變數、運算子、控制流程、函式、陣列、物件及非同步處理等內容，這些知識構成 JavaScript 入門的基礎。建議透過實際練習來加深理解，如使用瀏覽器開發者工具或建立小型專案來測試所學內容。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript this 入門教學筆記 | 學習筆記</title>
    <url>/2021/01/16/learning-notes-javascript-this-intro-tutorial/</url>
    <content><![CDATA[<p>在 JavaScript 中，<code>this</code> 是一個關鍵字，它的值會根據執行環境的不同而改變。以下是 <code>this</code> 在不同情境下的行為：</p>
<hr>
<h2 id="1-全域環境-Global-Context"><a href="#1-全域環境-Global-Context" class="headerlink" title="1. 全域環境 (Global Context)"></a>1. <strong>全域環境 (Global Context)</strong></h2><p>在瀏覽器中，<code>this</code> 預設指向 <code>window</code> 物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在瀏覽器中，this 指向 window</span></span><br></pre></td></tr></table></figure>
<p>在 Node.js 環境下，<code>this</code> 則指向 <code>global</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 在 Node.js 中，this 指向 global</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-函式內部-Function-Context"><a href="#2-函式內部-Function-Context" class="headerlink" title="2. 函式內部 (Function Context)"></a>2. <strong>函式內部 (Function Context)</strong></h2><p>在一般函式中，<code>this</code> 的值取決於是否使用 <code>&quot;use strict&quot;</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showThis</span>(); <span class="comment">// 在非嚴格模式下，this 指向 window (瀏覽器) 或 global (Node.js)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStrictThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showStrictThis</span>(); <span class="comment">// 在嚴格模式下，this 變成 undefined</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-物件方法-Object-Method"><a href="#3-物件方法-Object-Method" class="headerlink" title="3. 物件方法 (Object Method)"></a>3. <strong>物件方法 (Object Method)</strong></h2><p>當 <code>this</code> 被用在物件的方法內，它指向該物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-建構函式-Constructor-Function"><a href="#4-建構函式-Constructor-Function" class="headerlink" title="4. 建構函式 (Constructor Function)"></a>4. <strong>建構函式 (Constructor Function)</strong></h2><p>在建構函式中，<code>this</code> 會指向新建立的物件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// &quot;Bob&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-箭頭函式-Arrow-Function"><a href="#5-箭頭函式-Arrow-Function" class="headerlink" title="5. 箭頭函式 (Arrow Function)"></a>5. <strong>箭頭函式 (Arrow Function)</strong></h2><p>箭頭函式中的 <code>this</code> <strong>不會</strong> 指向它自己的執行環境，而是繼承自外層作用域：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">arrowFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">arrowFunc</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// &quot;Charlie&quot; (this 繼承自 obj)</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-setTimeout-和-setInterval"><a href="#6-setTimeout-和-setInterval" class="headerlink" title="6. setTimeout 和 setInterval"></a>6. <strong>setTimeout 和 setInterval</strong></h2><p>在 <code>setTimeout</code> 或 <code>setInterval</code> 內，一般函式的 <code>this</code> 預設指向 <code>window</code> (瀏覽器) 或 <code>global</code> (Node.js)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// undefined，因為 this 指向 window/global</span></span><br></pre></td></tr></table></figure>
<p>解法：改用箭頭函式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// &quot;David&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-事件處理器-Event-Handler"><a href="#7-事件處理器-Event-Handler" class="headerlink" title="7. 事件處理器 (Event Handler)"></a>7. <strong>事件處理器 (Event Handler)</strong></h2><p>在事件處理函式中，<code>this</code> 指向觸發事件的元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 指向 &lt;button&gt; 元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果改用箭頭函式，<code>this</code> 會指向外部作用域：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 指向 window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-call、apply-和-bind"><a href="#8-call、apply-和-bind" class="headerlink" title="8. call、apply 和 bind"></a>8. <strong>call、apply 和 bind</strong></h2><p>可以使用 <code>call()</code>、<code>apply()</code> 和 <code>bind()</code> 來改變 <code>this</code> 指向：</p>
<h3 id="call"><a href="#call" class="headerlink" title="call()"></a><strong>call()</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Eve&quot;</span> &#125;;</span><br><span class="line">greet.<span class="title function_">call</span>(person); <span class="comment">// &quot;Eve&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a><strong>apply()</strong></h3><p><code>apply()</code> 與 <code>call()</code> 類似，但參數是以陣列方式傳入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params">age, city</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old and lives in <span class="subst">$&#123;city&#125;</span>.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Frank&quot;</span> &#125;;</span><br><span class="line">introduce.<span class="title function_">apply</span>(person, [<span class="number">25</span>, <span class="string">&quot;Taipei&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a><strong>bind()</strong></h3><p><code>bind()</code> 會回傳一個新的函式，永久綁定 <code>this</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boundFunc = greet.<span class="title function_">bind</span>(person);</span><br><span class="line"><span class="title function_">boundFunc</span>(); <span class="comment">// &quot;Eve&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li><strong>全域環境</strong>：<code>this</code> 在瀏覽器中指向 <code>window</code>，在 Node.js 指向 <code>global</code></li>
<li><strong>普通函式</strong>：嚴格模式下 <code>this</code> 為 <code>undefined</code>，否則指向 <code>window</code></li>
<li><strong>物件方法</strong>：<code>this</code> 指向該物件</li>
<li><strong>建構函式</strong>：<code>this</code> 指向新建立的物件</li>
<li><strong>箭頭函式</strong>：<code>this</code> 繼承外部作用域</li>
<li><strong>事件處理器</strong>：普通函式 <code>this</code> 指向事件元素，箭頭函式 <code>this</code> 指向外部作用域</li>
<li><strong><code>call</code>、<code>apply</code>、<code>bind</code></strong> 可顯式設定 <code>this</code></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JSX 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/13/learning-notes-jsx-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-JSX-是什麼？"><a href="#1-JSX-是什麼？" class="headerlink" title="1. JSX 是什麼？"></a>1. JSX 是什麼？</h2><p>JSX（JavaScript XML）是一種語法擴展，主要用於 React 函式庫中，它允許在 JavaScript 代碼中撰寫類似 HTML 的語法，使 UI 組件的編寫更加直觀。JSX 並非原生 JavaScript，需要透過 Babel 轉譯成標準 JavaScript 代碼。</p>
<h2 id="2-為什麼使用-JSX？"><a href="#2-為什麼使用-JSX？" class="headerlink" title="2. 為什麼使用 JSX？"></a>2. 為什麼使用 JSX？</h2><p>JSX 提供了一種更加可讀、直觀的方式來描述 UI 結構，相比於傳統的 JavaScript DOM 操作，它更簡潔易懂。此外，JSX 具備以下優勢：</p>
<ul>
<li><strong>可讀性高</strong>：類似 HTML 的語法使 UI 組件結構清晰。</li>
<li><strong>與 JavaScript 無縫結合</strong>：可在 JSX 中嵌入 JavaScript 表達式。</li>
<li><strong>更安全</strong>：React 會自動處理 XSS（跨站腳本攻擊），確保數據安全。</li>
<li><strong>高效渲染</strong>：React 使用虛擬 DOM 最小化真實 DOM 更新，提高性能。</li>
</ul>
<h2 id="3-基本語法"><a href="#3-基本語法" class="headerlink" title="3. 基本語法"></a>3. 基本語法</h2><h3 id="3-1-基本範例"><a href="#3-1-基本範例" class="headerlink" title="3.1 基本範例"></a>3.1 基本範例</h3><p>JSX 允許我們在 JavaScript 代碼中使用類似 HTML 的語法來描述 UI：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, JSX!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="3-2-JSX-中的-JavaScript-表達式"><a href="#3-2-JSX-中的-JavaScript-表達式" class="headerlink" title="3.2 JSX 中的 JavaScript 表達式"></a>3.2 JSX 中的 JavaScript 表達式</h3><p>JSX 允許在 <code>&#123;&#125;</code> 中插入 JavaScript 表達式，例如變數、函式調用等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-JSX-屬性"><a href="#3-3-JSX-屬性" class="headerlink" title="3.3 JSX 屬性"></a>3.3 JSX 屬性</h3><p>JSX 屬性與 HTML 類似，但有些屬性名稱需使用 camelCase，例如 <code>className</code> 取代 <code>class</code>，<code>htmlFor</code> 取代 <code>for</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入文字&quot;</span> <span class="attr">className</span>=<span class="string">&quot;input-box&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-JSX-內聯樣式"><a href="#3-4-JSX-內聯樣式" class="headerlink" title="3.4 JSX 內聯樣式"></a>3.4 JSX 內聯樣式</h3><p>內聯樣式需使用 JavaScript 對象，且屬性名稱為 camelCase。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123; <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>這是一段藍色文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-JSX-中的條件與循環"><a href="#4-JSX-中的條件與循環" class="headerlink" title="4. JSX 中的條件與循環"></a>4. JSX 中的條件與循環</h2><h3 id="4-1-條件渲染（if…else）"><a href="#4-1-條件渲染（if…else）" class="headerlink" title="4.1 條件渲染（if…else）"></a>4.1 條件渲染（if…else）</h3><p>JSX 本身不支援 <code>if...else</code>，需使用三元運算子或變數。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoggedIn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> element = isLoggedIn ? <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎回來！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>請登入<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-使用-amp-amp-運算符"><a href="#4-2-使用-amp-amp-運算符" class="headerlink" title="4.2 使用 &amp;&amp; 運算符"></a>4.2 使用 &amp;&amp; 運算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> messages = [<span class="string">&#x27;新訊息1&#x27;</span>, <span class="string">&#x27;新訊息2&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;messages.length &gt; 0 &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>你有 &#123;messages.length&#125; 則未讀訊息。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-迴圈渲染（map）"><a href="#4-3-迴圈渲染（map）" class="headerlink" title="4.3 迴圈渲染（map）"></a>4.3 迴圈渲染（map）</h3><p>JSX 可透過 <code>map</code> 方法來動態渲染列表。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Cherry&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;list.map((item, index) =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="5-JSX-與-React-組件"><a href="#5-JSX-與-React-組件" class="headerlink" title="5. JSX 與 React 組件"></a>5. JSX 與 React 組件</h2><p>JSX 可與 React 組件結合使用，提升 UI 開發的模組化程度。</p>
<h3 id="5-1-函式型組件"><a href="#5-1-函式型組件" class="headerlink" title="5.1 函式型組件"></a>5.1 函式型組件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123;props.name&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;小明&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="5-2-類別型組件"><a href="#5-2-類別型組件" class="headerlink" title="5.2 類別型組件"></a>5.2 類別型組件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123;this.props.name&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;小明&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="6-總結"><a href="#6-總結" class="headerlink" title="6. 總結"></a>6. 總結</h2><p>JSX 是 React 開發的重要語法，它能夠讓 UI 描述更加直觀，並與 JavaScript 無縫整合。透過學習 JSX，我們可以更高效地撰寫可重用的 React 組件，提高開發效率。</p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>LESS 入門教學筆記 | 學習筆記</title>
    <url>/2023/05/31/learning-notes-less-intro-tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>LESS</code>（Leaner Style Sheets）是一種 CSS 預處理器，它在 CSS 的基礎上加入了變數、嵌套、混合（Mixins）、函式等功能，使樣式表的管理更加靈活且易於維護。LESS 文件最終會被編譯成標準的 CSS，並可在瀏覽器或 Node.js 環境中使用。</p>
<hr>
<h2 id="1-安裝與使用"><a href="#1-安裝與使用" class="headerlink" title="1. 安裝與使用"></a>1. 安裝與使用</h2><p>LESS 可以透過以下幾種方式使用：  </p>
<h3 id="1-1-透過-LESS-js-在瀏覽器中運行"><a href="#1-1-透過-LESS-js-在瀏覽器中運行" class="headerlink" title="1.1 透過 LESS.js 在瀏覽器中運行"></a>1.1 透過 LESS.js 在瀏覽器中運行</h3><p>這種方式適合開發環境，但不建議在正式環境中使用，因為它會在瀏覽器端進行編譯，影響效能。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LESS 測試<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.less&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/less.js/4.1.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello LESS!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-透過-Node-js-編譯-LESS"><a href="#1-2-透過-Node-js-編譯-LESS" class="headerlink" title="1.2 透過 Node.js 編譯 LESS"></a>1.2 透過 Node.js 編譯 LESS</h3><p>如果你希望在開發環境中預先編譯 LESS，則可以使用 npm 安裝 LESS：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure>

<p>然後使用以下指令將 <code>.less</code> 文件編譯為 <code>.css</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lessc styles.less styles.css</span><br></pre></td></tr></table></figure>

<p>這樣就能夠將 LESS 轉換為 CSS，並直接在 HTML 中引用 <code>styles.css</code>。</p>
<hr>
<h2 id="2-LESS-的基本語法"><a href="#2-LESS-的基本語法" class="headerlink" title="2. LESS 的基本語法"></a>2. LESS 的基本語法</h2><h3 id="2-1-變數（Variables）"><a href="#2-1-變數（Variables）" class="headerlink" title="2.1 變數（Variables）"></a>2.1 變數（Variables）</h3><p>LESS 允許使用變數來儲存顏色、字型大小、間距等值，方便統一管理樣式。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@primary-color:</span> <span class="number">#3498db</span>;</span><br><span class="line"><span class="variable">@font-size:</span> <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-嵌套（Nesting）"><a href="#2-2-嵌套（Nesting）" class="headerlink" title="2.2 嵌套（Nesting）"></a>2.2 嵌套（Nesting）</h3><p>LESS 允許使用嵌套的方式來撰寫 CSS，這樣可以清楚地表示層級關係。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">text-decoration</span>: none;</span><br><span class="line">                <span class="attribute">color</span>: white;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-混合（Mixins）"><a href="#2-3-混合（Mixins）" class="headerlink" title="2.3 混合（Mixins）"></a>2.3 混合（Mixins）</h3><p>混合（Mixin）類似於函式，可以定義一組樣式，並在多個地方重複使用。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="selector-class">.border-radius</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-運算（Operations）"><a href="#2-4-運算（Operations）" class="headerlink" title="2.4 運算（Operations）"></a>2.4 運算（Operations）</h3><p>LESS 支援數學運算，可以用來計算尺寸、顏色等。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base-size:</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@base-size</span> * <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@base-size</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">@base-size</span> + <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-繼承（Extend）"><a href="#2-5-繼承（Extend）" class="headerlink" title="2.5 繼承（Extend）"></a>2.5 繼承（Extend）</h3><p>LESS 提供 <code>extend</code> 功能，允許一個選擇器繼承另一個選擇器的樣式。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.message);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#dff0d8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span>,</span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#dff0d8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-進階功能"><a href="#3-進階功能" class="headerlink" title="3. 進階功能"></a>3. 進階功能</h2><h3 id="3-1-運用函式（Functions）"><a href="#3-1-運用函式（Functions）" class="headerlink" title="3.1 運用函式（Functions）"></a>3.1 運用函式（Functions）</h3><p>LESS 提供許多內建函式，例如 <code>lighten()</code>、<code>darken()</code>、<code>fadeout()</code> 等來調整顏色透明度、亮度等。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@main-color:</span> <span class="number">#3498db</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@main-color</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">darken</span>(<span class="variable">@main-color</span>, <span class="number">10%</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">lighten</span>(<span class="variable">@main-color</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#217dbb</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5dade2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-迴圈（Loops）"><a href="#3-2-迴圈（Loops）" class="headerlink" title="3.2 迴圈（Loops）"></a>3.2 迴圈（Loops）</h3><p>LESS 允許使用 <code>each()</code> 來迭代陣列，或使用 <code>for</code> 來執行迴圈。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@colors:</span> red, green, blue;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.each</span>(<span class="variable">@colors</span>, &#123;</span><br><span class="line">    <span class="selector-class">.box-</span><span class="variable">@&#123;value&#125;</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="variable">@value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-green</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-blue</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-延遲運算（Lazy-Evaluation）"><a href="#3-3-延遲運算（Lazy-Evaluation）" class="headerlink" title="3.3 延遲運算（Lazy Evaluation）"></a>3.3 延遲運算（Lazy Evaluation）</h3><p>LESS 變數的值在運算時才會解析，因此可以動態變更變數內容。  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@theme-color:</span> <span class="variable">@primary-color</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@theme-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣如果稍後更改 <code>@primary-color</code>，<code>@theme-color</code> 也會自動更新。</p>
<hr>
<h2 id="4-結論"><a href="#4-結論" class="headerlink" title="4. 結論"></a>4. 結論</h2><p>LESS 透過變數、嵌套、混合、運算等功能，大大提升了 CSS 的可維護性與開發效率。建議開發者透過 Node.js 進行 LESS 編譯，避免在瀏覽器端執行影響效能。透過 LESS，樣式表變得更具結構化，讓前端開發更為靈活高效。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
        <tag>SCSS</tag>
        <tag>LESS</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/08/learning-notes-node-js-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-Node-js-簡介"><a href="#1-Node-js-簡介" class="headerlink" title="1. Node.js 簡介"></a>1. Node.js 簡介</h1><p>Node.js 是一個基於 Chrome V8 JavaScript 引擎的運行環境，可讓開發者使用 JavaScript 來撰寫後端程式。它適合用於構建高效能、非同步的網路應用。</p>
<h3 id="1-1-為何選擇-Node-js？"><a href="#1-1-為何選擇-Node-js？" class="headerlink" title="1.1 為何選擇 Node.js？"></a>1.1 為何選擇 Node.js？</h3><ul>
<li><strong>非同步 &amp; 事件驅動</strong>：適合 I&#x2F;O 密集型應用，如 Web 伺服器。</li>
<li><strong>單一語言開發</strong>：可用 JavaScript 同時開發前端與後端。</li>
<li><strong>強大的生態系統</strong>：擁有豐富的 NPM（Node Package Manager）套件。</li>
<li><strong>高效能</strong>：基於 V8 引擎，運行速度快。</li>
</ul>
<h1 id="2-安裝與環境設定"><a href="#2-安裝與環境設定" class="headerlink" title="2. 安裝與環境設定"></a>2. 安裝與環境設定</h1><h3 id="2-1-安裝-Node-js"><a href="#2-1-安裝-Node-js" class="headerlink" title="2.1 安裝 Node.js"></a>2.1 安裝 Node.js</h3><p>從 <a href="https://nodejs.org/">Node.js 官方網站</a> 下載並安裝 LTS 版本。</p>
<h3 id="2-2-檢查安裝是否成功"><a href="#2-2-檢查安裝是否成功" class="headerlink" title="2.2 檢查安裝是否成功"></a>2.2 檢查安裝是否成功</h3><p>安裝完成後，在終端機輸入以下指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>應該會顯示 Node.js 和 npm（Node 套件管理工具）的版本號。</p>
<h1 id="3-基本應用程式"><a href="#3-基本應用程式" class="headerlink" title="3. 基本應用程式"></a>3. 基本應用程式</h1><h3 id="3-1-建立第一個-Node-js-應用"><a href="#3-1-建立第一個-Node-js-應用" class="headerlink" title="3.1 建立第一個 Node.js 應用"></a>3.1 建立第一個 Node.js 應用</h3><p>新建一個 <code>app.js</code> 檔案，並輸入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, Node.js!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>然後在終端機執行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>應該會輸出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, Node.js!</span><br></pre></td></tr></table></figure>

<h3 id="3-2-建立簡單的-HTTP-伺服器"><a href="#3-2-建立簡單的-HTTP-伺服器" class="headerlink" title="3.2 建立簡單的 HTTP 伺服器"></a>3.2 建立簡單的 HTTP 伺服器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>執行後，開啟瀏覽器並訪問 <code>http://localhost:3000</code>，應該會看到 <code>Hello, World!</code>。</p>
<h1 id="4-Node-js-模組"><a href="#4-Node-js-模組" class="headerlink" title="4. Node.js 模組"></a>4. Node.js 模組</h1><h3 id="4-1-內建模組"><a href="#4-1-內建模組" class="headerlink" title="4.1 內建模組"></a>4.1 內建模組</h3><p>Node.js 提供許多內建模組，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 檔案系統</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">// 路徑處理</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>); <span class="comment">// 作業系統資訊</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-NPM-套件管理"><a href="#4-2-NPM-套件管理" class="headerlink" title="4.2 NPM 套件管理"></a>4.2 NPM 套件管理</h3><p>安裝 Express 框架：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<h1 id="5-Express-入門"><a href="#5-Express-入門" class="headerlink" title="5. Express 入門"></a>5. Express 入門</h1><h3 id="5-1-建立簡單的-Express-伺服器"><a href="#5-1-建立簡單的-Express-伺服器" class="headerlink" title="5.1 建立簡單的 Express 伺服器"></a>5.1 建立簡單的 Express 伺服器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello, Express!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="6-讀取與寫入檔案"><a href="#6-讀取與寫入檔案" class="headerlink" title="6. 讀取與寫入檔案"></a>6. 讀取與寫入檔案</h1><h3 id="6-1-讀取檔案"><a href="#6-1-讀取檔案" class="headerlink" title="6.1 讀取檔案"></a>6.1 讀取檔案</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-2-寫入檔案"><a href="#6-2-寫入檔案" class="headerlink" title="6.2 寫入檔案"></a>6.2 寫入檔案</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;Hello, Node.js!&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File has been saved!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="7-連接-MongoDB-資料庫"><a href="#7-連接-MongoDB-資料庫" class="headerlink" title="7. 連接 MongoDB 資料庫"></a>7. 連接 MongoDB 資料庫</h1><h3 id="7-1-安裝-MongoDB-驅動"><a href="#7-1-安裝-MongoDB-驅動" class="headerlink" title="7.1 安裝 MongoDB 驅動"></a>7.1 安裝 MongoDB 驅動</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure>

<h3 id="7-2-連接-MongoDB"><a href="#7-2-連接-MongoDB" class="headerlink" title="7.2 連接 MongoDB"></a>7.2 連接 MongoDB</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/testDB&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MongoDB&#x27;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h1 id="8-部署-Node-js-應用"><a href="#8-部署-Node-js-應用" class="headerlink" title="8. 部署 Node.js 應用"></a>8. 部署 Node.js 應用</h1><h3 id="8-1-使用-PM2-管理應用"><a href="#8-1-使用-PM2-管理應用" class="headerlink" title="8.1 使用 PM2 管理應用"></a>8.1 使用 PM2 管理應用</h3><p>安裝 PM2：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
<p>啟動應用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure>

<h3 id="8-2-使用-Docker-部署"><a href="#8-2-使用-Docker-部署" class="headerlink" title="8.2 使用 Docker 部署"></a>8.2 使用 Docker 部署</h3><p>建立 <code>Dockerfile</code>：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;app.js&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<h1 id="9-結論"><a href="#9-結論" class="headerlink" title="9. 結論"></a>9. 結論</h1><p>透過這篇入門筆記，初學者可以快速掌握 Node.js 的基礎概念與實作技巧，包含 HTTP 伺服器、檔案操作、資料庫連接等。建議進一步學習異步程式設計、RESTful API、WebSocket 以及雲端部署技術，以提升開發能力。</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>Node</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>滾動視差（Parallax Scrolling）網頁設計入門教學筆記 | 學習筆記</title>
    <url>/2024/12/03/learning-notes-parallax-scrolling-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是滾動視差？"><a href="#一、什麼是滾動視差？" class="headerlink" title="一、什麼是滾動視差？"></a>一、什麼是滾動視差？</h1><p>滾動視差（<code>Parallax Scrolling</code>）是一種前端網頁設計技術，透過不同層的背景與內容以不同的速度滾動，營造出立體感與動態視覺效果。這種技術常見於品牌網站、產品介紹頁面或作品展示頁面，能有效提升使用者的沉浸感與互動體驗。  </p>
<h3 id="滾動視差的視覺效果"><a href="#滾動視差的視覺效果" class="headerlink" title="滾動視差的視覺效果"></a>滾動視差的視覺效果</h3><ol>
<li><strong>背景與內容滾動速率不同</strong>：背景滾動速度較慢，前景滾動速度較快，模擬景深效果。  </li>
<li><strong>多層次視覺變化</strong>：不同層的元素可以有獨立的滾動行為，增加動態感。  </li>
<li><strong>創造故事性</strong>：透過滾動觸發不同場景，讓使用者體驗連貫的視覺敘事。</li>
</ol>
<hr>
<h1 id="二、滾動視差的基本實作"><a href="#二、滾動視差的基本實作" class="headerlink" title="二、滾動視差的基本實作"></a>二、滾動視差的基本實作</h1><h3 id="1-使用純-CSS-來製作滾動視差"><a href="#1-使用純-CSS-來製作滾動視差" class="headerlink" title="1. 使用純 CSS 來製作滾動視差"></a>1. 使用純 CSS 來製作滾動視差</h3><p>CSS 提供了 <code>background-attachment: fixed;</code> 屬性，可以讓背景圖像保持固定位置，而前景內容繼續滾動，營造簡單的滾動視差效果。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>滾動視差示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parallax</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;parallax-background.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parallax&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>滾動視差示例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的滾動視差網頁，背景固定不動，前景內容滾動。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parallax&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種方式雖然簡單，但無法實現更複雜的視差動畫效果。如果想要更進階的效果，通常需要搭配 JavaScript 或 CSS 變形（Transform）。</p>
<hr>
<h3 id="2-使用-CSS-transform-來實現滾動視差"><a href="#2-使用-CSS-transform-來實現滾動視差" class="headerlink" title="2. 使用 CSS transform 來實現滾動視差"></a>2. 使用 CSS <code>transform</code> 來實現滾動視差</h3><p>透過 <code>transform: translateZ()</code> 搭配 <code>perspective()</code>，可以製造出更立體的視差效果。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parallax-container</span> &#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parallax-layer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">1px</span>) <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這種方式可以讓不同層的元素有不同的滾動速率，達到更細緻的視覺效果。</p>
<hr>
<h1 id="三、使用-JavaScript-製作更靈活的滾動視差"><a href="#三、使用-JavaScript-製作更靈活的滾動視差" class="headerlink" title="三、使用 JavaScript 製作更靈活的滾動視差"></a>三、使用 JavaScript 製作更靈活的滾動視差</h1><p>雖然純 CSS 可以實現基本視差效果，但若要控制不同層級的滾動速度，或者添加額外動畫效果，就需要 JavaScript。  </p>
<h3 id="1-簡單的-JavaScript-滾動視差"><a href="#1-簡單的-JavaScript-滾動視差" class="headerlink" title="1. 簡單的 JavaScript 滾動視差"></a>1. 簡單的 JavaScript 滾動視差</h3><p>使用 <code>window.scrollY</code> 來控制元素的 <code>transform</code> 屬性，使其隨滾動變化。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 滾動視差<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parallax</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;parallax-background.jpg&#x27;</span>) center/cover no-repeat;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parallax&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>滾動視差效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> scrollPosition = <span class="variable language_">window</span>.<span class="property">scrollY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.parallax&#x27;</span>).<span class="property">style</span>.<span class="property">backgroundPositionY</span> = scrollPosition * <span class="number">0.5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這個範例中，我們透過 JavaScript 讓背景圖片根據滾動位置改變 <code>backgroundPositionY</code>，從而達成視差效果。</p>
<hr>
<h3 id="2-使用第三方函式庫（如-ScrollMagic）"><a href="#2-使用第三方函式庫（如-ScrollMagic）" class="headerlink" title="2. 使用第三方函式庫（如 ScrollMagic）"></a>2. 使用第三方函式庫（如 ScrollMagic）</h3><p>如果想要更進階的視差效果，可以使用 <code>ScrollMagic</code> 這類 JavaScript 函式庫，來更精確地控制滾動動畫。  </p>
<p>首先安裝 ScrollMagic：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install scrollmagic</span><br></pre></td></tr></table></figure>

<p>然後在 JavaScript 中設定滾動觸發點：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> controller = <span class="keyword">new</span> <span class="title class_">ScrollMagic</span>.<span class="title class_">Controller</span>();</span><br><span class="line"><span class="keyword">let</span> scene = <span class="keyword">new</span> <span class="title class_">ScrollMagic</span>.<span class="title class_">Scene</span>(&#123;</span><br><span class="line">    <span class="attr">triggerElement</span>: <span class="string">&#x27;.parallax&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">triggerHook</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">setTween</span>(<span class="string">&#x27;.parallax&#x27;</span>, &#123; <span class="attr">y</span>: <span class="string">&#x27;50%&#x27;</span>, <span class="attr">ease</span>: <span class="title class_">Linear</span>.<span class="property">easeNone</span> &#125;)</span><br><span class="line">.<span class="title function_">addTo</span>(controller);</span><br></pre></td></tr></table></figure>

<p>這樣可以讓 <code>.parallax</code> 元素在滾動時逐漸移動，達成視差效果。</p>
<hr>
<h1 id="四、滾動視差的應用場景"><a href="#四、滾動視差的應用場景" class="headerlink" title="四、滾動視差的應用場景"></a>四、滾動視差的應用場景</h1><p>滾動視差可以應用於許多不同類型的網站，例如：  </p>
<ol>
<li><strong>品牌網站</strong>：用來展示產品特性與公司理念，提高視覺吸引力。  </li>
<li><strong>作品集網站</strong>：適合攝影師、設計師，讓內容更具層次感。  </li>
<li><strong>故事敘述頁面</strong>：用來製作互動式故事，讓用戶在滾動中探索內容。  </li>
<li><strong>促銷與行銷頁面</strong>：讓特定區塊在滾動時突出，吸引目光。</li>
</ol>
<hr>
<h1 id="五、滾動視差的優勢與缺點"><a href="#五、滾動視差的優勢與缺點" class="headerlink" title="五、滾動視差的優勢與缺點"></a>五、滾動視差的優勢與缺點</h1><h3 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h3><ul>
<li>增強視覺吸引力，使網站更具互動性。  </li>
<li>可提升品牌形象，讓內容更具故事性。  </li>
<li>創造更流暢的使用者體驗，增加網站的停留時間。</li>
</ul>
<h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul>
<li>過多視差效果可能會影響效能，導致頁面滾動不流暢。  </li>
<li>可能對行動裝置不友善，需要額外的優化。  </li>
<li>過度使用可能會影響可讀性，降低使用者體驗。</li>
</ul>
<hr>
<h1 id="六、結論"><a href="#六、結論" class="headerlink" title="六、結論"></a>六、結論</h1><p>滾動視差是一種有效提升網站視覺吸引力的技術，適用於品牌展示、作品集與故事敘述類型的網站。透過 CSS 的 <code>background-attachment</code>，JavaScript 的 <code>scrollY</code>，或是使用函式庫如 <code>ScrollMagic</code>，都能實現不同程度的視差效果。  </p>
<p>然而，使用時需注意效能與可讀性，確保不會影響使用者體驗。在實作時，建議先從簡單的 CSS 視差效果開始，逐步引入 JavaScript 或函式庫，根據需求選擇最佳實作方式。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>React 與 Next.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/16/learning-notes-react-nextjs-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-React-簡介"><a href="#1-React-簡介" class="headerlink" title="1. React 簡介"></a>1. React 簡介</h2><p>React 是由 Facebook（現 Meta）開發的 JavaScript 前端函式庫，主要用於構建 UI 元件。它採用組件化開發方式，並透過 Virtual DOM 提升效能。</p>
<h2 id="2-Next-js-簡介"><a href="#2-Next-js-簡介" class="headerlink" title="2. Next.js 簡介"></a>2. Next.js 簡介</h2><p>Next.js 是一個基於 React 的框架，提供伺服器端渲染（SSR）、靜態網站生成（SSG）等功能，讓開發者能夠更輕鬆地開發 SEO 友好的應用程式。</p>
<h2 id="3-安裝-Next-js"><a href="#3-安裝-Next-js" class="headerlink" title="3. 安裝 Next.js"></a>3. 安裝 Next.js</h2><p>使用 <code>create-next-app</code> 初始化 Next.js 專案：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-next-app@latest my-next-app</span><br><span class="line"><span class="built_in">cd</span> my-next-app</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>這將會啟動開發伺服器，預設運行於 <code>http://localhost:3000</code>。</p>
<h2 id="4-Next-js-核心概念"><a href="#4-Next-js-核心概念" class="headerlink" title="4. Next.js 核心概念"></a>4. Next.js 核心概念</h2><h3 id="4-1-頁面（Pages）"><a href="#4-1-頁面（Pages）" class="headerlink" title="4.1 頁面（Pages）"></a>4.1 頁面（Pages）</h3><p>Next.js 使用 <code>pages/</code> 目錄來定義路由，每個 <code>.js</code> 或 <code>.tsx</code> 文件會自動成為一個頁面。</p>
<p>範例：<code>pages/index.js</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎來到 Next.js！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增 <code>pages/about.js</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>瀏覽 <code>/</code> 會載入 <code>index.js</code>，瀏覽 <code>/about</code> 會載入 <code>about.js</code>。</p>
<h3 id="4-2-Link-與導航"><a href="#4-2-Link-與導航" class="headerlink" title="4.2 Link 與導航"></a>4.2 Link 與導航</h3><p>使用 <code>next/link</code> 來建立導航連結：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Navbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> | <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>關於<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-頁面中的-props"><a href="#4-3-頁面中的-props" class="headerlink" title="4.3 頁面中的 props"></a>4.3 頁面中的 props</h3><p>Next.js 支援 <code>getServerSideProps</code>（伺服器端渲染）和 <code>getStaticProps</code>（靜態生成）。</p>
<h4 id="伺服器端渲染（SSR）"><a href="#伺服器端渲染（SSR）" class="headerlink" title="伺服器端渲染（SSR）"></a>伺服器端渲染（SSR）</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(data, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="靜態生成（SSG）"><a href="#靜態生成（SSG）" class="headerlink" title="靜態生成（SSG）"></a>靜態生成（SSG）</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(data, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-API-路由（API-Routes）"><a href="#5-API-路由（API-Routes）" class="headerlink" title="5. API 路由（API Routes）"></a>5. API 路由（API Routes）</h2><p>在 <code>pages/api/</code> 目錄下建立 API 端點。</p>
<p>範例：<code>pages/api/hello.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Hello, API!&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>請求 <code>/api/hello</code> 會返回 JSON 資料。</p>
<h2 id="6-使用全域狀態管理（React-Context）"><a href="#6-使用全域狀態管理（React-Context）" class="headerlink" title="6. 使用全域狀態管理（React Context）"></a>6. 使用全域狀態管理（React Context）</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ThemeProvider</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">theme</span>, <span class="attr">setTheme</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>_app.js</code> 中使用 Provider：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../context/ThemeContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在元件中存取狀態：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&#x27;../context/ThemeContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ThemeToggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; theme, setTheme &#125; = <span class="title function_">useTheme</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(theme === &#x27;light&#x27; ? &#x27;dark&#x27; : &#x27;light&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            切換主題（目前：&#123;theme&#125;）</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-總結"><a href="#7-總結" class="headerlink" title="7. 總結"></a>7. 總結</h2><p>Next.js 提供了比 React 更豐富的功能，如內建路由、伺服器端渲染（SSR）和 API 路由，適合開發高效能與 SEO 友好的網站。熟悉這些核心概念後，你可以更輕鬆地構建現代化的前端應用程式。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
        <tag>Options API</tag>
        <tag>Composition API</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt.js 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/01/learning-notes-nuxtjs-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是-Nuxt-js？"><a href="#一、什麼是-Nuxt-js？" class="headerlink" title="一、什麼是 Nuxt.js？"></a>一、什麼是 Nuxt.js？</h1><p><code>Nuxt.js</code> 是一個基於 <code>Vue.js</code> 的漸進式框架，專為構建伺服器端渲染（<code>SSR</code>）和靜態站點生成（<code>SSG</code>）應用程式而設計。它提供開發者一個強大的開發體驗，並簡化 Vue.js 應用的架構與設定，適合 SEO 優化、效能最佳化以及提升開發效率。  </p>
<p>Nuxt.js 的核心特性包括：  </p>
<ol>
<li><strong>伺服器端渲染（SSR）</strong>：增強 SEO 並提升初始載入速度。  </li>
<li><strong>靜態站點生成（SSG）</strong>：透過預先生成 HTML 提供更快的載入時間。  </li>
<li><strong>自動路由</strong>：基於 <code>pages</code> 目錄的檔案自動建立對應的路由，無需額外配置 Vue Router。  </li>
<li><strong>模組系統</strong>：支援大量 Nuxt 模組（如 TailwindCSS、PWA、Auth 等）來快速擴展功能。  </li>
<li><strong>組態簡單</strong>：預設優化 Vue.js 應用的結構與設定，減少繁瑣的配置工作。  </li>
<li><strong>組件自動載入</strong>：Nuxt 可自動載入 <code>components</code> 目錄內的 Vue 組件，減少 <code>import</code> 的需求。</li>
</ol>
<hr>
<h1 id="二、安裝與初始化-Nuxt-js"><a href="#二、安裝與初始化-Nuxt-js" class="headerlink" title="二、安裝與初始化 Nuxt.js"></a>二、安裝與初始化 Nuxt.js</h1><h3 id="1-使用-Nuxt-CLI-安裝（推薦方式）"><a href="#1-使用-Nuxt-CLI-安裝（推薦方式）" class="headerlink" title="1. 使用 Nuxt CLI 安裝（推薦方式）"></a>1. 使用 Nuxt CLI 安裝（推薦方式）</h3><p>Nuxt 提供官方 CLI 工具 <code>nuxi</code> 來建立新專案。  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx nuxi init my-nuxt-app</span><br><span class="line"><span class="built_in">cd</span> my-nuxt-app</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>上述指令會自動建立一個 <code>my-nuxt-app</code> 專案，並下載 Nuxt 相關相依套件。  </p>
<h3 id="2-使用-create-nuxt-app-安裝（舊版方式）"><a href="#2-使用-create-nuxt-app-安裝（舊版方式）" class="headerlink" title="2. 使用 create-nuxt-app 安裝（舊版方式）"></a>2. 使用 <code>create-nuxt-app</code> 安裝（舊版方式）</h3><p>如果要使用較舊的安裝方式，也可以透過 <code>create-nuxt-app</code> 指令來建立專案：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app my-nuxt-app</span><br></pre></td></tr></table></figure>

<p>此方法會提供互動式選單，讓開發者選擇 UI 框架（TailwindCSS、Bootstrap）、插件（Axios、PWA）以及 Nuxt 模式（SSR 或 SSG）。  </p>
<h3 id="3-啟動開發伺服器"><a href="#3-啟動開發伺服器" class="headerlink" title="3. 啟動開發伺服器"></a>3. 啟動開發伺服器</h3><p>安裝完成後，可以執行以下指令來啟動開發環境：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>預設會啟動本機伺服器 <code>http://localhost:3000</code>，可在瀏覽器中打開檢視。  </p>
<hr>
<h1 id="三、專案結構"><a href="#三、專案結構" class="headerlink" title="三、專案結構"></a>三、專案結構</h1><p>Nuxt.js 採用約定式（Convention over Configuration）架構，專案目錄結構如下：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my-nuxt-app/</span><br><span class="line">│── assets/        <span class="comment"># 未編譯的靜態資源，如 CSS、圖片</span></span><br><span class="line">│── components/    <span class="comment"># Vue 組件（自動載入）</span></span><br><span class="line">│── layouts/       <span class="comment"># 頁面佈局</span></span><br><span class="line">│── pages/         <span class="comment"># 自動建立的路由頁面</span></span><br><span class="line">│── plugins/       <span class="comment"># Nuxt 插件，如 Vue 插件或第三方庫</span></span><br><span class="line">│── public/        <span class="comment"># 靜態資源，可直接透過 URL 存取</span></span><br><span class="line">│── server/        <span class="comment"># 伺服器端 API（Nuxt 3）</span></span><br><span class="line">│── store/         <span class="comment"># Vuex 狀態管理（Nuxt 2，Nuxt 3 改用 `pinia`）</span></span><br><span class="line">│── nuxt.config.ts <span class="comment"># Nuxt 設定檔</span></span><br><span class="line">│── package.json   <span class="comment"># npm 套件設定</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、路由與頁面"><a href="#四、路由與頁面" class="headerlink" title="四、路由與頁面"></a>四、路由與頁面</h1><h3 id="1-自動建立路由"><a href="#1-自動建立路由" class="headerlink" title="1. 自動建立路由"></a>1. 自動建立路由</h3><p>Nuxt.js 會根據 <code>pages/</code> 目錄內的 Vue 檔案自動產生對應的路由。例如，在 <code>pages/index.vue</code> 建立首頁：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;歡迎來到 Nuxt.js&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>若在 <code>pages/about.vue</code> 建立新的 Vue 檔案，則 <code>http://localhost:3000/about</code> 會自動對應到該頁面。  </p>
<h3 id="2-動態路由"><a href="#2-動態路由" class="headerlink" title="2. 動態路由"></a>2. 動態路由</h3><p>可以使用 <code>_</code> 命名的方式建立動態路由。例如，在 <code>pages/blog/_id.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;文章 ID: &#123;&#123; route.params.id &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const route = useRoute();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>訪問 <code>http://localhost:3000/blog/123</code>，頁面將顯示 <code>文章 ID: 123</code>。  </p>
<hr>
<h1 id="五、Nuxt-組件與佈局"><a href="#五、Nuxt-組件與佈局" class="headerlink" title="五、Nuxt 組件與佈局"></a>五、Nuxt 組件與佈局</h1><h3 id="1-自動載入組件"><a href="#1-自動載入組件" class="headerlink" title="1. 自動載入組件"></a>1. 自動載入組件</h3><p>在 <code>components/</code> 內的 Vue 檔案會自動載入，例如建立 <code>components/Navbar.vue</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav class=&quot;bg-blue-500 p-4 text-white&quot;&gt;</span><br><span class="line">    &lt;h1&gt;網站導覽列&lt;/h1&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>然後在 <code>pages/index.vue</code> 內直接使用 <code>&lt;Navbar /&gt;</code>，無需 <code>import</code>：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">    &lt;h1&gt;首頁內容&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-佈局（Layouts）"><a href="#2-佈局（Layouts）" class="headerlink" title="2. 佈局（Layouts）"></a>2. 佈局（Layouts）</h3><p>佈局是共享的頁面結構，可在 <code>layouts/default.vue</code> 內定義：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Navbar /&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>所有 <code>pages/</code> 內的頁面會自動套用 <code>default.vue</code> 佈局。  </p>
<hr>
<h1 id="六、Nuxt-伺服器端-API（Nuxt-3）"><a href="#六、Nuxt-伺服器端-API（Nuxt-3）" class="headerlink" title="六、Nuxt 伺服器端 API（Nuxt 3）"></a>六、Nuxt 伺服器端 API（Nuxt 3）</h1><p>Nuxt 3 內建簡單的 API 伺服器，可在 <code>server/api/hello.ts</code> 新增 API：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&quot;Hello from Nuxt API&quot;</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>這樣就可以透過 <code>http://localhost:3000/api/hello</code> 訪問該 API。  </p>
<hr>
<h1 id="七、Nuxt-資料獲取"><a href="#七、Nuxt-資料獲取" class="headerlink" title="七、Nuxt 資料獲取"></a>七、Nuxt 資料獲取</h1><h3 id="1-useFetch-獲取-API-資料"><a href="#1-useFetch-獲取-API-資料" class="headerlink" title="1. useFetch() 獲取 API 資料"></a>1. <code>useFetch()</code> 獲取 API 資料</h3><p>Nuxt 3 提供 <code>useFetch</code> 來處理 API 讀取，例如：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; data.message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const &#123; data &#125; = useFetch(&#x27;/api/hello&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>這會自動調用 <code>server/api/hello.ts</code> 並顯示回應內容。  </p>
<hr>
<h1 id="八、部署-Nuxt-應用"><a href="#八、部署-Nuxt-應用" class="headerlink" title="八、部署 Nuxt 應用"></a>八、部署 Nuxt 應用</h1><h3 id="1-生成靜態站點"><a href="#1-生成靜態站點" class="headerlink" title="1. 生成靜態站點"></a>1. 生成靜態站點</h3><p>若要將 Nuxt 部署為靜態網站，可執行：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run generate</span><br></pre></td></tr></table></figure>

<p>這會在 <code>dist/</code> 目錄內產生靜態 HTML 檔案，可直接部署到 Netlify 或 Vercel。  </p>
<h3 id="2-部署至-Vercel"><a href="#2-部署至-Vercel" class="headerlink" title="2. 部署至 Vercel"></a>2. 部署至 Vercel</h3><p>使用 Vercel CLI 部署：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g vercel</span><br><span class="line">vercel</span><br></pre></td></tr></table></figure>

<p>即可快速部署 Nuxt 應用。  </p>
<hr>
<h1 id="九、結語"><a href="#九、結語" class="headerlink" title="九、結語"></a>九、結語</h1><p>Nuxt.js 提供強大的功能來簡化 Vue.js 開發，透過自動路由、組件自動載入、伺服器 API 以及資料獲取等功能，大幅提升開發效率。對於需要 SEO 優化或靜態站點的專案而言，Nuxt 是一個非常適合的選擇。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>Nuxt</tag>
        <tag>Nuxt.js</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>React Redux 介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/12/12/learning-notes-react-redux-intro-tutorial/</url>
    <content><![CDATA[<h4 id="1-什麼是-Redux？"><a href="#1-什麼是-Redux？" class="headerlink" title="1. 什麼是 Redux？"></a>1. 什麼是 Redux？</h4><p><code>Redux</code> 是 JavaScript 應用程式的狀態管理工具，最常與 React 搭配使用。它提供一個單一的全域狀態樹，使應用程式的狀態變更更可預測、可測試、可維護。Redux 遵循 <strong>單向數據流</strong> 和 <strong>不可變狀態</strong> 的概念，適合管理大型應用的複雜狀態。  </p>
<hr>
<h4 id="2-Redux-核心概念"><a href="#2-Redux-核心概念" class="headerlink" title="2. Redux 核心概念"></a>2. Redux 核心概念</h4><p>Redux 的運作基礎主要由三個部分組成：  </p>
<ol>
<li><strong>Store（存儲狀態的地方）</strong>  <ul>
<li>整個應用程式的狀態存儲在單一的 Store 中。</li>
</ul>
</li>
<li><strong>Action（動作）</strong>  <ul>
<li>Action 是一個 JavaScript 物件，描述了「發生了什麼事」。通常包含 <code>type</code> 屬性來表明事件類型，並可能包含 <code>payload</code> 傳遞額外數據。</li>
</ul>
</li>
<li><strong>Reducer（狀態變更邏輯）</strong>  <ul>
<li>Reducer 是一個純函式，接收當前狀態與 Action，根據 Action 類型來決定如何更新狀態。</li>
</ul>
</li>
</ol>
<hr>
<h4 id="3-安裝-Redux-和-React-Redux"><a href="#3-安裝-Redux-和-React-Redux" class="headerlink" title="3. 安裝 Redux 和 React-Redux"></a>3. 安裝 Redux 和 React-Redux</h4><p>在 React 專案中安裝 Redux 及 React-Redux：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>

<p>Redux Toolkit（RTK）是官方推薦的 Redux 工具包，它提供更簡潔、易用的 API 來簡化 Redux 使用。  </p>
<hr>
<h4 id="4-創建-Redux-Store"><a href="#4-創建-Redux-Store" class="headerlink" title="4. 創建 Redux Store"></a>4. 創建 Redux Store</h4><p>在 <code>store.js</code> 檔案中，使用 <code>configureStore</code> 創建 Store：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<p>在這裡，我們將 <code>counterReducer</code> 設定為 <code>counter</code> 這個 slice 的 reducer。</p>
<hr>
<h4 id="5-創建-Slice（Reducer-Action）"><a href="#5-創建-Slice（Reducer-Action）" class="headerlink" title="5. 創建 Slice（Reducer + Action）"></a>5. 創建 Slice（Reducer + Action）</h4><p>在 <code>counterSlice.js</code> 檔案中，使用 <code>createSlice</code> 定義 <code>counter</code> 相關的狀態與 reducer：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure>

<p>這裡的 <code>createSlice</code> 幫助我們：  </p>
<ul>
<li>定義狀態的初始值（<code>initialState</code>）  </li>
<li>自動生成 <code>reducer</code>  </li>
<li>自動產生對應的 Action</li>
</ul>
<hr>
<h4 id="6-設置-Store-提供給-React"><a href="#6-設置-Store-提供給-React" class="headerlink" title="6. 設置 Store 提供給 React"></a>6. 設置 Store 提供給 React</h4><p>在 <code>index.js</code> 檔案中使用 <code>Provider</code> 讓整個 React 應用可以存取 Redux Store：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>這樣 <code>App</code> 及其所有子元件都可以存取 Redux Store。</p>
<hr>
<h4 id="7-在-React-組件中使用-Redux"><a href="#7-在-React-組件中使用-Redux" class="headerlink" title="7. 在 React 組件中使用 Redux"></a>7. 在 React 組件中使用 Redux</h4><p>在 <code>Counter.js</code> 中使用 Redux Store 來讀取與修改 <code>counter</code> 的值：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement, incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Counter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>計數器：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;減少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(5))&#125;&gt;增加 5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure>

<p>在這個範例中：  </p>
<ul>
<li><code>useSelector(state =&gt; state.counter.value)</code> 取得 Store 內的 <code>counter</code> 值。  </li>
<li><code>useDispatch()</code> 取得 Redux 的 <code>dispatch</code> 函式，發送 Action 來更新狀態。  </li>
<li>點擊按鈕時，對應的 Action 會發送給 Reducer，修改狀態。</li>
</ul>
<hr>
<h4 id="8-使用-Redux-DevTools-進行除錯"><a href="#8-使用-Redux-DevTools-進行除錯" class="headerlink" title="8. 使用 Redux DevTools 進行除錯"></a>8. 使用 Redux DevTools 進行除錯</h4><p>Redux Toolkit 內建支援 Redux DevTools，可以在瀏覽器中查看 Redux 狀態變更的歷史紀錄，方便除錯。安裝 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a>，並開啟瀏覽器的 <code>Redux</code> 分頁來觀察 Action 和 State 變化。</p>
<hr>
<h4 id="9-總結"><a href="#9-總結" class="headerlink" title="9. 總結"></a>9. 總結</h4><p>Redux 提供了一個強大的狀態管理方式，適合中大型應用。在 Redux Toolkit 的幫助下，開發 Redux 應用變得更加直觀與簡潔。本篇介紹了 Redux 的基本概念，並透過實際範例展示如何在 React 中整合 Redux。如果你的應用狀態複雜，需要跨組件共享，Redux 會是很好的選擇。</p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://blog.typeart.cc/redux-vs-use-congtext-use-reducer-and-which-one/">redux vs useContext, useReducer，該怎麼選擇？</a></li>
<li><a href="https://leewarrick.com/blog/the-problem-with-context/">The Problem with React’s Context API</a></li>
</ol>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>Redux</tag>
        <tag>React Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>正規表達式（Regex）入門教學筆記 | 學習筆記</title>
    <url>/2024/12/13/learning-notes-regex-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-正規表達式簡介"><a href="#1-正規表達式簡介" class="headerlink" title="1. 正規表達式簡介"></a>1. 正規表達式簡介</h2><p>正規表達式（Regular Expression，簡稱 <code>Regex</code>）是一種用於字串匹配與處理的強大工具。它廣泛應用於文字搜尋、資料驗證、文字替換等場景。正規表達式透過特殊的語法模式來描述字串結構，並可被多種程式語言支援，如 Python、JavaScript、Java、C# 等。</p>
<h2 id="2-基本語法與範例"><a href="#2-基本語法與範例" class="headerlink" title="2. 基本語法與範例"></a>2. 基本語法與範例</h2><h3 id="2-1-字面量匹配"><a href="#2-1-字面量匹配" class="headerlink" title="2.1 字面量匹配"></a>2.1 字面量匹配</h3><p>正規表達式最基本的形式是字面量匹配，意即直接搜尋特定字串。</p>
<p><strong>範例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>可匹配「hello」這個字串。</p>
<h3 id="2-2-字元類別（Character-Classes）"><a href="#2-2-字元類別（Character-Classes）" class="headerlink" title="2.2 字元類別（Character Classes）"></a>2.2 字元類別（Character Classes）</h3><p>字元類別用來匹配特定類型的字元。</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>說明</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>任意單一字元（不含換行）</td>
<td><code>h.t</code> 可匹配 <code>hat</code>, <code>hot</code>, <code>hit</code></td>
</tr>
<tr>
<td><code>[abc]</code></td>
<td>任意列出的字元</td>
<td><code>[aeiou]</code> 可匹配任一母音字母</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>不包含列出的字元</td>
<td><code>[^0-9]</code> 可匹配任何非數字字元</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>字母範圍</td>
<td><code>[a-zA-Z]</code> 可匹配所有英文字母</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>任意數字（等價於 <code>[0-9]</code>）</td>
<td><code>\d&#123;2&#125;</code> 可匹配 <code>23</code>, <code>89</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>任意字母、數字或底線（<code>[a-zA-Z0-9_]</code>）</td>
<td><code>\w+</code> 可匹配 <code>hello_123</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>空白字元（空格、Tab、換行）</td>
<td><code>\s+</code> 可匹配 <code>   </code></td>
</tr>
</tbody></table>
<h3 id="2-3-邊界匹配（Anchors）"><a href="#2-3-邊界匹配（Anchors）" class="headerlink" title="2.3 邊界匹配（Anchors）"></a>2.3 邊界匹配（Anchors）</h3><p>用來限制匹配的位置。</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>說明</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td><code>^</code></td>
<td>開頭</td>
<td><code>^Hello</code> 只能匹配 <code>Hello world</code>，但不匹配 <code>Say Hello</code></td>
</tr>
<tr>
<td><code>$</code></td>
<td>結尾</td>
<td><code>world$</code> 只能匹配 <code>Hello world</code>，但不匹配 <code>world today</code></td>
</tr>
<tr>
<td><code>\b</code></td>
<td>單字邊界</td>
<td><code>\bcat\b</code> 只匹配 <code>cat</code>，但不匹配 <code>catch</code></td>
</tr>
</tbody></table>
<h3 id="2-4-重複匹配（Quantifiers）"><a href="#2-4-重複匹配（Quantifiers）" class="headerlink" title="2.4 重複匹配（Quantifiers）"></a>2.4 重複匹配（Quantifiers）</h3><p>用來指定重複次數。</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>說明</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>0 次或更多</td>
<td><code>ba*</code> 可匹配 <code>b</code>, <code>ba</code>, <code>baa</code>, <code>baaa</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>1 次或更多</td>
<td><code>ba+</code> 可匹配 <code>ba</code>, <code>baa</code>, <code>baaa</code> 但不匹配 <code>b</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td>0 次或 1 次</td>
<td><code>colou?r</code> 可匹配 <code>color</code> 和 <code>colour</code></td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>恰好 n 次</td>
<td><code>a&#123;3&#125;</code> 只匹配 <code>aaa</code></td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>至少 n 次</td>
<td><code>a&#123;2,&#125;</code> 可匹配 <code>aa</code>, <code>aaa</code>, <code>aaaa</code></td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>n 到 m 次</td>
<td><code>a&#123;2,4&#125;</code> 可匹配 <code>aa</code>, <code>aaa</code>, <code>aaaa</code></td>
</tr>
</tbody></table>
<h3 id="2-5-分組與選擇（Groups-amp-Alternation）"><a href="#2-5-分組與選擇（Groups-amp-Alternation）" class="headerlink" title="2.5 分組與選擇（Groups &amp; Alternation）"></a>2.5 分組與選擇（Groups &amp; Alternation）</h3><p>使用括號來分組，使用 <code>|</code> 來表示選擇。</p>
<p><strong>範例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(grape|apple|banana)</span><br></pre></td></tr></table></figure>
<p>匹配 <code>grape</code>、<code>apple</code> 或 <code>banana</code>。</p>
<p><strong>範例（分組）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(a|b)c</span><br></pre></td></tr></table></figure>
<p>匹配 <code>ac</code> 或 <code>bc</code>。</p>
<h3 id="2-6-轉義字元（Escape-Characters）"><a href="#2-6-轉義字元（Escape-Characters）" class="headerlink" title="2.6 轉義字元（Escape Characters）"></a>2.6 轉義字元（Escape Characters）</h3><p>正規表達式中的特殊字元（如 <code>.</code>、<code>*</code>、<code>?</code>）需要用 <code>\</code> 進行轉義。</p>
<p><strong>範例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\.com</span><br></pre></td></tr></table></figure>
<p>匹配 <code>.com</code>（實際字面值）。</p>
<h2 id="3-正規表達式應用範例"><a href="#3-正規表達式應用範例" class="headerlink" title="3. 正規表達式應用範例"></a>3. 正規表達式應用範例</h2><h3 id="3-1-Email-驗證"><a href="#3-1-Email-驗證" class="headerlink" title="3.1 Email 驗證"></a>3.1 Email 驗證</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>test@example.com</code> ✅</li>
<li><code>hello@domain.co.uk</code> ✅</li>
<li><code>invalid@com</code> ❌</li>
</ul>
<h3 id="3-2-手機號碼驗證（台灣格式）"><a href="#3-2-手機號碼驗證（台灣格式）" class="headerlink" title="3.2 手機號碼驗證（台灣格式）"></a>3.2 手機號碼驗證（台灣格式）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^09[0-9]&#123;8&#125;$</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>0912345678</code> ✅</li>
<li><code>1234567890</code> ❌</li>
</ul>
<h3 id="3-3-找出所有網址"><a href="#3-3-找出所有網址" class="headerlink" title="3.3 找出所有網址"></a>3.3 找出所有網址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https?://[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;(/\S*)?</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>https://www.google.com</code> ✅</li>
<li><code>http://example.org/test</code> ✅</li>
<li><code>ftp://invalid.url</code> ❌</li>
</ul>
<h3 id="3-4-HTML-標籤匹配"><a href="#3-4-HTML-標籤匹配" class="headerlink" title="3.4 HTML 標籤匹配"></a>3.4 HTML 標籤匹配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*?)&lt;/\1&gt;|/&gt;)</span><br></pre></td></tr></table></figure>
<p><strong>匹配範例</strong>：</p>
<ul>
<li><code>&lt;div class=&quot;container&quot;&gt;Content&lt;/div&gt;</code> ✅</li>
<li><code>&lt;img src=&quot;image.jpg&quot; /&gt;</code> ✅</li>
</ul>
<h2 id="4-總結"><a href="#4-總結" class="headerlink" title="4. 總結"></a>4. 總結</h2><p>正規表達式是一種強大的工具，適用於文字處理與資料驗證。透過學習基本語法與實際應用，你可以更有效率地處理字串相關的問題。實務上建議透過線上工具（如 <a href="https://regex101.com/">Regex101</a> 等工具）來測試你的正規表達式，以加深理解。</p>
]]></content>
      <tags>
        <tag>Regular Expression</tag>
        <tag>正則式</tag>
        <tag>正規表達式</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Design 響應式設計入門教學筆記 | 學習筆記</title>
    <url>/2022/06/09/learning-notes-responsive-design-rwd/</url>
    <content><![CDATA[<h2 id="Responsive-Design-響應式設計入門教學筆記"><a href="#Responsive-Design-響應式設計入門教學筆記" class="headerlink" title="Responsive Design 響應式設計入門教學筆記"></a>Responsive Design 響應式設計入門教學筆記</h2><h3 id="一、什麼是響應式設計"><a href="#一、什麼是響應式設計" class="headerlink" title="一、什麼是響應式設計"></a>一、什麼是響應式設計</h3><p>響應式設計 (Responsive Design) 是一種網頁設計方法，使網頁能夠根據不同裝置的螢幕尺寸與解析度，自動調整版面配置，以提供最佳的使用體驗。</p>
<h3 id="二、響應式設計的重要概念"><a href="#二、響應式設計的重要概念" class="headerlink" title="二、響應式設計的重要概念"></a>二、響應式設計的重要概念</h3><h4 id="1-視圖-Viewport"><a href="#1-視圖-Viewport" class="headerlink" title="1. 視圖 (Viewport)"></a>1. 視圖 (Viewport)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這段程式碼放在 <head> 標籤內，能讓網頁根據不同裝置寬度調整顯示比例，是響應式設計的基本設定。</p>
<h4 id="2-流動網格-Fluid-Grid"><a href="#2-流動網格-Fluid-Grid" class="headerlink" title="2. 流動網格 (Fluid Grid)"></a>2. 流動網格 (Fluid Grid)</h4><p>使用百分比 (%) 來設定元素的寬度，而非固定的像素 (px)，讓版面能隨螢幕大小調整。</p>
<h4 id="3-彈性圖片-Flexible-Images"><a href="#3-彈性圖片-Flexible-Images" class="headerlink" title="3. 彈性圖片 (Flexible Images)"></a>3. 彈性圖片 (Flexible Images)</h4><p>圖片大小以百分比或 max-width 設定，避免圖片超出容器範圍。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-媒體查詢-Media-Queries"><a href="#4-媒體查詢-Media-Queries" class="headerlink" title="4. 媒體查詢 (Media Queries)"></a>4. 媒體查詢 (Media Queries)</h4><p>根據裝置螢幕大小套用不同的 CSS 樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgrey;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、常見的斷點-Breakpoints"><a href="#三、常見的斷點-Breakpoints" class="headerlink" title="三、常見的斷點 (Breakpoints)"></a>三、常見的斷點 (Breakpoints)</h3><p>以下為常見的螢幕寬度斷點，用來針對不同裝置設定樣式：</p>
<table>
<thead>
<tr>
<th>裝置類型</th>
<th>斷點寬度</th>
</tr>
</thead>
<tbody><tr>
<td>手機</td>
<td>0 - 576px</td>
</tr>
<tr>
<td>平板</td>
<td>577px - 768px</td>
</tr>
<tr>
<td>小型桌面</td>
<td>769px - 992px</td>
</tr>
<tr>
<td>大型桌面</td>
<td>993px 以上</td>
</tr>
</tbody></table>
<h3 id="四、實作範例"><a href="#四、實作範例" class="headerlink" title="四、實作範例"></a>四、實作範例</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>響應式設計範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>歡迎來到響應式設計範例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一個簡單的響應式網頁範例。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、其他工具"><a href="#五、其他工具" class="headerlink" title="五、其他工具"></a>五、其他工具</h3><ol>
<li>Bootstrap：內建響應式網格系統，方便快速開發響應式網頁。</li>
<li>Flexbox：簡化版面排列的工具，適合處理彈性佈局。</li>
<li>CSS Grid：強大的網格系統，用於建立複雜的版面。</li>
</ol>
<h3 id="六、結語"><a href="#六、結語" class="headerlink" title="六、結語"></a>六、結語</h3><p>響應式設計能提升使用者體驗，使網頁能適應不同裝置，有助於 SEO 表現，是現代網頁設計不可忽視的重要技能。</p>
]]></content>
      <tags>
        <tag>Responsive Design</tag>
        <tag>響應式設計</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>SASS 語法介紹入門教學筆記 | 學習筆記</title>
    <url>/2024/06/30/learning-notes-sass-intro-tutorial/</url>
    <content><![CDATA[<h1 id="什麼是-SASS？"><a href="#什麼是-SASS？" class="headerlink" title="什麼是 SASS？"></a>什麼是 SASS？</h1><p><code>SASS</code>（Syntactically Awesome Style Sheets）是一種 CSS 預處理器，旨在提升 CSS 的功能性，讓開發者能夠以更加靈活和高效的方式編寫樣式表。它提供了許多比 CSS 更強大的功能，例如變數、巢狀規則、混合（mixins）、繼承等。SASS 語法有兩種主要形式：一種是較為常見的 SCSS（<code>Sassy CSS</code>），另一種則是 <code>SASS</code>，本文將主要介紹 SASS 語法。</p>
<p>與 SCSS 不同，SASS 語法採用的是縮排語法，即不使用大括號和分號，而是利用縮排來結構化程式碼。這種語法更簡潔，對於習慣 Python 等語言的開發者來說，學習曲線較為平滑。</p>
<h1 id="安裝與設置"><a href="#安裝與設置" class="headerlink" title="安裝與設置"></a>安裝與設置</h1><p>要開始使用 SASS，首先需要安裝 SASS 編譯器。最常見的安裝方式是透過 Node.js 的 npm（Node Package Manager）。請按照以下步驟進行安裝：</p>
<ol>
<li><p>確保已經安裝了 Node.js 和 npm。</p>
</li>
<li><p>打開終端機，並在專案資料夾中執行以下命令來安裝 SASS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g sass</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝完成後，可以通過命令行執行 SASS 編譯命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sass input.sass output.css</span><br></pre></td></tr></table></figure></li>
</ol>
<p>這樣，<code>input.sass</code> 就會被編譯為標準的 <code>output.css</code> 檔案。</p>
<h1 id="SASS-語法介紹"><a href="#SASS-語法介紹" class="headerlink" title="SASS 語法介紹"></a>SASS 語法介紹</h1><h3 id="1-變數（Variables）"><a href="#1-變數（Variables）" class="headerlink" title="1. 變數（Variables）"></a>1. 變數（Variables）</h3><p>SASS 的變數功能讓開發者可以將顏色、字體大小、間距等常用值儲存在變數中，這樣能夠提高樣式的可重用性，並讓程式碼更具維護性。在 SASS 中，變數以 <code>$</code> 符號開頭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$primary-color: #3498db</span><br><span class="line">$font-size: 16px</span><br><span class="line"></span><br><span class="line">body</span><br><span class="line">  font-size: $font-size</span><br><span class="line">  color: $primary-color</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，我們定義了 <code>$primary-color</code> 和 <code>$font-size</code> 兩個變數，並將其應用於 <code>body</code> 樣式中。這樣，只需要修改變數的值，即可全局更新相應的樣式。</p>
<h3 id="2-巢狀規則（Nesting）"><a href="#2-巢狀規則（Nesting）" class="headerlink" title="2. 巢狀規則（Nesting）"></a>2. 巢狀規則（Nesting）</h3><p>SASS 支援巢狀規則，這樣可以讓樣式更加結構化，並且簡化對於子元素樣式的編寫。SASS 使用縮排來表示層級關係，這一點與傳統的 CSS 需要寫出完整選擇器有所不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nav</span><br><span class="line">  background-color: #333</span><br><span class="line">  ul</span><br><span class="line">    list-style-type: none</span><br><span class="line">    padding: 0</span><br><span class="line">  li</span><br><span class="line">    display: inline-block</span><br><span class="line">  a</span><br><span class="line">    color: white</span><br><span class="line">    text-decoration: none</span><br></pre></td></tr></table></figure>

<p>這段程式碼會被編譯為：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣的寫法可以避免寫重複的選擇器，並且清晰地表現出元素之間的層級結構。</p>
<h3 id="3-混合（Mixins）"><a href="#3-混合（Mixins）" class="headerlink" title="3. 混合（Mixins）"></a>3. 混合（Mixins）</h3><p>混合是 SASS 中一個非常有用的功能，它可以將一段可重用的樣式封裝成一個混合，並且可以接受參數，實現樣式的動態應用。混合類似於函數，能夠在不同地方重複使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=mixin border-radius($radius)</span><br><span class="line">  -webkit-border-radius: $radius</span><br><span class="line">  -moz-border-radius: $radius</span><br><span class="line">  border-radius: $radius</span><br><span class="line"></span><br><span class="line">.box</span><br><span class="line">  @include border-radius(10px)</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，我們定義了一個名為 <code>border-radius</code> 的混合，接受一個 <code>$radius</code> 參數，用來設置元素的邊框圓角。然後，我們在 <code>.box</code> 中使用 <code>@include</code> 引入這個混合，並傳遞具體的參數。這樣，當需要改變邊框圓角的樣式時，只需要修改混合的參數，而不需要在多個地方重複編寫。</p>
<h3 id="4-繼承（Inheritance）"><a href="#4-繼承（Inheritance）" class="headerlink" title="4. 繼承（Inheritance）"></a>4. 繼承（Inheritance）</h3><p>SASS 提供了繼承功能，使得一個選擇器可以繼承另一個選擇器的樣式。這有助於減少樣式重複，並保持程式碼的整潔性。SASS 使用 <code>@extend</code> 指令來實現繼承。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%button-base</span><br><span class="line">  padding: 10px 15px</span><br><span class="line">  background-color: #3498db</span><br><span class="line">  color: white</span><br><span class="line">  border: none</span><br><span class="line">  border-radius: 5px</span><br><span class="line"></span><br><span class="line">.button-primary</span><br><span class="line">  @extend %button-base</span><br><span class="line">  background-color: #1abc9c</span><br><span class="line"></span><br><span class="line">.button-secondary</span><br><span class="line">  @extend %button-base</span><br><span class="line">  background-color: #f39c12</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，我們定義了一個 <code>%button-base</code> 共享樣式，然後讓 <code>.button-primary</code> 和 <code>.button-secondary</code> 繼承這些樣式，並根據需要進行自定義修改。使用繼承的方式可以減少代碼重複，提高樣式的可維護性。</p>
<h3 id="5-條件語句（Conditionals）"><a href="#5-條件語句（Conditionals）" class="headerlink" title="5. 條件語句（Conditionals）"></a>5. 條件語句（Conditionals）</h3><p>SASS 支援條件語句，這讓我們可以根據某些條件選擇性地應用不同的樣式。這樣可以使樣式表更具動態性，根據不同情境調整顯示效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$theme: light</span><br><span class="line"></span><br><span class="line">body</span><br><span class="line">  @if $theme == light</span><br><span class="line">    background-color: #fff</span><br><span class="line">    color: #333</span><br><span class="line">  @else</span><br><span class="line">    background-color: #333</span><br><span class="line">    color: #fff</span><br></pre></td></tr></table></figure>

<p>這段程式碼中，根據變數 <code>$theme</code> 的值，條件地設定 <code>body</code> 的背景顏色和文字顏色。如果 <code>$theme</code> 為 <code>light</code>，則使用淺色背景和深色文字；否則，使用深色背景和淺色文字。</p>
<h3 id="6-循環（Loops）"><a href="#6-循環（Loops）" class="headerlink" title="6. 循環（Loops）"></a>6. 循環（Loops）</h3><p>SASS 還支援循環語句，這在需要根據某些條件自動生成多個樣式時非常有用。SASS 的循環可以遍歷一個列表，並生成對應的樣式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$colors: red, green, blue</span><br><span class="line"></span><br><span class="line">@each $color in $colors</span><br><span class="line">  .#&#123;$color&#125;-box</span><br><span class="line">    background-color: $color</span><br></pre></td></tr></table></figure>

<p>在這段程式碼中，<code>@each</code> 循環將遍歷 <code>$colors</code> 列表，並為每個顏色生成一個相應的類別 <code>.red-box</code>、<code>.green-box</code> 和 <code>.blue-box</code>，並將其背景顏色設置為對應的顏色。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>SASS 的 SASS 語法是一種簡潔且強大的 CSS 編寫方式，通過簡單的縮排結構，讓開發者能夠更有效率地編寫和維護樣式。SASS 提供的變數、巢狀規則、混合、繼承等功能，能夠使樣式更加模組化、動態化，並大大減少冗餘代碼。學會 SASS 語法後，你可以更靈活地處理大型專案中的 CSS，提升工作效率。如果你還沒有開始使用 SASS，不妨從這些基礎語法開始，體驗它帶來的便利。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
        <tag>SCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS 介紹入門教學筆記 | 學習筆記</title>
    <url>/2023/07/01/learning-notes-scss-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、SASS-是什麼？"><a href="#一、SASS-是什麼？" class="headerlink" title="一、SASS 是什麼？"></a>一、SASS 是什麼？</h1><p>SASS（Syntactically Awesome Stylesheets）是一種 CSS 預處理器（CSS Preprocessor），它擴展了 CSS 的功能，使樣式表更具可讀性、模組化和可維護性。SASS 允許使用變數、巢狀（Nesting）、混入（Mixin）、繼承（Extend）等進階特性，讓開發者能更有效率地管理 CSS。  </p>
<p>SASS 有兩種語法：  </p>
<ol>
<li><strong>SCSS（Sassy CSS）</strong>：與傳統 CSS 語法相似，使用 <code>&#123;&#125;</code> 和 <code>;</code> 來區分樣式，擴展性強且相容 CSS。  </li>
<li><strong>SASS（縮排語法）</strong>：省略 <code>&#123;&#125;</code> 和 <code>;</code>，使用縮排來表示層級關係，簡潔但較不常用。</li>
</ol>
<p>目前，SCSS 語法較受歡迎，因此本文主要以 SCSS 為主進行介紹。  </p>
<hr>
<h1 id="二、SASS-的優勢"><a href="#二、SASS-的優勢" class="headerlink" title="二、SASS 的優勢"></a>二、SASS 的優勢</h1><p>使用 SASS 的主要優勢包括：  </p>
<ol>
<li><strong>可維護性</strong>：透過模組化的結構管理樣式，避免冗長且難以維護的 CSS。  </li>
<li><strong>變數（Variables）</strong>：可定義全站共用的變數，例如顏色、字體大小等，提高一致性。  </li>
<li><strong>巢狀結構（Nesting）</strong>：讓樣式更具層次感，避免重複選擇器。  </li>
<li><strong>混入（Mixin）</strong>：類似函式的概念，可重複使用樣式區塊，減少冗餘。  </li>
<li><strong>繼承（Extend）</strong>：透過 <code>@extend</code> 共享樣式，減少重複編寫的代碼。  </li>
<li><strong>函式（Functions）</strong>：內建函式如 <code>lighten()</code>、<code>darken()</code> 可動態調整顏色，提高設計靈活性。</li>
</ol>
<hr>
<h1 id="三、安裝與使用-SASS"><a href="#三、安裝與使用-SASS" class="headerlink" title="三、安裝與使用 SASS"></a>三、安裝與使用 SASS</h1><h3 id="1-透過-npm-安裝"><a href="#1-透過-npm-安裝" class="headerlink" title="1. 透過 npm 安裝"></a>1. 透過 npm 安裝</h3><p>如果使用 Node.js，可透過 npm 安裝 SASS：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g sass</span><br></pre></td></tr></table></figure>

<p>安裝後，可使用以下指令將 SCSS 轉譯為 CSS：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sass input.scss output.css</span><br></pre></td></tr></table></figure>

<p>可使用 <code>--watch</code> 讓 SASS 自動監聽檔案變化並即時編譯：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sass --watch input.scss:output.css</span><br></pre></td></tr></table></figure>

<h3 id="2-透過-CDN-使用"><a href="#2-透過-CDN-使用" class="headerlink" title="2. 透過 CDN 使用"></a>2. 透過 CDN 使用</h3><p>雖然 SASS 本身無法直接在瀏覽器運行，但可透過一些線上工具（如 CodePen）編寫 SCSS，並自動編譯成 CSS 進行預覽。  </p>
<hr>
<h1 id="四、SASS-基礎語法"><a href="#四、SASS-基礎語法" class="headerlink" title="四、SASS 基礎語法"></a>四、SASS 基礎語法</h1><h3 id="1-變數（Variables）"><a href="#1-變數（Variables）" class="headerlink" title="1. 變數（Variables）"></a>1. 變數（Variables）</h3><p>SASS 允許使用變數來存儲顏色、字體大小、間距等常數，使樣式更具一致性。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"><span class="variable">$font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-巢狀結構（Nesting）"><a href="#2-巢狀結構（Nesting）" class="headerlink" title="2. 巢狀結構（Nesting）"></a>2. 巢狀結構（Nesting）</h3><p>在 CSS 中，我們通常需要重複撰寫父選擇器，但在 SASS 中可直接巢狀編寫，提高可讀性。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: white;</span><br><span class="line">                <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段 SCSS 會編譯成以下 CSS：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-混入（Mixin）"><a href="#3-混入（Mixin）" class="headerlink" title="3. 混入（Mixin）"></a>3. 混入（Mixin）</h3><p>Mixin 可定義可重複使用的樣式區塊，並可接受參數，使樣式更加靈活。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> button-style(<span class="variable">$bg-color</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bg-color</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> button-style(<span class="number">#3498db</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-secondary</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> button-style(<span class="number">#2ecc71</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS 為：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-secondary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-繼承（Extend）"><a href="#4-繼承（Extend）" class="headerlink" title="4. 繼承（Extend）"></a>4. 繼承（Extend）</h3><p><code>@extend</code> 允許一個選擇器繼承另一個選擇器的樣式，避免重複撰寫代碼。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .message;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .message;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span>, <span class="selector-class">.success</span>, <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-運算與函式"><a href="#5-運算與函式" class="headerlink" title="5. 運算與函式"></a>5. 運算與函式</h3><p>SASS 允許在樣式中進行運算，使數值調整更加靈活。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$base-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$base-size</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$base-size</span> * <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，SASS 內建許多函式，例如 <code>darken()</code>、<code>lighten()</code> 可用來調整顏色：  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">darken</span>(<span class="variable">$primary-color</span>, <span class="number">10%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後的 CSS：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#3498db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#217dbb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、SASS-進階技巧"><a href="#五、SASS-進階技巧" class="headerlink" title="五、SASS 進階技巧"></a>五、SASS 進階技巧</h1><h3 id="1-分割檔案"><a href="#1-分割檔案" class="headerlink" title="1. 分割檔案"></a>1. 分割檔案</h3><p>SASS 允許將樣式拆分成多個檔案，並透過 <code>@import</code> 或 <code>@use</code> 來管理，提升可維護性。  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _variables.scss</span></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"><span class="variable">$font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;variables&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用-use"><a href="#2-使用-use" class="headerlink" title="2. 使用 @use"></a>2. 使用 <code>@use</code></h3><p><code>@use</code> 是 <code>@import</code> 的改進版，能避免變數命名衝突，推薦使用：  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;variables&#x27;</span> as v;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: v.<span class="variable">$primary-color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: v.<span class="variable">$font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="六、結論"><a href="#六、結論" class="headerlink" title="六、結論"></a>六、結論</h1><p>SASS 是一種強大的 CSS 預處理器，它提供變數、巢狀、Mixin、繼承等功能，使樣式管理更加高效與模組化。透過 SASS，開發者可以撰寫更具結構性、可讀性和可維護性的 CSS。  </p>
<p>對於前端開發者來說，掌握 SASS 不僅能提升開發效率，還能讓專案的樣式管理更加清晰。在實際專案中，建議將樣式模組化，並善用變數與 Mixin，以確保程式碼的可重用性與一致性。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SASS</tag>
        <tag>SCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 入門語法教學筆記 | 學習筆記</title>
    <url>/2018/02/01/learning-notes-sql-intro-tutorial/</url>
    <content><![CDATA[<p>SQL 是操作關聯式資料庫使用的語法。以下介紹常用 SQL 入門語法：</p>
<h2 id="一、資料庫基本概念"><a href="#一、資料庫基本概念" class="headerlink" title="一、資料庫基本概念"></a>一、資料庫基本概念</h2><p>資料庫 (Database)：儲存資料的容器。<br>資料表 (Table)：儲存資料的表格，每列 (row) 為一筆紀錄，每欄 (column) 為一種資料屬性。</p>
<hr>
<h2 id="二、基本-SQL-語法"><a href="#二、基本-SQL-語法" class="headerlink" title="二、基本 SQL 語法"></a>二、基本 SQL 語法</h2><h4 id="1-建立資料庫"><a href="#1-建立資料庫" class="headerlink" title="1. 建立資料庫"></a>1. 建立資料庫</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE my_database;</span><br></pre></td></tr></table></figure>

<h4 id="2-使用資料庫"><a href="#2-使用資料庫" class="headerlink" title="2. 使用資料庫"></a>2. 使用資料庫</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE my_database;</span><br></pre></td></tr></table></figure>

<h4 id="3-建立資料表"><a href="#3-建立資料表" class="headerlink" title="3. 建立資料表"></a>3. 建立資料表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="4-查詢資料"><a href="#4-查詢資料" class="headerlink" title="4. 查詢資料"></a>4. 查詢資料</h4><p>查詢所有欄位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>
<p>選擇特定欄位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h4 id="5-插入資料"><a href="#5-插入資料" class="headerlink" title="5. 插入資料"></a>5. 插入資料</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure>

<h4 id="6-更新資料"><a href="#6-更新資料" class="headerlink" title="6. 更新資料"></a>6. 更新資料</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">26</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="7-刪除資料"><a href="#7-刪除資料" class="headerlink" title="7. 刪除資料"></a>7. 刪除資料</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、條件查詢"><a href="#三、條件查詢" class="headerlink" title="三、條件查詢"></a>三、條件查詢</h2><h4 id="1-WHERE-條件"><a href="#1-WHERE-條件" class="headerlink" title="1. WHERE 條件"></a>1. WHERE 條件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-AND、OR、NOT"><a href="#2-AND、OR、NOT" class="headerlink" title="2. AND、OR、NOT"></a>2. AND、OR、NOT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">OR</span> age <span class="operator">&lt;</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> <span class="keyword">NOT</span> age <span class="operator">=</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-LIKE-模糊查詢"><a href="#3-LIKE-模糊查詢" class="headerlink" title="3. LIKE 模糊查詢"></a>3. LIKE 模糊查詢</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;J%&#x27;</span>;  <span class="comment">-- 以J開頭</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%@gmail.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-ORDER-BY-排序"><a href="#4-ORDER-BY-排序" class="headerlink" title="4. ORDER BY 排序"></a>4. ORDER BY 排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;  <span class="comment">-- 遞增排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>; <span class="comment">-- 遞減排序</span></span><br></pre></td></tr></table></figure>

<h4 id="5-LIMIT-限制筆數"><a href="#5-LIMIT-限制筆數" class="headerlink" title="5. LIMIT 限制筆數"></a>5. LIMIT 限制筆數</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、聚合函數"><a href="#四、聚合函數" class="headerlink" title="四、聚合函數"></a>四、聚合函數</h2><h4 id="1-計算筆數"><a href="#1-計算筆數" class="headerlink" title="1. 計算筆數"></a>1. 計算筆數</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="2-最大-x2F-最小值"><a href="#2-最大-x2F-最小值" class="headerlink" title="2. 最大&#x2F;最小值"></a>2. 最大&#x2F;最小值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(age) <span class="keyword">FROM</span> users;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(age) <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<h3 id="3-平均-x2F-總和"><a href="#3-平均-x2F-總和" class="headerlink" title="3. 平均&#x2F;總和"></a>3. 平均&#x2F;總和</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">FROM</span> users;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(age) <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、分組查詢"><a href="#五、分組查詢" class="headerlink" title="五、分組查詢"></a>五、分組查詢</h2><h4 id="1-GROUP-BY"><a href="#1-GROUP-BY" class="headerlink" title="1. GROUP BY"></a>1. GROUP BY</h4><p><code>GROUP BY</code> 查詢欄位僅能包含 <code>GROUP BY</code> 和聚合函數</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users <span class="keyword">GROUP</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure>

<h4 id="2-HAVING-搭配-GROUP-BY-當作查詢條件"><a href="#2-HAVING-搭配-GROUP-BY-當作查詢條件" class="headerlink" title="2. HAVING 搭配 GROUP BY 當作查詢條件"></a>2. HAVING 搭配 GROUP BY 當作查詢條件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users <span class="keyword">GROUP</span> <span class="keyword">BY</span> age <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="六、資料表連接-JOIN"><a href="#六、資料表連接-JOIN" class="headerlink" title="六、資料表連接 (JOIN)"></a>六、資料表連接 (JOIN)</h2><h4 id="1-INNER-JOIN"><a href="#1-INNER-JOIN" class="headerlink" title="1. INNER JOIN"></a>1. INNER JOIN</h4><p>內連接，僅返回兩個資料表中「符合交集條件」的資料。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h4 id="2-LEFT-JOIN"><a href="#2-LEFT-JOIN" class="headerlink" title="2. LEFT JOIN"></a>2. LEFT JOIN</h4><p>左連接，返回左表 (users) 所有資料，即使右表 (orders) 無對應資料，也會顯示左表資料，右表無資料則會顯示 NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h4 id="3-RIGHT-JOIN"><a href="#3-RIGHT-JOIN" class="headerlink" title="3. RIGHT JOIN"></a>3. RIGHT JOIN</h4><p>右連接，返回右表 (orders) 所有資料，即使左表 (users) 無對應資料，也會顯示右表資料，左表無資料則會顯示 NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h4 id="4-FULL-JOIN-部分資料庫支援"><a href="#4-FULL-JOIN-部分資料庫支援" class="headerlink" title="4. FULL JOIN (部分資料庫支援)"></a>4. FULL JOIN (部分資料庫支援)</h4><p>全外連接，返回兩個表中所有資料，無對應資料則顯示 NULL。(MySQL 不支援 FULL JOIN，需使用 UNION 模擬)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.id, users.name, orders.amount </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<h2 id="七、合併查詢-UNION"><a href="#七、合併查詢-UNION" class="headerlink" title="七、合併查詢 (UNION)"></a>七、合併查詢 (UNION)</h2><h4 id="1-UNION"><a href="#1-UNION" class="headerlink" title="1. UNION"></a>1. UNION</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>UNION 用於合併兩個或多個查詢的結果。<br>預設會去除重複資料。<br>欄位數量與型態須一致。</p>
<h4 id="2-UNION-ALL"><a href="#2-UNION-ALL" class="headerlink" title="2. UNION ALL"></a>2. UNION ALL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>與 UNION 類似，但不會去除重複資料。</p>
<hr>
<p>以上整理了 SQL 入門常見的基本語法，可以基本處理資料庫操作需求。</p>
]]></content>
      <tags>
        <tag>SQL</tag>
        <tag>資料庫</tag>
      </tags>
  </entry>
  <entry>
    <title>Tailwind CSS 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/30/learning-notes-tailwind-css-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是-Tailwind-CSS？"><a href="#一、什麼是-Tailwind-CSS？" class="headerlink" title="一、什麼是 Tailwind CSS？"></a>一、什麼是 Tailwind CSS？</h1><p>Tailwind CSS 是一款以「<code>工具類別優先</code>」（<code>Utility-First</code>）為核心設計理念的 CSS 框架，與傳統的 CSS 框架（如 Bootstrap、Bulma）不同，它不提供預設的 UI 元件，而是提供大量的樣式工具類別，讓開發者可以快速組合來建構 UI，而不需要額外撰寫自訂 CSS。  </p>
<p>相較於傳統 CSS 框架，Tailwind CSS 具有以下幾個主要優勢：  </p>
<ol>
<li><strong>開發效率高</strong>：只需使用<code>類別組合</code>即可完成設計，無需撰寫額外 CSS。  </li>
<li><strong>高度可客製化</strong>：可以透過設定檔調整顏色、字型、間距等設計。  </li>
<li><strong>內建響應式支援</strong>：透過 <code>sm: md: lg: xl:</code> 等前綴輕鬆定義不同裝置的樣式。  </li>
<li><strong>一致性強</strong>：開發團隊可以統一使用 Tailwind CSS 定義的設計樣式，減少 UI 風格不一致的問題。  </li>
<li><strong>效能優化</strong>：可透過 PurgeCSS 移除未使用的樣式，確保最小化 CSS 檔案大小，提高網站載入速度。</li>
</ol>
<hr>
<h1 id="二、安裝-Tailwind-CSS"><a href="#二、安裝-Tailwind-CSS" class="headerlink" title="二、安裝 Tailwind CSS"></a>二、安裝 Tailwind CSS</h1><p>Tailwind CSS 可以透過多種方式安裝，以下介紹幾種常見的方法：  </p>
<h3 id="1-使用-CDN（適合快速測試）"><a href="#1-使用-CDN（適合快速測試）" class="headerlink" title="1. 使用 CDN（適合快速測試）"></a>1. 使用 CDN（適合快速測試）</h3><p>如果只是想快速體驗 Tailwind CSS，可以直接在 HTML 檔案中加入以下 <code>&lt;link&gt;</code>：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tailwindcss@3.0.0/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種方式適合小型專案或測試 Tailwind CSS 的功能，但不適合正式開發，因為無法使用客製化設定。  </p>
<h3 id="2-透過-npm-安裝（推薦方式）"><a href="#2-透過-npm-安裝（推薦方式）" class="headerlink" title="2. 透過 npm 安裝（推薦方式）"></a>2. 透過 npm 安裝（推薦方式）</h3><p>在正式開發環境中，建議使用 npm 或 yarn 來安裝 Tailwind CSS，以便進行客製化設定。  </p>
<p><strong>安裝 Tailwind CSS</strong>：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure>

<p>執行上述指令後，會在專案根目錄中產生 <code>tailwind.config.js</code> 設定檔，可用來調整 Tailwind 的預設樣式。  </p>
<p><strong>設定 Tailwind CSS</strong>：  </p>
<p>開啟 <code>tailwind.config.js</code>，找到 <code>content</code> 設定，確保 Tailwind 只處理專案內的相關檔案，例如：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./src/**/*.&#123;html,js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣 Tailwind CSS 就只會掃描 <code>src</code> 資料夾內的 HTML、JavaScript 和 TypeScript 檔案，避免產生不必要的 CSS。  </p>
<p><strong>引入 Tailwind 樣式</strong>：  </p>
<p>在 <code>src/index.css</code> 或 <code>styles.css</code> 檔案中加入以下內容，讓 Tailwind CSS 套用基礎樣式：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<p>最後，在開發環境中執行 Tailwind 編譯指令：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx tailwindcss -i ./src/index.css -o ./dist/output.css --watch</span><br></pre></td></tr></table></figure>

<p>這會自動監聽檔案變化，並輸出 Tailwind CSS 的樣式到 <code>output.css</code>。  </p>
<hr>
<h1 id="三、Tailwind-CSS-常用類別"><a href="#三、Tailwind-CSS-常用類別" class="headerlink" title="三、Tailwind CSS 常用類別"></a>三、Tailwind CSS 常用類別</h1><p>Tailwind CSS 提供大量的工具類別，以下介紹幾個常用的類別和應用範例。  </p>
<h3 id="1-文字樣式"><a href="#1-文字樣式" class="headerlink" title="1. 文字樣式"></a>1. 文字樣式</h3><p>Tailwind 允許透過類別來快速調整字體大小、顏色、行距等樣式，例如：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lg font-bold text-gray-700 leading-relaxed&quot;</span>&gt;</span></span><br><span class="line">  這是一段示範文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中：  </p>
<ul>
<li><code>text-lg</code>：字體大小  </li>
<li><code>font-bold</code>：加粗  </li>
<li><code>text-gray-700</code>：深灰色文字  </li>
<li><code>leading-relaxed</code>：行距較寬</li>
</ul>
<h3 id="2-背景與邊框"><a href="#2-背景與邊框" class="headerlink" title="2. 背景與邊框"></a>2. 背景與邊框</h3><p>可以使用背景色與邊框樣式來設計 UI，示例如下：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-500 text-white p-4 rounded-lg shadow-lg&quot;</span>&gt;</span></span><br><span class="line">  Tailwind CSS 範例</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>bg-blue-500</code>：藍色背景  </li>
<li><code>text-white</code>：白色文字  </li>
<li><code>p-4</code>：內距 16px  </li>
<li><code>rounded-lg</code>：圓角  </li>
<li><code>shadow-lg</code>：大型陰影</li>
</ul>
<h3 id="3-Flexbox-佈局"><a href="#3-Flexbox-佈局" class="headerlink" title="3. Flexbox 佈局"></a>3. Flexbox 佈局</h3><p>Tailwind CSS 提供完整的 Flexbox 工具類別，讓開發者能夠快速進行佈局：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center justify-between p-4 bg-gray-200&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>左側內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>右側內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>flex</code>：啟用 Flexbox  </li>
<li><code>items-center</code>：垂直置中  </li>
<li><code>justify-between</code>：左右對齊</li>
</ul>
<h3 id="4-Grid-佈局"><a href="#4-Grid-佈局" class="headerlink" title="4. Grid 佈局"></a>4. Grid 佈局</h3><p>使用 Grid 來建立多欄式佈局：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid grid-cols-3 gap-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red-200 p-4&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-green-200 p-4&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-200 p-4&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>grid</code>：啟用 Grid  </li>
<li><code>grid-cols-3</code>：建立三欄  </li>
<li><code>gap-4</code>：欄間距</li>
</ul>
<h3 id="5-響應式設計"><a href="#5-響應式設計" class="headerlink" title="5. 響應式設計"></a>5. 響應式設計</h3><p>Tailwind 內建響應式前綴，適用於不同裝置：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-base md:text-lg lg:text-xl xl:text-2xl&quot;</span>&gt;</span></span><br><span class="line">  響應式字體大小</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>text-base</code>：手機（預設）  </li>
<li><code>md:text-lg</code>：平板（<code>min-width: 768px</code>）  </li>
<li><code>lg:text-xl</code>：筆電（<code>min-width: 1024px</code>）  </li>
<li><code>xl:text-2xl</code>：桌機（<code>min-width: 1280px</code>）</li>
</ul>
<hr>
<h1 id="四、Tailwind-CSS-進階功能"><a href="#四、Tailwind-CSS-進階功能" class="headerlink" title="四、Tailwind CSS 進階功能"></a>四、Tailwind CSS 進階功能</h1><h3 id="1-自訂樣式"><a href="#1-自訂樣式" class="headerlink" title="1. 自訂樣式"></a>1. 自訂樣式</h3><p>可以透過 <code>tailwind.config.js</code> 來擴充自訂樣式，例如新增顏色：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;</span><br><span class="line">      <span class="attr">colors</span>: &#123;</span><br><span class="line">        <span class="attr">primary</span>: <span class="string">&quot;#1E40AF&quot;</span>,</span><br><span class="line">        <span class="attr">secondary</span>: <span class="string">&quot;#9333EA&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣就可以在 HTML 中使用 <code>text-primary</code> 或 <code>bg-secondary</code> 來套用顏色。  </p>
<h3 id="2-使用-apply-簡化樣式"><a href="#2-使用-apply-簡化樣式" class="headerlink" title="2. 使用 @apply 簡化樣式"></a>2. 使用 @apply 簡化樣式</h3><p>在 CSS 檔案中使用 <code>@apply</code> 來重複使用 Tailwind 類別：  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> bg-blue-<span class="number">500</span> text-white px-<span class="number">4</span> py-<span class="number">2</span> rounded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後在 HTML 中只需寫：  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、結語"><a href="#五、結語" class="headerlink" title="五、結語"></a>五、結語</h1><p>Tailwind CSS 透過工具類別的方式大幅提升開發效率，並提供響應式設計、靈活佈局與高度客製化的功能。對於前端開發者而言，熟悉 Tailwind CSS 可以讓 UI 設計更加直觀、高效，並減少對自訂 CSS 的依賴，進而提升開發維護性。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>Tailwind CSS</tag>
        <tag>Tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 入門教學筆記 | 學習筆記</title>
    <url>/2024/12/02/learning-notes-typescript-intro-tutorial/</url>
    <content><![CDATA[<h1 id="一、什麼是-TypeScript？"><a href="#一、什麼是-TypeScript？" class="headerlink" title="一、什麼是 TypeScript？"></a>一、什麼是 TypeScript？</h1><p>TypeScript 是由 Microsoft 開發的 JavaScript 超集（Superset），提供靜態型別檢查（Static Type Checking），讓開發者在編譯時發現錯誤，提升程式碼的可靠性與可維護性。TypeScript 會被編譯為標準 JavaScript，並可以運行於任何支援 JavaScript 的環境，例如瀏覽器或 Node.js。  </p>
<h3 id="TypeScript-的主要特點"><a href="#TypeScript-的主要特點" class="headerlink" title="TypeScript 的主要特點"></a>TypeScript 的主要特點</h3><ol>
<li><strong>靜態型別檢查</strong>：在開發階段偵測類型錯誤，減少潛在錯誤。  </li>
<li><strong>強大的 IDE 支援</strong>：提供自動補全、型別推斷等功能，提高開發效率。  </li>
<li><strong>物件導向特性</strong>：支援類別（Class）、介面（Interface）、泛型（Generics）等功能。  </li>
<li><strong>相容 JavaScript</strong>：可以與現有的 JavaScript 程式碼共存，逐步導入 TypeScript。  </li>
<li><strong>模組化開發</strong>：支援 ES6+ 模組系統，便於管理大型應用程式。</li>
</ol>
<hr>
<h1 id="二、安裝與設定-TypeScript"><a href="#二、安裝與設定-TypeScript" class="headerlink" title="二、安裝與設定 TypeScript"></a>二、安裝與設定 TypeScript</h1><h3 id="1-安裝-TypeScript"><a href="#1-安裝-TypeScript" class="headerlink" title="1. 安裝 TypeScript"></a>1. 安裝 TypeScript</h3><p>可以使用 npm 來安裝 TypeScript：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<p>安裝完成後，可以使用以下指令來檢查 TypeScript 版本：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure>

<h3 id="2-初始化-TypeScript-專案"><a href="#2-初始化-TypeScript-專案" class="headerlink" title="2. 初始化 TypeScript 專案"></a>2. 初始化 TypeScript 專案</h3><p>在專案目錄中執行以下指令，產生 <code>tsconfig.json</code> 設定檔：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>這個設定檔可以調整 TypeScript 的編譯選項，例如輸出目錄、是否允許隱式 <code>any</code> 類型等。  </p>
<hr>
<h1 id="三、基本語法"><a href="#三、基本語法" class="headerlink" title="三、基本語法"></a>三、基本語法</h1><h2 id="1-變數與型別"><a href="#1-變數與型別" class="headerlink" title="1. 變數與型別"></a>1. 變數與型別</h2><p>TypeScript 透過 <code>:</code> 來指定變數的型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">isStudent</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>也可以使用 <code>any</code> 來允許變數接受任何型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">value = <span class="number">123</span>;  <span class="comment">// 不會報錯</span></span><br></pre></td></tr></table></figure>

<h3 id="2-陣列與元組"><a href="#2-陣列與元組" class="headerlink" title="2. 陣列與元組"></a>2. 陣列與元組</h3><p>可以使用 <code>type[]</code> 來定義陣列型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>元組（Tuple）允許指定固定數量與型別的元素：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>];</span><br></pre></td></tr></table></figure>

<h3 id="3-物件與介面"><a href="#3-物件與介面" class="headerlink" title="3. 物件與介面"></a>3. 物件與介面</h3><p>可以使用 <code>interface</code> 來定義物件的結構：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  isStudent?: <span class="built_in">boolean</span>;  <span class="comment">// 可選屬性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-函式與型別"><a href="#4-函式與型別" class="headerlink" title="4. 函式與型別"></a>4. 函式與型別</h3><p>函式的參數與回傳值可以明確指定型別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若函式沒有回傳值，可以使用 <code>void</code>：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用箭頭函式語法：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> a * b;</span><br></pre></td></tr></table></figure>

<h3 id="5-型別別名（Type-Alias）"><a href="#5-型別別名（Type-Alias）" class="headerlink" title="5. 型別別名（Type Alias）"></a>5. 型別別名（Type Alias）</h3><p><code>type</code> 關鍵字可以為型別取別名：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">userId</span>: <span class="variable constant_">ID</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、進階語法"><a href="#四、進階語法" class="headerlink" title="四、進階語法"></a>四、進階語法</h1><h3 id="1-Enum（列舉型別）"><a href="#1-Enum（列舉型別）" class="headerlink" title="1. Enum（列舉型別）"></a>1. Enum（列舉型別）</h3><p><code>enum</code> 允許定義一組具有特定名稱的數值：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">move</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-泛型（Generics）"><a href="#2-泛型（Generics）" class="headerlink" title="2. 泛型（Generics）"></a>2. 泛型（Generics）</h3><p>泛型允許函式或類別支援不同的型別，提高可重用性：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>));</span><br></pre></td></tr></table></figure>

<p>泛型也可用於類別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">content</span>: T;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;TypeScript&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-類別與繼承"><a href="#3-類別與繼承" class="headerlink" title="3. 類別與繼承"></a>3. 類別與繼承</h3><p>TypeScript 提供完整的類別支援，與 JavaScript ES6 類似：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">alice.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<p>繼承類別：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="attr">studentId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, studentId: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">studentId</span> = studentId;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bob = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">123</span>);</span><br><span class="line">bob.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<h3 id="4-非空斷言（Non-null-Assertion）"><a href="#4-非空斷言（Non-null-Assertion）" class="headerlink" title="4. 非空斷言（Non-null Assertion）"></a>4. 非空斷言（Non-null Assertion）</h3><p>可以使用 <code>!</code> 來告訴 TypeScript 變數一定不會是 <code>null</code> 或 <code>undefined</code>：  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value!.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、TypeScript-與-JavaScript-的比較"><a href="#五、TypeScript-與-JavaScript-的比較" class="headerlink" title="五、TypeScript 與 JavaScript 的比較"></a>五、TypeScript 與 JavaScript 的比較</h1><table>
<thead>
<tr>
<th>特性</th>
<th>JavaScript</th>
<th>TypeScript</th>
</tr>
</thead>
<tbody><tr>
<td>型別檢查</td>
<td>無</td>
<td>靜態型別檢查</td>
</tr>
<tr>
<td>介面</td>
<td>無</td>
<td>有介面與型別定義</td>
</tr>
<tr>
<td>類別與繼承</td>
<td>ES6+ 支援</td>
<td>支援完整 OOP</td>
</tr>
<tr>
<td>泛型</td>
<td>無</td>
<td>支援泛型開發</td>
</tr>
<tr>
<td>Enum 列舉</td>
<td>無</td>
<td>有內建 Enum</td>
</tr>
<tr>
<td>編譯時錯誤</td>
<td>無</td>
<td>可提前檢查錯誤</td>
</tr>
</tbody></table>
<hr>
<h1 id="六、TypeScript-專案開發"><a href="#六、TypeScript-專案開發" class="headerlink" title="六、TypeScript 專案開發"></a>六、TypeScript 專案開發</h1><p>TypeScript 可與現代開發工具整合，如 Webpack、Babel 等。例如，在 React 或 Vue 開發中，可以使用 TypeScript 提供的型別檢查來提升程式碼質量。  </p>
<p>在專案中安裝 TypeScript 相依套件：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install typescript @types/node --save-dev</span><br></pre></td></tr></table></figure>

<p>若要搭配 React，則需安裝 <code>@types/react</code> 和 <code>@types/react-dom</code>：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @types/react @types/react-dom --save-dev</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="七、結論"><a href="#七、結論" class="headerlink" title="七、結論"></a>七、結論</h1><p>TypeScript 提供靜態型別檢查、模組化開發、泛型與完整的物件導向特性，使 JavaScript 程式碼更安全、可維護且容易擴展。透過與現有 JavaScript 相容的特性，可以逐步導入 TypeScript，提升專案的開發體驗與效能。在現代前端與後端開發中，TypeScript 已成為主流選擇之一。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>CSS</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue i18n 入門教學筆記 | 學習筆記</title>
    <url>/2024/11/13/learning-notes-vue-i18n-intro-tutorial/</url>
    <content><![CDATA[<h2 id="1-Vue-I18n-簡介"><a href="#1-Vue-I18n-簡介" class="headerlink" title="1. Vue I18n 簡介"></a>1. Vue I18n 簡介</h2><p>Vue i18n 是 Vue.js 的國際化（Internationalization）解決方案，可用於管理應用程式的多語系內容。當開發需要支援不同語言的應用時，Vue i18n 提供了一個高效的方式來處理翻譯、數字格式、日期格式等。</p>
<h3 id="1-1-為何使用-Vue-I18n？"><a href="#1-1-為何使用-Vue-I18n？" class="headerlink" title="1.1 為何使用 Vue I18n？"></a>1.1 為何使用 Vue I18n？</h3><ul>
<li><strong>動態切換語言</strong>：讓使用者能夠即時更改語言。</li>
<li><strong>簡化多語系管理</strong>：集中化翻譯內容，方便維護。</li>
<li><strong>格式化支援</strong>：內建日期、時間、數字等格式化功能。</li>
</ul>
<h2 id="2-安裝-Vue-I18n"><a href="#2-安裝-Vue-I18n" class="headerlink" title="2. 安裝 Vue I18n"></a>2. 安裝 Vue I18n</h2><p>Vue I18n 可透過 npm 安裝，適用於 Vue 3 應用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure>

<h2 id="3-設定-Vue-I18n"><a href="#3-設定-Vue-I18n" class="headerlink" title="3. 設定 Vue I18n"></a>3. 設定 Vue I18n</h2><p>在 Vue 3 中，可以使用 <code>createI18n</code> 來設定 Vue I18n：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Vue I18n!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    <span class="attr">welcome</span>: <span class="string">&#x27;歡迎使用 Vue I18n！&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// 預設語言</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>, <span class="comment">// 備用語言</span></span><br><span class="line">  messages</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(i18n);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-在組件中使用-Vue-I18n"><a href="#4-在組件中使用-Vue-I18n" class="headerlink" title="4. 在組件中使用 Vue I18n"></a>4. 在組件中使用 Vue I18n</h2><h3 id="4-1-使用-t-方法"><a href="#4-1-使用-t-方法" class="headerlink" title="4.1 使用 $t 方法"></a>4.1 使用 <code>$t</code> 方法</h3><p>在 Vue 組件中，可以透過 <code>$t</code> 方法來取得翻譯內容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-切換語言"><a href="#4-2-切換語言" class="headerlink" title="4.2 切換語言"></a>4.2 切換語言</h3><p>可以透過 <code>this.$i18n.locale</code> 來更改語言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;changeLanguage(&#x27;en&#x27;)&quot;&gt;English&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeLanguage(&#x27;zh&#x27;)&quot;&gt;中文&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeLanguage(lang) &#123;</span><br><span class="line">      this.$i18n.locale = lang;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-使用外部-JSON-檔案管理翻譯內容"><a href="#5-使用外部-JSON-檔案管理翻譯內容" class="headerlink" title="5. 使用外部 JSON 檔案管理翻譯內容"></a>5. 使用外部 JSON 檔案管理翻譯內容</h2><p>當專案的翻譯內容較多時，建議將翻譯字串拆分成獨立的 JSON 檔案。</p>
<p><strong>建立語言檔案：</strong></p>
<p><code>locales/en.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Welcome to Vue I18n!&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>locales/zh.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歡迎使用 Vue I18n！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改 <code>i18n</code> 設定：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&#x27;./locales/en.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&#x27;./locales/zh.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123; en, zh &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="6-插值與變數"><a href="#6-插值與變數" class="headerlink" title="6. 插值與變數"></a>6. 插值與變數</h2><p>Vue I18n 支援在翻譯字串中插入變數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">greeting</span>: <span class="string">&#x27;Hello, &#123;name&#125;!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    <span class="attr">greeting</span>: <span class="string">&#x27;你好, &#123;name&#125;!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在組件中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; $t(&#x27;greeting&#x27;, &#123; name: &#x27;John&#x27; &#125;) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-訊息格式化與日期、數字處理"><a href="#7-訊息格式化與日期、數字處理" class="headerlink" title="7. 訊息格式化與日期、數字處理"></a>7. 訊息格式化與日期、數字處理</h2><p>Vue I18n 內建 <code>numberFormats</code> 和 <code>datetimeFormats</code>，可用於格式化數字與日期。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">  messages,</span><br><span class="line">  <span class="attr">numberFormats</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">currency</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;USD&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">zh</span>: &#123;</span><br><span class="line">      <span class="attr">currency</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;TWD&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在組件中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; $n(1000, &#x27;currency&#x27;) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-延遲載入翻譯（Lazy-Loading）"><a href="#8-延遲載入翻譯（Lazy-Loading）" class="headerlink" title="8. 延遲載入翻譯（Lazy Loading）"></a>8. 延遲載入翻譯（Lazy Loading）</h2><p>當應用程式的語言檔案過多時，建議使用動態載入（Lazy Loading）來優化效能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadLocaleMessages</span>(<span class="params">locale</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> messages = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`./locales/<span class="subst">$&#123;locale&#125;</span>.json`</span>);</span><br><span class="line">  i18n.<span class="property">global</span>.<span class="title function_">setLocaleMessage</span>(locale, messages.<span class="property">default</span>);</span><br><span class="line">  i18n.<span class="property">global</span>.<span class="property">locale</span> = locale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-結論"><a href="#9-結論" class="headerlink" title="9. 結論"></a>9. 結論</h2><p>Vue I18n 是 Vue.js 中強大的國際化解決方案，透過 <code>$t</code> 方法、插值變數、外部 JSON 檔案管理，以及數字與日期格式化功能，可以讓開發者輕鬆實作多語系應用。本篇筆記介紹了 Vue I18n 的基本使用方式，進一步學習可研究動態載入、多語系 SEO 以及與 Vue Router 的結合。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>i18n</tag>
        <tag>Vue i18n</tag>
        <tag>多語系</tag>
        <tag>多國語系</tag>
        <tag>在地化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [1] - Declarative Rendering 聲明式渲染 | 學習筆記</title>
    <url>/2021/01/31/learning-notes-vuejs-3-official-tutorial-1-declarative-rendering/</url>
    <content><![CDATA[<h1 id="Declarative-Rendering-聲明式渲染"><a href="#Declarative-Rendering-聲明式渲染" class="headerlink" title="Declarative Rendering 聲明式渲染"></a>Declarative Rendering 聲明式渲染</h1><p>在 Vue3 我們常看到的是 Vue 單文件元件 (SFC)。SFC 是一個可重用的、獨立的程式碼區塊，它將相關的 HTML、CSS 和 JavaScript 封裝在一起，並寫在一個 <code>.vue</code> 文件中。</p>
<p>Vue 的核心特性是聲明式渲染：使用擴展 HTML 的模板語法，我們可以根據 JavaScript 的狀態描述 HTML 應該如何呈現。當狀態發生變化時，HTML 會自動更新。</p>
<p>可以在狀態變化時觸發更新的狀態被認為是響應式的。我們可以使用 Vue 的 <code>reactive()</code> API 來聲明響應式狀態。通過 <code>reactive()</code> 創建的對象是 JavaScript 的 Proxy，它們的行為與普通物件相同：</p>
<p>SFC 版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="property">count</span>) <span class="comment">// 0</span></span><br><span class="line">counter.<span class="property">count</span>++</span><br></pre></td></tr></table></figure>

<p>html 版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// component logic</span></span><br><span class="line">    <span class="comment">// declare some reactive state here.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// exposed to template</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Make me dynamic!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>reactive()</code> 只能作用於物件（包括陣列和內建類型如 Map 和 Set）。另一方面，<code>ref()</code> 可以接受任何類型的值並創建一物件，其內部值通過 <code>.value</code> 屬性暴露出來：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">value</span>) <span class="comment">// &quot;Hello World!&quot;</span></span><br><span class="line">message.<span class="property">value</span> = <span class="string">&#x27;Changed&#x27;</span></span><br></pre></td></tr></table></figure>

<p>有關 <code>reactive()</code> 和 <code>ref()</code> 的更多細節，可以參考官方教學<a href="https://vuejs.org/guide/essentials/reactivity-fundamentals.html">指南 - 響應式基礎</a>。</p>
<p>在組件的 <code>&lt;script setup&gt;</code> 區塊中聲明的響應式狀態可以直接在模板中使用。我們可以基於 <code>counter</code> 對象和 <code>message</code> 的值，使用 Mustache 語法渲染動態文字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count is: &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，當在模板中訪問 <code>message</code> 的 <code>ref</code> 值時，我們不需要使用 <code>.value</code>：它會自動取值，以提供更簡潔的用法。</p>
<p>Mustache <code>&#123;&#123; &#125;&#125;</code> 中的內容不限於標識符或路徑 —— 我們可以使用任何有效的 JavaScript 表達式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>現在，試著自己創建一些響應式狀態，並使用它來為模板中的 <code>&lt;h1&gt;</code> 渲染動態文本內容吧！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> counter = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count is: &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Vue.js 3 提供了更好的性能、更靈活的 API 和更簡潔的開發體驗。無論是使用 Composition API 還是 Options API，都能快速上手並構建強大的前端應用。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [10] - Components 元件 | 學習筆記</title>
    <url>/2021/02/09/learning-notes-vuejs-3-official-tutorial-10-components/</url>
    <content><![CDATA[<h1 id="Components-元件"><a href="#Components-元件" class="headerlink" title="Components 元件"></a>Components 元件</h1><p>到目前為止，我們只使用了一個單一的元件。實際的 Vue 應用程式通常是由巢狀元件所組成的。</p>
<p>父元件可以在其模板中渲染另一個元件作為子元件。要使用子元件，我們需要先匯入它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然後，我們可以在模板中使用該元件，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>我們現在試試看將匯入子元件並將其渲染到模板中。</p>
<figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>ChildComp.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A Child Component!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [11] - Props 屬性 | 學習筆記</title>
    <url>/2021/02/10/learning-notes-vuejs-3-official-tutorial-11-props/</url>
    <content><![CDATA[<h1 id="Props-屬性"><a href="#Props-屬性" class="headerlink" title="Props 屬性"></a>Props 屬性</h1><p>子元件可以透過 Props 接收來自父元件的輸入。首先，子元件需要宣告它所接收的 Props：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComp.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  msg: String</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意，<code>defineProps()</code> 是一個編譯時的巨集，不需要額外匯入。一旦宣告後，<code>msg</code> Prop 就可以在子元件的模板中使用，也可以透過 <code>defineProps()</code> 返回的物件在 JavaScript 中存取。</p>
<p>父元件可以像設定屬性一樣，將 Prop 傳遞給子元件。若要傳遞動態值，也可以使用 <code>v-bind</code> 語法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp :msg=&quot;greeting&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>我們現在在編輯器中試試看吧！</p>
<figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> greeting = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> <span class="attr">:msg</span>=<span class="string">&quot;greeting&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>ChildComp.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg || &#x27;No props passed yet&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [12] - Emits 事件傳遞 | 學習筆記</title>
    <url>/2021/02/11/learning-notes-vuejs-3-official-tutorial-12-emits/</url>
    <content><![CDATA[<h1 id="Emits-事件傳遞"><a href="#Emits-事件傳遞" class="headerlink" title="Emits 事件傳遞"></a>Emits 事件傳遞</h1><p>除了接收 Props 之外，子元件也可以向父元件觸發事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 宣告要觸發的事件</span><br><span class="line">const emit = defineEmits([&#x27;response&#x27;])</span><br><span class="line"></span><br><span class="line">// 觸發事件並傳遞參數</span><br><span class="line">emit(&#x27;response&#x27;, &#x27;hello from child&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>emit()</code> 的第一個參數是事件名稱，任何額外的參數都會傳遞給事件監聽器。</p>
<p>父元件可以使用 <code>v-on</code> 來監聽子元件觸發的事件——如下範例中，處理函式接收來自子元件 <code>emit</code> 的額外參數，並將其賦值給本地狀態：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp @response=&quot;(msg) =&gt; childMsg = msg&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>現在我們在編輯器中試試看吧！</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [13] - Slots 插槽 | 學習筆記</title>
    <url>/2021/02/13/learning-notes-vuejs-3-official-tutorial-13-slots/</url>
    <content><![CDATA[<h1 id="Slots-插槽"><a href="#Slots-插槽" class="headerlink" title="Slots 插槽"></a>Slots 插槽</h1><p>除了透過 Props 傳遞資料外，父元件還可以透過插槽將模板片段傳遞給子元件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp&gt;</span><br><span class="line">    這是一些插槽內容！</span><br><span class="line">  &lt;/ChildComp&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>在子元件中，可以使用 <code>&lt;slot&gt;</code> 元素作為插槽來渲染父元件傳遞的內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 子元件的模板 --&gt;</span><br><span class="line">  &lt;slot /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>插槽內的內容會被視為「預設內容」：當父元件沒有傳遞插槽內容時，會顯示這些預設內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;slot&gt;預設內容&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>目前我們尚未向 <code>&lt;ChildComp&gt;</code> 傳遞任何插槽內容，因此你應該會看到預設內容。現在試著利用父元件的 <code>msg</code> 狀態，為子元件提供一些插槽內容吧！</p>
<figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">ChildComp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>ChildComp.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">ChildComp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [2] - Attribute Bindings 屬性綁定 | 學習筆記</title>
    <url>/2021/02/01/learning-notes-vuejs-3-official-tutorial-2-declarative-rendering/</url>
    <content><![CDATA[<p><strong>Attribute Bindings 屬性綁定</strong><br>在 Vue 中，Mustache 語法只能用於文字插值。要將屬性綁定到動態值，我們需要使用 <code>v-bind</code> 指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指令是一種特殊的屬性，以 <code>v-</code> 前綴開頭，屬於 Vue 的模板語法的一部分。與文字插值類似，指令的值是 JavaScript 表達式，可以訪問組件的狀態。有關 <code>v-bind</code> 和指令語法的完整細節，請參閱官方說明<a href="https://vuejs.org/guide/essentials/template-syntax.html">指南 - 模板語法</a>。</p>
<p>冒號之後的部分（<code>:id</code>）是指令的「參數」。在這裡，元素的 <code>id</code> 屬性將與組件狀態中的 <code>dynamicId</code> 屬性同步。</p>
<p>由於 <code>v-bind</code> 的使用頻率很高，Vue 提供了專用的簡寫語法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>我們可以試著將動態類名綁定到 <code>&lt;h1&gt;</code>，使用 <code>titleClass</code> 的 <code>ref</code> 作為值。如果綁定正確，文字應該會變成紅色！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> titleClass = <span class="title function_">ref</span>(<span class="string">&#x27;title&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;titleClass&quot;</span>&gt;</span>Make me red<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- add dynamic class binding here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [3] - Event Listeners 事件監聽器 | 學習筆記</title>
    <url>/2021/02/02/learning-notes-vuejs-3-official-tutorial-3-event-listeners/</url>
    <content><![CDATA[<p><strong>Event Listeners 事件監聽器</strong><br>在 Vue 中，我們可以使用 <code>v-on</code> 指令監聽 DOM 事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由於 <code>v-on</code> 的使用頻率很高，Vue 提供了一個簡寫語法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這裡，<code>increment</code> 是在 <code>&lt;script setup&gt;</code> 中定義的一個函式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定義響應式狀態</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 定義函式來更新狀態</span><br><span class="line">function increment() &#123;</span><br><span class="line">  // 更新組件的狀態</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在函式內，我們可以透過修改 <code>ref</code> 的值來更新組件的狀態。</p>
<hr>
<p>事件處理器也可以使用內聯表達式，並透過<strong>修飾符</strong>簡化常見任務。這些細節在<a href="https://vuejs.org/guide/essentials/event-handling.html">指南 - 事件處理</a>中有詳細說明。</p>
<hr>
<p>現在，我們可以試著自己實作 <code>increment</code> 函式，並使用 <code>v-on</code> 將它綁定到按鈕。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [4] - Form Bindings 表單綁定 | 學習筆記</title>
    <url>/2021/02/03/learning-notes-vuejs-3-official-tutorial-4-form-bindings/</url>
    <content><![CDATA[<p><strong>Form Bindings 表單綁定</strong><br>使用 <code>v-bind</code> 和 <code>v-on</code> 結合，我們可以對表單輸入元素創建雙向綁定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// v-on 處理器接收原生 DOM 事件作為參數</span></span></span><br><span class="line"><span class="language-javascript">  text.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當您在輸入框中輸入時，您應該會看到 <code>&lt;p&gt;</code> 中的文字隨之更新。</p>
<hr>
<p>為了簡化雙向綁定，Vue 提供了 <code>v-model</code> 指令，它本質上是上述代碼的語法糖：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-model</code> 會自動同步 <code>&lt;input&gt;</code> 的值與綁定的狀態，因此我們不再需要為此使用事件處理器。</p>
<hr>
<p><code>v-model</code> 不僅適用於文本輸入，還適用於其他輸入類型，如復選框 (checkbox)、單選按鈕 (radio button) 和下拉選單 (select dropdown)。有關更多細節，請參閱官方<a href="https://vuejs.org/guide/essentials/forms.html">指南 - 表單綁定</a>。</p>
<hr>
<p>現在，我們試著將代碼重構為使用 <code>v-model</code>。</p>
<p>SFC&#x2F;Composition 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SFC&#x2F;Options 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">text</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML&#x2F;Options 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">text</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML&#x2F;Composition 版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      text.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      text,</span></span><br><span class="line"><span class="language-javascript">      onInput</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type here&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [5] - Conditional Rendering 表單綁定 | 學習筆記</title>
    <url>/2021/02/04/learning-notes-vuejs-3-official-tutorial-5-conditional-rendering/</url>
    <content><![CDATA[<p><strong>Conditional Rendering 條件渲染</strong><br>在 Vue 中，我們可以使用 <code>v-if</code> 指令來條件式渲染元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這個 <code>&lt;h1&gt;</code> 只有在 <code>awesome</code> 的值為真值時才會被渲染。如果 <code>awesome</code> 的值變為假值，它將從 DOM 中被移除。</p>
<hr>
<p>我們還可以使用 <code>v-else</code> 和 <code>v-else-if</code> 表示條件的其他分支：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>目前的範例同時顯示了兩個 <code>&lt;h1&gt;</code>，按鈕也沒有作用。請嘗試為 <code>&lt;h1&gt;</code> 添加 <code>v-if</code> 和 <code>v-else</code> 指令，並實作一個 <code>toggle()</code> 方法，使我們可以透過按鈕來切換顯示的內容。</p>
<hr>
<p>示例程式碼範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line">  &lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;toggle&quot;&gt;Toggle&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const awesome = ref(true)</span><br><span class="line"></span><br><span class="line">function toggle() &#123;</span><br><span class="line">  awesome.value = !awesome.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>更多關於 <code>v-if</code> 的詳細內容請參閱官方<a href="https://vuejs.org/guide/essentials/conditional.html">指南 - 條件渲染</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> awesome = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  awesome.<span class="property">value</span> = !awesome.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [6] - List Rendering 表單綁定 | 學習筆記</title>
    <url>/2021/02/05/learning-notes-vuejs-3-official-tutorial-6-list-rendering/</url>
    <content><![CDATA[<p><strong>List Rendering 列表渲染</strong><br>我們可以使用 <code>v-for</code> 指令根據一個來源陣列來渲染元素列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在這裡，<code>todo</code> 是一個局部變數，代表目前被迭代的陣列元素。它的作用域僅限於 <code>v-for</code> 元素內部，類似於函式的作用域。</p>
<hr>
<p>請注意，我們為每個 <code>todo</code> 對象指定了一個唯一的 <code>id</code>，並將其綁定為每個 <code>&lt;li&gt;</code> 的特殊 <code>key</code> 屬性。<code>key</code> 允許 Vue 精準地移動每個 <code>&lt;li&gt;</code>，以匹配陣列中對應對象的位置。</p>
<hr>
<p>有兩種方式可以更新列表：</p>
<ol>
<li><p>對來源陣列調用可變方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">todos.<span class="property">value</span>.<span class="title function_">push</span>(newTodo)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用新的陣列替換：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="comment">/* ... */</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<p>以下是一個簡單的待辦事項列表範例，您可以試著實現 <code>addTodo()</code> 和 <code>removeTodo()</code> 方法，使其正常運作！</p>
<h3 id="範例程式碼："><a href="#範例程式碼：" class="headerlink" title="範例程式碼："></a>範例程式碼：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo.id)&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodoText&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Add a new todo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定義待辦事項列表和新增的文字</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue.js&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Build a project&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodoText = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 新增待辦事項</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (newTodoText.<span class="property">value</span>.<span class="title function_">trim</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">    todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="comment">// 使用當前時間作為唯一 ID</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: newTodoText.<span class="property">value</span>.<span class="title function_">trim</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    newTodoText.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 清空輸入框</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 移除待辦事項</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>更多關於 <code>v-for</code> 的詳細內容，請參閱官方<a href="https://vuejs.org/guide/essentials/list.html">指南 - 列表渲染</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// give each todo a unique id</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> id = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodo = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn HTML&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: newTodo.<span class="property">value</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">  newTodo.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">todo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t !== todo)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodo&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;new todo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [7] - Computed Property 計算屬性 | 學習筆記</title>
    <url>/2021/02/06/learning-notes-vuejs-3-official-tutorial-7-computed-property/</url>
    <content><![CDATA[<h1 id="Computed-Property-計算屬性"><a href="#Computed-Property-計算屬性" class="headerlink" title="Computed Property 計算屬性"></a>Computed Property 計算屬性</h1><p>讓我們在前一個待辦清單的範例基礎上繼續改進。這裡，我們已經為每個待辦項目新增了切換功能 (toggle)，這是透過在每個待辦物件中新增一個 <code>done</code> 屬性，並使用 <code>v-model</code> 綁定到核取方塊來實現的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.done&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下來我們可以進一步改進功能，新增一個按鈕來隱藏已完成的待辦項目。我們已經有一個按鈕可以切換 <code>hideCompleted</code> 狀態。但要如何根據這個狀態來動態渲染不同的待辦清單項目呢？</p>
<p>這裡引入了 <code>computed()</code>。我們可以建立一個計算屬性，基於其他的響應式數據來源來計算它的 <code>.value</code> 值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hideCompleted = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filteredTodos = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 根據 `todos.value` 和 `hideCompleted.value`</span></span><br><span class="line">  <span class="comment">// 返回篩選後的待辦項目</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我們將 <code>v-for</code> 的數據來源從原本的 <code>todos</code> 改為 <code>filteredTodos</code>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;li v-for=&quot;todo in todos&quot;&gt;</span></span><br><span class="line"><span class="addition">+ &lt;li v-for=&quot;todo in filteredTodos&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<p>計算屬性會自動追蹤其計算邏輯中使用的其他響應式數據作為依賴項目。它會快取計算結果，並在其依賴項目改變時自動更新。</p>
<p>現在，嘗試新增一個 <code>filteredTodos</code> 計算屬性，並實現其計算邏輯！如果實現正確，當隱藏已完成項目時，勾選一個待辦項目應會立即將其隱藏。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> id = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodo = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> hideCompleted = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn HTML&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> filteredTodos = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> hideCompleted.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    ? todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> !t.<span class="property">done</span>)</span></span><br><span class="line"><span class="language-javascript">    : todos.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: newTodo.<span class="property">value</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">  newTodo.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">todo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t !== todo)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodo&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;new todo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.done&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; done: todo.done &#125;&quot;</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;hideCompleted = !hideCompleted&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.done</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [9] - Watchers 觀察者 | 學習筆記</title>
    <url>/2021/02/08/learning-notes-vuejs-3-official-tutorial-9-watchers/</url>
    <content><![CDATA[<h1 id="Watchers-觀察者"><a href="#Watchers-觀察者" class="headerlink" title="Watchers 觀察者"></a>Watchers 觀察者</h1><p>有時我們可能需要以反應性的方式執行「Side-effect 副作用」，例如，當一個數值改變時將其記錄到控制台。我們可以使用觀察者來實現這一點：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 是的，console.log() 是一種副作用</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新的計數是：<span class="subst">$&#123;newCount&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>watch()</code> 可以直接監視一個 <code>ref</code>，每當 <code>count</code> 的值改變時，回調函數就會被觸發。<code>watch()</code> 也可以監視其他類型的數據來源——更多細節請參閱指南：觀察者（Watchers）。</p>
<p>比將訊息記錄到控制台更實用的例子，可能是當一個 ID 發生變化時，根據新 ID 獲取數據。我們的代碼目前是在元件掛載時，從一個模擬 API 獲取 <code>todos</code> 數據。此外，還有一個按鈕可以遞增應該被獲取的 <code>todo</code> ID。請嘗試實現一個觀察者，在按下按鈕時根據新 ID 獲取新的 <code>todo</code> 數據。</p>
<p>參考範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todoId = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todoData = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todoData.<span class="property">value</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;todoId.value&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  todoData.<span class="property">value</span> = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fetchData</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(todoId, fetchData)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Todo id: &#123;&#123; todoId &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;todoId++&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!todoData&quot;</span>&gt;</span>Fetch next todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;!todoData&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; todoData &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js 3 官方入門語法教學筆記 [8] - Lifecycle and Template Refs 生命週期與模板引用 | 學習筆記</title>
    <url>/2021/02/07/learning-notes-vuejs-3-official-tutorial-8-lifecycle-and-template-refs/</url>
    <content><![CDATA[<h2 id="Lifecycle-and-Template-Refs-生命週期與模板引用"><a href="#Lifecycle-and-Template-Refs-生命週期與模板引用" class="headerlink" title="Lifecycle and Template Refs 生命週期與模板引用"></a>Lifecycle and Template Refs 生命週期與模板引用</h2><p>到目前為止，Vue.js 透過響應式資料與聲明式渲染，幫助我們處理了所有的 DOM 更新。然而，無可避免地會有需要手動操作 DOM 的情況。</p>
<p>我們可以使用特殊的 <code>ref</code> 屬性來請求模板引用 (template ref)，也就是模板中某個元素的引用：</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;pElementRef&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定義引用"><a href="#定義引用" class="headerlink" title="定義引用"></a>定義引用</h3><p>為了訪問這個引用，我們需要宣告一個名稱匹配的 <code>ref</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pElementRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>請注意，這個 <code>ref</code> 在初始化時會是 <code>null</code>，因為當 <code>&lt;script setup&gt;</code> 被執行時，對應的 DOM 元素還不存在。模板引用只有在元件掛載 (mounted) 後才能被訪問。</p>
<h3 id="在掛載後執行程式碼"><a href="#在掛載後執行程式碼" class="headerlink" title="在掛載後執行程式碼"></a>在掛載後執行程式碼</h3><p>我們可以使用 <code>onMounted()</code> 函式在掛載後執行程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 元件已掛載完成</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生命週期鉤子"><a href="#生命週期鉤子" class="headerlink" title="生命週期鉤子"></a>生命週期鉤子</h3><p>這稱為生命週期鉤子 (lifecycle hook)，它允許我們在元件生命週期的特定時間點註冊回呼函式。其他的生命週期鉤子還包括 <code>onUpdated</code> 和 <code>onUnmounted</code> 等。更多細節請參考官方文件 <a href="https://vuejs.org/guide/essentials/lifecycle.html">生命週期圖示</a>。</p>
<h3 id="試試看"><a href="#試試看" class="headerlink" title="試試看"></a>試試看</h3><p>現在，我們可以嘗試添加一個 <code>onMounted</code> 鉤子，透過 <code>pElementRef.value</code> 訪問 <code>&lt;p&gt;</code> 元素，並對其進行一些直接的 DOM 操作（例如更改 <code>textContent</code>）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pElementRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  pElementRef.<span class="property">value</span>.<span class="property">textContent</span> = <span class="string">&#x27;mounted!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;pElementRef&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 Options API 和 Composition API 風格差異教學筆記 | 學習筆記</title>
    <url>/2020/11/16/learning-notes-vuejs-3-whats-diff-between-options-api-composition-api/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根據<a href="https://vuejs.org/guide/introduction.html#api-styles">官方文件的說明</a>，一般來說 Vue 元件可以用兩種不同的 API 風格來撰寫：<strong>Options API</strong> 和 <strong>Composition API</strong>。</p>
<hr>
<h1 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a><strong>Options API</strong></h1><p>使用 Options API 時，我們透過一個包含 <code>data</code>、<code>methods</code> 和 <code>mounted</code> 等選項的物件來定義元件邏輯。選項中定義的屬性會在函式內透過 <code>this</code> 曝露，<code>this</code> 指向的是元件實例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 從 data() 返回的屬性成為響應式狀態，</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 並會透過 `this` 曝露。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Methods 是變更狀態並觸發更新的函式，</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 可作為模板中的事件處理程序綁定。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 生命週期鉤子會在組件的不同階段被調用。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 此函式會在組件掛載時調用。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`初始計數值為 <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>。`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a><strong>Composition API</strong></h1><p>使用 Composition API 時，我們透過導入的 API 函式來定義組件邏輯。在單文件組件 (SFC) 中，Composition API 通常搭配 <code>&lt;script setup&gt;</code> 使用。<code>setup</code> 屬性是一個提示，它讓 Vue 執行編譯時轉換，從而減少樣板代碼。舉例來說，在 <code>&lt;script setup&gt;</code> 中宣告的導入、第一層變數和函式可直接用於模板中。</p>
<p>以下是相同的組件，模板保持不變，但改用 Composition API 和 <code>&lt;script setup&gt;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 響應式狀態</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 改變狀態並觸發更新的函式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 生命週期鉤子</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`初始計數值為 <span class="subst">$&#123;count.value&#125;</span>。`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="該選擇哪種風格？"><a href="#該選擇哪種風格？" class="headerlink" title="該選擇哪種風格？"></a><strong>該選擇哪種風格？</strong></h1><p>這兩種 API 風格都能滿足常見的使用場景。它們是基於相同底層系統的不同介面。實際上，<strong>Options API 是基於 Composition API 實現的</strong>！Vue 的核心概念和知識在兩種風格中是共通的。</p>
<ol>
<li><p><strong>Options API</strong>  </p>
<ul>
<li>圍繞「組件實例」（如範例中的 <code>this</code>）進行設計，對於來自 OOP 語言背景的使用者，這種風格通常更符合以類為基礎的思維模型。</li>
<li>初學者友好，通過選項分組的方式隱藏了響應式細節，簡化程式碼組織。</li>
</ul>
</li>
<li><p><strong>Composition API</strong>  </p>
<ul>
<li>在函式作用域中直接宣告響應式狀態變數，並透過組合多個函式來管理複雜性。</li>
<li>更加靈活，但需要對 Vue 的響應式機制有深入理解才能有效使用。</li>
<li>適合組織和重用邏輯的更強大模式。</li>
</ul>
</li>
</ol>
<h1 id="學習上的建議"><a href="#學習上的建議" class="headerlink" title="學習上的建議"></a><strong>學習上的建議</strong></h1><ul>
<li><strong>新手學習</strong>：選擇對您來說更容易理解的風格。大多數核心概念在兩種風格中是共通的，您之後可以再學習另一種風格。  </li>
<li><strong>生產使用</strong>：  <ul>
<li>如果不使用建構工具，或計畫主要用於低複雜度場景（如漸進式增強），建議使用 <code>Options API</code>。  </li>
<li>如果計畫使用 Vue 構建完整應用，建議使用 <strong>Composition API + 單文件組件</strong>。</li>
</ul>
</li>
</ul>
<p>在學習階段，我們也不需要僅限於某一種風格。可以根據適合的情境使用適合的 API 風格。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>前端開發</tag>
        <tag>前端工程</tag>
        <tag>frontend</tag>
        <tag>frontend engineer</tag>
        <tag>vue</tag>
        <tag>vue3</tag>
        <tag>vue.js</tag>
        <tag>vue.js 3</tag>
        <tag>Options API</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket 入門教學筆記 | 學習筆記</title>
    <url>/2024/07/10/learning-notes-websocket-intro-tutorial/</url>
    <content><![CDATA[<h1 id="1-WebSocket-簡介"><a href="#1-WebSocket-簡介" class="headerlink" title="1. WebSocket 簡介"></a>1. WebSocket 簡介</h1><p><code>WebSocket</code> 是一種全雙工通訊協議，允許伺服器與客戶端建立持久連線，並在兩者之間即時傳輸數據。相較於傳統的 HTTP 請求-回應模式，WebSocket 提供了更低延遲的通訊方式。</p>
<h3 id="1-1-為何選擇-WebSocket？"><a href="#1-1-為何選擇-WebSocket？" class="headerlink" title="1.1 為何選擇 WebSocket？"></a>1.1 為何選擇 WebSocket？</h3><ul>
<li><strong>即時雙向通訊</strong>：適用於聊天應用、即時通知、線上遊戲等。</li>
<li><strong>減少 HTTP 開銷</strong>：不需要頻繁發送 HTTP 請求。</li>
<li><strong>降低延遲</strong>：資料可以即時傳遞，避免輪詢 (polling) 的延遲問題。</li>
</ul>
<h1 id="2-建立-WebSocket-伺服器"><a href="#2-建立-WebSocket-伺服器" class="headerlink" title="2. 建立 WebSocket 伺服器"></a>2. 建立 WebSocket 伺服器</h1><h3 id="2-1-安裝-WebSocket-套件"><a href="#2-1-安裝-WebSocket-套件" class="headerlink" title="2.1 安裝 WebSocket 套件"></a>2.1 安裝 WebSocket 套件</h3><p>使用 Node.js 建立 WebSocket 伺服器，首先安裝 <code>ws</code> 套件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install ws</span><br></pre></td></tr></table></figure>

<h3 id="2-2-建立基本-WebSocket-伺服器"><a href="#2-2-建立基本-WebSocket-伺服器" class="headerlink" title="2.2 建立基本 WebSocket 伺服器"></a>2.2 建立基本 WebSocket 伺服器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Client connected&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">`Echo: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Client disconnected&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket server is running on ws://localhost:8080&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="3-建立-WebSocket-客戶端"><a href="#3-建立-WebSocket-客戶端" class="headerlink" title="3. 建立 WebSocket 客戶端"></a>3. 建立 WebSocket 客戶端</h1><p>可以使用 JavaScript 在前端建立 WebSocket 連線：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to server&#x27;</span>);</span><br><span class="line">  socket.<span class="title function_">send</span>(<span class="string">&#x27;Hello, Server!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received from server: <span class="subst">$&#123;event.data&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Disconnected from server&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="4-處理多個客戶端"><a href="#4-處理多個客戶端" class="headerlink" title="4. 處理多個客戶端"></a>4. 處理多個客戶端</h1><h3 id="4-1-廣播訊息給所有連線中的客戶端"><a href="#4-1-廣播訊息給所有連線中的客戶端" class="headerlink" title="4.1 廣播訊息給所有連線中的客戶端"></a>4.1 廣播訊息給所有連線中的客戶端</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    server.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="5-WebSocket-與-Express-整合"><a href="#5-WebSocket-與-Express-整合" class="headerlink" title="5. WebSocket 與 Express 整合"></a>5. WebSocket 與 Express 整合</h1><p>可以將 WebSocket 整合到 Express 伺服器中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; server &#125;);</span><br><span class="line"></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">`Echo: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;WebSocket Server is running&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="6-WebSocket-安全性考量"><a href="#6-WebSocket-安全性考量" class="headerlink" title="6. WebSocket 安全性考量"></a>6. WebSocket 安全性考量</h1><ul>
<li>**使用 WSS (WebSocket Secure)**：確保連線透過 <code>wss://</code> 加密傳輸。</li>
<li><strong>驗證客戶端</strong>：可以使用 JWT 或 API Key 驗證使用者身份。</li>
<li><strong>防止惡意攻擊</strong>：設定最大連線數、限制訊息大小，防止 DDoS 攻擊。</li>
</ul>
<h1 id="7-部署-WebSocket-應用"><a href="#7-部署-WebSocket-應用" class="headerlink" title="7. 部署 WebSocket 應用"></a>7. 部署 WebSocket 應用</h1><h3 id="7-1-使用-PM2-管理-WebSocket-伺服器"><a href="#7-1-使用-PM2-管理-WebSocket-伺服器" class="headerlink" title="7.1 使用 PM2 管理 WebSocket 伺服器"></a>7.1 使用 PM2 管理 WebSocket 伺服器</h3><p>安裝 PM2：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
<p>啟動 WebSocket 伺服器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pm2 start server.js --name websocket-server</span><br></pre></td></tr></table></figure>

<h3 id="7-2-使用-Nginx-反向代理-WebSocket"><a href="#7-2-使用-Nginx-反向代理-WebSocket" class="headerlink" title="7.2 使用 Nginx 反向代理 WebSocket"></a>7.2 使用 Nginx 反向代理 WebSocket</h3><p>設定 Nginx 配置檔：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /ws/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-結論"><a href="#8-結論" class="headerlink" title="8. 結論"></a>8. 結論</h1><p>這篇筆記介紹了 WebSocket 的基礎概念與實作技巧，包括如何建立 WebSocket 伺服器、處理多個客戶端、與 Express 整合、以及部署與安全性考量。建議進一步學習 WebSocket 與 Redis Pub&#x2F;Sub、負載平衡技術，提升系統可擴展性與穩定性。</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>NodeJS</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>軟體工程師和 Web 前後端開發技能樹/學習藍圖（Roadmap）</title>
    <url>/2024/06/22/software-engineer-and-web-develement-skill-tree/</url>
    <content><![CDATA[<h1 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h1><p><a href="https://roadmap.sh/frontend">Frontend Roadmap</a> &#x2F; <a href="https://roadmap.sh/frontend?r=frontend-beginner">Frontend Beginner Roadmap</a></p>
<ol>
<li><input checked="" disabled="" type="checkbox"> HTML</li>
<li><input disabled="" type="checkbox"> CSS</li>
<li><input disabled="" type="checkbox"> JavaScript</li>
<li><input disabled="" type="checkbox"> Version Control Systems&#x2F;Git&#x2F;Github</li>
<li><input disabled="" type="checkbox"> npm</li>
<li><input disabled="" type="checkbox"> Vue</li>
<li><input disabled="" type="checkbox"> React</li>
<li><input disabled="" type="checkbox"> Angular</li>
<li><input disabled="" type="checkbox"> Tailwind</li>
<li><input disabled="" type="checkbox"> Vitest</li>
<li><input disabled="" type="checkbox"> Cypress</li>
<li><input disabled="" type="checkbox"> TypeScript</li>
<li><input disabled="" type="checkbox"> PWA</li>
<li><input disabled="" type="checkbox"> SASS&#x2F;LESS&#x2F;PostCSS</li>
</ol>
<h1 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h1><p><a href="https://roadmap.sh/backend">Backend Roadmap</a> &#x2F; <a href="https://roadmap.sh/backend?r=backend-beginner">Backend Beginner Roadmap</a></p>
<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p><a href="https://roadmap.sh/devops">DevOps Roadmap</a> &#x2F; <a href="https://roadmap.sh/devops?r=devops-beginner">DevOps Beginner Roadmap</a></p>
<h1 id="全端"><a href="#全端" class="headerlink" title="全端"></a>全端</h1><p><a href="https://roadmap.sh/full-stack">Full Stack Roadmap</a></p>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://github.com/kamranahmedse/developer-roadmap?tab=readme-ov-file">github developer-roadmap</a></li>
<li><a href="https://hackmd.io/@were1122was/BkUpHXuAq">N+1 Queries 效能問題</a></li>
</ol>
]]></content>
      <tags>
        <tag>Software Engineer</tag>
        <tag>Frontend Roadmap</tag>
        <tag>Backend Roadmap</tag>
        <tag>DevOps</tag>
        <tag>Full Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>常見軟體工程師技術面試資源整理</title>
    <url>/2023/03/22/software-engineer-technical-interview-resources/</url>
    <content><![CDATA[<p>以下彙整常見 Web 網頁開發工具和資源整理：</p>
<h2 id="程式解題網站"><a href="#程式解題網站" class="headerlink" title="程式解題網站"></a>程式解題網站</h2><ol>
<li><a href="https://coderbyte.com/developers">coderbyte</a></li>
<li><a href="https://www.codility.com/">codility</a></li>
<li><a href="https://www.hackerrank.com/">hackerrank</a></li>
<li><a href="https://leetcode.com/">leetcode</a></li>
<li><a href="https://www.codewars.com/">codewars</a></li>
</ol>
<h2 id="常見程式題目"><a href="#常見程式題目" class="headerlink" title="常見程式題目"></a>常見程式題目</h2><ol>
<li><a href="https://github.com/lydiahallie/javascript-questions">JavaScript Questions</a></li>
</ol>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10244809?sc=rss.iron">【Day 13】什麼是工程師的技術面試？為什麼技術面試看的不只是技術？</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>Software Engineer</tag>
        <tag>前端工程師</tag>
        <tag>Frontend Roadmap</tag>
        <tag>網頁開發</tag>
        <tag>網站開發</tag>
        <tag>網站開發工具</tag>
        <tag>學習資源</tag>
        <tag>技術面試</tag>
        <tag>軟體工程</tag>
      </tags>
  </entry>
  <entry>
    <title>常見 Web 網頁開發工具和學習資源整理</title>
    <url>/2024/03/22/web-dev-tools-resources/</url>
    <content><![CDATA[<p>以下彙整常見 Web 網頁開發工具和資源整理：</p>
<h2 id="VS-Code-套件"><a href="#VS-Code-套件" class="headerlink" title="VS Code 套件"></a>VS Code 套件</h2><ol>
<li>emmet</li>
<li>Live Server</li>
<li>Material Icon Theme</li>
<li>Babel JavaScript</li>
<li>Prettier</li>
<li>CodeSnap</li>
<li>JavaScript code snippets</li>
<li>Peacock</li>
<li>TODO Highlight</li>
<li>Code Runner</li>
<li>Live Share</li>
<li>Color Highlight</li>
</ol>
<h2 id="Chrome-瀏覽器擴充套件"><a href="#Chrome-瀏覽器擴充套件" class="headerlink" title="Chrome 瀏覽器擴充套件"></a>Chrome 瀏覽器擴充套件</h2><ol>
<li>Responsive Viewer</li>
<li>HTML5 Outliner</li>
<li>ColorZilla</li>
<li>Fonts Ninja</li>
<li>Check My Links</li>
</ol>
<h2 id="假文字"><a href="#假文字" class="headerlink" title="假文字"></a>假文字</h2><ol>
<li><a href="https://pinkylam.me/generator/chinese-lorem-ipsum/">中文亂數假文產生器 Chinese Lorem Ipsum</a></li>
<li><a href="https://www.lipsum.com/">英文 Lorem Ipsum</a></li>
</ol>
<h2 id="假圖"><a href="#假圖" class="headerlink" title="假圖"></a>假圖</h2><ol>
<li><a href="https://fakeimg.pl/">Fake images please?</a></li>
<li><a href="https://picsum.photos/">Picsum photos</a></li>
</ol>
<h2 id="影片"><a href="#影片" class="headerlink" title="影片"></a>影片</h2><ol>
<li><a href="https://www.pexels.com/search/videos/creative%20commons%20zero/">Free Creative Commons Zero Videos</a></li>
</ol>
<h2 id="CSS-文件"><a href="#CSS-文件" class="headerlink" title="CSS 文件"></a>CSS 文件</h2><ol>
<li><a href="https://css-tricks.com/">css-tricks</a></li>
</ol>
<h2 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h2><ol>
<li><a href="https://www.joshwcomeau.com/css/custom-css-reset/">A Modern CSS Reset</a></li>
<li><a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS</a></li>
</ol>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol>
<li><a href="https://learngitbranching.js.org/">Learn Git Branching</a></li>
</ol>
<h2 id="CSS-選擇器練習"><a href="#CSS-選擇器練習" class="headerlink" title="CSS 選擇器練習"></a>CSS 選擇器練習</h2><ol>
<li><a href="https://flukeout.github.io/">CSS Dinner</a></li>
</ol>
<h2 id="CSS-排版練習"><a href="#CSS-排版練習" class="headerlink" title="CSS 排版練習"></a>CSS 排版練習</h2><ol>
<li><a href="https://flexboxfroggy.com/">Flexbox Froggy</a></li>
<li><a href="https://cssgridgarden.com/">CSS Grid Garden</a></li>
</ol>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ol>
<li><a href="https://jsonplaceholder.typicode.com/">{JSON} Placeholder Free fake and reliable API for testing and prototyping.</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>Software Engineer</tag>
        <tag>前端工程師</tag>
        <tag>Frontend Roadmap</tag>
        <tag>網頁開發</tag>
        <tag>網站開發</tag>
        <tag>網站開發工具</tag>
        <tag>學習資源</tag>
      </tags>
  </entry>
  <entry>
    <title>常見 Web Frontend 前端工程師面試準備題目清單</title>
    <url>/2024/01/22/web-frontend-interview-question-list/</url>
    <content><![CDATA[<h1 id="前端工程面試準備清單"><a href="#前端工程面試準備清單" class="headerlink" title="前端工程面試準備清單"></a>前端工程面試準備清單</h1><ol>
<li><p><strong>掌握基礎知識</strong>：在開始解決複雜問題之前，您需要確保對前端開發的基礎知識有扎實的理解，包括 HTML、CSS 和 JavaScript，以及它們如何協作來創建響應式和互動式的網頁。如果您認為自己在這些主題上仍需學習，請參考前端學習路線圖。</p>
</li>
<li><p><strong>練習寫程式</strong>：通過小型專案或在 LeetCode 和 HackerRank 等平台上解決問題，來提升您的前端寫程式技能。專注於與前端開發相關的挑戰。</p>
</li>
<li><p><strong>學習現代框架（framework）和函式庫（library）</strong>：了解如 React、Angular 或 Vue.js 等流行的框架和函式庫。掌握這些工具對於現代前端開發職位至關重要。</p>
</li>
<li><p><strong>熟悉開發工作流程中的基礎工具</strong>：確保您對基本工具和實踐（例如版本控制工具 Git、測試工具（單元測試和整合測試）以及建構工具如 Vite）感到熟悉。這些對於任何前端角色來說都至關重要。</p>
</li>
<li><p><strong>理解 UI&#x2F;UX 原則</strong>：掌握基本的設計和用戶體驗概念可以讓您在前端開發者中脫穎而出。學習無障礙設計、響應式設計，以及如何創建直觀的界面。</p>
</li>
<li><p><strong>準備作品集</strong>：設計和開發作品集或是 side project 可以幫助你展現你在前端的技術能力。</p>
</li>
<li><p><strong>研究不同公司和產業</strong>：透過了解您面試的公司業務和產品，表現出對公司的興趣。準備一些問題在面試時提出，展示您對該角色的重視。</p>
</li>
<li><p><strong>提升溝通能力</strong>：雖然這並非特定於前端開發，但好的溝通能力可以幫助我們與設計師和 PM 在工作上更容易溝通協調。</p>
</li>
</ol>
<h1 id="前端工程面試問題清單"><a href="#前端工程面試問題清單" class="headerlink" title="前端工程面試問題清單"></a>前端工程面試問題清單</h1><h2 id="Beginner-Level"><a href="#Beginner-Level" class="headerlink" title="Beginner Level"></a>Beginner Level</h2><h3 id="1-什麼是-HTML-x2F-CSS-中的-id-和-class-的差別？"><a href="#1-什麼是-HTML-x2F-CSS-中的-id-和-class-的差別？" class="headerlink" title="1. 什麼是 HTML&#x2F;CSS 中的 id 和 class 的差別？"></a>1. 什麼是 HTML&#x2F;CSS 中的 id 和 class 的差別？</h3><p><strong>id</strong> 是用於唯一標識單個 HTML 元素的識別符號。<strong>class</strong> 則是一個可重複使用的識別符號，可以應用於多個元素。  </p>
<p><strong>HTML 中 id 與 class 的區別</strong>  </p>
<ul>
<li>當需要通過 CSS 或 JavaScript 操作單個元素時，應該使用 <strong>id</strong>。  </li>
<li>當需要操作一組 DOM 元素時，應該使用 <strong>class</strong>。</li>
</ul>
<p><strong>在 CSS 中：</strong>  </p>
<ul>
<li><code>#id</code> 選擇具有該 id 的特定元素。  </li>
<li><code>.class</code> 選擇具有該 class 的所有元素。</li>
</ul>
<hr>
<h3 id="2-什麼是-CSS-中的盒模型（Box-Model）？"><a href="#2-什麼是-CSS-中的盒模型（Box-Model）？" class="headerlink" title="2. 什麼是 CSS 中的盒模型（Box Model）？"></a>2. <strong>什麼是 CSS 中的盒模型（Box Model）？</strong></h3><p>CSS 盒模型描述了在 <code>DOM</code> 中為元素生成的矩形框。盒模型由以下幾層組成：  </p>
<ol>
<li><strong>內容（Content）：</strong> 最內層，用於顯示文字和圖片。  </li>
<li><strong>內邊距（Padding）：</strong> 內容與邊框之間的空間。  </li>
<li><strong>邊框（Border）：</strong> 包圍元素的外緣，位於內邊距的外側。  </li>
<li><strong>外邊距（Margin）：</strong> 邊框外部的空間，用於將該元素與其他元素分隔開。</li>
</ol>
<p>通過分別控制每一層，您可以定義使用者介面中每個元素的外觀。</p>
<h3 id="3-CSS-中-inline、inline-block-和-block-元素的區別"><a href="#3-CSS-中-inline、inline-block-和-block-元素的區別" class="headerlink" title="3. CSS 中 inline、inline-block 和 block 元素的區別"></a>3. <strong>CSS 中 inline、inline-block 和 block 元素的區別</strong></h3><p>在 CSS 中，inline、inline-block 和 block 元素的區別在於它們在網頁中的呈現方式：  </p>
<ol>
<li><p><strong>Inline（行內元素）：</strong>  </p>
<ul>
<li>不具有寬度或高度的屬性。  </li>
<li>不會換行，僅佔據其內容所需的寬度。  </li>
<li>範例：<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>。</li>
</ul>
</li>
<li><p><strong>Inline-block（行內區塊元素）：</strong>  </p>
<ul>
<li>與 inline 元素類似，不會換行，但允許設定寬度和高度。  </li>
<li>範例：<code>&lt;img&gt;</code>。</li>
</ul>
</li>
<li><p><strong>Block（區塊元素）：</strong>  </p>
<ul>
<li>會從新行開始，默認佔據可用寬度的整行。  </li>
<li>可以自訂寬度和高度。  </li>
<li>範例：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="4-HTML-結構中的-SEO-最佳實踐"><a href="#4-HTML-結構中的-SEO-最佳實踐" class="headerlink" title="4. HTML 結構中的 SEO 最佳實踐"></a>4. <strong>HTML 結構中的 SEO 最佳實踐</strong></h3><p><strong>純 HTML 方面：</strong>  </p>
<ol>
<li><strong>使用語義化的 HTML：</strong> 使用 <code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;main&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code> 和 <code>&lt;footer&gt;</code> 等標籤，提供有意義的結構。  </li>
<li><strong>正確的標題層級：</strong> 正確使用 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>，每個頁面僅使用一次 <code>&lt;h1&gt;</code> 作為主標題，其次是 <code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code> 至 <code>&lt;h6&gt;</code>等。  </li>
<li><strong>Meta 標籤：</strong> 包含相關的 <code>&lt;meta&gt;</code> 標籤，例如描述（description）、關鍵字（keywords）和視口（viewport），提供網站的元數據。  </li>
<li><strong>圖片的 Alt 屬性：</strong> 為圖片添加描述性的 <code>alt</code> 屬性，以提高無障礙性和搜尋引擎的理解能力。</li>
</ol>
<p><strong>其他最佳實踐：</strong>  </p>
<ol>
<li><strong>內部連結：</strong> 使用內部鏈接連接網站內的內容，幫助搜尋引擎爬取並了解網站結構。  </li>
<li><strong>行動裝置友好設計：</strong> 以行動優先的方式設計網站和 CSS，確保響應式設計以提升用戶體驗和搜尋引擎排名。  </li>
<li><strong>快速載入時間：</strong> 優化圖片、使用高效的代碼並利用快取來提升頁面載入速度，載入速度越快，在搜尋結果中越具競爭力。</li>
</ol>
<hr>
<h3 id="5-什麼是文件物件模型（DOM）？"><a href="#5-什麼是文件物件模型（DOM）？" class="headerlink" title="5. 什麼是文件物件模型（DOM）？"></a>5. <strong>什麼是文件物件模型（DOM）？</strong></h3><p>文件物件模型（Document Object Model，DOM）是用於網頁文件的 API，它將 HTML 網頁的結構表示為一棵樹，其中每個節點對應於文檔中的一部分（例如元素、屬性或文本）。</p>
<hr>
<h3 id="6-如何為元素添加事件監聽器？"><a href="#6-如何為元素添加事件監聽器？" class="headerlink" title="6. 如何為元素添加事件監聽器？"></a>6. <strong>如何為元素添加事件監聽器？</strong></h3><p>要為元素添加事件監聽器，首先需要通過文檔物件的某種方法（如 <code>getElementById</code>）獲取該元素，然後使用該物件的 <code>addEventListener</code> 方法。</p>
<p>此方法需要接收三個參數：事件名稱（如 <code>click</code>、<code>keyup</code>、<code>mouseup</code> 等）、事件處理函數，以及可選的 boolean（指示是否在捕獲階段觸發事件）。</p>
<hr>
<h3 id="7-null-和-undefined-的區別是什麼？"><a href="#7-null-和-undefined-的區別是什麼？" class="headerlink" title="7. null 和 undefined 的區別是什麼？"></a>7. <strong>null 和 undefined 的區別是什麼？</strong></h3><p>在 JavaScript 中：  </p>
<ul>
<li><strong>undefined</strong> 是新變數的默認值，表示變數已被定義，但尚未賦值。  </li>
<li><strong>null</strong> 是一個值，表示<code>沒有值</code>或<code>沒有物件</code>，需要由開發者明確賦值給變數。</li>
</ul>
<hr>
<h3 id="8-cookies、sessionStorage-和-localStorage-的區別是什麼？"><a href="#8-cookies、sessionStorage-和-localStorage-的區別是什麼？" class="headerlink" title="8. cookies、sessionStorage 和 localStorage 的區別是什麼？"></a>8. <strong>cookies、sessionStorage 和 localStorage 的區別是什麼？</strong></h3><ul>
<li><p><strong>Cookies：</strong><br>小型資料片段，存儲於瀏覽器中，主要用於在 HTTP 請求之間保留資訊，例如用戶身份驗證、會話管理和追蹤用戶行為。  </p>
</li>
<li><p><strong>sessionStorage：</strong><br>用於臨時存儲，只能在同一個 <code>session</code> 中訪問（即瀏覽器視窗或標籤頁開著時）。當瀏覽器視窗關閉時，數據會丟失。</p>
</li>
<li><p><strong>localStorage：</strong><br>與 <code>sessionStorage</code> 類似，但資料在瀏覽器窗口或標籤頁關閉後依然存在，提供長期存儲功能。相較於 <code>cookies</code>，<code>localStorage</code> 的大小限制更大，更適合存儲大資料集。</p>
</li>
</ul>
<hr>
<h3 id="9-瀏覽器如何渲染網站？"><a href="#9-瀏覽器如何渲染網站？" class="headerlink" title="9. 瀏覽器如何渲染網站？"></a>9. <strong>瀏覽器如何渲染網站？</strong></h3><p>瀏覽器渲染網頁的過程包括以下幾個步驟：  </p>
<ol>
<li>解析 HTML。  </li>
<li>解析 CSS 並應用樣式。  </li>
<li>計算頁面佈局中每個元素的位置。  </li>
<li>將實際像素繪製到屏幕上，並將它們排序到不同的圖層中。  </li>
<li>組合所有圖層，根據 <code>z-index</code> 值、不透明度等渲染到屏幕上。  </li>
<li>執行 JavaScript 代碼。  </li>
<li>加載非同步資源。</li>
</ol>
<hr>
<h3 id="10-什麼是媒體查詢（Media-Queries）？"><a href="#10-什麼是媒體查詢（Media-Queries）？" class="headerlink" title="10. 什麼是媒體查詢（Media Queries）？"></a>10. <strong>什麼是媒體查詢（Media Queries）？</strong></h3><p>媒體查詢是 CSS 中的一項功能，允許前端開發者根據設備或視口的各種特性應用不同的樣式。例如，根據設備的寬度、高度、方向或類型設定不同的樣式。</p>
<p>通過媒體查詢，可以實現響應式設計，使樣式適應不同的屏幕尺寸和設備能力。</p>
<hr>
<h2 id="中級知識"><a href="#中級知識" class="headerlink" title="中級知識"></a><strong>中級知識</strong></h2><h3 id="1-em-和-rem-單位的區別"><a href="#1-em-和-rem-單位的區別" class="headerlink" title="1. em 和 rem 單位的區別"></a><strong>1. em 和 rem 單位的區別</strong></h3><p><strong>EM 和 REM 在 CSS 中的比較</strong><br>它們都是相對單位，但相對於的基準不同：  </p>
<ul>
<li><strong>em</strong>：相對於父元素的字體大小。如果父元素的字體大小是 20px，設定 <code>font-size: 2em</code> 則等於 40px。  </li>
<li><strong>rem</strong>：相對於頁面根元素（<code>&lt;html&gt;</code> 元素）的字體大小。例如，若 <code>&lt;html&gt;</code> 的字體大小是 16px，則 <code>1rem</code> 等於 16px。</li>
</ul>
<hr>
<h3 id="2-如何建立-Flexbox-布局"><a href="#2-如何建立-Flexbox-布局" class="headerlink" title="2. 如何建立 Flexbox 布局"></a><strong>2. 如何建立 Flexbox 布局</strong></h3><p>建立 Flexbox 布局需要兩個主要步驟：  </p>
<ol>
<li><strong>設置容器元素：</strong> 將 <code>display: flex;</code> 屬性應用到容器元素上。  </li>
<li><strong>設定子元素的 Flex 屬性：</strong> 對容器內的每個元素設置 Flexbox 屬性，例如 <code>flex: 1</code>。</li>
</ol>
<hr>
<h3 id="3-CSS-特殊性（Specificity）的解釋及其運作原理"><a href="#3-CSS-特殊性（Specificity）的解釋及其運作原理" class="headerlink" title="3. CSS 特殊性（Specificity）的解釋及其運作原理"></a><strong>3. CSS 特殊性（Specificity）的解釋及其運作原理</strong></h3><p>CSS 特殊性用於決定在樣式衝突時應該應用哪一組樣式。它遵循以下優先順序：  </p>
<ol>
<li><strong>行內樣式（Inline style）：</strong> 擁有最高優先權，會覆蓋其他樣式。  </li>
<li><strong>ID 選擇器：</strong> 僅次於行內樣式，覆蓋其他類型的樣式。  </li>
<li><strong>類別選擇器（Class-based selectors）：</strong> 覆蓋類型選擇器，但低於 ID 選擇器和行內樣式。  </li>
<li><strong>類型選擇器（Type selectors）：</strong> 優先級最低，會被其他選擇器覆蓋。</li>
</ol>
<hr>
<h3 id="4-如何建立-CSS-Grid-布局"><a href="#4-如何建立-CSS-Grid-布局" class="headerlink" title="4. 如何建立 CSS Grid 布局"></a><strong>4. 如何建立 CSS Grid 布局</strong></h3><p>建立 Grid 布局的步驟：  </p>
<ol>
<li>將包含元素設置為 <code>display: grid</code>。  </li>
<li>使用 <code>grid-template-rows</code> 和 <code>grid-template-columns</code> 屬性定義網格的結構。  </li>
<li>將元素放置於網格容器內，並使用 <code>grid-column</code> 或 <code>grid-row</code> 屬性指定位置。</li>
</ol>
<hr>
<h3 id="5-什麼是閉包（Closures），以及如何使用它們？"><a href="#5-什麼是閉包（Closures），以及如何使用它們？" class="headerlink" title="5. 什麼是閉包（Closures），以及如何使用它們？"></a><strong>5. 什麼是閉包（Closures），以及如何使用它們？</strong></h3><p>閉包是指當一個函數定義在另一個函數內時，即使外部函數已執行完畢，內部函數仍然可以訪問外部函數的變數和參數。<br>閉包的用途：  </p>
<ul>
<li><strong>創建私有變數：</strong> 內部函數可以訪問，但外部無法直接存取。  </li>
<li><strong>實現複雜對象：</strong> 創建只有內部上下文可用的豐富數據結構。</li>
</ul>
<hr>
<h3 id="6-什麼是事件委派（Event-Delegation）？"><a href="#6-什麼是事件委派（Event-Delegation）？" class="headerlink" title="6. 什麼是事件委派（Event Delegation）？"></a><strong>6. 什麼是事件委派（Event Delegation）？</strong></h3><p>事件委派是一種在父元素上定義事件處理器的技術，用來處理子元素觸發的事件。<br><strong>事件委派原理：</strong><br>當事件被觸發時，它會沿著 DOM 層次結構向上冒泡，直到到達父元素的事件處理器。</p>
<hr>
<h3 id="7-什麼是-Promise，如何運作？"><a href="#7-什麼是-Promise，如何運作？" class="headerlink" title="7. 什麼是 Promise，如何運作？"></a><strong>7. 什麼是 Promise，如何運作？</strong></h3><p>Promise 是 JavaScript 中用於表示非同步操作最終完成（或失敗）的對象。  </p>
<ul>
<li><strong>用途：</strong> 通過 Promise，可以處理非同步操作的成功結果或失敗情況。  </li>
<li><strong>工作原理：</strong> Promise 提供 <code>.then()</code> 和 <code>.catch()</code> 方法，分別用於處理成功和失敗的結果。</li>
</ul>
<hr>
<h3 id="8-如何優化網站資源以加快加載時間？"><a href="#8-如何優化網站資源以加快加載時間？" class="headerlink" title="8. 如何優化網站資源以加快加載時間？"></a><strong>8. 如何優化網站資源以加快加載時間？</strong></h3><p>根據資源類型，使用不同的優化技術：  </p>
<ul>
<li><strong>CSS 和 JavaScript 文件：</strong> 最小化並壓縮代碼。  </li>
<li><strong>圖片：</strong> 使用如 JPEGOptim 或 ImageOptim 等工具壓縮圖片，確保過程中不損失質量。</li>
</ul>
<hr>
<h3 id="9-什麼是-Service-Workers？它們的用途是什麼？"><a href="#9-什麼是-Service-Workers？它們的用途是什麼？" class="headerlink" title="9. 什麼是 Service Workers？它們的用途是什麼？"></a><strong>9. 什麼是 Service Workers？它們的用途是什麼？</strong></h3><p>Service Workers 是在網頁應用程序背景中執行的腳本，與網頁主線程分開運作，提供以下功能：  </p>
<ul>
<li>離線快取。  </li>
<li>推送通知。  </li>
<li>背景同步。</li>
</ul>
<hr>
<h3 id="10-什麼是同源政策（Same-Origin-Policy）？"><a href="#10-什麼是同源政策（Same-Origin-Policy）？" class="headerlink" title="10. 什麼是同源政策（Same-Origin Policy）？"></a><strong>10. 什麼是同源政策（Same-Origin Policy）？</strong></h3><p>同源政策是瀏覽器中的一項安全功能，用於防止網站從其他網站訪問數據（如導入腳本或 API 請求）。  </p>
<ul>
<li><strong>用途：</strong> 防止惡意腳本竊取其他網站的敏感數據（如 cookies、本地存儲或內容）。  </li>
<li><strong>解決方案：</strong> 使用跨源資源共享（CORS）。服務器需指定允許訪問的域名，並且客戶端應發送正確的標頭，雙方即可進行互動，即使不在同一域名下。</li>
</ul>
<hr>
<h2 id="進階知識"><a href="#進階知識" class="headerlink" title="進階知識"></a><strong>進階知識</strong></h2><h3 id="1-什麼是-CSS-變數？什麼時候會用到？"><a href="#1-什麼是-CSS-變數？什麼時候會用到？" class="headerlink" title="1. 什麼是 CSS 變數？什麼時候會用到？"></a><strong>1. 什麼是 CSS 變數？什麼時候會用到？</strong></h3><p>CSS 變數類似於前端程式語言中的變數，可以由開發者設置並在整個 CSS 樣式表中重複使用。  </p>
<ul>
<li><strong>優點：</strong> 將全局使用的值（如顏色）集中管理。例如，CSS 框架常用變數設置常量（如將黑色設置為 <code>#222</code> 而非 <code>#000</code>）。  </li>
<li><strong>應用場景：</strong> 當網站需要一致性的設計風格或易於更新的全局樣式時。</li>
</ul>
<hr>
<h3 id="2-如何實現-Critical-CSS-優化網頁的加載時間？"><a href="#2-如何實現-Critical-CSS-優化網頁的加載時間？" class="headerlink" title="2. 如何實現 Critical CSS 優化網頁的加載時間？"></a><strong>2. 如何實現 Critical CSS 優化網頁的加載時間？</strong></h3><p>Critical CSS 是指將關鍵 CSS 規則從 CSS 文件中移除，並內嵌到網站的 <code>&lt;head&gt;</code> 元素中：  </p>
<ol>
<li><strong>方法：</strong> 將頁面渲染所需的關鍵樣式直接嵌入到 HTML 文件的 <code>&lt;head&gt;</code> 中。  </li>
<li><strong>好處：</strong> 關鍵樣式能立即加載，減少渲染時間；非關鍵樣式則隨後加載（如主 CSS 文件）。</li>
</ol>
<hr>
<h3 id="3-JavaScript-中的事件循環（Event-Loop）是如何運作的？"><a href="#3-JavaScript-中的事件循環（Event-Loop）是如何運作的？" class="headerlink" title="3. JavaScript 中的事件循環（Event Loop）是如何運作的？"></a><strong>3. JavaScript 中的事件循環（Event Loop）是如何運作的？</strong></h3><p>事件循環是 JavaScript 的核心概念，允許執行非同步代碼。<br><strong>運作過程：</strong>  </p>
<ol>
<li><strong>調用棧（Call Stack）：</strong> JavaScript 使用單線程執行代碼，函數按順序添加到調用棧，執行完畢後移除。  </li>
<li><strong>非同步操作：</strong> 非同步操作由瀏覽器的 Web API 處理，從調用棧中移除，單獨執行。  </li>
<li><strong>任務隊列（Task Queue）：</strong> 當非同步操作完成後，回調函數被放入任務隊列中等待執行。  </li>
<li><strong>事件循環：</strong> 檢查調用棧是否為空，若為空，將任務隊列中的回調函數推入調用棧執行。</li>
</ol>
<hr>
<h3 id="4-JavaScript-中的非同步操作處理方式有哪些？"><a href="#4-JavaScript-中的非同步操作處理方式有哪些？" class="headerlink" title="4. JavaScript 中的非同步操作處理方式有哪些？"></a><strong>4. JavaScript 中的非同步操作處理方式有哪些？</strong></h3><p>JavaScript 提供了 4 種主要方法處理非同步操作：  </p>
<ol>
<li><strong>回調函數（Callbacks）：</strong> 當非同步操作完成後調用指定函數。  </li>
<li><strong>Promises：</strong> 表示非同步操作最終完成的結果，使用 <code>.then()</code> 和 <code>.catch()</code> 處理成功或失敗情況。  </li>
<li><strong>Async&#x2F;Await：</strong> Promise 的進化語法，讓非同步代碼看起來像同步代碼，易於閱讀和維護。  </li>
<li><strong>事件監聽器（Event Listeners）：</strong> 當特定事件（如用戶操作）觸發時調用回調函數。</li>
</ol>
<hr>
<h3 id="5-如何在單頁應用程式中管理狀態？"><a href="#5-如何在單頁應用程式中管理狀態？" class="headerlink" title="5. 如何在單頁應用程式中管理狀態？"></a><strong>5. 如何在單頁應用程式中管理狀態？</strong></h3><p>在沒有使用函式庫或是框架（如 React 或 Vue.js）的情況下，管理狀態相對複雜，可考慮以下方法：  </p>
<ol>
<li><strong>全局變數：</strong> 使用全局變數或全局對象集中管理狀態，但大型應用難以維護。  </li>
<li><strong>模組模式（Module Pattern）：</strong> 將狀態封裝到模組內，提供清晰的 API 來管理狀態。  </li>
<li><strong>發布&#x2F;訂閱模式（Pub&#x2F;Sub Pattern）：</strong> 基於事件驅動的架構，分離狀態變更邏輯，更靈活但更複雜。  </li>
<li><strong>狀態管理庫：</strong> 使用像 Redux 這樣的庫，幫助統一管理應用的狀態。</li>
</ol>
<hr>
<h3 id="6-虛擬-DOM-的運作方式及其優勢"><a href="#6-虛擬-DOM-的運作方式及其優勢" class="headerlink" title="6. 虛擬 DOM 的運作方式及其優勢"></a><strong>6. 虛擬 DOM 的運作方式及其優勢</strong></h3><p><strong>運作方式：</strong>  </p>
<ol>
<li>將用戶界面複製到內存中的「虛擬 DOM」，這是一個輕量級的 DOM 副本。  </li>
<li>當狀態變化時，創建新的虛擬 DOM 並與舊版本進行比較（Diff 算法）。  </li>
<li>系統計算出最小的更新操作，僅修改需要變更的節點，減少真實 DOM 操作。</li>
</ol>
<p><strong>優勢：</strong>  </p>
<ul>
<li><strong>性能優化：</strong> 通過減少 DOM 更新次數，降低 UI 的重排和重繪成本。  </li>
<li><strong>跨平台支持：</strong> 虛擬 DOM 提供了應用與渲染 API 的抽象層，支持跨平台實現。  </li>
<li><strong>一致性：</strong> 確保 UI 與內部狀態同步，減少錯誤和不一致情況。</li>
</ul>
<hr>
<h3 id="7-什麼是伺服器端渲染（SSR）？何時使用？"><a href="#7-什麼是伺服器端渲染（SSR）？何時使用？" class="headerlink" title="7. 什麼是伺服器端渲染（SSR）？何時使用？"></a><strong>7. 什麼是伺服器端渲染（SSR）？何時使用？</strong></h3><p><strong>伺服器端渲染（SSR）：</strong> 是由伺服器生成完整的 HTML，並將其發送給客戶端，而非在客戶端動態生成內容（即客戶端渲染，CSR）。  </p>
<p><strong>適用場景：</strong>  </p>
<ul>
<li><strong>內容驅動型網站：</strong> 如新聞網站、部落格等需要快速呈現內容的網站。  </li>
<li><strong>SEO 重視應用：</strong> 如果網站依賴於搜索引擎流量，SSR 可以改善 SEO 表現。  </li>
<li><strong>漸進式 Web 應用：</strong> 需要快速加載的應用可使用 SSR 初始渲染，並在客戶端進行後續交互。</li>
</ul>
<hr>
<h3 id="8-如何分析並改進-Web-應用性能？"><a href="#8-如何分析並改進-Web-應用性能？" class="headerlink" title="8. 如何分析並改進 Web 應用性能？"></a><strong>8. 如何分析並改進 Web 應用性能？</strong></h3><p>需要監控的核心指標包括：  </p>
<ul>
<li><strong>首次內容繪製（FCP）：</strong> 首次內容呈現所需時間。  </li>
<li><strong>最大內容繪製（LCP）：</strong> 最大內容元素呈現所需時間。  </li>
<li><strong>可交互時間（TTI）：</strong> 網頁完全可交互所需時間。  </li>
<li><strong>總阻塞時間（TBT）：</strong> 主線程被阻塞的總時間。  </li>
<li><strong>累積佈局偏移（CLS）：</strong> 測量視覺穩定性。</li>
</ul>
<hr>
<h3 id="9-什麼是內容安全政策（CSP）？如何提高應用的安全性？"><a href="#9-什麼是內容安全政策（CSP）？如何提高應用的安全性？" class="headerlink" title="9. 什麼是內容安全政策（CSP）？如何提高應用的安全性？"></a><strong>9. 什麼是內容安全政策（CSP）？如何提高應用的安全性？</strong></h3><p><strong>CSP（Content Security Policy）：</strong> 一種安全標準，用於防止跨站腳本（XSS）和代碼注入攻擊。它通過定義和執行允許的資源來源白名單來運作。  </p>
<p><strong>優勢：</strong>  </p>
<ul>
<li><strong>增強安全性：</strong> 有效防禦 XSS 和數據注入攻擊。  </li>
<li><strong>更高控制權：</strong> 開發者可細化政策來控制內容來源。  </li>
<li><strong>符合規範：</strong> 幫助達成 OWASP Top 10 等安全合規要求。</li>
</ul>
<hr>
<h3 id="10-什麼是-Tree-Shaking？如何提升-Web-應用性能？"><a href="#10-什麼是-Tree-Shaking？如何提升-Web-應用性能？" class="headerlink" title="10. 什麼是 Tree Shaking？如何提升 Web 應用性能？"></a><strong>10. 什麼是 Tree Shaking？如何提升 Web 應用性能？</strong></h3><p><strong>Tree Shaking：</strong> 是 JavaScript 模組打包工具（如 Webpack、Vite）用來移除未使用代碼的技術。  </p>
<p><strong>優勢：</strong>  </p>
<ul>
<li><strong>減少打包大小：</strong> 移除無用代碼，減少發送給客戶端的資源量，加速加載。  </li>
<li><strong>性能提升：</strong> 更小的打包大小使解析和執行代碼更快，提升應用響應速度。  </li>
<li><strong>資源最佳化：</strong> 開發者可撰寫模組化代碼，而無需擔心未使用的依賴影響打包體積。</li>
</ul>
<h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol>
<li><a href="https://github.com/kamranahmedse/developer-roadmap?tab=readme-ov-file">github developer-roadmap</a></li>
<li><a href="https://roadmap.sh/questions/frontend">Top 30 Popular Front End Developer Interview Questions</a></li>
<li><a href="https://life.huli.tw/2020/04/28/2020-senior-front-end-engineer-interview-249c719c1a97/">2020 資深前端工程師面試心得（4y, 100k+）</a></li>
<li><a href="https://www.explainthis.io/zh-hant/swe-questions/frontend">最常見的前端面試題目</a></li>
<li><a href="https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese-traditional/">前端工程師面試問題集 - H5BP</a></li>
<li><a href="https://gist.github.com/hanksudo/5873678">前端工程師面試問題集</a></li>
<li><a href="https://hackmd.io/@mingjunlu/front-end-interview-questions">前端面試問題</a></li>
<li><a href="https://medium.com/@Ching810/2024%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%A9%A6%E6%8A%80%E8%A1%93%E8%80%83%E5%AF%A6%E6%88%B0%E5%88%86%E4%BA%AB-js%E7%AF%87-387ed332d12b">前端面試技術考實戰分享-JS篇</a></li>
<li><a href="https://www.1111.com.tw/1000w/fanshome/discussTopic.asp?cat=FANS&id=233847">QNAP&#x2F;雷技&#x2F;Yahoo&#x2F;Synology-前端工程師-面試經驗分享</a></li>
<li><a href="https://medium.com/hannah-lin/2024-%E8%B3%87%E6%B7%B1%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97-3cc0f718e78f">2024 資深前端工程師面試心得</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions">JavaScript Questions</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>Software Engineer</tag>
        <tag>前端工程師</tag>
        <tag>Frontend Roadmap</tag>
        <tag>前端面試</tag>
        <tag>interview question</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>常見 Web Frontend 前端工程師學習資源和工具</title>
    <url>/2024/03/22/web-frontend-resources/</url>
    <content><![CDATA[<h1 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h1><ol>
<li><a href="https://frontendmasters.com/guides/front-end-handbook/2024/">前端開發大全手冊：The Front End Developer&#x2F;Engineer Handbook 2024</a></li>
<li><a href="https://100dayscss.com/">100 天 CSS 練習挑戰</a></li>
<li><a href="https://javascript30.com/">javascript30</a></li>
<li><a href="https://www.greatfrontend.com/">greatfrontend</a></li>
<li><a href="https://www.thisweb.dev/post/front-end-beginner-guide">零基礎一年轉職前端工程師：完整路徑、心得、資源全公開</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端工程</tag>
        <tag>Software Engineer</tag>
        <tag>前端工程師</tag>
        <tag>Frontend Roadmap</tag>
        <tag>前端面試</tag>
        <tag>interview question</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>10 key terms related to backend engineering</title>
    <url>/2024/01/21/en/about-backend-engineer-10-keywords/</url>
    <content><![CDATA[<p>Here are 10 key terms related to backend engineering, covering essential skills, tools, and work methodologies:  </p>
<ol>
<li><p><strong>Node.js &#x2F; Python &#x2F; Java &#x2F; Ruby &#x2F; PHP</strong> – Common backend programming languages used to build server-side applications.  </p>
</li>
<li><p><strong>Database</strong> – Includes <strong>SQL (e.g., MySQL, PostgreSQL)</strong> and <strong>NoSQL (e.g., MongoDB, Redis)</strong> for data storage, management, and optimization.  </p>
</li>
<li><p><strong>REST API &#x2F; GraphQL</strong> – Designing and implementing server-side APIs to support frontend data requests.  </p>
</li>
<li><p><strong>Authentication &amp; Authorization</strong> – Technologies like OAuth, JWT, and session management to ensure user security and data protection.  </p>
</li>
<li><p><strong>Docker &#x2F; Kubernetes</strong> – Containerization and orchestration tools for application deployment and resource management.  </p>
</li>
<li><p><strong>Cloud Services</strong> – Platforms like AWS, Google Cloud, and Microsoft Azure for cloud-based application hosting and operations.  </p>
</li>
<li><p><strong>Microservices</strong> – Architectural style for designing modular and independently deployable services.  </p>
</li>
<li><p><strong>Message Queues</strong> – Tools like RabbitMQ and Kafka for asynchronous communication in distributed systems.  </p>
</li>
<li><p><strong>Version Control</strong> – Systems like Git&#x2F;GitHub for code management and team collaboration.  </p>
</li>
<li><p><strong>Performance Optimization</strong> – Techniques for improving server and database performance to enhance system efficiency.</p>
</li>
</ol>
<p>These key concepts form the foundation of a backend engineer’s work and career growth. By continuously gaining experience and developing projects, one can become a more proficient software engineer.</p>
]]></content>
      <tags>
        <tag>SWE</tag>
        <tag>Software Engineer</tag>
        <tag>Software</tag>
        <tag>backend</tag>
        <tag>backend engineer</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
